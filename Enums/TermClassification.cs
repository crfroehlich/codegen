
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum TermClassificationEnm
    {
        [EnumMember(Value = DocConstantTermClassification.CHARACTERISTIC), SCDescript(DocConstantTermClassification.CHARACTERISTIC), SSDescript(DocConstantTermClassification.CHARACTERISTIC), SCDisplay(Name = DocConstantTermClassification.CHARACTERISTIC)]
        CHARACTERISTIC = 90640196,
        [EnumMember(Value = DocConstantTermClassification.OUTCOME), SCDescript(DocConstantTermClassification.OUTCOME), SSDescript(DocConstantTermClassification.OUTCOME), SCDisplay(Name = DocConstantTermClassification.OUTCOME)]
        OUTCOME = 90640195
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this TermClassificationEnm instance)
        {
            switch(instance)
            {
                case TermClassificationEnm.CHARACTERISTIC:
                    return DocConstantTermClassification.CHARACTERISTIC;
                case TermClassificationEnm.OUTCOME:
                    return DocConstantTermClassification.OUTCOME;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this TermClassificationEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantTermClassification : IEquatable<DocConstantTermClassification>, IEqualityComparer<DocConstantTermClassification>
    {
        public const string CHARACTERISTIC = "Characteristic";
        public const string OUTCOME = "Outcome";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantTermClassification).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantTermClassification(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantTermClassification(string Val) => new DocConstantTermClassification(Val);

        public static implicit operator string(DocConstantTermClassification item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantTermClassification(TermClassificationEnm Val) => new DocConstantTermClassification(Val.ToEnumString());

        public static explicit operator TermClassificationEnm(DocConstantTermClassification item)
        {
            Enum.TryParse<TermClassificationEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantTermClassification obj) => this == obj;

        public static bool operator ==(DocConstantTermClassification x, DocConstantTermClassification y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantTermClassification x, DocConstantTermClassification y) => x == y;
        
        public static bool operator !=(DocConstantTermClassification x, DocConstantTermClassification y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantTermClassification))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantTermClassification) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantTermClassification obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
