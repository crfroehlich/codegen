//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum BroadcastTypeEnm
    {
        [EnumMember(Value = DocConstantBroadcastType.CHANGE_LOG), SCDescript(DocConstantBroadcastType.CHANGE_LOG), SSDescript(DocConstantBroadcastType.CHANGE_LOG), SCDisplay(Name = DocConstantBroadcastType.CHANGE_LOG)]
        CHANGE_LOG = 25812391,
        [EnumMember(Value = DocConstantBroadcastType.SCOPE_SPECIFIC), SCDescript(DocConstantBroadcastType.SCOPE_SPECIFIC), SSDescript(DocConstantBroadcastType.SCOPE_SPECIFIC), SCDisplay(Name = DocConstantBroadcastType.SCOPE_SPECIFIC)]
        SCOPE_SPECIFIC = 74232465,
        [EnumMember(Value = DocConstantBroadcastType.SYSTEM_ALERT), SCDescript(DocConstantBroadcastType.SYSTEM_ALERT), SSDescript(DocConstantBroadcastType.SYSTEM_ALERT), SCDisplay(Name = DocConstantBroadcastType.SYSTEM_ALERT)]
        SYSTEM_ALERT = 25812396,
        [EnumMember(Value = DocConstantBroadcastType.TERMS_OF_SERVICE), SCDescript(DocConstantBroadcastType.TERMS_OF_SERVICE), SSDescript(DocConstantBroadcastType.TERMS_OF_SERVICE), SCDisplay(Name = DocConstantBroadcastType.TERMS_OF_SERVICE)]
        TERMS_OF_SERVICE = 25812401
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this BroadcastTypeEnm instance)
        {
            switch(instance)
            {
                case BroadcastTypeEnm.CHANGE_LOG:
                    return DocConstantBroadcastType.CHANGE_LOG;
                case BroadcastTypeEnm.SCOPE_SPECIFIC:
                    return DocConstantBroadcastType.SCOPE_SPECIFIC;
                case BroadcastTypeEnm.SYSTEM_ALERT:
                    return DocConstantBroadcastType.SYSTEM_ALERT;
                case BroadcastTypeEnm.TERMS_OF_SERVICE:
                    return DocConstantBroadcastType.TERMS_OF_SERVICE;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this BroadcastTypeEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantBroadcastType : IEquatable<DocConstantBroadcastType>, IEqualityComparer<DocConstantBroadcastType>
    {
        public const string CHANGE_LOG = "Change Log";
        public const string SCOPE_SPECIFIC = "Scope Specific";
        public const string SYSTEM_ALERT = "System Alert";
        public const string TERMS_OF_SERVICE = "Terms of Service";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantBroadcastType).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantBroadcastType(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantBroadcastType(string Val) => new DocConstantBroadcastType(Val);

        public static implicit operator string(DocConstantBroadcastType item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantBroadcastType(BroadcastTypeEnm Val) => new DocConstantBroadcastType(Val.ToEnumString());

        public static explicit operator BroadcastTypeEnm(DocConstantBroadcastType item)
        {
            Enum.TryParse<BroadcastTypeEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantBroadcastType obj) => this == obj;

        public static bool operator ==(DocConstantBroadcastType x, DocConstantBroadcastType y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantBroadcastType x, DocConstantBroadcastType y) => x == y;
        
        public static bool operator !=(DocConstantBroadcastType x, DocConstantBroadcastType y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantBroadcastType))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantBroadcastType) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantBroadcastType obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
