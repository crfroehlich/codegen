//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by a CodeSmith Generator project.
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum UnitsOfMeasureEnm
    {
        [EnumMember(Value = DocConstantUnitsOfMeasure.ARE)]
        ARE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.ATOMS)]
        ATOMS,
        [EnumMember(Value = DocConstantUnitsOfMeasure.BECQUEREL)]
        BECQUEREL,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CENTIGRAM)]
        CENTIGRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CENTILITER)]
        CENTILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CENTIMETER)]
        CENTIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CUBIC_CENTIMETER)]
        CUBIC_CENTIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CUBIC_FOOT)]
        CUBIC_FOOT,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CUBIC_INCH)]
        CUBIC_INCH,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CUBIC_KILOMETER)]
        CUBIC_KILOMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CUBIC_METER)]
        CUBIC_METER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CUBIC_MICROLITER)]
        CUBIC_MICROLITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CUBIC_MICROMETER)]
        CUBIC_MICROMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CUBIC_MILE)]
        CUBIC_MILE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CUBIC_MILLIMETER)]
        CUBIC_MILLIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CUBIC_NANOMETER)]
        CUBIC_NANOMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CUBIC_YARD)]
        CUBIC_YARD,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CUP)]
        CUP,
        [EnumMember(Value = DocConstantUnitsOfMeasure.CURIE)]
        CURIE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.DAY)]
        DAY,
        [EnumMember(Value = DocConstantUnitsOfMeasure.DECIGRAM)]
        DECIGRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.DECILITER)]
        DECILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.DEKAGRAM)]
        DEKAGRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.EXAGRAM)]
        EXAGRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.GALLON)]
        GALLON,
        [EnumMember(Value = DocConstantUnitsOfMeasure.GIGABECQUEREL)]
        GIGABECQUEREL,
        [EnumMember(Value = DocConstantUnitsOfMeasure.GIGAGRAM)]
        GIGAGRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.GRAM)]
        GRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.GRAM_PER_CUBIC_CENTIMETER)]
        GRAM_PER_CUBIC_CENTIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.GRAM_PER_CUBIC_METER)]
        GRAM_PER_CUBIC_METER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.GRAM_PER_DECILITER)]
        GRAM_PER_DECILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.GRAM_PER_LITER)]
        GRAM_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.HECTARE)]
        HECTARE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.HECTOGRAM)]
        HECTOGRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.HOUR)]
        HOUR,
        [EnumMember(Value = DocConstantUnitsOfMeasure.INTERNATIONAL_UNIT_PER_LITER)]
        INTERNATIONAL_UNIT_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.INTERNATIONALUNIT)]
        INTERNATIONALUNIT,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILIMOL_PER_CUBIC_CENTIMETER)]
        KILIMOL_PER_CUBIC_CENTIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILIMOL_PER_CUBIC_METER)]
        KILIMOL_PER_CUBIC_METER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILIMOL_PER_CUBIC_MILLIMETER)]
        KILIMOL_PER_CUBIC_MILLIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILIMOL_PER_LITER)]
        KILIMOL_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILOBECQUEREL)]
        KILOBECQUEREL,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILOCURIE)]
        KILOCURIE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILOGRAM)]
        KILOGRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILOGRAM_PER_CUBIC_METER)]
        KILOGRAM_PER_CUBIC_METER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILOGRAM_PER_DECILITER)]
        KILOGRAM_PER_DECILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILOGRAM_PER_LITER)]
        KILOGRAM_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILOGRAM_PER_MICROLITER)]
        KILOGRAM_PER_MICROLITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILOGRAM_PER_MILLILITER)]
        KILOGRAM_PER_MILLILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILOGRAM_PER_SQUARE_METER)]
        KILOGRAM_PER_SQUARE_METER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILOLITER)]
        KILOLITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.KILOMOLE)]
        KILOMOLE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.LITER)]
        LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MEGABECQUEREL)]
        MEGABECQUEREL,
        [EnumMember(Value = DocConstantUnitsOfMeasure.METER)]
        METER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICRO_INTERNATIONAL_UNIT_PER_MILLILITER)]
        MICRO_INTERNATIONAL_UNIT_PER_MILLILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROCURIE)]
        MICROCURIE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROGRAM)]
        MICROGRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROGRAM_PER_DECILITER)]
        MICROGRAM_PER_DECILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROGRAM_PER_LITER)]
        MICROGRAM_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROGRAM_PER_MICROLITER)]
        MICROGRAM_PER_MICROLITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROGRAM_PER_MILLILITER)]
        MICROGRAM_PER_MILLILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROLITER)]
        MICROLITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROMETER)]
        MICROMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROMOL_PER_CUBIC_CENTIMETER)]
        MICROMOL_PER_CUBIC_CENTIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROMOL_PER_CUBIC_METER)]
        MICROMOL_PER_CUBIC_METER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROMOL_PER_CUBIC_MILLIMETER)]
        MICROMOL_PER_CUBIC_MILLIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROMOL_PER_DECILITER)]
        MICROMOL_PER_DECILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROMOL_PER_LITER)]
        MICROMOL_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MICROMOLE)]
        MICROMOLE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLI_INTERNATIONAL_UNIT_PER_MILLILITER)]
        MILLI_INTERNATIONAL_UNIT_PER_MILLILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLICURIE)]
        MILLICURIE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIEQUIVALENT)]
        MILLIEQUIVALENT,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIGRAM)]
        MILLIGRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIGRAM_PER_DECILITER)]
        MILLIGRAM_PER_DECILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIGRAM_PER_LITER)]
        MILLIGRAM_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIGRAM_PER_MICROLITER)]
        MILLIGRAM_PER_MICROLITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIGRAM_PER_MILLILITER)]
        MILLIGRAM_PER_MILLILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIGRAM_PER_TEASPOON)]
        MILLIGRAM_PER_TEASPOON,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLILITER)]
        MILLILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIMETER)]
        MILLIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIMETER_OF_MERCURY)]
        MILLIMETER_OF_MERCURY,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIMOL_PER_CUBIC_CENTIMETER)]
        MILLIMOL_PER_CUBIC_CENTIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIMOL_PER_CUBIC_METER)]
        MILLIMOL_PER_CUBIC_METER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIMOL_PER_CUBIC_MILLIMETER)]
        MILLIMOL_PER_CUBIC_MILLIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIMOL_PER_LITER)]
        MILLIMOL_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIMOLE)]
        MILLIMOLE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIONINTERFERONREFERENCEUNIT)]
        MILLIONINTERFERONREFERENCEUNIT,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLIONINTERNATIONALUNIT)]
        MILLIONINTERNATIONALUNIT,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MILLISECOND)]
        MILLISECOND,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MINUTE)]
        MINUTE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MOL_PER_CUBIC_CENTIMETER)]
        MOL_PER_CUBIC_CENTIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MOL_PER_CUBIC_METER)]
        MOL_PER_CUBIC_METER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MOL_PER_CUBIC_MILLIMETER)]
        MOL_PER_CUBIC_MILLIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MOL_PER_LITER)]
        MOL_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MOLE)]
        MOLE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.MONTH)]
        MONTH,
        [EnumMember(Value = DocConstantUnitsOfMeasure.NANOCURIE)]
        NANOCURIE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.NANOGRAM)]
        NANOGRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.NANOGRAM_PER_DECILITER)]
        NANOGRAM_PER_DECILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.NANOGRAM_PER_LITER)]
        NANOGRAM_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.NANOGRAM_PER_MICROLITER)]
        NANOGRAM_PER_MICROLITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.NANOGRAM_PER_MILLILITER)]
        NANOGRAM_PER_MILLILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.NANOMOL_PER_LITER)]
        NANOMOL_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.NANOMOLE)]
        NANOMOLE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.OUNCE)]
        OUNCE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.OUNCES)]
        OUNCES,
        [EnumMember(Value = DocConstantUnitsOfMeasure.PARTSPERBILLION)]
        PARTSPERBILLION,
        [EnumMember(Value = DocConstantUnitsOfMeasure.PARTSPERMILLION)]
        PARTSPERMILLION,
        [EnumMember(Value = DocConstantUnitsOfMeasure.PICOGRAM)]
        PICOGRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.PICOGRAM_PER_DECILITER)]
        PICOGRAM_PER_DECILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.PICOGRAM_PER_LITER)]
        PICOGRAM_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.PICOGRAM_PER_MICROLITER)]
        PICOGRAM_PER_MICROLITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.PICOGRAM_PER_MILLILITER)]
        PICOGRAM_PER_MILLILITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.PICOMOL_PER_LITER)]
        PICOMOL_PER_LITER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.PICOMOLE)]
        PICOMOLE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.PINT)]
        PINT,
        [EnumMember(Value = DocConstantUnitsOfMeasure.POUND)]
        POUND,
        [EnumMember(Value = DocConstantUnitsOfMeasure.QUART)]
        QUART,
        [EnumMember(Value = DocConstantUnitsOfMeasure.SECOND)]
        SECOND,
        [EnumMember(Value = DocConstantUnitsOfMeasure.SQUARE_DEKAMETER)]
        SQUARE_DEKAMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.SQUARE_FOOT)]
        SQUARE_FOOT,
        [EnumMember(Value = DocConstantUnitsOfMeasure.SQUARE_HECTOMETER)]
        SQUARE_HECTOMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.SQUARE_INCH)]
        SQUARE_INCH,
        [EnumMember(Value = DocConstantUnitsOfMeasure.SQUARE_KILOMETER)]
        SQUARE_KILOMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.SQUARE_METER)]
        SQUARE_METER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.SQUARE_MICROMETER)]
        SQUARE_MICROMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.SQUARE_MILE)]
        SQUARE_MILE,
        [EnumMember(Value = DocConstantUnitsOfMeasure.SQUARE_MILIMETER)]
        SQUARE_MILIMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.SQUARE_NANOMETER)]
        SQUARE_NANOMETER,
        [EnumMember(Value = DocConstantUnitsOfMeasure.SQUARE_YARD)]
        SQUARE_YARD,
        [EnumMember(Value = DocConstantUnitsOfMeasure.TABLESPOON)]
        TABLESPOON,
        [EnumMember(Value = DocConstantUnitsOfMeasure.TEASPOON)]
        TEASPOON,
        [EnumMember(Value = DocConstantUnitsOfMeasure.TERABECQUEREL)]
        TERABECQUEREL,
        [EnumMember(Value = DocConstantUnitsOfMeasure.TERAGRAM)]
        TERAGRAM,
        [EnumMember(Value = DocConstantUnitsOfMeasure.WEEK)]
        WEEK,
        [EnumMember(Value = DocConstantUnitsOfMeasure.YEAR)]
        YEAR
    }
    
    public sealed partial class DocConstantUnitsOfMeasure
    {
        public const string ARE = "a";
        public const string ATOMS = "atoms";
        public const string BECQUEREL = "Bq";
        public const string CENTIGRAM = "cg";
        public const string CENTILITER = "cL";
        public const string CENTIMETER = "cm";
        public const string CUBIC_CENTIMETER = "cm³";
        public const string CUBIC_FOOT = "ft³";
        public const string CUBIC_INCH = "in³";
        public const string CUBIC_KILOMETER = "km³";
        public const string CUBIC_METER = "m³";
        public const string CUBIC_MICROLITER = "µL³";
        public const string CUBIC_MICROMETER = "µm³";
        public const string CUBIC_MILE = "mi³";
        public const string CUBIC_MILLIMETER = "mm³";
        public const string CUBIC_NANOMETER = "nm³";
        public const string CUBIC_YARD = "yd³";
        public const string CUP = "cup";
        public const string CURIE = "Ci";
        public const string DAY = "d";
        public const string DECIGRAM = "dg";
        public const string DECILITER = "dL";
        public const string DEKAGRAM = "dag";
        public const string EXAGRAM = "Eg";
        public const string GALLON = "gal";
        public const string GIGABECQUEREL = "GBq";
        public const string GIGAGRAM = "Gg";
        public const string GRAM = "g";
        public const string GRAM_PER_CUBIC_CENTIMETER = "g/cm³";
        public const string GRAM_PER_CUBIC_METER = "g/m³";
        public const string GRAM_PER_DECILITER = "g/dL";
        public const string GRAM_PER_LITER = "g/L";
        public const string HECTARE = "ha";
        public const string HECTOGRAM = "hg";
        public const string HOUR = "hr";
        public const string INTERNATIONAL_UNIT_PER_LITER = "IU/L";
        public const string INTERNATIONALUNIT = "IU";
        public const string KILIMOL_PER_CUBIC_CENTIMETER = "kmol/cm³";
        public const string KILIMOL_PER_CUBIC_METER = "kmol/m³";
        public const string KILIMOL_PER_CUBIC_MILLIMETER = "kmol/mm³";
        public const string KILIMOL_PER_LITER = "kmol/L";
        public const string KILOBECQUEREL = "kBq";
        public const string KILOCURIE = "kCi";
        public const string KILOGRAM = "kg";
        public const string KILOGRAM_PER_CUBIC_METER = "kg/m³";
        public const string KILOGRAM_PER_DECILITER = "kg/dL";
        public const string KILOGRAM_PER_LITER = "kg/L";
        public const string KILOGRAM_PER_MICROLITER = "kg/µL";
        public const string KILOGRAM_PER_MILLILITER = "kg/mL";
        public const string KILOGRAM_PER_SQUARE_METER = "kg/m²";
        public const string KILOLITER = "kL";
        public const string KILOMOLE = "kmol";
        public const string LITER = "L";
        public const string MEGABECQUEREL = "MBq";
        public const string METER = "meters";
        public const string MICRO_INTERNATIONAL_UNIT_PER_MILLILITER = "µIU/mL";
        public const string MICROCURIE = "µCi";
        public const string MICROGRAM = "µg";
        public const string MICROGRAM_PER_DECILITER = "µg/dL";
        public const string MICROGRAM_PER_LITER = "µg/L";
        public const string MICROGRAM_PER_MICROLITER = "µg/µL";
        public const string MICROGRAM_PER_MILLILITER = "µg/mL";
        public const string MICROLITER = "µL";
        public const string MICROMETER = "µm";
        public const string MICROMOL_PER_CUBIC_CENTIMETER = "µmol/cm³";
        public const string MICROMOL_PER_CUBIC_METER = "µmol/m³";
        public const string MICROMOL_PER_CUBIC_MILLIMETER = "µmol/mm³";
        public const string MICROMOL_PER_DECILITER = "µmol/dL";
        public const string MICROMOL_PER_LITER = "µmol/L";
        public const string MICROMOLE = "µmol";
        public const string MILLI_INTERNATIONAL_UNIT_PER_MILLILITER = "mIU/mL";
        public const string MILLICURIE = "mCi";
        public const string MILLIEQUIVALENT = "mEq";
        public const string MILLIGRAM = "mg";
        public const string MILLIGRAM_PER_DECILITER = "mg/dL";
        public const string MILLIGRAM_PER_LITER = "mg/L";
        public const string MILLIGRAM_PER_MICROLITER = "mg/µL";
        public const string MILLIGRAM_PER_MILLILITER = "mg/mL";
        public const string MILLIGRAM_PER_TEASPOON = "mg/tsp";
        public const string MILLILITER = "mL";
        public const string MILLIMETER = "mm";
        public const string MILLIMETER_OF_MERCURY = "mmHg";
        public const string MILLIMOL_PER_CUBIC_CENTIMETER = "mmol/cm³";
        public const string MILLIMOL_PER_CUBIC_METER = "mmol/m³";
        public const string MILLIMOL_PER_CUBIC_MILLIMETER = "mmol/mm³";
        public const string MILLIMOL_PER_LITER = "mmol/L";
        public const string MILLIMOLE = "mmol";
        public const string MILLIONINTERFERONREFERENCEUNIT = "M IRU";
        public const string MILLIONINTERNATIONALUNIT = "MIU";
        public const string MILLISECOND = "ms";
        public const string MINUTE = "min";
        public const string MOL_PER_CUBIC_CENTIMETER = "mol/cm³";
        public const string MOL_PER_CUBIC_METER = "mol/m³";
        public const string MOL_PER_CUBIC_MILLIMETER = "mol/mm³";
        public const string MOL_PER_LITER = "mol/L";
        public const string MOLE = "mol";
        public const string MONTH = "mo";
        public const string NANOCURIE = "nCi";
        public const string NANOGRAM = "ng";
        public const string NANOGRAM_PER_DECILITER = "ng/dL";
        public const string NANOGRAM_PER_LITER = "ng/L";
        public const string NANOGRAM_PER_MICROLITER = "ng/µL";
        public const string NANOGRAM_PER_MILLILITER = "ng/mL";
        public const string NANOMOL_PER_LITER = "nmol/L";
        public const string NANOMOLE = "nmol";
        public const string OUNCE = "oz";
        public const string OUNCES = "fl oz";
        public const string PARTSPERBILLION = "ppb";
        public const string PARTSPERMILLION = "ppm";
        public const string PICOGRAM = "pg";
        public const string PICOGRAM_PER_DECILITER = "pg/dL";
        public const string PICOGRAM_PER_LITER = "pg/L";
        public const string PICOGRAM_PER_MICROLITER = "pg/µL";
        public const string PICOGRAM_PER_MILLILITER = "pg/mL";
        public const string PICOMOL_PER_LITER = "pmol/L";
        public const string PICOMOLE = "pmol";
        public const string PINT = "pt";
        public const string POUND = "lbs";
        public const string QUART = "qt";
        public const string SECOND = "s";
        public const string SQUARE_DEKAMETER = "dam²";
        public const string SQUARE_FOOT = "ft²";
        public const string SQUARE_HECTOMETER = "hm²";
        public const string SQUARE_INCH = "in²";
        public const string SQUARE_KILOMETER = "km²";
        public const string SQUARE_METER = "m²";
        public const string SQUARE_MICROMETER = "µm²";
        public const string SQUARE_MILE = "mi²";
        public const string SQUARE_MILIMETER = "mm²";
        public const string SQUARE_NANOMETER = "nm²";
        public const string SQUARE_YARD = "yd²";
        public const string TABLESPOON = "tablespoon";
        public const string TEASPOON = "tsp";
        public const string TERABECQUEREL = "TBq";
        public const string TERAGRAM = "Tg";
        public const string WEEK = "wk";
        public const string YEAR = "yr";
        
        #region Internals
        
        private static List<string> _all;
        
        public static List<string> All => _all ?? (_all = typeof(DocConstantUnitsOfMeasure).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        /// <summary>
        ///    The string value of the current instance
        /// </summary>
        private readonly string Value;

        /// <summary>
        ///    The enum constructor
        /// </summary>
        /// <param name="ItemName">Name of the item.</param>
        private DocConstantUnitsOfMeasure(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        /// <summary>
        /// Determines if the Constant contains an exact match (case insensitive) for the name
        /// </summary>
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        /// <summary>
        ///    Implicit cast to Enum
        /// </summary>
        /// <param name="Val">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator DocConstantUnitsOfMeasure(string Val)
        {
            return new DocConstantUnitsOfMeasure(Val);
        }

        /// <summary>
        ///    Implicit cast to string
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator string(DocConstantUnitsOfMeasure item)
        {
            return item?.Value ?? string.Empty;
        }

        /// <summary>
        ///    Override of ToString
        /// </summary>
        /// <returns>A <see cref="System.String" /> that represents this instance.</returns>
        public override string ToString()
        {
            return Value;
        }

        #endregion Internals

        #region IEquatable (DocConstantUnitsOfMeasure)

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public bool Equals(DocConstantUnitsOfMeasure obj)
        {
            return this == obj;
        }

        /// <summary>
        ///    == Equality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator ==(DocConstantUnitsOfMeasure ft1, DocConstantUnitsOfMeasure ft2)
        {
            //do a string comparison on the fieldtypes
            return string.Equals(Convert.ToString(ft1), Convert.ToString(ft2), StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        ///    != Inequality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator !=(DocConstantUnitsOfMeasure ft1, DocConstantUnitsOfMeasure ft2)
        {
            return !(ft1 == ft2);
        }

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantUnitsOfMeasure))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantUnitsOfMeasure) obj;
            }
            return ret;
        }

        /// <summary>
        ///    Get Hash Code
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode()
        {
            var ret = 23;
            const int prime = 37;
            ret = (ret * prime) + Value.GetHashCode();
            ret = (ret * prime) + All.GetHashCode();
            return ret;
        }

        #endregion IEquatable (DocConstantUnitsOfMeasure)
    }
}