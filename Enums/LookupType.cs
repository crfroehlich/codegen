//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum LookupTypeEnm
    {
        [EnumMember(Value = DocConstantLookupType.CHARACTERISTIC)]
        CHARACTERISTIC,
        [EnumMember(Value = DocConstantLookupType.COMPARATOR)]
        COMPARATOR,
        [EnumMember(Value = DocConstantLookupType.INTERVENTION)]
        INTERVENTION,
        [EnumMember(Value = DocConstantLookupType.OUTCOME)]
        OUTCOME,
        [EnumMember(Value = DocConstantLookupType.STUDY_DESIGN)]
        STUDY_DESIGN,
        [EnumMember(Value = DocConstantLookupType.STUDY_TYPE)]
        STUDY_TYPE
    }
    
	public static partial class EnumExtensions
    {
        public static string ToEnumString(this LookupTypeEnm instance)
		{
			switch(instance) 
			{
                case LookupTypeEnm.CHARACTERISTIC:
                    return DocConstantLookupType.CHARACTERISTIC;
                case LookupTypeEnm.COMPARATOR:
                    return DocConstantLookupType.COMPARATOR;
                case LookupTypeEnm.INTERVENTION:
                    return DocConstantLookupType.INTERVENTION;
                case LookupTypeEnm.OUTCOME:
                    return DocConstantLookupType.OUTCOME;
                case LookupTypeEnm.STUDY_DESIGN:
                    return DocConstantLookupType.STUDY_DESIGN;
                case LookupTypeEnm.STUDY_TYPE:
                    return DocConstantLookupType.STUDY_TYPE;
				default:
					return string.Empty;
			}
		}
    }

    public sealed partial class DocConstantLookupType : IEquatable<DocConstantLookupType>, IEqualityComparer<DocConstantLookupType>
    {
        public const string CHARACTERISTIC = "Characteristic";
        public const string COMPARATOR = "Comparator";
        public const string INTERVENTION = "Intervention";
        public const string OUTCOME = "Outcome";
        public const string STUDY_DESIGN = "Study Design";
        public const string STUDY_TYPE = "Study Type";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantLookupType).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantLookupType(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantLookupType(string Val) => new DocConstantLookupType(Val);

        public static implicit operator string(DocConstantLookupType item) => item?.Value ?? string.Empty;

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantLookupType obj) => this == obj;

        public static bool operator ==(DocConstantLookupType x, DocConstantLookupType y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
		
		public bool Equals(DocConstantLookupType x, DocConstantLookupType y) => x == y;
        
        public static bool operator !=(DocConstantLookupType x, DocConstantLookupType y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantLookupType))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantLookupType) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
				
        public int GetHashCode(DocConstantLookupType obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
