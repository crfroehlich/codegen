
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum DosageTypeEnm
    {
        [EnumMember(Value = DocConstantDosageType.BASAL), SCDescript(DocConstantDosageType.BASAL), SSDescript(DocConstantDosageType.BASAL), SCDisplay(Name = DocConstantDosageType.BASAL)]
        BASAL = 742,
        [EnumMember(Value = DocConstantDosageType.BOLUS), SCDescript(DocConstantDosageType.BOLUS), SSDescript(DocConstantDosageType.BOLUS), SCDisplay(Name = DocConstantDosageType.BOLUS)]
        BOLUS = 747,
        [EnumMember(Value = DocConstantDosageType.ENDING_DOSE), SCDescript(DocConstantDosageType.ENDING_DOSE), SSDescript(DocConstantDosageType.ENDING_DOSE), SCDisplay(Name = DocConstantDosageType.ENDING_DOSE)]
        ENDING_DOSE = 752,
        [EnumMember(Value = DocConstantDosageType.PROPHYLACTIC_DOSE), SCDescript(DocConstantDosageType.PROPHYLACTIC_DOSE), SSDescript(DocConstantDosageType.PROPHYLACTIC_DOSE), SCDisplay(Name = DocConstantDosageType.PROPHYLACTIC_DOSE)]
        PROPHYLACTIC_DOSE = 757,
        [EnumMember(Value = DocConstantDosageType.STANDARD), SCDescript(DocConstantDosageType.STANDARD), SSDescript(DocConstantDosageType.STANDARD), SCDisplay(Name = DocConstantDosageType.STANDARD)]
        STANDARD = 762,
        [EnumMember(Value = DocConstantDosageType.STARTING_DOSE), SCDescript(DocConstantDosageType.STARTING_DOSE), SSDescript(DocConstantDosageType.STARTING_DOSE), SCDisplay(Name = DocConstantDosageType.STARTING_DOSE)]
        STARTING_DOSE = 767,
        [EnumMember(Value = DocConstantDosageType.THERAPEUTIC_DOSE), SCDescript(DocConstantDosageType.THERAPEUTIC_DOSE), SSDescript(DocConstantDosageType.THERAPEUTIC_DOSE), SCDisplay(Name = DocConstantDosageType.THERAPEUTIC_DOSE)]
        THERAPEUTIC_DOSE = 772
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this DosageTypeEnm instance)
        {
            switch(instance)
            {
                case DosageTypeEnm.BASAL:
                    return DocConstantDosageType.BASAL;
                case DosageTypeEnm.BOLUS:
                    return DocConstantDosageType.BOLUS;
                case DosageTypeEnm.ENDING_DOSE:
                    return DocConstantDosageType.ENDING_DOSE;
                case DosageTypeEnm.PROPHYLACTIC_DOSE:
                    return DocConstantDosageType.PROPHYLACTIC_DOSE;
                case DosageTypeEnm.STANDARD:
                    return DocConstantDosageType.STANDARD;
                case DosageTypeEnm.STARTING_DOSE:
                    return DocConstantDosageType.STARTING_DOSE;
                case DosageTypeEnm.THERAPEUTIC_DOSE:
                    return DocConstantDosageType.THERAPEUTIC_DOSE;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this DosageTypeEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantDosageType : IEquatable<DocConstantDosageType>, IEqualityComparer<DocConstantDosageType>
    {
        public const string BASAL = "Basal";
        public const string BOLUS = "Bolus";
        public const string ENDING_DOSE = "Ending Dose";
        public const string PROPHYLACTIC_DOSE = "Prophylactic Dose";
        public const string STANDARD = "Standard";
        public const string STARTING_DOSE = "Starting Dose";
        public const string THERAPEUTIC_DOSE = "Therapeutic Dose";
        
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantDosageType).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantDosageType(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantDosageType(string Val) => new DocConstantDosageType(Val);

        public static implicit operator string(DocConstantDosageType item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantDosageType(DosageTypeEnm Val) => new DocConstantDosageType(Val.ToEnumString());

        public static explicit operator DosageTypeEnm(DocConstantDosageType item)
        {
            Enum.TryParse<DosageTypeEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;



        public bool Equals(DocConstantDosageType obj) => this == obj;

        public static bool operator ==(DocConstantDosageType x, DocConstantDosageType y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantDosageType x, DocConstantDosageType y) => x == y;
        
        public static bool operator !=(DocConstantDosageType x, DocConstantDosageType y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantDosageType))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantDosageType) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantDosageType obj) => obj?.GetHashCode() ?? -17;

    }
}
