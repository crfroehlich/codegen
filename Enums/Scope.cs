//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ScopeEnm
    {
        [EnumMember(Value = DocConstantScope.APP), SCDescript(DocConstantScope.APP), SSDescript(DocConstantScope.APP), SCDisplay(Name = DocConstantScope.APP)]
        APP = 76351785,
        [EnumMember(Value = DocConstantScope.CLIENT), SCDescript(DocConstantScope.CLIENT), SSDescript(DocConstantScope.CLIENT), SCDisplay(Name = DocConstantScope.CLIENT)]
        CLIENT = 67058051,
        [EnumMember(Value = DocConstantScope.COMPOUND), SCDescript(DocConstantScope.COMPOUND), SSDescript(DocConstantScope.COMPOUND), SCDisplay(Name = DocConstantScope.COMPOUND)]
        COMPOUND = 76351620,
        [EnumMember(Value = DocConstantScope.DOCUMENTSET), SCDescript(DocConstantScope.DOCUMENTSET), SSDescript(DocConstantScope.DOCUMENTSET), SCDisplay(Name = DocConstantScope.DOCUMENTSET)]
        DOCUMENTSET = 67058052,
        [EnumMember(Value = DocConstantScope.GLOBAL), SCDescript(DocConstantScope.GLOBAL), SSDescript(DocConstantScope.GLOBAL), SCDisplay(Name = DocConstantScope.GLOBAL)]
        GLOBAL = 76351784,
        [EnumMember(Value = DocConstantScope.TEAM), SCDescript(DocConstantScope.TEAM), SSDescript(DocConstantScope.TEAM), SCDisplay(Name = DocConstantScope.TEAM)]
        TEAM = 76351786,
        [EnumMember(Value = DocConstantScope.USER), SCDescript(DocConstantScope.USER), SSDescript(DocConstantScope.USER), SCDisplay(Name = DocConstantScope.USER)]
        USER = 67058050
    }
    
    public static partial class EnumExtensions
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static string ToEnumString(this ScopeEnm instance)
        {
            switch(instance)
            {
                case ScopeEnm.APP:
                    return DocConstantScope.APP;
                case ScopeEnm.CLIENT:
                    return DocConstantScope.CLIENT;
                case ScopeEnm.COMPOUND:
                    return DocConstantScope.COMPOUND;
                case ScopeEnm.DOCUMENTSET:
                    return DocConstantScope.DOCUMENTSET;
                case ScopeEnm.GLOBAL:
                    return DocConstantScope.GLOBAL;
                case ScopeEnm.TEAM:
                    return DocConstantScope.TEAM;
                case ScopeEnm.USER:
                    return DocConstantScope.USER;
                default:
                    return string.Empty;
            }
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static string ToEnumString(this ScopeEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantScope : IEquatable<DocConstantScope>, IEqualityComparer<DocConstantScope>
    {
        public const string APP = "App";
        public const string CLIENT = "Client";
        public const string COMPOUND = "Compound";
        public const string DOCUMENTSET = "DocumentSet";
        public const string GLOBAL = "Global";
        public const string TEAM = "Team";
        public const string USER = "User";
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private static List<string> _all;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> All => _all ?? (_all = typeof(DocConstantScope).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private readonly string Value;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private DocConstantScope(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static implicit operator DocConstantScope(string Val) => new DocConstantScope(Val);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static implicit operator string(DocConstantScope item) => item?.Value ?? string.Empty;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator DocConstantScope(ScopeEnm Val) => new DocConstantScope(Val.ToEnumString());
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator ScopeEnm(DocConstantScope item)
        {
            Enum.TryParse<ScopeEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override string ToString() => Value;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Equals(DocConstantScope obj) => this == obj;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static bool operator ==(DocConstantScope x, DocConstantScope y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Equals(DocConstantScope x, DocConstantScope y) => x == y;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static bool operator !=(DocConstantScope x, DocConstantScope y) => !(x == y);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantScope))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantScope) obj;
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int GetHashCode(DocConstantScope obj) => obj?.GetHashCode() ?? -17;
    }
}
