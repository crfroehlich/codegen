//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StudyFundingEnm
    {
        [EnumMember(Value = DocConstantStudyFunding.ACKNOWLEDGEMENT)]
        ACKNOWLEDGEMENT,
        [EnumMember(Value = DocConstantStudyFunding.AUTHOR_EMPLOYMENT)]
        AUTHOR_EMPLOYMENT,
        [EnumMember(Value = DocConstantStudyFunding.CONFLICT_OF_INTEREST)]
        CONFLICT_OF_INTEREST,
        [EnumMember(Value = DocConstantStudyFunding.FINANCIAL_INTEREST)]
        FINANCIAL_INTEREST,
        [EnumMember(Value = DocConstantStudyFunding.FUNDED_BY)]
        FUNDED_BY,
        [EnumMember(Value = DocConstantStudyFunding.NR)]
        NR,
        [EnumMember(Value = DocConstantStudyFunding.SPONSORED_BY)]
        SPONSORED_BY,
        [EnumMember(Value = DocConstantStudyFunding.SUPPORTED_BY)]
        SUPPORTED_BY,
        [EnumMember(Value = DocConstantStudyFunding.UNCLEAR)]
        UNCLEAR
    }
    
	public static partial class EnumExtensions
    {
        public static string ToEnumString(this StudyFundingEnm instance)
		{
			switch(instance) 
			{
                case StudyFundingEnm.ACKNOWLEDGEMENT:
                    return DocConstantStudyFunding.ACKNOWLEDGEMENT;
                case StudyFundingEnm.AUTHOR_EMPLOYMENT:
                    return DocConstantStudyFunding.AUTHOR_EMPLOYMENT;
                case StudyFundingEnm.CONFLICT_OF_INTEREST:
                    return DocConstantStudyFunding.CONFLICT_OF_INTEREST;
                case StudyFundingEnm.FINANCIAL_INTEREST:
                    return DocConstantStudyFunding.FINANCIAL_INTEREST;
                case StudyFundingEnm.FUNDED_BY:
                    return DocConstantStudyFunding.FUNDED_BY;
                case StudyFundingEnm.NR:
                    return DocConstantStudyFunding.NR;
                case StudyFundingEnm.SPONSORED_BY:
                    return DocConstantStudyFunding.SPONSORED_BY;
                case StudyFundingEnm.SUPPORTED_BY:
                    return DocConstantStudyFunding.SUPPORTED_BY;
                case StudyFundingEnm.UNCLEAR:
                    return DocConstantStudyFunding.UNCLEAR;
				default:
					return string.Empty;
			}
		}
    }

    public sealed partial class DocConstantStudyFunding : IEquatable<DocConstantStudyFunding>, IEqualityComparer<DocConstantStudyFunding>
    {
        public const string ACKNOWLEDGEMENT = "Acknowledgment";
        public const string AUTHOR_EMPLOYMENT = "Author Employment";
        public const string CONFLICT_OF_INTEREST = "Conflict of Interest";
        public const string FINANCIAL_INTEREST = "Financial Interest";
        public const string FUNDED_BY = "Funded by";
        public const string NR = "NR";
        public const string SPONSORED_BY = "Sponsored by";
        public const string SUPPORTED_BY = "Supported by";
        public const string UNCLEAR = "Unclear";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantStudyFunding).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantStudyFunding(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantStudyFunding(string Val) => new DocConstantStudyFunding(Val);

        public static implicit operator string(DocConstantStudyFunding item) => item?.Value ?? string.Empty;

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable (DocConstantStudyFunding)

        public bool Equals(DocConstantStudyFunding obj) => this == obj;

        public static bool operator ==(DocConstantStudyFunding x, DocConstantStudyFunding y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
		
		public bool Equals(DocConstantStudyFunding x, DocConstantStudyFunding y) => x == y;
        
        public static bool operator !=(DocConstantStudyFunding x, DocConstantStudyFunding y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantStudyFunding))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantStudyFunding) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value.GetHashCode();
				
        public int GetHashCode(DocConstantStudyFunding obj) => obj.GetHashCode();

        #endregion IEquatable
    }
}
