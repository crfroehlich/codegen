
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StudyFundingEnm
    {
        [EnumMember(Value = DocConstantStudyFunding.ACKNOWLEDGEMENT), SCDescript(DocConstantStudyFunding.ACKNOWLEDGEMENT), SSDescript(DocConstantStudyFunding.ACKNOWLEDGEMENT), SCDisplay(Name = DocConstantStudyFunding.ACKNOWLEDGEMENT)]
        ACKNOWLEDGEMENT = 3343,
        [EnumMember(Value = DocConstantStudyFunding.AUTHOR_EMPLOYMENT), SCDescript(DocConstantStudyFunding.AUTHOR_EMPLOYMENT), SSDescript(DocConstantStudyFunding.AUTHOR_EMPLOYMENT), SCDisplay(Name = DocConstantStudyFunding.AUTHOR_EMPLOYMENT)]
        AUTHOR_EMPLOYMENT = 3348,
        [EnumMember(Value = DocConstantStudyFunding.CONFLICT_OF_INTEREST), SCDescript(DocConstantStudyFunding.CONFLICT_OF_INTEREST), SSDescript(DocConstantStudyFunding.CONFLICT_OF_INTEREST), SCDisplay(Name = DocConstantStudyFunding.CONFLICT_OF_INTEREST)]
        CONFLICT_OF_INTEREST = 3353,
        [EnumMember(Value = DocConstantStudyFunding.FINANCIAL_INTEREST), SCDescript(DocConstantStudyFunding.FINANCIAL_INTEREST), SSDescript(DocConstantStudyFunding.FINANCIAL_INTEREST), SCDisplay(Name = DocConstantStudyFunding.FINANCIAL_INTEREST)]
        FINANCIAL_INTEREST = 3358,
        [EnumMember(Value = DocConstantStudyFunding.FUNDED_BY), SCDescript(DocConstantStudyFunding.FUNDED_BY), SSDescript(DocConstantStudyFunding.FUNDED_BY), SCDisplay(Name = DocConstantStudyFunding.FUNDED_BY)]
        FUNDED_BY = 3363,
        [EnumMember(Value = DocConstantStudyFunding.NR), SCDescript(DocConstantStudyFunding.NR), SSDescript(DocConstantStudyFunding.NR), SCDisplay(Name = DocConstantStudyFunding.NR)]
        NR = 3368,
        [EnumMember(Value = DocConstantStudyFunding.SPONSORED_BY), SCDescript(DocConstantStudyFunding.SPONSORED_BY), SSDescript(DocConstantStudyFunding.SPONSORED_BY), SCDisplay(Name = DocConstantStudyFunding.SPONSORED_BY)]
        SPONSORED_BY = 3373,
        [EnumMember(Value = DocConstantStudyFunding.SUPPORTED_BY), SCDescript(DocConstantStudyFunding.SUPPORTED_BY), SSDescript(DocConstantStudyFunding.SUPPORTED_BY), SCDisplay(Name = DocConstantStudyFunding.SUPPORTED_BY)]
        SUPPORTED_BY = 3378,
        [EnumMember(Value = DocConstantStudyFunding.UNCLEAR), SCDescript(DocConstantStudyFunding.UNCLEAR), SSDescript(DocConstantStudyFunding.UNCLEAR), SCDisplay(Name = DocConstantStudyFunding.UNCLEAR)]
        UNCLEAR = 3383
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this StudyFundingEnm instance)
        {
            switch(instance)
            {
                case StudyFundingEnm.ACKNOWLEDGEMENT:
                    return DocConstantStudyFunding.ACKNOWLEDGEMENT;
                case StudyFundingEnm.AUTHOR_EMPLOYMENT:
                    return DocConstantStudyFunding.AUTHOR_EMPLOYMENT;
                case StudyFundingEnm.CONFLICT_OF_INTEREST:
                    return DocConstantStudyFunding.CONFLICT_OF_INTEREST;
                case StudyFundingEnm.FINANCIAL_INTEREST:
                    return DocConstantStudyFunding.FINANCIAL_INTEREST;
                case StudyFundingEnm.FUNDED_BY:
                    return DocConstantStudyFunding.FUNDED_BY;
                case StudyFundingEnm.NR:
                    return DocConstantStudyFunding.NR;
                case StudyFundingEnm.SPONSORED_BY:
                    return DocConstantStudyFunding.SPONSORED_BY;
                case StudyFundingEnm.SUPPORTED_BY:
                    return DocConstantStudyFunding.SUPPORTED_BY;
                case StudyFundingEnm.UNCLEAR:
                    return DocConstantStudyFunding.UNCLEAR;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this StudyFundingEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantStudyFunding : IEquatable<DocConstantStudyFunding>, IEqualityComparer<DocConstantStudyFunding>
    {
        public const string ACKNOWLEDGEMENT = "Acknowledgment";
        public const string AUTHOR_EMPLOYMENT = "Author Employment";
        public const string CONFLICT_OF_INTEREST = "Conflict of Interest";
        public const string FINANCIAL_INTEREST = "Financial Interest";
        public const string FUNDED_BY = "Funded by";
        public const string NR = "NR";
        public const string SPONSORED_BY = "Sponsored by";
        public const string SUPPORTED_BY = "Supported by";
        public const string UNCLEAR = "Unclear";

        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantStudyFunding).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantStudyFunding(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantStudyFunding(string Val) => new DocConstantStudyFunding(Val);

        public static implicit operator string(DocConstantStudyFunding item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantStudyFunding(StudyFundingEnm Val) => new DocConstantStudyFunding(Val.ToEnumString());

        public static explicit operator StudyFundingEnm(DocConstantStudyFunding item)
        {
            Enum.TryParse<StudyFundingEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;

        public bool Equals(DocConstantStudyFunding obj) => this == obj;

        public static bool operator ==(DocConstantStudyFunding x, DocConstantStudyFunding y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantStudyFunding x, DocConstantStudyFunding y) => x == y;
        
        public static bool operator !=(DocConstantStudyFunding x, DocConstantStudyFunding y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantStudyFunding))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantStudyFunding) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantStudyFunding obj) => obj?.GetHashCode() ?? -17;
    }
}
