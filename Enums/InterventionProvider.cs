//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum InterventionProviderEnm
    {
        [EnumMember(Value = DocConstantInterventionProvider.ALLIED_HEALTH_CARE_PROVIDER)]
        ALLIED_HEALTH_CARE_PROVIDER,
        [EnumMember(Value = DocConstantInterventionProvider.CARE_PROVIDER)]
        CARE_PROVIDER,
        [EnumMember(Value = DocConstantInterventionProvider.CLINICIAN)]
        CLINICIAN,
        [EnumMember(Value = DocConstantInterventionProvider.DOCTOR)]
        DOCTOR,
        [EnumMember(Value = DocConstantInterventionProvider.DOCTORAL_STUDENT)]
        DOCTORAL_STUDENT,
        [EnumMember(Value = DocConstantInterventionProvider.FOSTER_PARENT)]
        FOSTER_PARENT,
        [EnumMember(Value = DocConstantInterventionProvider.GENERAL_PRACTICIONER)]
        GENERAL_PRACTICIONER,
        [EnumMember(Value = DocConstantInterventionProvider.GRADUATE_STUDENT)]
        GRADUATE_STUDENT,
        [EnumMember(Value = DocConstantInterventionProvider.MULTIPLE_INDIVIDUALS)]
        MULTIPLE_INDIVIDUALS,
        [EnumMember(Value = DocConstantInterventionProvider.N_A)]
        N_A,
        [EnumMember(Value = DocConstantInterventionProvider.NR)]
        NR,
        [EnumMember(Value = DocConstantInterventionProvider.NURSE)]
        NURSE,
        [EnumMember(Value = DocConstantInterventionProvider.PAID_CAREGIVER)]
        PAID_CAREGIVER,
        [EnumMember(Value = DocConstantInterventionProvider.PHARMACIST)]
        PHARMACIST,
        [EnumMember(Value = DocConstantInterventionProvider.PSYCHIATRIST)]
        PSYCHIATRIST,
        [EnumMember(Value = DocConstantInterventionProvider.PSYCHOLOGIST)]
        PSYCHOLOGIST,
        [EnumMember(Value = DocConstantInterventionProvider.SELF)]
        SELF,
        [EnumMember(Value = DocConstantInterventionProvider.TEACHER)]
        TEACHER,
        [EnumMember(Value = DocConstantInterventionProvider.TEAM)]
        TEAM,
        [EnumMember(Value = DocConstantInterventionProvider.THERAPIST)]
        THERAPIST,
        [EnumMember(Value = DocConstantInterventionProvider.UNPAID_CAREGIVER)]
        UNPAID_CAREGIVER
    }
    
    public sealed partial class DocConstantInterventionProvider
    {
        public const string ALLIED_HEALTH_CARE_PROVIDER = "Allied Health Care Provider";
        public const string CARE_PROVIDER = "Care Provider";
        public const string CLINICIAN = "Clinician";
        public const string DOCTOR = "Doctor";
        public const string DOCTORAL_STUDENT = "Doctoral Student";
        public const string FOSTER_PARENT = "Foster Parent";
        public const string GENERAL_PRACTICIONER = "General Practicioner";
        public const string GRADUATE_STUDENT = "Graduate Student";
        public const string MULTIPLE_INDIVIDUALS = "Multiple Individuals";
        public const string N_A = "N/A";
        public const string NR = "NR";
        public const string NURSE = "Nurse";
        public const string PAID_CAREGIVER = "Paid Caregiver";
        public const string PHARMACIST = "Pharmacist";
        public const string PSYCHIATRIST = "Psychiatrist";
        public const string PSYCHOLOGIST = "Psychologist";
        public const string SELF = "Self";
        public const string TEACHER = "Teacher";
        public const string TEAM = "Team";
        public const string THERAPIST = "Therapist";
        public const string UNPAID_CAREGIVER = "Unpaid Caregiver";
        
        #region Internals
        
        private static List<string> _all;
        
        public static List<string> All => _all ?? (_all = typeof(DocConstantInterventionProvider).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        /// <summary>
        ///    The string value of the current instance
        /// </summary>
        private readonly string Value;

        /// <summary>
        ///    The enum constructor
        /// </summary>
        /// <param name="ItemName">Name of the item.</param>
        private DocConstantInterventionProvider(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        /// <summary>
        /// Determines if the Constant contains an exact match (case insensitive) for the name
        /// </summary>
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        /// <summary>
        ///    Implicit cast to Enum
        /// </summary>
        /// <param name="Val">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator DocConstantInterventionProvider(string Val)
        {
            return new DocConstantInterventionProvider(Val);
        }

        /// <summary>
        ///    Implicit cast to string
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator string(DocConstantInterventionProvider item)
        {
            return item?.Value ?? string.Empty;
        }

        /// <summary>
        ///    Override of ToString
        /// </summary>
        /// <returns>A <see cref="System.String" /> that represents this instance.</returns>
        public override string ToString()
        {
            return Value;
        }

        #endregion Internals

        #region IEquatable (DocConstantInterventionProvider)

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public bool Equals(DocConstantInterventionProvider obj)
        {
            return this == obj;
        }

        /// <summary>
        ///    == Equality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator ==(DocConstantInterventionProvider ft1, DocConstantInterventionProvider ft2)
        {
            //do a string comparison on the fieldtypes
            return string.Equals(Convert.ToString(ft1), Convert.ToString(ft2), StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        ///    != Inequality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator !=(DocConstantInterventionProvider ft1, DocConstantInterventionProvider ft2)
        {
            return !(ft1 == ft2);
        }

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantInterventionProvider))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantInterventionProvider) obj;
            }
            return ret;
        }

        /// <summary>
        ///    Get Hash Code
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode()
        {
            var ret = 23;
            const int prime = 37;
            ret = (ret * prime) + Value.GetHashCode();
            ret = (ret * prime) + All.GetHashCode();
            return ret;
        }

        #endregion IEquatable (DocConstantInterventionProvider)
    }
}
