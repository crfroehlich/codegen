
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ReconciliationStatusEnm
    {
        [EnumMember(Value = DocConstantReconciliationStatus.MATCHED), SCDescript(DocConstantReconciliationStatus.MATCHED), SSDescript(DocConstantReconciliationStatus.MATCHED), SCDisplay(Name = DocConstantReconciliationStatus.MATCHED)]
        MATCHED = 157821100,
        [EnumMember(Value = DocConstantReconciliationStatus.MULTIPLE_MATCHES), SCDescript(DocConstantReconciliationStatus.MULTIPLE_MATCHES), SSDescript(DocConstantReconciliationStatus.MULTIPLE_MATCHES), SCDisplay(Name = DocConstantReconciliationStatus.MULTIPLE_MATCHES)]
        MULTIPLE_MATCHES = 157821101,
        [EnumMember(Value = DocConstantReconciliationStatus.NO_MATCH), SCDescript(DocConstantReconciliationStatus.NO_MATCH), SSDescript(DocConstantReconciliationStatus.NO_MATCH), SCDisplay(Name = DocConstantReconciliationStatus.NO_MATCH)]
        NO_MATCH = 157821099,
        [EnumMember(Value = DocConstantReconciliationStatus.ONE_MATCH), SCDescript(DocConstantReconciliationStatus.ONE_MATCH), SSDescript(DocConstantReconciliationStatus.ONE_MATCH), SCDisplay(Name = DocConstantReconciliationStatus.ONE_MATCH)]
        ONE_MATCH = 157821143
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this ReconciliationStatusEnm instance)
        {
            switch(instance)
            {
                case ReconciliationStatusEnm.MATCHED:
                    return DocConstantReconciliationStatus.MATCHED;
                case ReconciliationStatusEnm.MULTIPLE_MATCHES:
                    return DocConstantReconciliationStatus.MULTIPLE_MATCHES;
                case ReconciliationStatusEnm.NO_MATCH:
                    return DocConstantReconciliationStatus.NO_MATCH;
                case ReconciliationStatusEnm.ONE_MATCH:
                    return DocConstantReconciliationStatus.ONE_MATCH;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this ReconciliationStatusEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantReconciliationStatus : IEquatable<DocConstantReconciliationStatus>, IEqualityComparer<DocConstantReconciliationStatus>
    {
        public const string MATCHED = "Matched";
        public const string MULTIPLE_MATCHES = "Multiple Matches";
        public const string NO_MATCH = "No Match";
        public const string ONE_MATCH = "One Match";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantReconciliationStatus).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantReconciliationStatus(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantReconciliationStatus(string Val) => new DocConstantReconciliationStatus(Val);

        public static implicit operator string(DocConstantReconciliationStatus item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantReconciliationStatus(ReconciliationStatusEnm Val) => new DocConstantReconciliationStatus(Val.ToEnumString());

        public static explicit operator ReconciliationStatusEnm(DocConstantReconciliationStatus item)
        {
            Enum.TryParse<ReconciliationStatusEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantReconciliationStatus obj) => this == obj;

        public static bool operator ==(DocConstantReconciliationStatus x, DocConstantReconciliationStatus y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantReconciliationStatus x, DocConstantReconciliationStatus y) => x == y;
        
        public static bool operator !=(DocConstantReconciliationStatus x, DocConstantReconciliationStatus y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantReconciliationStatus))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantReconciliationStatus) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantReconciliationStatus obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
