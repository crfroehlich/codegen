//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum MeanRangeTypeEnm
    {
        [EnumMember(Value = DocConstantMeanRangeType.CI)]
        CI,
        [EnumMember(Value = DocConstantMeanRangeType.IQR)]
        IQR,
        [EnumMember(Value = DocConstantMeanRangeType.PERCENTILE)]
        PERCENTILE,
        [EnumMember(Value = DocConstantMeanRangeType.TOTAL)]
        TOTAL,
        [EnumMember(Value = DocConstantMeanRangeType.VARIANCE_CI)]
        VARIANCE_CI,
        [EnumMember(Value = DocConstantMeanRangeType.VARIANCE_IQR)]
        VARIANCE_IQR,
        [EnumMember(Value = DocConstantMeanRangeType.VARIANCE_PERCENTILE)]
        VARIANCE_PERCENTILE,
        [EnumMember(Value = DocConstantMeanRangeType.VARIANCE_TOTAL)]
        VARIANCE_TOTAL
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this MeanRangeTypeEnm instance)
        {
            switch(instance) 
            {
                case MeanRangeTypeEnm.CI:
                    return DocConstantMeanRangeType.CI;
                case MeanRangeTypeEnm.IQR:
                    return DocConstantMeanRangeType.IQR;
                case MeanRangeTypeEnm.PERCENTILE:
                    return DocConstantMeanRangeType.PERCENTILE;
                case MeanRangeTypeEnm.TOTAL:
                    return DocConstantMeanRangeType.TOTAL;
                case MeanRangeTypeEnm.VARIANCE_CI:
                    return DocConstantMeanRangeType.VARIANCE_CI;
                case MeanRangeTypeEnm.VARIANCE_IQR:
                    return DocConstantMeanRangeType.VARIANCE_IQR;
                case MeanRangeTypeEnm.VARIANCE_PERCENTILE:
                    return DocConstantMeanRangeType.VARIANCE_PERCENTILE;
                case MeanRangeTypeEnm.VARIANCE_TOTAL:
                    return DocConstantMeanRangeType.VARIANCE_TOTAL;
                default:
                    return string.Empty;
            }
        }
    }

    public sealed partial class DocConstantMeanRangeType : IEquatable<DocConstantMeanRangeType>, IEqualityComparer<DocConstantMeanRangeType>
    {
        public const string CI = "CI";
        public const string IQR = "IQR";
        public const string PERCENTILE = "Percentile";
        public const string TOTAL = "Total";
        public const string VARIANCE_CI = "Variance CI";
        public const string VARIANCE_IQR = "Variance IQR";
        public const string VARIANCE_PERCENTILE = "Variance Percentile";
        public const string VARIANCE_TOTAL = "Variance Total";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantMeanRangeType).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantMeanRangeType(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantMeanRangeType(string Val) => new DocConstantMeanRangeType(Val);

        public static implicit operator string(DocConstantMeanRangeType item) => item?.Value ?? string.Empty;

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantMeanRangeType obj) => this == obj;

        public static bool operator ==(DocConstantMeanRangeType x, DocConstantMeanRangeType y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantMeanRangeType x, DocConstantMeanRangeType y) => x == y;
        
        public static bool operator !=(DocConstantMeanRangeType x, DocConstantMeanRangeType y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantMeanRangeType))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantMeanRangeType) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantMeanRangeType obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
