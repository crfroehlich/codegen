
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum AssociationMeasureEnm
    {
        [EnumMember(Value = DocConstantAssociationMeasure.COHENS_D), SCDescript(DocConstantAssociationMeasure.COHENS_D), SSDescript(DocConstantAssociationMeasure.COHENS_D), SCDisplay(Name = DocConstantAssociationMeasure.COHENS_D)]
        COHENS_D = 243,
        [EnumMember(Value = DocConstantAssociationMeasure.HAZARD_RATIO), SCDescript(DocConstantAssociationMeasure.HAZARD_RATIO), SSDescript(DocConstantAssociationMeasure.HAZARD_RATIO), SCDisplay(Name = DocConstantAssociationMeasure.HAZARD_RATIO)]
        HAZARD_RATIO = 253,
        [EnumMember(Value = DocConstantAssociationMeasure.HEDGES_G), SCDescript(DocConstantAssociationMeasure.HEDGES_G), SSDescript(DocConstantAssociationMeasure.HEDGES_G), SCDisplay(Name = DocConstantAssociationMeasure.HEDGES_G)]
        HEDGES_G = 256,
        [EnumMember(Value = DocConstantAssociationMeasure.MEAN_DIFFERENCE), SCDescript(DocConstantAssociationMeasure.MEAN_DIFFERENCE), SSDescript(DocConstantAssociationMeasure.MEAN_DIFFERENCE), SCDisplay(Name = DocConstantAssociationMeasure.MEAN_DIFFERENCE)]
        MEAN_DIFFERENCE = 261,
        [EnumMember(Value = DocConstantAssociationMeasure.ODDS_RATIO), SCDescript(DocConstantAssociationMeasure.ODDS_RATIO), SSDescript(DocConstantAssociationMeasure.ODDS_RATIO), SCDisplay(Name = DocConstantAssociationMeasure.ODDS_RATIO)]
        ODDS_RATIO = 271,
        [EnumMember(Value = DocConstantAssociationMeasure.RATE_DIFFERENCE), SCDescript(DocConstantAssociationMeasure.RATE_DIFFERENCE), SSDescript(DocConstantAssociationMeasure.RATE_DIFFERENCE), SCDisplay(Name = DocConstantAssociationMeasure.RATE_DIFFERENCE)]
        RATE_DIFFERENCE = 77315987,
        [EnumMember(Value = DocConstantAssociationMeasure.RATE_RATIO), SCDescript(DocConstantAssociationMeasure.RATE_RATIO), SSDescript(DocConstantAssociationMeasure.RATE_RATIO), SCDisplay(Name = DocConstantAssociationMeasure.RATE_RATIO)]
        RATE_RATIO = 274,
        [EnumMember(Value = DocConstantAssociationMeasure.RAW_DIFFERENCE), SCDescript(DocConstantAssociationMeasure.RAW_DIFFERENCE), SSDescript(DocConstantAssociationMeasure.RAW_DIFFERENCE), SCDisplay(Name = DocConstantAssociationMeasure.RAW_DIFFERENCE)]
        RAW_DIFFERENCE = 279,
        [EnumMember(Value = DocConstantAssociationMeasure.RELATIVE_RISK_INCREASE), SCDescript(DocConstantAssociationMeasure.RELATIVE_RISK_INCREASE), SSDescript(DocConstantAssociationMeasure.RELATIVE_RISK_INCREASE), SCDisplay(Name = DocConstantAssociationMeasure.RELATIVE_RISK_INCREASE)]
        RELATIVE_RISK_INCREASE = 284,
        [EnumMember(Value = DocConstantAssociationMeasure.RELATIVE_RISK_REDUCTION), SCDescript(DocConstantAssociationMeasure.RELATIVE_RISK_REDUCTION), SSDescript(DocConstantAssociationMeasure.RELATIVE_RISK_REDUCTION), SCDisplay(Name = DocConstantAssociationMeasure.RELATIVE_RISK_REDUCTION)]
        RELATIVE_RISK_REDUCTION = 289,
        [EnumMember(Value = DocConstantAssociationMeasure.RISK_DIFFERENCE), SCDescript(DocConstantAssociationMeasure.RISK_DIFFERENCE), SSDescript(DocConstantAssociationMeasure.RISK_DIFFERENCE), SCDisplay(Name = DocConstantAssociationMeasure.RISK_DIFFERENCE)]
        RISK_DIFFERENCE = 294,
        [EnumMember(Value = DocConstantAssociationMeasure.RISK_RATIO), SCDescript(DocConstantAssociationMeasure.RISK_RATIO), SSDescript(DocConstantAssociationMeasure.RISK_RATIO), SCDisplay(Name = DocConstantAssociationMeasure.RISK_RATIO)]
        RISK_RATIO = 73104011,
        [EnumMember(Value = DocConstantAssociationMeasure.RISK_RATIO_RELATIVE_RISK), SCDescript(DocConstantAssociationMeasure.RISK_RATIO_RELATIVE_RISK), SSDescript(DocConstantAssociationMeasure.RISK_RATIO_RELATIVE_RISK), SCDisplay(Name = DocConstantAssociationMeasure.RISK_RATIO_RELATIVE_RISK)]
        RISK_RATIO_RELATIVE_RISK = 304
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this AssociationMeasureEnm instance)
        {
            switch(instance)
            {
                case AssociationMeasureEnm.COHENS_D:
                    return DocConstantAssociationMeasure.COHENS_D;
                case AssociationMeasureEnm.HAZARD_RATIO:
                    return DocConstantAssociationMeasure.HAZARD_RATIO;
                case AssociationMeasureEnm.HEDGES_G:
                    return DocConstantAssociationMeasure.HEDGES_G;
                case AssociationMeasureEnm.MEAN_DIFFERENCE:
                    return DocConstantAssociationMeasure.MEAN_DIFFERENCE;
                case AssociationMeasureEnm.ODDS_RATIO:
                    return DocConstantAssociationMeasure.ODDS_RATIO;
                case AssociationMeasureEnm.RATE_DIFFERENCE:
                    return DocConstantAssociationMeasure.RATE_DIFFERENCE;
                case AssociationMeasureEnm.RATE_RATIO:
                    return DocConstantAssociationMeasure.RATE_RATIO;
                case AssociationMeasureEnm.RAW_DIFFERENCE:
                    return DocConstantAssociationMeasure.RAW_DIFFERENCE;
                case AssociationMeasureEnm.RELATIVE_RISK_INCREASE:
                    return DocConstantAssociationMeasure.RELATIVE_RISK_INCREASE;
                case AssociationMeasureEnm.RELATIVE_RISK_REDUCTION:
                    return DocConstantAssociationMeasure.RELATIVE_RISK_REDUCTION;
                case AssociationMeasureEnm.RISK_DIFFERENCE:
                    return DocConstantAssociationMeasure.RISK_DIFFERENCE;
                case AssociationMeasureEnm.RISK_RATIO:
                    return DocConstantAssociationMeasure.RISK_RATIO;
                case AssociationMeasureEnm.RISK_RATIO_RELATIVE_RISK:
                    return DocConstantAssociationMeasure.RISK_RATIO_RELATIVE_RISK;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this AssociationMeasureEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantAssociationMeasure : IEquatable<DocConstantAssociationMeasure>, IEqualityComparer<DocConstantAssociationMeasure>
    {
        public const string COHENS_D = "Cohen's D";
        public const string HAZARD_RATIO = "Hazard Ratio";
        public const string HEDGES_G = "Hedges G";
        public const string MEAN_DIFFERENCE = "Mean Difference";
        public const string ODDS_RATIO = "Odds Ratio";
        public const string RATE_DIFFERENCE = "Rate Difference";
        public const string RATE_RATIO = "Rate Ratio";
        public const string RAW_DIFFERENCE = "Raw Difference";
        public const string RELATIVE_RISK_INCREASE = "Relative Risk Increase";
        public const string RELATIVE_RISK_REDUCTION = "Relative Risk Reduction";
        public const string RISK_DIFFERENCE = "Risk Difference";
        public const string RISK_RATIO = "Risk Ratio";
        public const string RISK_RATIO_RELATIVE_RISK = "Risk Ratio/Relative Risk";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantAssociationMeasure).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantAssociationMeasure(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantAssociationMeasure(string Val) => new DocConstantAssociationMeasure(Val);

        public static implicit operator string(DocConstantAssociationMeasure item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantAssociationMeasure(AssociationMeasureEnm Val) => new DocConstantAssociationMeasure(Val.ToEnumString());

        public static explicit operator AssociationMeasureEnm(DocConstantAssociationMeasure item)
        {
            Enum.TryParse<AssociationMeasureEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantAssociationMeasure obj) => this == obj;

        public static bool operator ==(DocConstantAssociationMeasure x, DocConstantAssociationMeasure y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantAssociationMeasure x, DocConstantAssociationMeasure y) => x == y;
        
        public static bool operator !=(DocConstantAssociationMeasure x, DocConstantAssociationMeasure y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantAssociationMeasure))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantAssociationMeasure) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantAssociationMeasure obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
