//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum AssociationMeasureEnm
    {
        [EnumMember(Value = DocConstantAssociationMeasure.COHENS_D)]
        COHENS_D,
        [EnumMember(Value = DocConstantAssociationMeasure.HAZARD_RATIO)]
        HAZARD_RATIO,
        [EnumMember(Value = DocConstantAssociationMeasure.HEDGES_G)]
        HEDGES_G,
        [EnumMember(Value = DocConstantAssociationMeasure.MEAN_DIFFERENCE)]
        MEAN_DIFFERENCE,
        [EnumMember(Value = DocConstantAssociationMeasure.ODDS_RATIO)]
        ODDS_RATIO,
        [EnumMember(Value = DocConstantAssociationMeasure.RATE_DIFFERENCE)]
        RATE_DIFFERENCE,
        [EnumMember(Value = DocConstantAssociationMeasure.RATE_RATIO)]
        RATE_RATIO,
        [EnumMember(Value = DocConstantAssociationMeasure.RAW_DIFFERENCE)]
        RAW_DIFFERENCE,
        [EnumMember(Value = DocConstantAssociationMeasure.RELATIVE_RISK_INCREASE)]
        RELATIVE_RISK_INCREASE,
        [EnumMember(Value = DocConstantAssociationMeasure.RELATIVE_RISK_REDUCTION)]
        RELATIVE_RISK_REDUCTION,
        [EnumMember(Value = DocConstantAssociationMeasure.RISK_DIFFERENCE)]
        RISK_DIFFERENCE,
        [EnumMember(Value = DocConstantAssociationMeasure.RISK_RATIO)]
        RISK_RATIO,
        [EnumMember(Value = DocConstantAssociationMeasure.RISK_RATIO_RELATIVE_RISK)]
        RISK_RATIO_RELATIVE_RISK
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this AssociationMeasureEnm instance)
        {
            switch(instance) 
            {
                case AssociationMeasureEnm.COHENS_D:
                    return DocConstantAssociationMeasure.COHENS_D;
                case AssociationMeasureEnm.HAZARD_RATIO:
                    return DocConstantAssociationMeasure.HAZARD_RATIO;
                case AssociationMeasureEnm.HEDGES_G:
                    return DocConstantAssociationMeasure.HEDGES_G;
                case AssociationMeasureEnm.MEAN_DIFFERENCE:
                    return DocConstantAssociationMeasure.MEAN_DIFFERENCE;
                case AssociationMeasureEnm.ODDS_RATIO:
                    return DocConstantAssociationMeasure.ODDS_RATIO;
                case AssociationMeasureEnm.RATE_DIFFERENCE:
                    return DocConstantAssociationMeasure.RATE_DIFFERENCE;
                case AssociationMeasureEnm.RATE_RATIO:
                    return DocConstantAssociationMeasure.RATE_RATIO;
                case AssociationMeasureEnm.RAW_DIFFERENCE:
                    return DocConstantAssociationMeasure.RAW_DIFFERENCE;
                case AssociationMeasureEnm.RELATIVE_RISK_INCREASE:
                    return DocConstantAssociationMeasure.RELATIVE_RISK_INCREASE;
                case AssociationMeasureEnm.RELATIVE_RISK_REDUCTION:
                    return DocConstantAssociationMeasure.RELATIVE_RISK_REDUCTION;
                case AssociationMeasureEnm.RISK_DIFFERENCE:
                    return DocConstantAssociationMeasure.RISK_DIFFERENCE;
                case AssociationMeasureEnm.RISK_RATIO:
                    return DocConstantAssociationMeasure.RISK_RATIO;
                case AssociationMeasureEnm.RISK_RATIO_RELATIVE_RISK:
                    return DocConstantAssociationMeasure.RISK_RATIO_RELATIVE_RISK;
                default:
                    return string.Empty;
            }
        }
    }

    public sealed partial class DocConstantAssociationMeasure : IEquatable<DocConstantAssociationMeasure>, IEqualityComparer<DocConstantAssociationMeasure>
    {
        public const string COHENS_D = "Cohen's D";
        public const string HAZARD_RATIO = "Hazard Ratio";
        public const string HEDGES_G = "Hedges G";
        public const string MEAN_DIFFERENCE = "Mean Difference";
        public const string ODDS_RATIO = "Odds Ratio";
        public const string RATE_DIFFERENCE = "Rate Difference";
        public const string RATE_RATIO = "Rate Ratio";
        public const string RAW_DIFFERENCE = "Raw Difference";
        public const string RELATIVE_RISK_INCREASE = "Relative Risk Increase";
        public const string RELATIVE_RISK_REDUCTION = "Relative Risk Reduction";
        public const string RISK_DIFFERENCE = "Risk Difference";
        public const string RISK_RATIO = "Risk Ratio";
        public const string RISK_RATIO_RELATIVE_RISK = "Risk Ratio/Relative Risk";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantAssociationMeasure).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantAssociationMeasure(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantAssociationMeasure(string Val) => new DocConstantAssociationMeasure(Val);

        public static implicit operator string(DocConstantAssociationMeasure item) => item?.Value ?? string.Empty;

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantAssociationMeasure obj) => this == obj;

        public static bool operator ==(DocConstantAssociationMeasure x, DocConstantAssociationMeasure y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantAssociationMeasure x, DocConstantAssociationMeasure y) => x == y;
        
        public static bool operator !=(DocConstantAssociationMeasure x, DocConstantAssociationMeasure y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantAssociationMeasure))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantAssociationMeasure) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantAssociationMeasure obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
