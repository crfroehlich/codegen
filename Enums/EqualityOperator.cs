
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum EqualityOperatorEnm
    {
        [EnumMember(Value = DocConstantEqualityOperator.APPROXIMATELY_EQUALS), SCDescript(DocConstantEqualityOperator.APPROXIMATELY_EQUALS), SSDescript(DocConstantEqualityOperator.APPROXIMATELY_EQUALS), SCDisplay(Name = DocConstantEqualityOperator.APPROXIMATELY_EQUALS)]
        APPROXIMATELY_EQUALS = 777,
        [EnumMember(Value = DocConstantEqualityOperator.APPROXIMATELY_GREATER_THAN), SCDescript(DocConstantEqualityOperator.APPROXIMATELY_GREATER_THAN), SSDescript(DocConstantEqualityOperator.APPROXIMATELY_GREATER_THAN), SCDisplay(Name = DocConstantEqualityOperator.APPROXIMATELY_GREATER_THAN)]
        APPROXIMATELY_GREATER_THAN = 782,
        [EnumMember(Value = DocConstantEqualityOperator.APPROXIMATELY_GREATER_THAN_OR_EQUALS), SCDescript(DocConstantEqualityOperator.APPROXIMATELY_GREATER_THAN_OR_EQUALS), SSDescript(DocConstantEqualityOperator.APPROXIMATELY_GREATER_THAN_OR_EQUALS), SCDisplay(Name = DocConstantEqualityOperator.APPROXIMATELY_GREATER_THAN_OR_EQUALS)]
        APPROXIMATELY_GREATER_THAN_OR_EQUALS = 787,
        [EnumMember(Value = DocConstantEqualityOperator.APPROXIMATELY_LESS_THAN), SCDescript(DocConstantEqualityOperator.APPROXIMATELY_LESS_THAN), SSDescript(DocConstantEqualityOperator.APPROXIMATELY_LESS_THAN), SCDisplay(Name = DocConstantEqualityOperator.APPROXIMATELY_LESS_THAN)]
        APPROXIMATELY_LESS_THAN = 792,
        [EnumMember(Value = DocConstantEqualityOperator.APPROXIMATELY_LESS_THAN_OR_EQUALS), SCDescript(DocConstantEqualityOperator.APPROXIMATELY_LESS_THAN_OR_EQUALS), SSDescript(DocConstantEqualityOperator.APPROXIMATELY_LESS_THAN_OR_EQUALS), SCDisplay(Name = DocConstantEqualityOperator.APPROXIMATELY_LESS_THAN_OR_EQUALS)]
        APPROXIMATELY_LESS_THAN_OR_EQUALS = 797,
        [EnumMember(Value = DocConstantEqualityOperator.EQUALS), SCDescript(DocConstantEqualityOperator.EQUALS), SSDescript(DocConstantEqualityOperator.EQUALS), SCDisplay(Name = DocConstantEqualityOperator.EQUALS)]
        EQUALS = 802,
        [EnumMember(Value = DocConstantEqualityOperator.GREATER_THAN), SCDescript(DocConstantEqualityOperator.GREATER_THAN), SSDescript(DocConstantEqualityOperator.GREATER_THAN), SCDisplay(Name = DocConstantEqualityOperator.GREATER_THAN)]
        GREATER_THAN = 807,
        [EnumMember(Value = DocConstantEqualityOperator.GREATER_THAN_OR_EQUALS), SCDescript(DocConstantEqualityOperator.GREATER_THAN_OR_EQUALS), SSDescript(DocConstantEqualityOperator.GREATER_THAN_OR_EQUALS), SCDisplay(Name = DocConstantEqualityOperator.GREATER_THAN_OR_EQUALS)]
        GREATER_THAN_OR_EQUALS = 812,
        [EnumMember(Value = DocConstantEqualityOperator.GREATER_THAN_OR_EQUALS_ALIAS), SCDescript(DocConstantEqualityOperator.GREATER_THAN_OR_EQUALS_ALIAS), SSDescript(DocConstantEqualityOperator.GREATER_THAN_OR_EQUALS_ALIAS), SCDisplay(Name = DocConstantEqualityOperator.GREATER_THAN_OR_EQUALS_ALIAS)]
        GREATER_THAN_OR_EQUALS_ALIAS = 817,
        [EnumMember(Value = DocConstantEqualityOperator.LESS_THAN), SCDescript(DocConstantEqualityOperator.LESS_THAN), SSDescript(DocConstantEqualityOperator.LESS_THAN), SCDisplay(Name = DocConstantEqualityOperator.LESS_THAN)]
        LESS_THAN = 822,
        [EnumMember(Value = DocConstantEqualityOperator.LESS_THAN_OR_EQUALS), SCDescript(DocConstantEqualityOperator.LESS_THAN_OR_EQUALS), SSDescript(DocConstantEqualityOperator.LESS_THAN_OR_EQUALS), SCDisplay(Name = DocConstantEqualityOperator.LESS_THAN_OR_EQUALS)]
        LESS_THAN_OR_EQUALS = 827,
        [EnumMember(Value = DocConstantEqualityOperator.LESS_THAN_OR_EQUALS_ALIAS), SCDescript(DocConstantEqualityOperator.LESS_THAN_OR_EQUALS_ALIAS), SSDescript(DocConstantEqualityOperator.LESS_THAN_OR_EQUALS_ALIAS), SCDisplay(Name = DocConstantEqualityOperator.LESS_THAN_OR_EQUALS_ALIAS)]
        LESS_THAN_OR_EQUALS_ALIAS = 832,
        [EnumMember(Value = DocConstantEqualityOperator.NOT_EQUALS), SCDescript(DocConstantEqualityOperator.NOT_EQUALS), SSDescript(DocConstantEqualityOperator.NOT_EQUALS), SCDisplay(Name = DocConstantEqualityOperator.NOT_EQUALS)]
        NOT_EQUALS = 837
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this EqualityOperatorEnm instance)
        {
            switch(instance)
            {
                case EqualityOperatorEnm.APPROXIMATELY_EQUALS:
                    return DocConstantEqualityOperator.APPROXIMATELY_EQUALS;
                case EqualityOperatorEnm.APPROXIMATELY_GREATER_THAN:
                    return DocConstantEqualityOperator.APPROXIMATELY_GREATER_THAN;
                case EqualityOperatorEnm.APPROXIMATELY_GREATER_THAN_OR_EQUALS:
                    return DocConstantEqualityOperator.APPROXIMATELY_GREATER_THAN_OR_EQUALS;
                case EqualityOperatorEnm.APPROXIMATELY_LESS_THAN:
                    return DocConstantEqualityOperator.APPROXIMATELY_LESS_THAN;
                case EqualityOperatorEnm.APPROXIMATELY_LESS_THAN_OR_EQUALS:
                    return DocConstantEqualityOperator.APPROXIMATELY_LESS_THAN_OR_EQUALS;
                case EqualityOperatorEnm.EQUALS:
                    return DocConstantEqualityOperator.EQUALS;
                case EqualityOperatorEnm.GREATER_THAN:
                    return DocConstantEqualityOperator.GREATER_THAN;
                case EqualityOperatorEnm.GREATER_THAN_OR_EQUALS:
                    return DocConstantEqualityOperator.GREATER_THAN_OR_EQUALS;
                case EqualityOperatorEnm.GREATER_THAN_OR_EQUALS_ALIAS:
                    return DocConstantEqualityOperator.GREATER_THAN_OR_EQUALS_ALIAS;
                case EqualityOperatorEnm.LESS_THAN:
                    return DocConstantEqualityOperator.LESS_THAN;
                case EqualityOperatorEnm.LESS_THAN_OR_EQUALS:
                    return DocConstantEqualityOperator.LESS_THAN_OR_EQUALS;
                case EqualityOperatorEnm.LESS_THAN_OR_EQUALS_ALIAS:
                    return DocConstantEqualityOperator.LESS_THAN_OR_EQUALS_ALIAS;
                case EqualityOperatorEnm.NOT_EQUALS:
                    return DocConstantEqualityOperator.NOT_EQUALS;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this EqualityOperatorEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantEqualityOperator : IEquatable<DocConstantEqualityOperator>, IEqualityComparer<DocConstantEqualityOperator>
    {
        public const string APPROXIMATELY_EQUALS = "~=";
        public const string APPROXIMATELY_GREATER_THAN = "~>";
        public const string APPROXIMATELY_GREATER_THAN_OR_EQUALS = "~>=";
        public const string APPROXIMATELY_LESS_THAN = "~<";
        public const string APPROXIMATELY_LESS_THAN_OR_EQUALS = "~<=";
        public const string EQUALS = "=";
        public const string GREATER_THAN = ">";
        public const string GREATER_THAN_OR_EQUALS = ">=";
        public const string GREATER_THAN_OR_EQUALS_ALIAS = "≥";
        public const string LESS_THAN = "<";
        public const string LESS_THAN_OR_EQUALS = "<=";
        public const string LESS_THAN_OR_EQUALS_ALIAS = "≤";
        public const string NOT_EQUALS = "!=";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantEqualityOperator).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantEqualityOperator(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantEqualityOperator(string Val) => new DocConstantEqualityOperator(Val);

        public static implicit operator string(DocConstantEqualityOperator item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantEqualityOperator(EqualityOperatorEnm Val) => new DocConstantEqualityOperator(Val.ToEnumString());

        public static explicit operator EqualityOperatorEnm(DocConstantEqualityOperator item)
        {
            Enum.TryParse<EqualityOperatorEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantEqualityOperator obj) => this == obj;

        public static bool operator ==(DocConstantEqualityOperator x, DocConstantEqualityOperator y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantEqualityOperator x, DocConstantEqualityOperator y) => x == y;
        
        public static bool operator !=(DocConstantEqualityOperator x, DocConstantEqualityOperator y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantEqualityOperator))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantEqualityOperator) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantEqualityOperator obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
