//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ResponsesCollectedByEnm
    {
        [EnumMember(Value = DocConstantResponsesCollectedBy.CLINICAL_CARE_PROVIDER)]
        CLINICAL_CARE_PROVIDER,
        [EnumMember(Value = DocConstantResponsesCollectedBy.LABORATORY_TECH)]
        LABORATORY_TECH,
        [EnumMember(Value = DocConstantResponsesCollectedBy.MULTIPLE)]
        MULTIPLE,
        [EnumMember(Value = DocConstantResponsesCollectedBy.NR)]
        NR,
        [EnumMember(Value = DocConstantResponsesCollectedBy.OBSERVE)]
        OBSERVE,
        [EnumMember(Value = DocConstantResponsesCollectedBy.PAID_CAREGIVER_STAFF)]
        PAID_CAREGIVER_STAFF,
        [EnumMember(Value = DocConstantResponsesCollectedBy.RESEARCHER)]
        RESEARCHER,
        [EnumMember(Value = DocConstantResponsesCollectedBy.SELF)]
        SELF,
        [EnumMember(Value = DocConstantResponsesCollectedBy.STUDY_INVESTIGATOR)]
        STUDY_INVESTIGATOR,
        [EnumMember(Value = DocConstantResponsesCollectedBy.SURGEON)]
        SURGEON,
        [EnumMember(Value = DocConstantResponsesCollectedBy.TEACHER)]
        TEACHER,
        [EnumMember(Value = DocConstantResponsesCollectedBy.UNCLEAR)]
        UNCLEAR,
        [EnumMember(Value = DocConstantResponsesCollectedBy.UNPAID_CAREGIVER_FAMILY)]
        UNPAID_CAREGIVER_FAMILY
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this ResponsesCollectedByEnm instance)
        {
            switch(instance) 
            {
                case ResponsesCollectedByEnm.CLINICAL_CARE_PROVIDER:
                    return DocConstantResponsesCollectedBy.CLINICAL_CARE_PROVIDER;
                case ResponsesCollectedByEnm.LABORATORY_TECH:
                    return DocConstantResponsesCollectedBy.LABORATORY_TECH;
                case ResponsesCollectedByEnm.MULTIPLE:
                    return DocConstantResponsesCollectedBy.MULTIPLE;
                case ResponsesCollectedByEnm.NR:
                    return DocConstantResponsesCollectedBy.NR;
                case ResponsesCollectedByEnm.OBSERVE:
                    return DocConstantResponsesCollectedBy.OBSERVE;
                case ResponsesCollectedByEnm.PAID_CAREGIVER_STAFF:
                    return DocConstantResponsesCollectedBy.PAID_CAREGIVER_STAFF;
                case ResponsesCollectedByEnm.RESEARCHER:
                    return DocConstantResponsesCollectedBy.RESEARCHER;
                case ResponsesCollectedByEnm.SELF:
                    return DocConstantResponsesCollectedBy.SELF;
                case ResponsesCollectedByEnm.STUDY_INVESTIGATOR:
                    return DocConstantResponsesCollectedBy.STUDY_INVESTIGATOR;
                case ResponsesCollectedByEnm.SURGEON:
                    return DocConstantResponsesCollectedBy.SURGEON;
                case ResponsesCollectedByEnm.TEACHER:
                    return DocConstantResponsesCollectedBy.TEACHER;
                case ResponsesCollectedByEnm.UNCLEAR:
                    return DocConstantResponsesCollectedBy.UNCLEAR;
                case ResponsesCollectedByEnm.UNPAID_CAREGIVER_FAMILY:
                    return DocConstantResponsesCollectedBy.UNPAID_CAREGIVER_FAMILY;
                default:
                    return string.Empty;
            }
        }
    }

    public sealed partial class DocConstantResponsesCollectedBy : IEquatable<DocConstantResponsesCollectedBy>, IEqualityComparer<DocConstantResponsesCollectedBy>
    {
        public const string CLINICAL_CARE_PROVIDER = "Clinician/Care Provider";
        public const string LABORATORY_TECH = "Laboratory Tech";
        public const string MULTIPLE = "Multiple";
        public const string NR = "NR";
        public const string OBSERVE = "Observer";
        public const string PAID_CAREGIVER_STAFF = "Paid caregiver/Staff";
        public const string RESEARCHER = "Researcher";
        public const string SELF = "Self";
        public const string STUDY_INVESTIGATOR = "Study Investigator";
        public const string SURGEON = "Surgeon";
        public const string TEACHER = "Teacher";
        public const string UNCLEAR = "Unclear";
        public const string UNPAID_CAREGIVER_FAMILY = "Unpaid caregiver/Family";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantResponsesCollectedBy).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantResponsesCollectedBy(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantResponsesCollectedBy(string Val) => new DocConstantResponsesCollectedBy(Val);

        public static implicit operator string(DocConstantResponsesCollectedBy item) => item?.Value ?? string.Empty;

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantResponsesCollectedBy obj) => this == obj;

        public static bool operator ==(DocConstantResponsesCollectedBy x, DocConstantResponsesCollectedBy y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantResponsesCollectedBy x, DocConstantResponsesCollectedBy y) => x == y;
        
        public static bool operator !=(DocConstantResponsesCollectedBy x, DocConstantResponsesCollectedBy y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantResponsesCollectedBy))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantResponsesCollectedBy) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantResponsesCollectedBy obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
