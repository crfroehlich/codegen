//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum InterventionScheduleEnm
    {
        [EnumMember(Value = DocConstantInterventionSchedule.AFTERNOON)]
        AFTERNOON = 1382,
        [EnumMember(Value = DocConstantInterventionSchedule.BEDTIME)]
        BEDTIME = 1387,
        [EnumMember(Value = DocConstantInterventionSchedule.BREAKFAST)]
        BREAKFAST = 1392,
        [EnumMember(Value = DocConstantInterventionSchedule.DAILY)]
        DAILY = 1397,
        [EnumMember(Value = DocConstantInterventionSchedule.DINNER)]
        DINNER = 1402,
        [EnumMember(Value = DocConstantInterventionSchedule.EVENING)]
        EVENING = 1407,
        [EnumMember(Value = DocConstantInterventionSchedule.INTRAOPERATIVE)]
        INTRAOPERATIVE = 1412,
        [EnumMember(Value = DocConstantInterventionSchedule.LUNCH)]
        LUNCH = 1417,
        [EnumMember(Value = DocConstantInterventionSchedule.MORNING)]
        MORNING = 1422,
        [EnumMember(Value = DocConstantInterventionSchedule.PERI_OP)]
        PERI_OP = 1427,
        [EnumMember(Value = DocConstantInterventionSchedule.POST_BREAKFAST)]
        POST_BREAKFAST = 1432,
        [EnumMember(Value = DocConstantInterventionSchedule.POST_DIAGNOSTIC)]
        POST_DIAGNOSTIC = 1437,
        [EnumMember(Value = DocConstantInterventionSchedule.POST_DINNER)]
        POST_DINNER = 1442,
        [EnumMember(Value = DocConstantInterventionSchedule.POST_LUNCH)]
        POST_LUNCH = 1447,
        [EnumMember(Value = DocConstantInterventionSchedule.POST_PRANDIAL)]
        POST_PRANDIAL = 1452,
        [EnumMember(Value = DocConstantInterventionSchedule.PRANDIAL)]
        PRANDIAL = 1457,
        [EnumMember(Value = DocConstantInterventionSchedule.PRE_BREAKFAST)]
        PRE_BREAKFAST = 1462,
        [EnumMember(Value = DocConstantInterventionSchedule.PRE_DIAGNOSTIC)]
        PRE_DIAGNOSTIC = 1467,
        [EnumMember(Value = DocConstantInterventionSchedule.PRE_DINNER)]
        PRE_DINNER = 1472,
        [EnumMember(Value = DocConstantInterventionSchedule.PRE_LUNCH)]
        PRE_LUNCH = 1477,
        [EnumMember(Value = DocConstantInterventionSchedule.PRE_POST_OP)]
        PRE_POST_OP = 1482,
        [EnumMember(Value = DocConstantInterventionSchedule.PRE_PRANDIAL)]
        PRE_PRANDIAL = 1487
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this InterventionScheduleEnm instance)
        {
            switch(instance) 
            {
                case InterventionScheduleEnm.AFTERNOON:
                    return DocConstantInterventionSchedule.AFTERNOON;
                case InterventionScheduleEnm.BEDTIME:
                    return DocConstantInterventionSchedule.BEDTIME;
                case InterventionScheduleEnm.BREAKFAST:
                    return DocConstantInterventionSchedule.BREAKFAST;
                case InterventionScheduleEnm.DAILY:
                    return DocConstantInterventionSchedule.DAILY;
                case InterventionScheduleEnm.DINNER:
                    return DocConstantInterventionSchedule.DINNER;
                case InterventionScheduleEnm.EVENING:
                    return DocConstantInterventionSchedule.EVENING;
                case InterventionScheduleEnm.INTRAOPERATIVE:
                    return DocConstantInterventionSchedule.INTRAOPERATIVE;
                case InterventionScheduleEnm.LUNCH:
                    return DocConstantInterventionSchedule.LUNCH;
                case InterventionScheduleEnm.MORNING:
                    return DocConstantInterventionSchedule.MORNING;
                case InterventionScheduleEnm.PERI_OP:
                    return DocConstantInterventionSchedule.PERI_OP;
                case InterventionScheduleEnm.POST_BREAKFAST:
                    return DocConstantInterventionSchedule.POST_BREAKFAST;
                case InterventionScheduleEnm.POST_DIAGNOSTIC:
                    return DocConstantInterventionSchedule.POST_DIAGNOSTIC;
                case InterventionScheduleEnm.POST_DINNER:
                    return DocConstantInterventionSchedule.POST_DINNER;
                case InterventionScheduleEnm.POST_LUNCH:
                    return DocConstantInterventionSchedule.POST_LUNCH;
                case InterventionScheduleEnm.POST_PRANDIAL:
                    return DocConstantInterventionSchedule.POST_PRANDIAL;
                case InterventionScheduleEnm.PRANDIAL:
                    return DocConstantInterventionSchedule.PRANDIAL;
                case InterventionScheduleEnm.PRE_BREAKFAST:
                    return DocConstantInterventionSchedule.PRE_BREAKFAST;
                case InterventionScheduleEnm.PRE_DIAGNOSTIC:
                    return DocConstantInterventionSchedule.PRE_DIAGNOSTIC;
                case InterventionScheduleEnm.PRE_DINNER:
                    return DocConstantInterventionSchedule.PRE_DINNER;
                case InterventionScheduleEnm.PRE_LUNCH:
                    return DocConstantInterventionSchedule.PRE_LUNCH;
                case InterventionScheduleEnm.PRE_POST_OP:
                    return DocConstantInterventionSchedule.PRE_POST_OP;
                case InterventionScheduleEnm.PRE_PRANDIAL:
                    return DocConstantInterventionSchedule.PRE_PRANDIAL;
                default:
                    return string.Empty;
            }
        }
    }

    public sealed partial class DocConstantInterventionSchedule : IEquatable<DocConstantInterventionSchedule>, IEqualityComparer<DocConstantInterventionSchedule>
    {
        public const string AFTERNOON = "Afternoon";
        public const string BEDTIME = "Bedtime";
        public const string BREAKFAST = "Breakfast";
        public const string DAILY = "Daily";
        public const string DINNER = "Dinner";
        public const string EVENING = "Evening";
        public const string INTRAOPERATIVE = "Intraoperative";
        public const string LUNCH = "Lunch";
        public const string MORNING = "Morning";
        public const string PERI_OP = "Peri-op";
        public const string POST_BREAKFAST = "Post-Breakfast";
        public const string POST_DIAGNOSTIC = "Post-Diagnostic";
        public const string POST_DINNER = "Post-Dinner";
        public const string POST_LUNCH = "Post-Lunch";
        public const string POST_PRANDIAL = "Post-Prandial";
        public const string PRANDIAL = "Prandial";
        public const string PRE_BREAKFAST = "Pre-Breakfast";
        public const string PRE_DIAGNOSTIC = "Pre-Diagnostic";
        public const string PRE_DINNER = "Pre-Dinner";
        public const string PRE_LUNCH = "Pre-Lunch";
        public const string PRE_POST_OP = "Pre/Post-op";
        public const string PRE_PRANDIAL = "Pre-Prandial";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantInterventionSchedule).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantInterventionSchedule(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantInterventionSchedule(string Val) => new DocConstantInterventionSchedule(Val);

        public static implicit operator string(DocConstantInterventionSchedule item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantInterventionSchedule(InterventionScheduleEnm Val) => new DocConstantInterventionSchedule(Val.ToEnumString());

        public static explicit operator InterventionScheduleEnm(DocConstantInterventionSchedule item)
        {
            Enum.TryParse<InterventionScheduleEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantInterventionSchedule obj) => this == obj;

        public static bool operator ==(DocConstantInterventionSchedule x, DocConstantInterventionSchedule y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantInterventionSchedule x, DocConstantInterventionSchedule y) => x == y;
        
        public static bool operator !=(DocConstantInterventionSchedule x, DocConstantInterventionSchedule y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantInterventionSchedule))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantInterventionSchedule) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantInterventionSchedule obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
