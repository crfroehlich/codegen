//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by a CodeSmith Generator project.
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ValueTypeEnm
    {
        [EnumMember(Value = DocConstantValueType.ASSOCIATIONMEASURE)]
        ASSOCIATIONMEASURE,
        [EnumMember(Value = DocConstantValueType.BOOLEAN)]
        BOOLEAN,
        [EnumMember(Value = DocConstantValueType.CALENDARDATE)]
        CALENDARDATE,
        [EnumMember(Value = DocConstantValueType.CALENDARDATES)]
        CALENDARDATES,
        [EnumMember(Value = DocConstantValueType.CONTACT)]
        CONTACT,
        [EnumMember(Value = DocConstantValueType.DATETIME)]
        DATETIME,
        [EnumMember(Value = DocConstantValueType.DATETIMERANGE)]
        DATETIMERANGE,
        [EnumMember(Value = DocConstantValueType.DECIMAL)]
        DECIMAL,
        [EnumMember(Value = DocConstantValueType.DECIMALRANGE)]
        DECIMALRANGE,
        [EnumMember(Value = DocConstantValueType.DESIGNNESTEDSTUDYIDLINK)]
        DESIGNNESTEDSTUDYIDLINK,
        [EnumMember(Value = DocConstantValueType.EVENTCOUNTS)]
        EVENTCOUNTS,
        [EnumMember(Value = DocConstantValueType.FACILITY)]
        FACILITY,
        [EnumMember(Value = DocConstantValueType.FIXEDDOSEINTERVENTION)]
        FIXEDDOSEINTERVENTION,
        [EnumMember(Value = DocConstantValueType.FLAG)]
        FLAG,
        [EnumMember(Value = DocConstantValueType.FUNDING)]
        FUNDING,
        [EnumMember(Value = DocConstantValueType.INTEGER)]
        INTEGER,
        [EnumMember(Value = DocConstantValueType.INTERVAL)]
        INTERVAL,
        [EnumMember(Value = DocConstantValueType.INTERVALS)]
        INTERVALS,
        [EnumMember(Value = DocConstantValueType.LOOKUP)]
        LOOKUP,
        [EnumMember(Value = DocConstantValueType.MEMO)]
        MEMO,
        [EnumMember(Value = DocConstantValueType.NPERSONS)]
        NPERSONS,
        [EnumMember(Value = DocConstantValueType.PARTICIPANT)]
        PARTICIPANT,
        [EnumMember(Value = DocConstantValueType.PARTICIPANTS)]
        PARTICIPANTS,
        [EnumMember(Value = DocConstantValueType.POPULATIONANALYZED)]
        POPULATIONANALYZED,
        [EnumMember(Value = DocConstantValueType.PVALUE)]
        PVALUE,
        [EnumMember(Value = DocConstantValueType.RATE)]
        RATE,
        [EnumMember(Value = DocConstantValueType.SETTINGLOCATION)]
        SETTINGLOCATION,
        [EnumMember(Value = DocConstantValueType.SETTINGLOCATIONTOTAL)]
        SETTINGLOCATIONTOTAL,
        [EnumMember(Value = DocConstantValueType.STUDYDOC)]
        STUDYDOC,
        [EnumMember(Value = DocConstantValueType.STUDYOBJECTIVE)]
        STUDYOBJECTIVE,
        [EnumMember(Value = DocConstantValueType.STUDYREFERENCE)]
        STUDYREFERENCE,
        [EnumMember(Value = DocConstantValueType.SUBGROUPDESCRIPTOR)]
        SUBGROUPDESCRIPTOR,
        [EnumMember(Value = DocConstantValueType.TIMEPOINT)]
        TIMEPOINT,
        [EnumMember(Value = DocConstantValueType.TIMEPOINTS)]
        TIMEPOINTS,
        [EnumMember(Value = DocConstantValueType.UNCOLLECTEDVALUE)]
        UNCOLLECTEDVALUE,
        [EnumMember(Value = DocConstantValueType.UNITRANGE)]
        UNITRANGE,
        [EnumMember(Value = DocConstantValueType.UNITS)]
        UNITS,
        [EnumMember(Value = DocConstantValueType.UNITSRANGE)]
        UNITSRANGE,
        [EnumMember(Value = DocConstantValueType.UNITVALUE)]
        UNITVALUE,
        [EnumMember(Value = DocConstantValueType.YESNONA)]
        YESNONA
    }
    
    public sealed partial class DocConstantValueType
    {
        public const string ASSOCIATIONMEASURE = "AssociationMeasure";
        public const string BOOLEAN = "Boolean";
        public const string CALENDARDATE = "CalendarDate";
        public const string CALENDARDATES = "CalendarDates";
        public const string CONTACT = "Contact";
        public const string DATETIME = "DateTime";
        public const string DATETIMERANGE = "DateTimeRange";
        public const string DECIMAL = "Decimal";
        public const string DECIMALRANGE = "DecimalRange";
        public const string DESIGNNESTEDSTUDYIDLINK = "DesignNestedStudyIdLink";
        public const string EVENTCOUNTS = "EventCounts";
        public const string FACILITY = "Facility";
        public const string FIXEDDOSEINTERVENTION = "FixedDoseIntervention";
        public const string FLAG = "Flag";
        public const string FUNDING = "Funding";
        public const string INTEGER = "Integer";
        public const string INTERVAL = "Interval";
        public const string INTERVALS = "Intervals";
        public const string LOOKUP = "Lookup";
        public const string MEMO = "Memo";
        public const string NPERSONS = "NPersons";
        public const string PARTICIPANT = "Participant";
        public const string PARTICIPANTS = "Participants";
        public const string POPULATIONANALYZED = "PopulationAnalyzed";
        public const string PVALUE = "PValue";
        public const string RATE = "Rate";
        public const string SETTINGLOCATION = "SettingLocation";
        public const string SETTINGLOCATIONTOTAL = "SettingLocationTotal";
        public const string STUDYDOC = "StudyDoc";
        public const string STUDYOBJECTIVE = "StudyObjective";
        public const string STUDYREFERENCE = "StudyReference";
        public const string SUBGROUPDESCRIPTOR = "SubgroupDescriptor";
        public const string TIMEPOINT = "Timepoint";
        public const string TIMEPOINTS = "Timepoints";
        public const string UNCOLLECTEDVALUE = "UncollectedValue";
        public const string UNITRANGE = "UnitRange";
        public const string UNITS = "Units";
        public const string UNITSRANGE = "UnitsRange";
        public const string UNITVALUE = "UnitValue";
        public const string YESNONA = "YesNoNa";
        
        #region Internals
        
        private static List<string> _all;
        
        public static List<string> All => _all ?? (_all = typeof(DocConstantValueType).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        /// <summary>
        ///    The string value of the current instance
        /// </summary>
        private readonly string Value;

        /// <summary>
        ///    The enum constructor
        /// </summary>
        /// <param name="ItemName">Name of the item.</param>
        private DocConstantValueType(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        /// <summary>
        /// Determines if the Constant contains an exact match (case insensitive) for the name
        /// </summary>
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        /// <summary>
        ///    Implicit cast to Enum
        /// </summary>
        /// <param name="Val">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator DocConstantValueType(string Val)
        {
            return new DocConstantValueType(Val);
        }

        /// <summary>
        ///    Implicit cast to string
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator string(DocConstantValueType item)
        {
            return item?.Value ?? string.Empty;
        }

        /// <summary>
        ///    Override of ToString
        /// </summary>
        /// <returns>A <see cref="System.String" /> that represents this instance.</returns>
        public override string ToString()
        {
            return Value;
        }

        #endregion Internals

        #region IEquatable (DocConstantValueType)

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public bool Equals(DocConstantValueType obj)
        {
            return this == obj;
        }

        /// <summary>
        ///    == Equality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator ==(DocConstantValueType ft1, DocConstantValueType ft2)
        {
            //do a string comparison on the fieldtypes
            return string.Equals(Convert.ToString(ft1), Convert.ToString(ft2), StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        ///    != Inequality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator !=(DocConstantValueType ft1, DocConstantValueType ft2)
        {
            return !(ft1 == ft2);
        }

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantValueType))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantValueType) obj;
            }
            return ret;
        }

        /// <summary>
        ///    Get Hash Code
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode()
        {
            var ret = 23;
            const int prime = 37;
            ret = (ret * prime) + Value.GetHashCode();
            ret = (ret * prime) + All.GetHashCode();
            return ret;
        }

        #endregion IEquatable (DocConstantValueType)
    }
}