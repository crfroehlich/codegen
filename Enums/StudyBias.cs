//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StudyBiasEnm
    {
        [EnumMember(Value = DocConstantStudyBias.AHRQ), SCDescript(DocConstantStudyBias.AHRQ), SSDescript(DocConstantStudyBias.AHRQ), SCDisplay(Name = DocConstantStudyBias.AHRQ)]
        AHRQ = 3092,
        [EnumMember(Value = DocConstantStudyBias.COMPLIANCE), SCDescript(DocConstantStudyBias.COMPLIANCE), SSDescript(DocConstantStudyBias.COMPLIANCE), SCDisplay(Name = DocConstantStudyBias.COMPLIANCE)]
        COMPLIANCE = 3097,
        [EnumMember(Value = DocConstantStudyBias.GRADE), SCDescript(DocConstantStudyBias.GRADE), SSDescript(DocConstantStudyBias.GRADE), SCDisplay(Name = DocConstantStudyBias.GRADE)]
        GRADE = 3102,
        [EnumMember(Value = DocConstantStudyBias.JADAD), SCDescript(DocConstantStudyBias.JADAD), SSDescript(DocConstantStudyBias.JADAD), SCDisplay(Name = DocConstantStudyBias.JADAD)]
        JADAD = 3107,
        [EnumMember(Value = DocConstantStudyBias.ROB), SCDescript(DocConstantStudyBias.ROB), SSDescript(DocConstantStudyBias.ROB), SCDisplay(Name = DocConstantStudyBias.ROB)]
        ROB = 3112
    }
    
    public static partial class EnumExtensions
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static string ToEnumString(this StudyBiasEnm instance)
        {
            switch(instance)
            {
                case StudyBiasEnm.AHRQ:
                    return DocConstantStudyBias.AHRQ;
                case StudyBiasEnm.COMPLIANCE:
                    return DocConstantStudyBias.COMPLIANCE;
                case StudyBiasEnm.GRADE:
                    return DocConstantStudyBias.GRADE;
                case StudyBiasEnm.JADAD:
                    return DocConstantStudyBias.JADAD;
                case StudyBiasEnm.ROB:
                    return DocConstantStudyBias.ROB;
                default:
                    return string.Empty;
            }
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static string ToEnumString(this StudyBiasEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantStudyBias : IEquatable<DocConstantStudyBias>, IEqualityComparer<DocConstantStudyBias>
    {
        public const string AHRQ = "AHRQ";
        public const string COMPLIANCE = "Compliance";
        public const string GRADE = "GRADE";
        public const string JADAD = "JADAD";
        public const string ROB = "ROB";
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private static List<string> _all;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> All => _all ?? (_all = typeof(DocConstantStudyBias).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private readonly string Value;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private DocConstantStudyBias(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static implicit operator DocConstantStudyBias(string Val) => new DocConstantStudyBias(Val);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static implicit operator string(DocConstantStudyBias item) => item?.Value ?? string.Empty;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator DocConstantStudyBias(StudyBiasEnm Val) => new DocConstantStudyBias(Val.ToEnumString());
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator StudyBiasEnm(DocConstantStudyBias item)
        {
            Enum.TryParse<StudyBiasEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override string ToString() => Value;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Equals(DocConstantStudyBias obj) => this == obj;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static bool operator ==(DocConstantStudyBias x, DocConstantStudyBias y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Equals(DocConstantStudyBias x, DocConstantStudyBias y) => x == y;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static bool operator !=(DocConstantStudyBias x, DocConstantStudyBias y) => !(x == y);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantStudyBias))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantStudyBias) obj;
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int GetHashCode(DocConstantStudyBias obj) => obj?.GetHashCode() ?? -17;
    }
}
