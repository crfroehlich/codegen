//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by a CodeSmith Generator project.
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RoleEnm
    {
        [EnumMember(Value = DocConstantRole.ANALYST_USERS)]
        ANALYST_USERS,
        [EnumMember(Value = DocConstantRole.AUDIT_USERS)]
        AUDIT_USERS,
        [EnumMember(Value = DocConstantRole.BINDINGS_ADMINS)]
        BINDINGS_ADMINS,
        [EnumMember(Value = DocConstantRole.BINDINGS_USERS)]
        BINDINGS_USERS,
        [EnumMember(Value = DocConstantRole.CLIENT_ADMINS)]
        CLIENT_ADMINS,
        [EnumMember(Value = DocConstantRole.CLIENT_SOLUTIONS)]
        CLIENT_SOLUTIONS,
        [EnumMember(Value = DocConstantRole.CONSULTANT_USERS)]
        CONSULTANT_USERS,
        [EnumMember(Value = DocConstantRole.DEFAULT_USERS)]
        DEFAULT_USERS,
        [EnumMember(Value = DocConstantRole.DIVISION_ADMINS)]
        DIVISION_ADMINS,
        [EnumMember(Value = DocConstantRole.DRE_ADMINS)]
        DRE_ADMINS,
        [EnumMember(Value = DocConstantRole.DRE_SUPER_ADMIN)]
        DRE_SUPER_ADMIN,
        [EnumMember(Value = DocConstantRole.MARKETING_USERS)]
        MARKETING_USERS,
        [EnumMember(Value = DocConstantRole.USER_ADMINS)]
        USER_ADMINS
    }
    
    public sealed partial class DocConstantRole
    {
        public const string ANALYST_USERS = "Analyst Users";
        public const string AUDIT_USERS = "Audit Users";
        public const string BINDINGS_ADMINS = "Bindings Admins";
        public const string BINDINGS_USERS = "Bindings Users";
        public const string CLIENT_ADMINS = "Client Admins";
        public const string CLIENT_SOLUTIONS = "Client Solutions";
        public const string CONSULTANT_USERS = "Consultant Users";
        public const string DEFAULT_USERS = "Users (Default)";
        public const string DIVISION_ADMINS = "Division Admins";
        public const string DRE_ADMINS = "DrE Admins";
        public const string DRE_SUPER_ADMIN = "dre_super_admin";
        public const string MARKETING_USERS = "Marketing Users";
        public const string USER_ADMINS = "User Admins";
        
        #region Internals
        
        private static List<string> _all;
        
        public static List<string> All => _all ?? (_all = typeof(DocConstantRole).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        /// <summary>
        ///    The string value of the current instance
        /// </summary>
        private readonly string Value;

        /// <summary>
        ///    The enum constructor
        /// </summary>
        /// <param name="ItemName">Name of the item.</param>
        private DocConstantRole(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        /// <summary>
        /// Determines if the Constant contains an exact match (case insensitive) for the name
        /// </summary>
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        /// <summary>
        ///    Implicit cast to Enum
        /// </summary>
        /// <param name="Val">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator DocConstantRole(string Val)
        {
            return new DocConstantRole(Val);
        }

        /// <summary>
        ///    Implicit cast to string
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator string(DocConstantRole item)
        {
            return item?.Value ?? string.Empty;
        }

        /// <summary>
        ///    Override of ToString
        /// </summary>
        /// <returns>A <see cref="System.String" /> that represents this instance.</returns>
        public override string ToString()
        {
            return Value;
        }

        #endregion Internals

        #region IEquatable (DocConstantRole)

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public bool Equals(DocConstantRole obj)
        {
            return this == obj;
        }

        /// <summary>
        ///    == Equality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator ==(DocConstantRole ft1, DocConstantRole ft2)
        {
            //do a string comparison on the fieldtypes
            return string.Equals(Convert.ToString(ft1), Convert.ToString(ft2), StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        ///    != Inequality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator !=(DocConstantRole ft1, DocConstantRole ft2)
        {
            return !(ft1 == ft2);
        }

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantRole))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantRole) obj;
            }
            return ret;
        }

        /// <summary>
        ///    Get Hash Code
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode()
        {
            var ret = 23;
            const int prime = 37;
            ret = (ret * prime) + Value.GetHashCode();
            ret = (ret * prime) + All.GetHashCode();
            return ret;
        }

        #endregion IEquatable (DocConstantRole)
    }
}