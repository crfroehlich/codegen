//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StudyDocumentTypeEnm
    {
        [EnumMember(Value = DocConstantStudyDocumentType.CLINICAL_STUDY_REPORT)]
        CLINICAL_STUDY_REPORT,
        [EnumMember(Value = DocConstantStudyDocumentType.CLINICAL_TRIALS_GOV)]
        CLINICAL_TRIALS_GOV,
        [EnumMember(Value = DocConstantStudyDocumentType.DOC_DATA_DIRECT_META_ANALYSIS)]
        DOC_DATA_DIRECT_META_ANALYSIS,
        [EnumMember(Value = DocConstantStudyDocumentType.FDA_ADVISORY_COMMITTEE_SUBMISSION)]
        FDA_ADVISORY_COMMITTEE_SUBMISSION,
        [EnumMember(Value = DocConstantStudyDocumentType.FDA_APPROVAL_DOCUMENTS)]
        FDA_APPROVAL_DOCUMENTS,
        [EnumMember(Value = DocConstantStudyDocumentType.GOVERNMENT_REPORT)]
        GOVERNMENT_REPORT,
        [EnumMember(Value = DocConstantStudyDocumentType.GUIDELINE)]
        GUIDELINE,
        [EnumMember(Value = DocConstantStudyDocumentType.JOURNAL_ARTICLE)]
        JOURNAL_ARTICLE,
        [EnumMember(Value = DocConstantStudyDocumentType.LETTER_TO_THE_EDITOR)]
        LETTER_TO_THE_EDITOR,
        [EnumMember(Value = DocConstantStudyDocumentType.MEETING_ABSTRACT)]
        MEETING_ABSTRACT,
        [EnumMember(Value = DocConstantStudyDocumentType.POSTER)]
        POSTER,
        [EnumMember(Value = DocConstantStudyDocumentType.POWER_POINT)]
        POWER_POINT,
        [EnumMember(Value = DocConstantStudyDocumentType.PRESS_RELEASE)]
        PRESS_RELEASE,
        [EnumMember(Value = DocConstantStudyDocumentType.REVIEW)]
        REVIEW,
        [EnumMember(Value = DocConstantStudyDocumentType.SYSTEMATIC_REVIEW_META_ANALYSIS)]
        SYSTEMATIC_REVIEW_META_ANALYSIS,
        [EnumMember(Value = DocConstantStudyDocumentType.THESIS)]
        THESIS
    }
    
    public sealed partial class DocConstantStudyDocumentType
    {
        public const string CLINICAL_STUDY_REPORT = "Clinical Study Report";
        public const string CLINICAL_TRIALS_GOV = "Compliance";
        public const string DOC_DATA_DIRECT_META_ANALYSIS = "Meta Analysis";
        public const string FDA_ADVISORY_COMMITTEE_SUBMISSION = "FDA Advisory Committee Submission";
        public const string FDA_APPROVAL_DOCUMENTS = "FDA Approval Documents";
        public const string GOVERNMENT_REPORT = "Government Report";
        public const string GUIDELINE = "Guideline";
        public const string JOURNAL_ARTICLE = "Journal Article";
        public const string LETTER_TO_THE_EDITOR = "Letter to the Editor";
        public const string MEETING_ABSTRACT = "Meeting Abstract";
        public const string POSTER = "Poster";
        public const string POWER_POINT = "PowerPoint";
        public const string PRESS_RELEASE = "Press Release";
        public const string REVIEW = "Review";
        public const string SYSTEMATIC_REVIEW_META_ANALYSIS = "Systematic Review & Meta Analysis";
        public const string THESIS = "Thesis";
        
        #region Internals
        
        private static List<string> _all;
        
        public static List<string> All => _all ?? (_all = typeof(DocConstantStudyDocumentType).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        /// <summary>
        ///    The string value of the current instance
        /// </summary>
        private readonly string Value;

        /// <summary>
        ///    The enum constructor
        /// </summary>
        /// <param name="ItemName">Name of the item.</param>
        private DocConstantStudyDocumentType(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        /// <summary>
        /// Determines if the Constant contains an exact match (case insensitive) for the name
        /// </summary>
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        /// <summary>
        ///    Implicit cast to Enum
        /// </summary>
        /// <param name="Val">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator DocConstantStudyDocumentType(string Val)
        {
            return new DocConstantStudyDocumentType(Val);
        }

        /// <summary>
        ///    Implicit cast to string
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator string(DocConstantStudyDocumentType item)
        {
            return item?.Value ?? string.Empty;
        }

        /// <summary>
        ///    Override of ToString
        /// </summary>
        /// <returns>A <see cref="System.String" /> that represents this instance.</returns>
        public override string ToString()
        {
            return Value;
        }

        #endregion Internals

        #region IEquatable (DocConstantStudyDocumentType)

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public bool Equals(DocConstantStudyDocumentType obj)
        {
            return this == obj;
        }

        /// <summary>
        ///    == Equality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator ==(DocConstantStudyDocumentType ft1, DocConstantStudyDocumentType ft2)
        {
            //do a string comparison on the fieldtypes
            return string.Equals(Convert.ToString(ft1), Convert.ToString(ft2), StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        ///    != Inequality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator !=(DocConstantStudyDocumentType ft1, DocConstantStudyDocumentType ft2)
        {
            return !(ft1 == ft2);
        }

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantStudyDocumentType))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantStudyDocumentType) obj;
            }
            return ret;
        }

        /// <summary>
        ///    Get Hash Code
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode()
        {
            var ret = 23;
            const int prime = 37;
            ret = (ret * prime) + Value.GetHashCode();
            ret = (ret * prime) + All.GetHashCode();
            return ret;
        }

        #endregion IEquatable (DocConstantStudyDocumentType)
    }
}
