//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StudyTypeEnm
    {
        [EnumMember(Value = DocConstantStudyType.CAUSATION_ETIOLOGY), SCDescript(DocConstantStudyType.CAUSATION_ETIOLOGY), SSDescript(DocConstantStudyType.CAUSATION_ETIOLOGY), SCDisplay(Name = DocConstantStudyType.CAUSATION_ETIOLOGY)]
        CAUSATION_ETIOLOGY = 3688,
        [EnumMember(Value = DocConstantStudyType.DIAGNOSIS), SCDescript(DocConstantStudyType.DIAGNOSIS), SSDescript(DocConstantStudyType.DIAGNOSIS), SCDisplay(Name = DocConstantStudyType.DIAGNOSIS)]
        DIAGNOSIS = 3693,
        [EnumMember(Value = DocConstantStudyType.HARM), SCDescript(DocConstantStudyType.HARM), SSDescript(DocConstantStudyType.HARM), SCDisplay(Name = DocConstantStudyType.HARM)]
        HARM = 3698,
        [EnumMember(Value = DocConstantStudyType.MODELING), SCDescript(DocConstantStudyType.MODELING), SSDescript(DocConstantStudyType.MODELING), SCDisplay(Name = DocConstantStudyType.MODELING)]
        MODELING = 3703,
        [EnumMember(Value = DocConstantStudyType.OTHER), SCDescript(DocConstantStudyType.OTHER), SSDescript(DocConstantStudyType.OTHER), SCDisplay(Name = DocConstantStudyType.OTHER)]
        OTHER = 3708,
        [EnumMember(Value = DocConstantStudyType.PREVALENCE), SCDescript(DocConstantStudyType.PREVALENCE), SSDescript(DocConstantStudyType.PREVALENCE), SCDisplay(Name = DocConstantStudyType.PREVALENCE)]
        PREVALENCE = 3713,
        [EnumMember(Value = DocConstantStudyType.PREVENTION_RISK), SCDescript(DocConstantStudyType.PREVENTION_RISK), SSDescript(DocConstantStudyType.PREVENTION_RISK), SCDisplay(Name = DocConstantStudyType.PREVENTION_RISK)]
        PREVENTION_RISK = 3718,
        [EnumMember(Value = DocConstantStudyType.PROGNOSIS), SCDescript(DocConstantStudyType.PROGNOSIS), SSDescript(DocConstantStudyType.PROGNOSIS), SCDisplay(Name = DocConstantStudyType.PROGNOSIS)]
        PROGNOSIS = 3723,
        [EnumMember(Value = DocConstantStudyType.THERAPY), SCDescript(DocConstantStudyType.THERAPY), SSDescript(DocConstantStudyType.THERAPY), SCDisplay(Name = DocConstantStudyType.THERAPY)]
        THERAPY = 3728
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this StudyTypeEnm instance)
        {
            switch(instance)
            {
                case StudyTypeEnm.CAUSATION_ETIOLOGY:
                    return DocConstantStudyType.CAUSATION_ETIOLOGY;
                case StudyTypeEnm.DIAGNOSIS:
                    return DocConstantStudyType.DIAGNOSIS;
                case StudyTypeEnm.HARM:
                    return DocConstantStudyType.HARM;
                case StudyTypeEnm.MODELING:
                    return DocConstantStudyType.MODELING;
                case StudyTypeEnm.OTHER:
                    return DocConstantStudyType.OTHER;
                case StudyTypeEnm.PREVALENCE:
                    return DocConstantStudyType.PREVALENCE;
                case StudyTypeEnm.PREVENTION_RISK:
                    return DocConstantStudyType.PREVENTION_RISK;
                case StudyTypeEnm.PROGNOSIS:
                    return DocConstantStudyType.PROGNOSIS;
                case StudyTypeEnm.THERAPY:
                    return DocConstantStudyType.THERAPY;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this StudyTypeEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantStudyType : IEquatable<DocConstantStudyType>, IEqualityComparer<DocConstantStudyType>
    {
        public const string CAUSATION_ETIOLOGY = "Causation/Etiology";
        public const string DIAGNOSIS = "Diagnosis";
        public const string HARM = "Harm";
        public const string MODELING = "Modeling";
        public const string OTHER = "Other";
        public const string PREVALENCE = "Prevalence";
        public const string PREVENTION_RISK = "Prevention/Risk";
        public const string PROGNOSIS = "Prognosis";
        public const string THERAPY = "Therapy";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantStudyType).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantStudyType(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantStudyType(string Val) => new DocConstantStudyType(Val);

        public static implicit operator string(DocConstantStudyType item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantStudyType(StudyTypeEnm Val) => new DocConstantStudyType(Val.ToEnumString());

        public static explicit operator StudyTypeEnm(DocConstantStudyType item)
        {
            Enum.TryParse<StudyTypeEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantStudyType obj) => this == obj;

        public static bool operator ==(DocConstantStudyType x, DocConstantStudyType y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantStudyType x, DocConstantStudyType y) => x == y;
        
        public static bool operator !=(DocConstantStudyType x, DocConstantStudyType y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantStudyType))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantStudyType) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantStudyType obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
