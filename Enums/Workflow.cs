//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum WorkflowEnm
    {
        [EnumMember(Value = DocConstantWorkflow.AUDIT_ERROR)]
        AUDIT_ERROR = 76351812,
        [EnumMember(Value = DocConstantWorkflow.BAYESIAN_ANALYSIS)]
        BAYESIAN_ANALYSIS = 23395205,
        [EnumMember(Value = DocConstantWorkflow.COHORT_ANALYSIS)]
        COHORT_ANALYSIS = 17686252,
        [EnumMember(Value = DocConstantWorkflow.CUSTOM_REPORT)]
        CUSTOM_REPORT = 120648707,
        [EnumMember(Value = DocConstantWorkflow.DATA_EXPORT)]
        DATA_EXPORT = 22669313,
        [EnumMember(Value = DocConstantWorkflow.DIA_PROJECT)]
        DIA_PROJECT = 76351804,
        [EnumMember(Value = DocConstantWorkflow.DIA_REPORT)]
        DIA_REPORT = 76351811,
        [EnumMember(Value = DocConstantWorkflow.DOC_DATA_PROJECT)]
        DOC_DATA_PROJECT = 76351800,
        [EnumMember(Value = DocConstantWorkflow.DOC_EXTRACT_PROJECT)]
        DOC_EXTRACT_PROJECT = 76351802,
        [EnumMember(Value = DocConstantWorkflow.DOC_LIBRARY_PROJECT)]
        DOC_LIBRARY_PROJECT = 76351801,
        [EnumMember(Value = DocConstantWorkflow.EVIDENCE_ON_DEMAND)]
        EVIDENCE_ON_DEMAND = 76351619,
        [EnumMember(Value = DocConstantWorkflow.EVIDENCE_STATEMENTS)]
        EVIDENCE_STATEMENTS = 146157857,
        [EnumMember(Value = DocConstantWorkflow.EVIDENCE_TABLE)]
        EVIDENCE_TABLE = 10483144,
        [EnumMember(Value = DocConstantWorkflow.FAQ)]
        FAQ = 146157861,
        [EnumMember(Value = DocConstantWorkflow.FILTER)]
        FILTER = 10483149,
        [EnumMember(Value = DocConstantWorkflow.FRAMED_QUESTION_DATA_SET)]
        FRAMED_QUESTION_DATA_SET = 76351798,
        [EnumMember(Value = DocConstantWorkflow.FRAMED_QUESTION_LIBRARY)]
        FRAMED_QUESTION_LIBRARY = 76351799,
        [EnumMember(Value = DocConstantWorkflow.FREQUENTIST_ANALYSIS)]
        FREQUENTIST_ANALYSIS = 21595126,
        [EnumMember(Value = DocConstantWorkflow.HTA)]
        HTA = 76351809,
        [EnumMember(Value = DocConstantWorkflow.META_ANALYSIS)]
        META_ANALYSIS = 12627091,
        [EnumMember(Value = DocConstantWorkflow.METHODOLOGY_PROJECT)]
        METHODOLOGY_PROJECT = 76351805,
        [EnumMember(Value = DocConstantWorkflow.NAMESET)]
        NAMESET = 17611704,
        [EnumMember(Value = DocConstantWorkflow.ONTOLOGY_PROJECT)]
        ONTOLOGY_PROJECT = 76351803,
        [EnumMember(Value = DocConstantWorkflow.PICO_RATING)]
        PICO_RATING = 76351813,
        [EnumMember(Value = DocConstantWorkflow.R_SNIPPET)]
        R_SNIPPET = 146157859,
        [EnumMember(Value = DocConstantWorkflow.RAPID_REVIEW)]
        RAPID_REVIEW = 76351810,
        [EnumMember(Value = DocConstantWorkflow.RESPONSE_LETTER)]
        RESPONSE_LETTER = 76351808,
        [EnumMember(Value = DocConstantWorkflow.RISK_OF_BIAS)]
        RISK_OF_BIAS = 146157858,
        [EnumMember(Value = DocConstantWorkflow.RMD_SNIPPET)]
        RMD_SNIPPET = 146157860,
        [EnumMember(Value = DocConstantWorkflow.SURVEY_DESIGN)]
        SURVEY_DESIGN = 59620917,
        [EnumMember(Value = DocConstantWorkflow.SURVEY_WIZARD)]
        SURVEY_WIZARD = 59620923,
        [EnumMember(Value = DocConstantWorkflow.SYSTEMATIC_REVIEW)]
        SYSTEMATIC_REVIEW = 76351807,
        [EnumMember(Value = DocConstantWorkflow.TAG)]
        TAG = 76351806,
        [EnumMember(Value = DocConstantWorkflow.VIEW)]
        VIEW = 41790614
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this WorkflowEnm instance)
        {
            switch(instance) 
            {
                case WorkflowEnm.AUDIT_ERROR:
                    return DocConstantWorkflow.AUDIT_ERROR;
                case WorkflowEnm.BAYESIAN_ANALYSIS:
                    return DocConstantWorkflow.BAYESIAN_ANALYSIS;
                case WorkflowEnm.COHORT_ANALYSIS:
                    return DocConstantWorkflow.COHORT_ANALYSIS;
                case WorkflowEnm.CUSTOM_REPORT:
                    return DocConstantWorkflow.CUSTOM_REPORT;
                case WorkflowEnm.DATA_EXPORT:
                    return DocConstantWorkflow.DATA_EXPORT;
                case WorkflowEnm.DIA_PROJECT:
                    return DocConstantWorkflow.DIA_PROJECT;
                case WorkflowEnm.DIA_REPORT:
                    return DocConstantWorkflow.DIA_REPORT;
                case WorkflowEnm.DOC_DATA_PROJECT:
                    return DocConstantWorkflow.DOC_DATA_PROJECT;
                case WorkflowEnm.DOC_EXTRACT_PROJECT:
                    return DocConstantWorkflow.DOC_EXTRACT_PROJECT;
                case WorkflowEnm.DOC_LIBRARY_PROJECT:
                    return DocConstantWorkflow.DOC_LIBRARY_PROJECT;
                case WorkflowEnm.EVIDENCE_ON_DEMAND:
                    return DocConstantWorkflow.EVIDENCE_ON_DEMAND;
                case WorkflowEnm.EVIDENCE_STATEMENTS:
                    return DocConstantWorkflow.EVIDENCE_STATEMENTS;
                case WorkflowEnm.EVIDENCE_TABLE:
                    return DocConstantWorkflow.EVIDENCE_TABLE;
                case WorkflowEnm.FAQ:
                    return DocConstantWorkflow.FAQ;
                case WorkflowEnm.FILTER:
                    return DocConstantWorkflow.FILTER;
                case WorkflowEnm.FRAMED_QUESTION_DATA_SET:
                    return DocConstantWorkflow.FRAMED_QUESTION_DATA_SET;
                case WorkflowEnm.FRAMED_QUESTION_LIBRARY:
                    return DocConstantWorkflow.FRAMED_QUESTION_LIBRARY;
                case WorkflowEnm.FREQUENTIST_ANALYSIS:
                    return DocConstantWorkflow.FREQUENTIST_ANALYSIS;
                case WorkflowEnm.HTA:
                    return DocConstantWorkflow.HTA;
                case WorkflowEnm.META_ANALYSIS:
                    return DocConstantWorkflow.META_ANALYSIS;
                case WorkflowEnm.METHODOLOGY_PROJECT:
                    return DocConstantWorkflow.METHODOLOGY_PROJECT;
                case WorkflowEnm.NAMESET:
                    return DocConstantWorkflow.NAMESET;
                case WorkflowEnm.ONTOLOGY_PROJECT:
                    return DocConstantWorkflow.ONTOLOGY_PROJECT;
                case WorkflowEnm.PICO_RATING:
                    return DocConstantWorkflow.PICO_RATING;
                case WorkflowEnm.R_SNIPPET:
                    return DocConstantWorkflow.R_SNIPPET;
                case WorkflowEnm.RAPID_REVIEW:
                    return DocConstantWorkflow.RAPID_REVIEW;
                case WorkflowEnm.RESPONSE_LETTER:
                    return DocConstantWorkflow.RESPONSE_LETTER;
                case WorkflowEnm.RISK_OF_BIAS:
                    return DocConstantWorkflow.RISK_OF_BIAS;
                case WorkflowEnm.RMD_SNIPPET:
                    return DocConstantWorkflow.RMD_SNIPPET;
                case WorkflowEnm.SURVEY_DESIGN:
                    return DocConstantWorkflow.SURVEY_DESIGN;
                case WorkflowEnm.SURVEY_WIZARD:
                    return DocConstantWorkflow.SURVEY_WIZARD;
                case WorkflowEnm.SYSTEMATIC_REVIEW:
                    return DocConstantWorkflow.SYSTEMATIC_REVIEW;
                case WorkflowEnm.TAG:
                    return DocConstantWorkflow.TAG;
                case WorkflowEnm.VIEW:
                    return DocConstantWorkflow.VIEW;
                default:
                    return string.Empty;
            }
        }
    }

    public sealed partial class DocConstantWorkflow : IEquatable<DocConstantWorkflow>, IEqualityComparer<DocConstantWorkflow>
    {
        public const string AUDIT_ERROR = "Audit Error";
        public const string BAYESIAN_ANALYSIS = "Bayesian NMA";
        public const string COHORT_ANALYSIS = "Cohort Analysis";
        public const string CUSTOM_REPORT = "Custom Report";
        public const string DATA_EXPORT = "Data Export";
        public const string DIA_PROJECT = "DIA Project";
        public const string DIA_REPORT = "DIA Report";
        public const string DOC_DATA_PROJECT = "DOC Data Project";
        public const string DOC_EXTRACT_PROJECT = "DOC Extract Project";
        public const string DOC_LIBRARY_PROJECT = "DOC Library Project";
        public const string EVIDENCE_ON_DEMAND = "Evidence on Demand";
        public const string EVIDENCE_STATEMENTS = "Evidence Statements";
        public const string EVIDENCE_TABLE = "Evidence Table";
        public const string FAQ = "FAQ";
        public const string FILTER = "Filter";
        public const string FRAMED_QUESTION_DATA_SET = "Framed Question Data Set";
        public const string FRAMED_QUESTION_LIBRARY = "Framed Question Library";
        public const string FREQUENTIST_ANALYSIS = "Frequentist NMA";
        public const string HTA = "HTA";
        public const string META_ANALYSIS = "Direct Meta Analysis";
        public const string METHODOLOGY_PROJECT = "Methodology Project";
        public const string NAMESET = "Nameset";
        public const string ONTOLOGY_PROJECT = "Ontology Project";
        public const string PICO_RATING = "PICO Rating";
        public const string R_SNIPPET = "R Snippet";
        public const string RAPID_REVIEW = "Rapid Review";
        public const string RESPONSE_LETTER = "Response Letter";
        public const string RISK_OF_BIAS = "Risk of Bias";
        public const string RMD_SNIPPET = "RMD Snippet";
        public const string SURVEY_DESIGN = "Survey Design";
        public const string SURVEY_WIZARD = "Survery Wizard";
        public const string SYSTEMATIC_REVIEW = "Systematic Review";
        public const string TAG = "Tag";
        public const string VIEW = "View";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantWorkflow).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantWorkflow(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantWorkflow(string Val) => new DocConstantWorkflow(Val);

        public static implicit operator string(DocConstantWorkflow item) => item?.Value ?? string.Empty;

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantWorkflow obj) => this == obj;

        public static bool operator ==(DocConstantWorkflow x, DocConstantWorkflow y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantWorkflow x, DocConstantWorkflow y) => x == y;
        
        public static bool operator !=(DocConstantWorkflow x, DocConstantWorkflow y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantWorkflow))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantWorkflow) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantWorkflow obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
