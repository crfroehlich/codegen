//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by a CodeSmith Generator project.
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum QueueChannelEnm
    {
        [EnumMember(Value = DocConstantQueueChannel.PORTAL_AUDIT)]
        PORTAL_AUDIT,
        [EnumMember(Value = DocConstantQueueChannel.PORTAL_BACKGROUND_TASK)]
        PORTAL_BACKGROUND_TASK,
        [EnumMember(Value = DocConstantQueueChannel.PORTAL_NOTIFICATION)]
        PORTAL_NOTIFICATION,
        [EnumMember(Value = DocConstantQueueChannel.PORTAL_USER_UPDATE)]
        PORTAL_USER_UPDATE,
        [EnumMember(Value = DocConstantQueueChannel.QUEUE_ERROR)]
        QUEUE_ERROR,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_AUDIT)]
        SERVICES_AUDIT,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_AUDIT_FAILURES)]
        SERVICES_AUDIT_FAILURES,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_DOCUMENT_IMPORT)]
        SERVICES_DOCUMENT_IMPORT,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_DOCUMENT_UPDATE)]
        SERVICES_DOCUMENT_UPDATE,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_ERRORS)]
        SERVICES_ERRORS,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_EXTRACT_NOTIFICATION)]
        SERVICES_EXTRACT_NOTIFICATION,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_HEARTBEAT)]
        SERVICES_HEARTBEAT,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_LOGS)]
        SERVICES_LOGS,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_LOGS_TO_SEGMENT)]
        SERVICES_LOGS_TO_SEGMENT,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_LOGS_TO_SLACK)]
        SERVICES_LOGS_TO_SLACK,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_LOGS_TO_STACKIFY)]
        SERVICES_LOGS_TO_STACKIFY,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_SALESFORCE)]
        SERVICES_SALESFORCE,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_SLACK)]
        SERVICES_SLACK,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_USER_SESSION)]
        SERVICES_USER_SESSION,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_USER_UPDATE)]
        SERVICES_USER_UPDATE,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_USER_UPDATE_ARCHIVING)]
        SERVICES_USER_UPDATE_ARCHIVING,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_USER_UPDATE_BROADCASTS)]
        SERVICES_USER_UPDATE_BROADCASTS,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_USER_UPDATE_DOCUMENT_ASSIGNMENT)]
        SERVICES_USER_UPDATE_DOCUMENT_ASSIGNMENT,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_USER_UPDATE_DOCUMENT_IMPORTS)]
        SERVICES_USER_UPDATE_DOCUMENT_IMPORTS,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_USER_UPDATE_DOCUMENT_SET_ASSIGNMENT)]
        SERVICES_USER_UPDATE_DOCUMENT_SET_ASSIGNMENT,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_USER_UPDATE_ROLES)]
        SERVICES_USER_UPDATE_ROLES,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_USER_UPDATE_SHARING)]
        SERVICES_USER_UPDATE_SHARING,
        [EnumMember(Value = DocConstantQueueChannel.SERVICES_USER_UPDATE_TEAMS)]
        SERVICES_USER_UPDATE_TEAMS
    }
    
    public sealed partial class DocConstantQueueChannel
    {
        public const string PORTAL_AUDIT = "portal_audit";
        public const string PORTAL_BACKGROUND_TASK = "portal_background_task";
        public const string PORTAL_NOTIFICATION = "portal_notification";
        public const string PORTAL_USER_UPDATE = "portal_user_update";
        public const string QUEUE_ERROR = "queue_error";
        public const string SERVICES_AUDIT = "services_audit";
        public const string SERVICES_AUDIT_FAILURES = "services_audit_failures";
        public const string SERVICES_DOCUMENT_IMPORT = "services_document_import";
        public const string SERVICES_DOCUMENT_UPDATE = "services_document_update";
        public const string SERVICES_ERRORS = "services_errors";
        public const string SERVICES_EXTRACT_NOTIFICATION = "services_extract_notification";
        public const string SERVICES_HEARTBEAT = "services_heartbeat";
        public const string SERVICES_LOGS = "services_logs";
        public const string SERVICES_LOGS_TO_SEGMENT = "services_logs_to_segment";
        public const string SERVICES_LOGS_TO_SLACK = "services_logs_to_slack";
        public const string SERVICES_LOGS_TO_STACKIFY = "services_logs_to_stackify";
        public const string SERVICES_SALESFORCE = "services_salesforce";
        public const string SERVICES_SLACK = "services_slack";
        public const string SERVICES_USER_SESSION = "services_user_session";
        public const string SERVICES_USER_UPDATE = "services_user_update";
        public const string SERVICES_USER_UPDATE_ARCHIVING = "services_user_update_archiving";
        public const string SERVICES_USER_UPDATE_BROADCASTS = "services_user_update_broadcasts";
        public const string SERVICES_USER_UPDATE_DOCUMENT_ASSIGNMENT = "services_user_update_document_assignment";
        public const string SERVICES_USER_UPDATE_DOCUMENT_IMPORTS = "services_user_update_document_imports";
        public const string SERVICES_USER_UPDATE_DOCUMENT_SET_ASSIGNMENT = "services_user_update_document_set_assignment";
        public const string SERVICES_USER_UPDATE_ROLES = "services_user_update_roles";
        public const string SERVICES_USER_UPDATE_SHARING = "services_user_update_sharing";
        public const string SERVICES_USER_UPDATE_TEAMS = "services_user_update_teams";
        
        #region Internals
        
        private static List<string> _all;
        
        public static List<string> All => _all ?? (_all = typeof(DocConstantQueueChannel).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        /// <summary>
        ///    The string value of the current instance
        /// </summary>
        private readonly string Value;

        /// <summary>
        ///    The enum constructor
        /// </summary>
        /// <param name="ItemName">Name of the item.</param>
        private DocConstantQueueChannel(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        /// <summary>
        /// Determines if the Constant contains an exact match (case insensitive) for the name
        /// </summary>
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        /// <summary>
        ///    Implicit cast to Enum
        /// </summary>
        /// <param name="Val">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator DocConstantQueueChannel(string Val)
        {
            return new DocConstantQueueChannel(Val);
        }

        /// <summary>
        ///    Implicit cast to string
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator string(DocConstantQueueChannel item)
        {
            return item?.Value ?? string.Empty;
        }

        /// <summary>
        ///    Override of ToString
        /// </summary>
        /// <returns>A <see cref="System.String" /> that represents this instance.</returns>
        public override string ToString()
        {
            return Value;
        }

        #endregion Internals

        #region IEquatable (DocConstantQueueChannel)

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public bool Equals(DocConstantQueueChannel obj)
        {
            return this == obj;
        }

        /// <summary>
        ///    == Equality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator ==(DocConstantQueueChannel ft1, DocConstantQueueChannel ft2)
        {
            //do a string comparison on the fieldtypes
            return string.Equals(Convert.ToString(ft1), Convert.ToString(ft2), StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        ///    != Inequality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator !=(DocConstantQueueChannel ft1, DocConstantQueueChannel ft2)
        {
            return !(ft1 == ft2);
        }

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantQueueChannel))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantQueueChannel) obj;
            }
            return ret;
        }

        /// <summary>
        ///    Get Hash Code
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode()
        {
            var ret = 23;
            const int prime = 37;
            ret = (ret * prime) + Value.GetHashCode();
            ret = (ret * prime) + All.GetHashCode();
            return ret;
        }

        #endregion IEquatable (DocConstantQueueChannel)
    }
}