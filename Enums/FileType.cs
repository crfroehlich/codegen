
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum FileTypeEnm
    {
        [EnumMember(Value = DocConstantFileType.DOCUMENT_SET), SCDescript(DocConstantFileType.DOCUMENT_SET), SSDescript(DocConstantFileType.DOCUMENT_SET), SCDisplay(Name = DocConstantFileType.DOCUMENT_SET)]
        DOCUMENT_SET = 156369078,
        [EnumMember(Value = DocConstantFileType.ERRATA), SCDescript(DocConstantFileType.ERRATA), SSDescript(DocConstantFileType.ERRATA), SCDisplay(Name = DocConstantFileType.ERRATA)]
        ERRATA = 156369079,
        [EnumMember(Value = DocConstantFileType.FULL_TEXT), SCDescript(DocConstantFileType.FULL_TEXT), SSDescript(DocConstantFileType.FULL_TEXT), SCDisplay(Name = DocConstantFileType.FULL_TEXT)]
        FULL_TEXT = 156369080,
        [EnumMember(Value = DocConstantFileType.PROTOCOL), SCDescript(DocConstantFileType.PROTOCOL), SSDescript(DocConstantFileType.PROTOCOL), SCDisplay(Name = DocConstantFileType.PROTOCOL)]
        PROTOCOL = 156369081,
        [EnumMember(Value = DocConstantFileType.SUPPLEMENTAL), SCDescript(DocConstantFileType.SUPPLEMENTAL), SSDescript(DocConstantFileType.SUPPLEMENTAL), SCDisplay(Name = DocConstantFileType.SUPPLEMENTAL)]
        SUPPLEMENTAL = 156369082
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this FileTypeEnm instance)
        {
            switch(instance)
            {
                case FileTypeEnm.DOCUMENT_SET:
                    return DocConstantFileType.DOCUMENT_SET;
                case FileTypeEnm.ERRATA:
                    return DocConstantFileType.ERRATA;
                case FileTypeEnm.FULL_TEXT:
                    return DocConstantFileType.FULL_TEXT;
                case FileTypeEnm.PROTOCOL:
                    return DocConstantFileType.PROTOCOL;
                case FileTypeEnm.SUPPLEMENTAL:
                    return DocConstantFileType.SUPPLEMENTAL;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this FileTypeEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantFileType : IEquatable<DocConstantFileType>, IEqualityComparer<DocConstantFileType>
    {
        public const string DOCUMENT_SET = "Document Set";
        public const string ERRATA = "Errata";
        public const string FULL_TEXT = "Full Text";
        public const string PROTOCOL = "Protocol";
        public const string SUPPLEMENTAL = "Supplemental";

        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantFileType).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantFileType(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantFileType(string Val) => new DocConstantFileType(Val);

        public static implicit operator string(DocConstantFileType item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantFileType(FileTypeEnm Val) => new DocConstantFileType(Val.ToEnumString());

        public static explicit operator FileTypeEnm(DocConstantFileType item)
        {
            Enum.TryParse<FileTypeEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;

        public bool Equals(DocConstantFileType obj) => this == obj;

        public static bool operator ==(DocConstantFileType x, DocConstantFileType y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantFileType x, DocConstantFileType y) => x == y;
        
        public static bool operator !=(DocConstantFileType x, DocConstantFileType y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantFileType))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantFileType) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantFileType obj) => obj?.GetHashCode() ?? -17;
    }
}
