//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by a CodeSmith Generator project.
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum InterventionTypeEnm
    {
        [EnumMember(Value = DocConstantInterventionType.ACCURACY_OUTCOMES)]
        ACCURACY_OUTCOMES,
        [EnumMember(Value = DocConstantInterventionType.CLINICAL_OUTCOMES)]
        CLINICAL_OUTCOMES,
        [EnumMember(Value = DocConstantInterventionType.COST_EFFECTIVENESS)]
        COST_EFFECTIVENESS,
        [EnumMember(Value = DocConstantInterventionType.GENE_TRANSFER)]
        GENE_TRANSFER,
        [EnumMember(Value = DocConstantInterventionType.INFORMATIONAL_MATERIAL)]
        INFORMATIONAL_MATERIAL,
        [EnumMember(Value = DocConstantInterventionType.MINERALS)]
        MINERALS,
        [EnumMember(Value = DocConstantInterventionType.QUALITY_OF_LIFE)]
        QUALITY_OF_LIFE,
        [EnumMember(Value = DocConstantInterventionType.RECOMBINANT_DNA)]
        RECOMBINANT_DNA,
        [EnumMember(Value = DocConstantInterventionType.SESSION_MEETING)]
        SESSION_MEETING,
        [EnumMember(Value = DocConstantInterventionType.STEM_CELL)]
        STEM_CELL,
        [EnumMember(Value = DocConstantInterventionType.VITAMINS)]
        VITAMINS
    }
    
    public sealed partial class DocConstantInterventionType
    {
        public const string ACCURACY_OUTCOMES = "Accuracy Outcomes";
        public const string CLINICAL_OUTCOMES = "Clinical Outcomes";
        public const string COST_EFFECTIVENESS = "Cost - Effectiveness";
        public const string GENE_TRANSFER = "Gene Transfer";
        public const string INFORMATIONAL_MATERIAL = "Informational Material";
        public const string MINERALS = "Minerals";
        public const string QUALITY_OF_LIFE = "Quality of Life";
        public const string RECOMBINANT_DNA = "Recombinant DNA";
        public const string SESSION_MEETING = "Session/Meeting";
        public const string STEM_CELL = "Stem Cell";
        public const string VITAMINS = "Vitamins";
        
        #region Internals
        
        private static List<string> _all;
        
        public static List<string> All => _all ?? (_all = typeof(DocConstantInterventionType).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        /// <summary>
        ///    The string value of the current instance
        /// </summary>
        private readonly string Value;

        /// <summary>
        ///    The enum constructor
        /// </summary>
        /// <param name="ItemName">Name of the item.</param>
        private DocConstantInterventionType(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        /// <summary>
        /// Determines if the Constant contains an exact match (case insensitive) for the name
        /// </summary>
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        /// <summary>
        ///    Implicit cast to Enum
        /// </summary>
        /// <param name="Val">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator DocConstantInterventionType(string Val)
        {
            return new DocConstantInterventionType(Val);
        }

        /// <summary>
        ///    Implicit cast to string
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator string(DocConstantInterventionType item)
        {
            return item?.Value ?? string.Empty;
        }

        /// <summary>
        ///    Override of ToString
        /// </summary>
        /// <returns>A <see cref="System.String" /> that represents this instance.</returns>
        public override string ToString()
        {
            return Value;
        }

        #endregion Internals

        #region IEquatable (DocConstantInterventionType)

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public bool Equals(DocConstantInterventionType obj)
        {
            return this == obj;
        }

        /// <summary>
        ///    == Equality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator ==(DocConstantInterventionType ft1, DocConstantInterventionType ft2)
        {
            //do a string comparison on the fieldtypes
            return string.Equals(Convert.ToString(ft1), Convert.ToString(ft2), StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        ///    != Inequality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator !=(DocConstantInterventionType ft1, DocConstantInterventionType ft2)
        {
            return !(ft1 == ft2);
        }

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantInterventionType))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantInterventionType) obj;
            }
            return ret;
        }

        /// <summary>
        ///    Get Hash Code
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode()
        {
            var ret = 23;
            const int prime = 37;
            ret = (ret * prime) + Value.GetHashCode();
            ret = (ret * prime) + All.GetHashCode();
            return ret;
        }

        #endregion IEquatable (DocConstantInterventionType)
    }
}