//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by a CodeSmith Generator project.
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum FeatureEnm
    {
        [EnumMember(Value = DocConstantFeature.ACCESS_BACKEND)]
        ACCESS_BACKEND,
        [EnumMember(Value = DocConstantFeature.ALL_ENTITIES)]
        ALL_ENTITIES,
        [EnumMember(Value = DocConstantFeature.ALL_PAGES)]
        ALL_PAGES,
        [EnumMember(Value = DocConstantFeature.ALL_STUDY_SETS)]
        ALL_STUDY_SETS,
        [EnumMember(Value = DocConstantFeature.ALPHA_TESTING)]
        ALPHA_TESTING,
        [EnumMember(Value = DocConstantFeature.AUDITING)]
        AUDITING,
        [EnumMember(Value = DocConstantFeature.BINDINGS_ADMIN)]
        BINDINGS_ADMIN,
        [EnumMember(Value = DocConstantFeature.CLIENT_BINDING)]
        CLIENT_BINDING,
        [EnumMember(Value = DocConstantFeature.CONTRACT_ONBOARDING_REPORT)]
        CONTRACT_ONBOARDING_REPORT,
        [EnumMember(Value = DocConstantFeature.DEBUG)]
        DEBUG,
        [EnumMember(Value = DocConstantFeature.DISPLAY_BROADCASTS)]
        DISPLAY_BROADCASTS,
        [EnumMember(Value = DocConstantFeature.DISPLAY_NOTIFICATIONS)]
        DISPLAY_NOTIFICATIONS,
        [EnumMember(Value = DocConstantFeature.DOCUMENT_SET_ACCESS)]
        DOCUMENT_SET_ACCESS,
        [EnumMember(Value = DocConstantFeature.ERROR_REPORTS)]
        ERROR_REPORTS,
        [EnumMember(Value = DocConstantFeature.EXTRACTION)]
        EXTRACTION,
        [EnumMember(Value = DocConstantFeature.IMPERSONATION)]
        IMPERSONATION,
        [EnumMember(Value = DocConstantFeature.LIVE_CHAT)]
        LIVE_CHAT,
        [EnumMember(Value = DocConstantFeature.PRODUCTION_REPORT)]
        PRODUCTION_REPORT,
        [EnumMember(Value = DocConstantFeature.PRODUCTION_RESET)]
        PRODUCTION_RESET,
        [EnumMember(Value = DocConstantFeature.PROTOCOL_ADMIN)]
        PROTOCOL_ADMIN,
        [EnumMember(Value = DocConstantFeature.QC)]
        QC,
        [EnumMember(Value = DocConstantFeature.RATINGS)]
        RATINGS,
        [EnumMember(Value = DocConstantFeature.RISK_OF_BIAS)]
        RISK_OF_BIAS,
        [EnumMember(Value = DocConstantFeature.SALESFORCE_DATA)]
        SALESFORCE_DATA,
        [EnumMember(Value = DocConstantFeature.SHARING)]
        SHARING,
        [EnumMember(Value = DocConstantFeature.SUBMIT_FEEDBACK)]
        SUBMIT_FEEDBACK,
        [EnumMember(Value = DocConstantFeature.TERMS_ADMIN)]
        TERMS_ADMIN,
        [EnumMember(Value = DocConstantFeature.WORKFLOW_ACCESS)]
        WORKFLOW_ACCESS
    }
    
    public sealed partial class DocConstantFeature
    {
        public const string ACCESS_BACKEND = "Access Doc Data Backend";
        public const string ALL_ENTITIES = "All Entities";
        public const string ALL_PAGES = "All Pages";
        public const string ALL_STUDY_SETS = "All Study Sets";
        public const string ALPHA_TESTING = "Alpha Testing";
        public const string AUDITING = "Auditing";
        public const string BINDINGS_ADMIN = "Bindings Admin";
        public const string CLIENT_BINDING = "Client Binding";
        public const string CONTRACT_ONBOARDING_REPORT = "Contract Onboarding Report";
        public const string DEBUG = "Debug";
        public const string DISPLAY_BROADCASTS = "Display Broadcasts";
        public const string DISPLAY_NOTIFICATIONS = "Display Notifications";
        public const string DOCUMENT_SET_ACCESS = "Document Set Access";
        public const string ERROR_REPORTS = "Error Reports";
        public const string EXTRACTION = "Extraction";
        public const string IMPERSONATION = "Impersonation";
        public const string LIVE_CHAT = "Live Chat";
        public const string PRODUCTION_REPORT = "Production Report";
        public const string PRODUCTION_RESET = "Production Reset";
        public const string PROTOCOL_ADMIN = "Protocol Admin";
        public const string QC = "QC";
        public const string RATINGS = "Ratings";
        public const string RISK_OF_BIAS = "Risk of Bias";
        public const string SALESFORCE_DATA = "Salesforce Data";
        public const string SHARING = "Sharing";
        public const string SUBMIT_FEEDBACK = "Submit Feedback";
        public const string TERMS_ADMIN = "Master Terms Admin";
        public const string WORKFLOW_ACCESS = "Workflow Access";
        
        #region Internals
        
        private static List<string> _all;
        
        public static List<string> All => _all ?? (_all = typeof(DocConstantFeature).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        /// <summary>
        ///    The string value of the current instance
        /// </summary>
        private readonly string Value;

        /// <summary>
        ///    The enum constructor
        /// </summary>
        /// <param name="ItemName">Name of the item.</param>
        private DocConstantFeature(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        /// <summary>
        /// Determines if the Constant contains an exact match (case insensitive) for the name
        /// </summary>
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        /// <summary>
        ///    Implicit cast to Enum
        /// </summary>
        /// <param name="Val">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator DocConstantFeature(string Val)
        {
            return new DocConstantFeature(Val);
        }

        /// <summary>
        ///    Implicit cast to string
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator string(DocConstantFeature item)
        {
            return item?.Value ?? string.Empty;
        }

        /// <summary>
        ///    Override of ToString
        /// </summary>
        /// <returns>A <see cref="System.String" /> that represents this instance.</returns>
        public override string ToString()
        {
            return Value;
        }

        #endregion Internals

        #region IEquatable (DocConstantFeature)

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public bool Equals(DocConstantFeature obj)
        {
            return this == obj;
        }

        /// <summary>
        ///    == Equality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator ==(DocConstantFeature ft1, DocConstantFeature ft2)
        {
            //do a string comparison on the fieldtypes
            return string.Equals(Convert.ToString(ft1), Convert.ToString(ft2), StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        ///    != Inequality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator !=(DocConstantFeature ft1, DocConstantFeature ft2)
        {
            return !(ft1 == ft2);
        }

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantFeature))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantFeature) obj;
            }
            return ret;
        }

        /// <summary>
        ///    Get Hash Code
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode()
        {
            var ret = 23;
            const int prime = 37;
            ret = (ret * prime) + Value.GetHashCode();
            ret = (ret * prime) + All.GetHashCode();
            return ret;
        }

        #endregion IEquatable (DocConstantFeature)
    }
}