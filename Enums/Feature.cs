//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum FeatureEnm
    {
        [EnumMember(Value = DocConstantFeature.ACCESS_BACKEND)]
        ACCESS_BACKEND,
        [EnumMember(Value = DocConstantFeature.ALL_ENTITIES)]
        ALL_ENTITIES,
        [EnumMember(Value = DocConstantFeature.ALL_PAGES)]
        ALL_PAGES,
        [EnumMember(Value = DocConstantFeature.ALL_STUDY_SETS)]
        ALL_STUDY_SETS,
        [EnumMember(Value = DocConstantFeature.ALPHA_TESTING)]
        ALPHA_TESTING,
        [EnumMember(Value = DocConstantFeature.AUDITING)]
        AUDITING,
        [EnumMember(Value = DocConstantFeature.BINDINGS_ADMIN)]
        BINDINGS_ADMIN,
        [EnumMember(Value = DocConstantFeature.CLIENT_BINDING)]
        CLIENT_BINDING,
        [EnumMember(Value = DocConstantFeature.CONTRACT_ONBOARDING_REPORT)]
        CONTRACT_ONBOARDING_REPORT,
        [EnumMember(Value = DocConstantFeature.DEBUG)]
        DEBUG,
        [EnumMember(Value = DocConstantFeature.DISPLAY_BROADCASTS)]
        DISPLAY_BROADCASTS,
        [EnumMember(Value = DocConstantFeature.DISPLAY_NOTIFICATIONS)]
        DISPLAY_NOTIFICATIONS,
        [EnumMember(Value = DocConstantFeature.DOCUMENT_SET_ACCESS)]
        DOCUMENT_SET_ACCESS,
        [EnumMember(Value = DocConstantFeature.ERROR_REPORTS)]
        ERROR_REPORTS,
        [EnumMember(Value = DocConstantFeature.EXTRACTION)]
        EXTRACTION,
        [EnumMember(Value = DocConstantFeature.IMPERSONATION)]
        IMPERSONATION,
        [EnumMember(Value = DocConstantFeature.LIVE_CHAT)]
        LIVE_CHAT,
        [EnumMember(Value = DocConstantFeature.PRODUCTION_REPORT)]
        PRODUCTION_REPORT,
        [EnumMember(Value = DocConstantFeature.PRODUCTION_RESET)]
        PRODUCTION_RESET,
        [EnumMember(Value = DocConstantFeature.PROTOCOL_ADMIN)]
        PROTOCOL_ADMIN,
        [EnumMember(Value = DocConstantFeature.QC)]
        QC,
        [EnumMember(Value = DocConstantFeature.RELEVANCE_RATING)]
        RELEVANCE_RATING,
        [EnumMember(Value = DocConstantFeature.RISK_OF_BIAS)]
        RISK_OF_BIAS,
        [EnumMember(Value = DocConstantFeature.SALESFORCE_DATA)]
        SALESFORCE_DATA,
        [EnumMember(Value = DocConstantFeature.SHARING)]
        SHARING,
        [EnumMember(Value = DocConstantFeature.SUBMIT_FEEDBACK)]
        SUBMIT_FEEDBACK,
        [EnumMember(Value = DocConstantFeature.TERMS_ADMIN)]
        TERMS_ADMIN,
        [EnumMember(Value = DocConstantFeature.WORKFLOW_ACCESS)]
        WORKFLOW_ACCESS
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this FeatureEnm instance)
        {
            switch(instance) 
            {
                case FeatureEnm.ACCESS_BACKEND:
                    return DocConstantFeature.ACCESS_BACKEND;
                case FeatureEnm.ALL_ENTITIES:
                    return DocConstantFeature.ALL_ENTITIES;
                case FeatureEnm.ALL_PAGES:
                    return DocConstantFeature.ALL_PAGES;
                case FeatureEnm.ALL_STUDY_SETS:
                    return DocConstantFeature.ALL_STUDY_SETS;
                case FeatureEnm.ALPHA_TESTING:
                    return DocConstantFeature.ALPHA_TESTING;
                case FeatureEnm.AUDITING:
                    return DocConstantFeature.AUDITING;
                case FeatureEnm.BINDINGS_ADMIN:
                    return DocConstantFeature.BINDINGS_ADMIN;
                case FeatureEnm.CLIENT_BINDING:
                    return DocConstantFeature.CLIENT_BINDING;
                case FeatureEnm.CONTRACT_ONBOARDING_REPORT:
                    return DocConstantFeature.CONTRACT_ONBOARDING_REPORT;
                case FeatureEnm.DEBUG:
                    return DocConstantFeature.DEBUG;
                case FeatureEnm.DISPLAY_BROADCASTS:
                    return DocConstantFeature.DISPLAY_BROADCASTS;
                case FeatureEnm.DISPLAY_NOTIFICATIONS:
                    return DocConstantFeature.DISPLAY_NOTIFICATIONS;
                case FeatureEnm.DOCUMENT_SET_ACCESS:
                    return DocConstantFeature.DOCUMENT_SET_ACCESS;
                case FeatureEnm.ERROR_REPORTS:
                    return DocConstantFeature.ERROR_REPORTS;
                case FeatureEnm.EXTRACTION:
                    return DocConstantFeature.EXTRACTION;
                case FeatureEnm.IMPERSONATION:
                    return DocConstantFeature.IMPERSONATION;
                case FeatureEnm.LIVE_CHAT:
                    return DocConstantFeature.LIVE_CHAT;
                case FeatureEnm.PRODUCTION_REPORT:
                    return DocConstantFeature.PRODUCTION_REPORT;
                case FeatureEnm.PRODUCTION_RESET:
                    return DocConstantFeature.PRODUCTION_RESET;
                case FeatureEnm.PROTOCOL_ADMIN:
                    return DocConstantFeature.PROTOCOL_ADMIN;
                case FeatureEnm.QC:
                    return DocConstantFeature.QC;
                case FeatureEnm.RELEVANCE_RATING:
                    return DocConstantFeature.RELEVANCE_RATING;
                case FeatureEnm.RISK_OF_BIAS:
                    return DocConstantFeature.RISK_OF_BIAS;
                case FeatureEnm.SALESFORCE_DATA:
                    return DocConstantFeature.SALESFORCE_DATA;
                case FeatureEnm.SHARING:
                    return DocConstantFeature.SHARING;
                case FeatureEnm.SUBMIT_FEEDBACK:
                    return DocConstantFeature.SUBMIT_FEEDBACK;
                case FeatureEnm.TERMS_ADMIN:
                    return DocConstantFeature.TERMS_ADMIN;
                case FeatureEnm.WORKFLOW_ACCESS:
                    return DocConstantFeature.WORKFLOW_ACCESS;
                default:
                    return string.Empty;
            }
        }
    }

    public sealed partial class DocConstantFeature : IEquatable<DocConstantFeature>, IEqualityComparer<DocConstantFeature>
    {
        public const string ACCESS_BACKEND = "Access Doc Data Backend";
        public const string ALL_ENTITIES = "All Entities";
        public const string ALL_PAGES = "All Pages";
        public const string ALL_STUDY_SETS = "All Study Sets";
        public const string ALPHA_TESTING = "Alpha Testing";
        public const string AUDITING = "Auditing";
        public const string BINDINGS_ADMIN = "Bindings Admin";
        public const string CLIENT_BINDING = "Client Binding";
        public const string CONTRACT_ONBOARDING_REPORT = "Contract Onboarding Report";
        public const string DEBUG = "Debug";
        public const string DISPLAY_BROADCASTS = "Display Broadcasts";
        public const string DISPLAY_NOTIFICATIONS = "Display Notifications";
        public const string DOCUMENT_SET_ACCESS = "Document Set Access";
        public const string ERROR_REPORTS = "Error Reports";
        public const string EXTRACTION = "Extraction";
        public const string IMPERSONATION = "Impersonation";
        public const string LIVE_CHAT = "Live Chat";
        public const string PRODUCTION_REPORT = "Production Report";
        public const string PRODUCTION_RESET = "Production Reset";
        public const string PROTOCOL_ADMIN = "Protocol Admin";
        public const string QC = "QC";
        public const string RELEVANCE_RATING = "Relevance Rating";
        public const string RISK_OF_BIAS = "Risk of Bias";
        public const string SALESFORCE_DATA = "Salesforce Data";
        public const string SHARING = "Sharing";
        public const string SUBMIT_FEEDBACK = "Submit Feedback";
        public const string TERMS_ADMIN = "Master Terms Admin";
        public const string WORKFLOW_ACCESS = "Workflow Access";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantFeature).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantFeature(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantFeature(string Val) => new DocConstantFeature(Val);

        public static implicit operator string(DocConstantFeature item) => item?.Value ?? string.Empty;

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantFeature obj) => this == obj;

        public static bool operator ==(DocConstantFeature x, DocConstantFeature y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantFeature x, DocConstantFeature y) => x == y;
        
        public static bool operator !=(DocConstantFeature x, DocConstantFeature y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantFeature))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantFeature) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantFeature obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
