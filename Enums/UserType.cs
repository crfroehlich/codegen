
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum UserTypeEnm
    {
        [EnumMember(Value = DocConstantUserType.CLIENT), SCDescript(DocConstantUserType.CLIENT), SSDescript(DocConstantUserType.CLIENT), SCDisplay(Name = DocConstantUserType.CLIENT)]
        CLIENT = 4728,
        [EnumMember(Value = DocConstantUserType.DIVISION), SCDescript(DocConstantUserType.DIVISION), SSDescript(DocConstantUserType.DIVISION), SCDisplay(Name = DocConstantUserType.DIVISION)]
        DIVISION = 4733,
        [EnumMember(Value = DocConstantUserType.USER), SCDescript(DocConstantUserType.USER), SSDescript(DocConstantUserType.USER), SCDisplay(Name = DocConstantUserType.USER)]
        USER = 4738
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this UserTypeEnm instance)
        {
            switch(instance)
            {
                case UserTypeEnm.CLIENT:
                    return DocConstantUserType.CLIENT;
                case UserTypeEnm.DIVISION:
                    return DocConstantUserType.DIVISION;
                case UserTypeEnm.USER:
                    return DocConstantUserType.USER;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this UserTypeEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantUserType : IEquatable<DocConstantUserType>, IEqualityComparer<DocConstantUserType>
    {
        public const string CLIENT = "Client";
        public const string DIVISION = "Division";
        public const string USER = "User";
        
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantUserType).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantUserType(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantUserType(string Val) => new DocConstantUserType(Val);

        public static implicit operator string(DocConstantUserType item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantUserType(UserTypeEnm Val) => new DocConstantUserType(Val.ToEnumString());

        public static explicit operator UserTypeEnm(DocConstantUserType item)
        {
            Enum.TryParse<UserTypeEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;



        public bool Equals(DocConstantUserType obj) => this == obj;

        public static bool operator ==(DocConstantUserType x, DocConstantUserType y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantUserType x, DocConstantUserType y) => x == y;
        
        public static bool operator !=(DocConstantUserType x, DocConstantUserType y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantUserType))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantUserType) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantUserType obj) => obj?.GetHashCode() ?? -17;

    }
}
