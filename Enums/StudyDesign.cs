//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StudyDesignEnm
    {
        [EnumMember(Value = DocConstantStudyDesign.BEFORE_AND_AFTER_TRIAL)]
        BEFORE_AND_AFTER_TRIAL,
        [EnumMember(Value = DocConstantStudyDesign.CASE_CONTROL)]
        CASE_CONTROL,
        [EnumMember(Value = DocConstantStudyDesign.CASE_REPORT)]
        CASE_REPORT,
        [EnumMember(Value = DocConstantStudyDesign.CASE_SERIES)]
        CASE_SERIES,
        [EnumMember(Value = DocConstantStudyDesign.CLUSTER_RCT)]
        CLUSTER_RCT,
        [EnumMember(Value = DocConstantStudyDesign.COHORT_STUDY)]
        COHORT_STUDY,
        [EnumMember(Value = DocConstantStudyDesign.CONTROLLED_BEFORE_AND_AFTER_TRIAL)]
        CONTROLLED_BEFORE_AND_AFTER_TRIAL,
        [EnumMember(Value = DocConstantStudyDesign.CROSS_SECTIONAL_STUDY)]
        CROSS_SECTIONAL_STUDY,
        [EnumMember(Value = DocConstantStudyDesign.EXPANDED_ACCESS_PROGRAM)]
        EXPANDED_ACCESS_PROGRAM,
        [EnumMember(Value = DocConstantStudyDesign.FOLLOW_UP_EXTENSION)]
        FOLLOW_UP_EXTENSION,
        [EnumMember(Value = DocConstantStudyDesign.LITERATURE_REVIEW)]
        LITERATURE_REVIEW,
        [EnumMember(Value = DocConstantStudyDesign.NON_COMPARATIVE_OTHER)]
        NON_COMPARATIVE_OTHER,
        [EnumMember(Value = DocConstantStudyDesign.NON_CONTROLLED_CLINICAL_TRIAL)]
        NON_CONTROLLED_CLINICAL_TRIAL,
        [EnumMember(Value = DocConstantStudyDesign.NON_RANDOMIZED_CONTROLLED_TRIAL)]
        NON_RANDOMIZED_CONTROLLED_TRIAL,
        [EnumMember(Value = DocConstantStudyDesign.NON_RANDOMIZED_CROSSOVER)]
        NON_RANDOMIZED_CROSSOVER,
        [EnumMember(Value = DocConstantStudyDesign.OBSERVATIONAL_NON_COMPARATIVE_STUDY)]
        OBSERVATIONAL_NON_COMPARATIVE_STUDY,
        [EnumMember(Value = DocConstantStudyDesign.POOLED_ANALYSIS)]
        POOLED_ANALYSIS,
        [EnumMember(Value = DocConstantStudyDesign.POSTHOC_ANALYSIS)]
        POSTHOC_ANALYSIS,
        [EnumMember(Value = DocConstantStudyDesign.PROSPECTIVE_COHORT_STUDY)]
        PROSPECTIVE_COHORT_STUDY,
        [EnumMember(Value = DocConstantStudyDesign.QUALITATIVE_RESEARCH)]
        QUALITATIVE_RESEARCH,
        [EnumMember(Value = DocConstantStudyDesign.RANDOMIZED_CONTROLLED_TRIAL)]
        RANDOMIZED_CONTROLLED_TRIAL,
        [EnumMember(Value = DocConstantStudyDesign.RANDOMIZED_CROSSOVER)]
        RANDOMIZED_CROSSOVER,
        [EnumMember(Value = DocConstantStudyDesign.RANDOMIZED_NON_CONTROLLED_TRIAL)]
        RANDOMIZED_NON_CONTROLLED_TRIAL,
        [EnumMember(Value = DocConstantStudyDesign.RETROSPECTIVE_COHORT_STUDY)]
        RETROSPECTIVE_COHORT_STUDY,
        [EnumMember(Value = DocConstantStudyDesign.SUB_GROUP_ANALYSIS)]
        SUB_GROUP_ANALYSIS
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this StudyDesignEnm instance)
        {
            switch(instance) 
            {
                case StudyDesignEnm.BEFORE_AND_AFTER_TRIAL:
                    return DocConstantStudyDesign.BEFORE_AND_AFTER_TRIAL;
                case StudyDesignEnm.CASE_CONTROL:
                    return DocConstantStudyDesign.CASE_CONTROL;
                case StudyDesignEnm.CASE_REPORT:
                    return DocConstantStudyDesign.CASE_REPORT;
                case StudyDesignEnm.CASE_SERIES:
                    return DocConstantStudyDesign.CASE_SERIES;
                case StudyDesignEnm.CLUSTER_RCT:
                    return DocConstantStudyDesign.CLUSTER_RCT;
                case StudyDesignEnm.COHORT_STUDY:
                    return DocConstantStudyDesign.COHORT_STUDY;
                case StudyDesignEnm.CONTROLLED_BEFORE_AND_AFTER_TRIAL:
                    return DocConstantStudyDesign.CONTROLLED_BEFORE_AND_AFTER_TRIAL;
                case StudyDesignEnm.CROSS_SECTIONAL_STUDY:
                    return DocConstantStudyDesign.CROSS_SECTIONAL_STUDY;
                case StudyDesignEnm.EXPANDED_ACCESS_PROGRAM:
                    return DocConstantStudyDesign.EXPANDED_ACCESS_PROGRAM;
                case StudyDesignEnm.FOLLOW_UP_EXTENSION:
                    return DocConstantStudyDesign.FOLLOW_UP_EXTENSION;
                case StudyDesignEnm.LITERATURE_REVIEW:
                    return DocConstantStudyDesign.LITERATURE_REVIEW;
                case StudyDesignEnm.NON_COMPARATIVE_OTHER:
                    return DocConstantStudyDesign.NON_COMPARATIVE_OTHER;
                case StudyDesignEnm.NON_CONTROLLED_CLINICAL_TRIAL:
                    return DocConstantStudyDesign.NON_CONTROLLED_CLINICAL_TRIAL;
                case StudyDesignEnm.NON_RANDOMIZED_CONTROLLED_TRIAL:
                    return DocConstantStudyDesign.NON_RANDOMIZED_CONTROLLED_TRIAL;
                case StudyDesignEnm.NON_RANDOMIZED_CROSSOVER:
                    return DocConstantStudyDesign.NON_RANDOMIZED_CROSSOVER;
                case StudyDesignEnm.OBSERVATIONAL_NON_COMPARATIVE_STUDY:
                    return DocConstantStudyDesign.OBSERVATIONAL_NON_COMPARATIVE_STUDY;
                case StudyDesignEnm.POOLED_ANALYSIS:
                    return DocConstantStudyDesign.POOLED_ANALYSIS;
                case StudyDesignEnm.POSTHOC_ANALYSIS:
                    return DocConstantStudyDesign.POSTHOC_ANALYSIS;
                case StudyDesignEnm.PROSPECTIVE_COHORT_STUDY:
                    return DocConstantStudyDesign.PROSPECTIVE_COHORT_STUDY;
                case StudyDesignEnm.QUALITATIVE_RESEARCH:
                    return DocConstantStudyDesign.QUALITATIVE_RESEARCH;
                case StudyDesignEnm.RANDOMIZED_CONTROLLED_TRIAL:
                    return DocConstantStudyDesign.RANDOMIZED_CONTROLLED_TRIAL;
                case StudyDesignEnm.RANDOMIZED_CROSSOVER:
                    return DocConstantStudyDesign.RANDOMIZED_CROSSOVER;
                case StudyDesignEnm.RANDOMIZED_NON_CONTROLLED_TRIAL:
                    return DocConstantStudyDesign.RANDOMIZED_NON_CONTROLLED_TRIAL;
                case StudyDesignEnm.RETROSPECTIVE_COHORT_STUDY:
                    return DocConstantStudyDesign.RETROSPECTIVE_COHORT_STUDY;
                case StudyDesignEnm.SUB_GROUP_ANALYSIS:
                    return DocConstantStudyDesign.SUB_GROUP_ANALYSIS;
                default:
                    return string.Empty;
            }
        }
    }

    public sealed partial class DocConstantStudyDesign : IEquatable<DocConstantStudyDesign>, IEqualityComparer<DocConstantStudyDesign>
    {
        public const string BEFORE_AND_AFTER_TRIAL = "Before and After Trial";
        public const string CASE_CONTROL = "Case Control";
        public const string CASE_REPORT = "Case Report";
        public const string CASE_SERIES = "Case Series";
        public const string CLUSTER_RCT = "Cluster RCT";
        public const string COHORT_STUDY = "Cohort Study";
        public const string CONTROLLED_BEFORE_AND_AFTER_TRIAL = "Controlled Before and After Trial";
        public const string CROSS_SECTIONAL_STUDY = "Cross Sectional Study";
        public const string EXPANDED_ACCESS_PROGRAM = "Expanded Access Program";
        public const string FOLLOW_UP_EXTENSION = "Follow-up/Extension";
        public const string LITERATURE_REVIEW = "Literature Review";
        public const string NON_COMPARATIVE_OTHER = "Non-Comparative, Other";
        public const string NON_CONTROLLED_CLINICAL_TRIAL = "Non-Controlled Clinical Trial";
        public const string NON_RANDOMIZED_CONTROLLED_TRIAL = "Non-Randomized Controlled Trial";
        public const string NON_RANDOMIZED_CROSSOVER = "Non-Randomized Crossover";
        public const string OBSERVATIONAL_NON_COMPARATIVE_STUDY = "Observational Non-Comparative Study";
        public const string POOLED_ANALYSIS = "Pooled Analysis";
        public const string POSTHOC_ANALYSIS = "Posthoc Analysis";
        public const string PROSPECTIVE_COHORT_STUDY = "Prospective Cohort Study";
        public const string QUALITATIVE_RESEARCH = "Qualitative Research";
        public const string RANDOMIZED_CONTROLLED_TRIAL = "Randomized Controlled Trial";
        public const string RANDOMIZED_CROSSOVER = "Randomized Crossover";
        public const string RANDOMIZED_NON_CONTROLLED_TRIAL = "Randomized Non-Controlled Trial";
        public const string RETROSPECTIVE_COHORT_STUDY = "Retrospective Cohort Study";
        public const string SUB_GROUP_ANALYSIS = "Sub-Group Analysis";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantStudyDesign).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantStudyDesign(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantStudyDesign(string Val) => new DocConstantStudyDesign(Val);

        public static implicit operator string(DocConstantStudyDesign item) => item?.Value ?? string.Empty;

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantStudyDesign obj) => this == obj;

        public static bool operator ==(DocConstantStudyDesign x, DocConstantStudyDesign y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantStudyDesign x, DocConstantStudyDesign y) => x == y;
        
        public static bool operator !=(DocConstantStudyDesign x, DocConstantStudyDesign y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantStudyDesign))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantStudyDesign) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantStudyDesign obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
