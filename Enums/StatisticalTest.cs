//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StatisticalTestEnm
    {
        [EnumMember(Value = DocConstantStatisticalTest.BINOMIAL_TEST)]
        BINOMIAL_TEST = 2977,
        [EnumMember(Value = DocConstantStatisticalTest.CHI_SQUARE_GOODNESS_OF_FIT)]
        CHI_SQUARE_GOODNESS_OF_FIT = 2982,
        [EnumMember(Value = DocConstantStatisticalTest.CHI_SQUARE_TEST)]
        CHI_SQUARE_TEST = 2987,
        [EnumMember(Value = DocConstantStatisticalTest.FISHERS_EXACT_TEST)]
        FISHERS_EXACT_TEST = 2992,
        [EnumMember(Value = DocConstantStatisticalTest.INDEPENDENT)]
        INDEPENDENT = 2997,
        [EnumMember(Value = DocConstantStatisticalTest.KRUSKAL_WALLIS)]
        KRUSKAL_WALLIS = 3002,
        [EnumMember(Value = DocConstantStatisticalTest.MCNEMAR)]
        MCNEMAR = 3007,
        [EnumMember(Value = DocConstantStatisticalTest.ONE_SAMPLE_MEDIAN)]
        ONE_SAMPLE_MEDIAN = 3012,
        [EnumMember(Value = DocConstantStatisticalTest.ONE_SAMPLE_T_TEST)]
        ONE_SAMPLE_T_TEST = 3017,
        [EnumMember(Value = DocConstantStatisticalTest.ONE_WAY_ANOVA)]
        ONE_WAY_ANOVA = 3022,
        [EnumMember(Value = DocConstantStatisticalTest.OVERLAPPING_TWO_SAMPLE_T_TEST)]
        OVERLAPPING_TWO_SAMPLE_T_TEST = 3027,
        [EnumMember(Value = DocConstantStatisticalTest.PAIRED_T_TEST)]
        PAIRED_T_TEST = 3032,
        [EnumMember(Value = DocConstantStatisticalTest.SAMPLE_T_TEST)]
        SAMPLE_T_TEST = 3037,
        [EnumMember(Value = DocConstantStatisticalTest.STUDENT_T_TEST)]
        STUDENT_T_TEST = 3042,
        [EnumMember(Value = DocConstantStatisticalTest.WILCOXON_MANN_WHITNEY_TEST)]
        WILCOXON_MANN_WHITNEY_TEST = 3047,
        [EnumMember(Value = DocConstantStatisticalTest.WILCOXON_SIGNED_RANKS_TEST)]
        WILCOXON_SIGNED_RANKS_TEST = 3052
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this StatisticalTestEnm instance)
        {
            switch(instance) 
            {
                case StatisticalTestEnm.BINOMIAL_TEST:
                    return DocConstantStatisticalTest.BINOMIAL_TEST;
                case StatisticalTestEnm.CHI_SQUARE_GOODNESS_OF_FIT:
                    return DocConstantStatisticalTest.CHI_SQUARE_GOODNESS_OF_FIT;
                case StatisticalTestEnm.CHI_SQUARE_TEST:
                    return DocConstantStatisticalTest.CHI_SQUARE_TEST;
                case StatisticalTestEnm.FISHERS_EXACT_TEST:
                    return DocConstantStatisticalTest.FISHERS_EXACT_TEST;
                case StatisticalTestEnm.INDEPENDENT:
                    return DocConstantStatisticalTest.INDEPENDENT;
                case StatisticalTestEnm.KRUSKAL_WALLIS:
                    return DocConstantStatisticalTest.KRUSKAL_WALLIS;
                case StatisticalTestEnm.MCNEMAR:
                    return DocConstantStatisticalTest.MCNEMAR;
                case StatisticalTestEnm.ONE_SAMPLE_MEDIAN:
                    return DocConstantStatisticalTest.ONE_SAMPLE_MEDIAN;
                case StatisticalTestEnm.ONE_SAMPLE_T_TEST:
                    return DocConstantStatisticalTest.ONE_SAMPLE_T_TEST;
                case StatisticalTestEnm.ONE_WAY_ANOVA:
                    return DocConstantStatisticalTest.ONE_WAY_ANOVA;
                case StatisticalTestEnm.OVERLAPPING_TWO_SAMPLE_T_TEST:
                    return DocConstantStatisticalTest.OVERLAPPING_TWO_SAMPLE_T_TEST;
                case StatisticalTestEnm.PAIRED_T_TEST:
                    return DocConstantStatisticalTest.PAIRED_T_TEST;
                case StatisticalTestEnm.SAMPLE_T_TEST:
                    return DocConstantStatisticalTest.SAMPLE_T_TEST;
                case StatisticalTestEnm.STUDENT_T_TEST:
                    return DocConstantStatisticalTest.STUDENT_T_TEST;
                case StatisticalTestEnm.WILCOXON_MANN_WHITNEY_TEST:
                    return DocConstantStatisticalTest.WILCOXON_MANN_WHITNEY_TEST;
                case StatisticalTestEnm.WILCOXON_SIGNED_RANKS_TEST:
                    return DocConstantStatisticalTest.WILCOXON_SIGNED_RANKS_TEST;
                default:
                    return string.Empty;
            }
        }
    }

    public sealed partial class DocConstantStatisticalTest : IEquatable<DocConstantStatisticalTest>, IEqualityComparer<DocConstantStatisticalTest>
    {
        public const string BINOMIAL_TEST = "Binomial test";
        public const string CHI_SQUARE_GOODNESS_OF_FIT = "Chi-square goodness-of-fit";
        public const string CHI_SQUARE_TEST = "Chi-square test";
        public const string FISHERS_EXACT_TEST = "Fisher's exact test";
        public const string INDEPENDENT = "Independent (unpaired)";
        public const string KRUSKAL_WALLIS = "Kruskal Wallis";
        public const string MCNEMAR = "McNemar";
        public const string ONE_SAMPLE_MEDIAN = "One-sample median";
        public const string ONE_SAMPLE_T_TEST = "One-sample t-test";
        public const string ONE_WAY_ANOVA = "One-way ANOVA";
        public const string OVERLAPPING_TWO_SAMPLE_T_TEST = "Overlapping two-sample t-test";
        public const string PAIRED_T_TEST = "Paired t-test";
        public const string SAMPLE_T_TEST = "2 sample t-test";
        public const string STUDENT_T_TEST = "Student t-test";
        public const string WILCOXON_MANN_WHITNEY_TEST = "Wilcoxon-Mann Whitney test (Wilcoxon rank-sum test)";
        public const string WILCOXON_SIGNED_RANKS_TEST = "Wilcoxon signed ranks test";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantStatisticalTest).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantStatisticalTest(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantStatisticalTest(string Val) => new DocConstantStatisticalTest(Val);

        public static implicit operator string(DocConstantStatisticalTest item) => item?.Value ?? string.Empty;

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantStatisticalTest obj) => this == obj;

        public static bool operator ==(DocConstantStatisticalTest x, DocConstantStatisticalTest y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantStatisticalTest x, DocConstantStatisticalTest y) => x == y;
        
        public static bool operator !=(DocConstantStatisticalTest x, DocConstantStatisticalTest y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantStatisticalTest))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantStatisticalTest) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantStatisticalTest obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
