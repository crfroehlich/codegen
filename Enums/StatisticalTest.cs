//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StatisticalTestEnm
    {
        [EnumMember(Value = DocConstantStatisticalTest.BINOMIAL_TEST)]
        BINOMIAL_TEST,
        [EnumMember(Value = DocConstantStatisticalTest.CHI_SQUARE_GOODNESS_OF_FIT)]
        CHI_SQUARE_GOODNESS_OF_FIT,
        [EnumMember(Value = DocConstantStatisticalTest.CHI_SQUARE_TEST)]
        CHI_SQUARE_TEST,
        [EnumMember(Value = DocConstantStatisticalTest.FISHERS_EXACT_TEST)]
        FISHERS_EXACT_TEST,
        [EnumMember(Value = DocConstantStatisticalTest.INDEPENDENT)]
        INDEPENDENT,
        [EnumMember(Value = DocConstantStatisticalTest.KRUSKAL_WALLIS)]
        KRUSKAL_WALLIS,
        [EnumMember(Value = DocConstantStatisticalTest.MCNEMAR)]
        MCNEMAR,
        [EnumMember(Value = DocConstantStatisticalTest.ONE_SAMPLE_MEDIAN)]
        ONE_SAMPLE_MEDIAN,
        [EnumMember(Value = DocConstantStatisticalTest.ONE_SAMPLE_T_TEST)]
        ONE_SAMPLE_T_TEST,
        [EnumMember(Value = DocConstantStatisticalTest.ONE_WAY_ANOVA)]
        ONE_WAY_ANOVA,
        [EnumMember(Value = DocConstantStatisticalTest.OVERLAPPING_TWO_SAMPLE_T_TEST)]
        OVERLAPPING_TWO_SAMPLE_T_TEST,
        [EnumMember(Value = DocConstantStatisticalTest.PAIRED_T_TEST)]
        PAIRED_T_TEST,
        [EnumMember(Value = DocConstantStatisticalTest.SAMPLE_T_TEST)]
        SAMPLE_T_TEST,
        [EnumMember(Value = DocConstantStatisticalTest.STUDENT_T_TEST)]
        STUDENT_T_TEST,
        [EnumMember(Value = DocConstantStatisticalTest.WILCOXON_MANN_WHITNEY_TEST)]
        WILCOXON_MANN_WHITNEY_TEST,
        [EnumMember(Value = DocConstantStatisticalTest.WILCOXON_SIGNED_RANKS_TEST)]
        WILCOXON_SIGNED_RANKS_TEST
    }
    
    public sealed partial class DocConstantStatisticalTest
    {
        public const string BINOMIAL_TEST = "Binomial test";
        public const string CHI_SQUARE_GOODNESS_OF_FIT = "Chi-square goodness-of-fit";
        public const string CHI_SQUARE_TEST = "Chi-square test";
        public const string FISHERS_EXACT_TEST = "Fisher's exact test";
        public const string INDEPENDENT = "Independent (unpaired)";
        public const string KRUSKAL_WALLIS = "Kruskal Wallis";
        public const string MCNEMAR = "McNemar";
        public const string ONE_SAMPLE_MEDIAN = "One-sample median";
        public const string ONE_SAMPLE_T_TEST = "One-sample t-test";
        public const string ONE_WAY_ANOVA = "One-way ANOVA";
        public const string OVERLAPPING_TWO_SAMPLE_T_TEST = "Overlapping two-sample t-test";
        public const string PAIRED_T_TEST = "Paired t-test";
        public const string SAMPLE_T_TEST = "2 sample t-test";
        public const string STUDENT_T_TEST = "Student t-test";
        public const string WILCOXON_MANN_WHITNEY_TEST = "Wilcoxon-Mann Whitney test (Wilcoxon rank-sum test)";
        public const string WILCOXON_SIGNED_RANKS_TEST = "Wilcoxon signed ranks test";
        
        #region Internals
        
        private static List<string> _all;
        
        public static List<string> All => _all ?? (_all = typeof(DocConstantStatisticalTest).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        /// <summary>
        ///    The string value of the current instance
        /// </summary>
        private readonly string Value;

        /// <summary>
        ///    The enum constructor
        /// </summary>
        /// <param name="ItemName">Name of the item.</param>
        private DocConstantStatisticalTest(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        /// <summary>
        /// Determines if the Constant contains an exact match (case insensitive) for the name
        /// </summary>
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        /// <summary>
        ///    Implicit cast to Enum
        /// </summary>
        /// <param name="Val">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator DocConstantStatisticalTest(string Val)
        {
            return new DocConstantStatisticalTest(Val);
        }

        /// <summary>
        ///    Implicit cast to string
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator string(DocConstantStatisticalTest item)
        {
            return item?.Value ?? string.Empty;
        }

        /// <summary>
        ///    Override of ToString
        /// </summary>
        /// <returns>A <see cref="System.String" /> that represents this instance.</returns>
        public override string ToString()
        {
            return Value;
        }

        #endregion Internals

        #region IEquatable (DocConstantStatisticalTest)

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public bool Equals(DocConstantStatisticalTest obj)
        {
            return this == obj;
        }

        /// <summary>
        ///    == Equality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator ==(DocConstantStatisticalTest ft1, DocConstantStatisticalTest ft2)
        {
            //do a string comparison on the fieldtypes
            return string.Equals(Convert.ToString(ft1), Convert.ToString(ft2), StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        ///    != Inequality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator !=(DocConstantStatisticalTest ft1, DocConstantStatisticalTest ft2)
        {
            return !(ft1 == ft2);
        }

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantStatisticalTest))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantStatisticalTest) obj;
            }
            return ret;
        }

        /// <summary>
        ///    Get Hash Code
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode()
        {
            var ret = 23;
            const int prime = 37;
            ret = (ret * prime) + Value.GetHashCode();
            ret = (ret * prime) + All.GetHashCode();
            return ret;
        }

        #endregion IEquatable (DocConstantStatisticalTest)
    }
}
