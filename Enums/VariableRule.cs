
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum VariableRuleEnm
    {
        [EnumMember(Value = DocConstantVariableRule.ADDITION), SCDescript(DocConstantVariableRule.ADDITION), SSDescript(DocConstantVariableRule.ADDITION), SCDisplay(Name = DocConstantVariableRule.ADDITION)]
        ADDITION = 69422931,
        [EnumMember(Value = DocConstantVariableRule.AGGREGATION), SCDescript(DocConstantVariableRule.AGGREGATION), SSDescript(DocConstantVariableRule.AGGREGATION), SCDisplay(Name = DocConstantVariableRule.AGGREGATION)]
        AGGREGATION = 69422932,
        [EnumMember(Value = DocConstantVariableRule.AUTHOR_ERROR), SCDescript(DocConstantVariableRule.AUTHOR_ERROR), SSDescript(DocConstantVariableRule.AUTHOR_ERROR), SCDisplay(Name = DocConstantVariableRule.AUTHOR_ERROR)]
        AUTHOR_ERROR = 69422933,
        [EnumMember(Value = DocConstantVariableRule.CORRECTION), SCDescript(DocConstantVariableRule.CORRECTION), SSDescript(DocConstantVariableRule.CORRECTION), SCDisplay(Name = DocConstantVariableRule.CORRECTION)]
        CORRECTION = 69422934,
        [EnumMember(Value = DocConstantVariableRule.CUSTOMIZATION), SCDescript(DocConstantVariableRule.CUSTOMIZATION), SSDescript(DocConstantVariableRule.CUSTOMIZATION), SCDisplay(Name = DocConstantVariableRule.CUSTOMIZATION)]
        CUSTOMIZATION = 69422935,
        [EnumMember(Value = DocConstantVariableRule.INVERSION), SCDescript(DocConstantVariableRule.INVERSION), SSDescript(DocConstantVariableRule.INVERSION), SCDisplay(Name = DocConstantVariableRule.INVERSION)]
        INVERSION = 69422936,
        [EnumMember(Value = DocConstantVariableRule.NORMALIZATION), SCDescript(DocConstantVariableRule.NORMALIZATION), SSDescript(DocConstantVariableRule.NORMALIZATION), SCDisplay(Name = DocConstantVariableRule.NORMALIZATION)]
        NORMALIZATION = 69422937,
        [EnumMember(Value = DocConstantVariableRule.STUDY_EDIT), SCDescript(DocConstantVariableRule.STUDY_EDIT), SSDescript(DocConstantVariableRule.STUDY_EDIT), SCDisplay(Name = DocConstantVariableRule.STUDY_EDIT)]
        STUDY_EDIT = 69422938
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this VariableRuleEnm instance)
        {
            switch(instance)
            {
                case VariableRuleEnm.ADDITION:
                    return DocConstantVariableRule.ADDITION;
                case VariableRuleEnm.AGGREGATION:
                    return DocConstantVariableRule.AGGREGATION;
                case VariableRuleEnm.AUTHOR_ERROR:
                    return DocConstantVariableRule.AUTHOR_ERROR;
                case VariableRuleEnm.CORRECTION:
                    return DocConstantVariableRule.CORRECTION;
                case VariableRuleEnm.CUSTOMIZATION:
                    return DocConstantVariableRule.CUSTOMIZATION;
                case VariableRuleEnm.INVERSION:
                    return DocConstantVariableRule.INVERSION;
                case VariableRuleEnm.NORMALIZATION:
                    return DocConstantVariableRule.NORMALIZATION;
                case VariableRuleEnm.STUDY_EDIT:
                    return DocConstantVariableRule.STUDY_EDIT;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this VariableRuleEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantVariableRule : IEquatable<DocConstantVariableRule>, IEqualityComparer<DocConstantVariableRule>
    {
        public const string ADDITION = "Addition";
        public const string AGGREGATION = "Aggregation";
        public const string AUTHOR_ERROR = "Author Error";
        public const string CORRECTION = "Correction";
        public const string CUSTOMIZATION = "Customization";
        public const string INVERSION = "Inversion";
        public const string NORMALIZATION = "Normalization";
        public const string STUDY_EDIT = "Study Edit";
        
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantVariableRule).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantVariableRule(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantVariableRule(string Val) => new DocConstantVariableRule(Val);

        public static implicit operator string(DocConstantVariableRule item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantVariableRule(VariableRuleEnm Val) => new DocConstantVariableRule(Val.ToEnumString());

        public static explicit operator VariableRuleEnm(DocConstantVariableRule item)
        {
            Enum.TryParse<VariableRuleEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;



        public bool Equals(DocConstantVariableRule obj) => this == obj;

        public static bool operator ==(DocConstantVariableRule x, DocConstantVariableRule y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantVariableRule x, DocConstantVariableRule y) => x == y;
        
        public static bool operator !=(DocConstantVariableRule x, DocConstantVariableRule y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantVariableRule))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantVariableRule) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantVariableRule obj) => obj?.GetHashCode() ?? -17;

    }
}
