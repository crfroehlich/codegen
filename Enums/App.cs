//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum AppEnm
    {
        [EnumMember(Value = DocConstantApp.BAMBOO)]
        BAMBOO,
        [EnumMember(Value = DocConstantApp.BITBUCKET)]
        BITBUCKET,
        [EnumMember(Value = DocConstantApp.CONFLUENCE)]
        CONFLUENCE,
        [EnumMember(Value = DocConstantApp.DOC_CREATE)]
        DOC_CREATE,
        [EnumMember(Value = DocConstantApp.DOC_DASHBOARD)]
        DOC_DASHBOARD,
        [EnumMember(Value = DocConstantApp.DOC_DATA_ADMIN)]
        DOC_DATA_ADMIN,
        [EnumMember(Value = DocConstantApp.DOC_DATA_V1)]
        DOC_DATA_V1,
        [EnumMember(Value = DocConstantApp.DOC_DATA_V2)]
        DOC_DATA_V2,
        [EnumMember(Value = DocConstantApp.DOC_DEVELOPMENT)]
        DOC_DEVELOPMENT,
        [EnumMember(Value = DocConstantApp.DOC_EXTRACT_V1)]
        DOC_EXTRACT_V1,
        [EnumMember(Value = DocConstantApp.DOC_EXTRACT_V2)]
        DOC_EXTRACT_V2,
        [EnumMember(Value = DocConstantApp.DOC_EXTRACT_V3)]
        DOC_EXTRACT_V3,
        [EnumMember(Value = DocConstantApp.DOC_LABEL)]
        DOC_LABEL,
        [EnumMember(Value = DocConstantApp.DOC_LIBRARY)]
        DOC_LIBRARY,
        [EnumMember(Value = DocConstantApp.DOC_NHANES)]
        DOC_NHANES,
        [EnumMember(Value = DocConstantApp.DOC_SEARCH)]
        DOC_SEARCH,
        [EnumMember(Value = DocConstantApp.DOC_TIMELY)]
        DOC_TIMELY,
        [EnumMember(Value = DocConstantApp.DOC_TRACK)]
        DOC_TRACK,
        [EnumMember(Value = DocConstantApp.DRE_ADMIN)]
        DRE_ADMIN,
        [EnumMember(Value = DocConstantApp.GRADE)]
        GRADE,
        [EnumMember(Value = DocConstantApp.GROWTH)]
        GROWTH,
        [EnumMember(Value = DocConstantApp.JIRA)]
        JIRA,
        [EnumMember(Value = DocConstantApp.LAUNCH)]
        LAUNCH,
        [EnumMember(Value = DocConstantApp.LMS)]
        LMS,
        [EnumMember(Value = DocConstantApp.LOGIN)]
        LOGIN,
        [EnumMember(Value = DocConstantApp.MISC)]
        MISC,
        [EnumMember(Value = DocConstantApp.REPORTS)]
        REPORTS,
        [EnumMember(Value = DocConstantApp.SERVE)]
        SERVE
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this AppEnm instance)
        {
            switch(instance) 
            {
                case AppEnm.BAMBOO:
                    return DocConstantApp.BAMBOO;
                case AppEnm.BITBUCKET:
                    return DocConstantApp.BITBUCKET;
                case AppEnm.CONFLUENCE:
                    return DocConstantApp.CONFLUENCE;
                case AppEnm.DOC_CREATE:
                    return DocConstantApp.DOC_CREATE;
                case AppEnm.DOC_DASHBOARD:
                    return DocConstantApp.DOC_DASHBOARD;
                case AppEnm.DOC_DATA_ADMIN:
                    return DocConstantApp.DOC_DATA_ADMIN;
                case AppEnm.DOC_DATA_V1:
                    return DocConstantApp.DOC_DATA_V1;
                case AppEnm.DOC_DATA_V2:
                    return DocConstantApp.DOC_DATA_V2;
                case AppEnm.DOC_DEVELOPMENT:
                    return DocConstantApp.DOC_DEVELOPMENT;
                case AppEnm.DOC_EXTRACT_V1:
                    return DocConstantApp.DOC_EXTRACT_V1;
                case AppEnm.DOC_EXTRACT_V2:
                    return DocConstantApp.DOC_EXTRACT_V2;
                case AppEnm.DOC_EXTRACT_V3:
                    return DocConstantApp.DOC_EXTRACT_V3;
                case AppEnm.DOC_LABEL:
                    return DocConstantApp.DOC_LABEL;
                case AppEnm.DOC_LIBRARY:
                    return DocConstantApp.DOC_LIBRARY;
                case AppEnm.DOC_NHANES:
                    return DocConstantApp.DOC_NHANES;
                case AppEnm.DOC_SEARCH:
                    return DocConstantApp.DOC_SEARCH;
                case AppEnm.DOC_TIMELY:
                    return DocConstantApp.DOC_TIMELY;
                case AppEnm.DOC_TRACK:
                    return DocConstantApp.DOC_TRACK;
                case AppEnm.DRE_ADMIN:
                    return DocConstantApp.DRE_ADMIN;
                case AppEnm.GRADE:
                    return DocConstantApp.GRADE;
                case AppEnm.GROWTH:
                    return DocConstantApp.GROWTH;
                case AppEnm.JIRA:
                    return DocConstantApp.JIRA;
                case AppEnm.LAUNCH:
                    return DocConstantApp.LAUNCH;
                case AppEnm.LMS:
                    return DocConstantApp.LMS;
                case AppEnm.LOGIN:
                    return DocConstantApp.LOGIN;
                case AppEnm.MISC:
                    return DocConstantApp.MISC;
                case AppEnm.REPORTS:
                    return DocConstantApp.REPORTS;
                case AppEnm.SERVE:
                    return DocConstantApp.SERVE;
                default:
                    return string.Empty;
            }
        }
    }

    public sealed partial class DocConstantApp : IEquatable<DocConstantApp>, IEqualityComparer<DocConstantApp>
    {
        public const string BAMBOO = "Bamboo";
        public const string BITBUCKET = "Bitbucket";
        public const string CONFLUENCE = "Confluence";
        public const string DOC_CREATE = "DOC Create";
        public const string DOC_DASHBOARD = "DOC Dashboard";
        public const string DOC_DATA_ADMIN = "DOC Data Admin";
        public const string DOC_DATA_V1 = "DOC Data 1.0";
        public const string DOC_DATA_V2 = "DOC Data";
        public const string DOC_DEVELOPMENT = "DOC Development";
        public const string DOC_EXTRACT_V1 = "Doc Extract 1.0";
        public const string DOC_EXTRACT_V2 = "Doc Extract 2.0";
        public const string DOC_EXTRACT_V3 = "Doc Extract 3.0";
        public const string DOC_LABEL = "DOC Label";
        public const string DOC_LIBRARY = "DOC Library";
        public const string DOC_NHANES = "DOC NHANES";
        public const string DOC_SEARCH = "DOC Search";
        public const string DOC_TIMELY = "DOC Timely";
        public const string DOC_TRACK = "DOC Track";
        public const string DRE_ADMIN = "DRE Admin";
        public const string GRADE = "GRADE";
        public const string GROWTH = "GROWTH";
        public const string JIRA = "Jira";
        public const string LAUNCH = "Launch";
        public const string LMS = "LMS";
        public const string LOGIN = "Login";
        public const string MISC = "Miscellaneous";
        public const string REPORTS = "Reports";
        public const string SERVE = "SERVE";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantApp).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantApp(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantApp(string Val) => new DocConstantApp(Val);

        public static implicit operator string(DocConstantApp item) => item?.Value ?? string.Empty;

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantApp obj) => this == obj;

        public static bool operator ==(DocConstantApp x, DocConstantApp y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantApp x, DocConstantApp y) => x == y;
        
        public static bool operator !=(DocConstantApp x, DocConstantApp y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantApp))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantApp) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantApp obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
