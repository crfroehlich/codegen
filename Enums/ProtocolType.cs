//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ProtocolTypeEnm
    {
        [EnumMember(Value = DocConstantProtocolType.DATA), SCDescript(DocConstantProtocolType.DATA), SSDescript(DocConstantProtocolType.DATA), SCDisplay(Name = DocConstantProtocolType.DATA)]
        DATA = 46351014,
        [EnumMember(Value = DocConstantProtocolType.FULL), SCDescript(DocConstantProtocolType.FULL), SSDescript(DocConstantProtocolType.FULL), SCDisplay(Name = DocConstantProtocolType.FULL)]
        FULL = 46351020,
        [EnumMember(Value = DocConstantProtocolType.SEARCH), SCDescript(DocConstantProtocolType.SEARCH), SSDescript(DocConstantProtocolType.SEARCH), SCDisplay(Name = DocConstantProtocolType.SEARCH)]
        SEARCH = 46351026
    }
    
    public static partial class EnumExtensions
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static string ToEnumString(this ProtocolTypeEnm instance)
        {
            switch(instance)
            {
                case ProtocolTypeEnm.DATA:
                    return DocConstantProtocolType.DATA;
                case ProtocolTypeEnm.FULL:
                    return DocConstantProtocolType.FULL;
                case ProtocolTypeEnm.SEARCH:
                    return DocConstantProtocolType.SEARCH;
                default:
                    return string.Empty;
            }
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static string ToEnumString(this ProtocolTypeEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantProtocolType : IEquatable<DocConstantProtocolType>, IEqualityComparer<DocConstantProtocolType>
    {
        public const string DATA = "Data";
        public const string FULL = "Full";
        public const string SEARCH = "Search";
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private static List<string> _all;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> All => _all ?? (_all = typeof(DocConstantProtocolType).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private readonly string Value;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private DocConstantProtocolType(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static implicit operator DocConstantProtocolType(string Val) => new DocConstantProtocolType(Val);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static implicit operator string(DocConstantProtocolType item) => item?.Value ?? string.Empty;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator DocConstantProtocolType(ProtocolTypeEnm Val) => new DocConstantProtocolType(Val.ToEnumString());
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator ProtocolTypeEnm(DocConstantProtocolType item)
        {
            Enum.TryParse<ProtocolTypeEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override string ToString() => Value;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Equals(DocConstantProtocolType obj) => this == obj;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static bool operator ==(DocConstantProtocolType x, DocConstantProtocolType y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Equals(DocConstantProtocolType x, DocConstantProtocolType y) => x == y;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static bool operator !=(DocConstantProtocolType x, DocConstantProtocolType y) => !(x == y);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantProtocolType))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantProtocolType) obj;
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int GetHashCode(DocConstantProtocolType obj) => obj?.GetHashCode() ?? -17;
    }
}
