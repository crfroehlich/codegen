//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ReasonRejectedEnm
    {
        [EnumMember(Value = DocConstantReasonRejected.ABSTRACT_INSUFFICIENT_INFORMATION)]
        ABSTRACT_INSUFFICIENT_INFORMATION,
        [EnumMember(Value = DocConstantReasonRejected.ANIMAL_STUDY)]
        ANIMAL_STUDY,
        [EnumMember(Value = DocConstantReasonRejected.DOES_NOT_MEET_PROTOCOL)]
        DOES_NOT_MEET_PROTOCOL,
        [EnumMember(Value = DocConstantReasonRejected.DUPLICATE_PUBLICATION)]
        DUPLICATE_PUBLICATION,
        [EnumMember(Value = DocConstantReasonRejected.ERRONEOUS_DATA)]
        ERRONEOUS_DATA,
        [EnumMember(Value = DocConstantReasonRejected.FAILED_JOURNAL_FILTER)]
        FAILED_JOURNAL_FILTER,
        [EnumMember(Value = DocConstantReasonRejected.IN_VITRO_STUDY)]
        IN_VITRO_STUDY,
        [EnumMember(Value = DocConstantReasonRejected.MISSING_CHARACTERISTICS)]
        MISSING_CHARACTERISTICS,
        [EnumMember(Value = DocConstantReasonRejected.MISSING_OUTCOMES)]
        MISSING_OUTCOMES,
        [EnumMember(Value = DocConstantReasonRejected.NOT_CLINICAL_STUDY)]
        NOT_CLINICAL_STUDY,
        [EnumMember(Value = DocConstantReasonRejected.NOT_ENGLISH)]
        NOT_ENGLISH,
        [EnumMember(Value = DocConstantReasonRejected.NOT_TREAMENT_STUDY)]
        NOT_TREAMENT_STUDY,
        [EnumMember(Value = DocConstantReasonRejected.OTHER)]
        OTHER,
        [EnumMember(Value = DocConstantReasonRejected.RELEVANT_MISCLASSIFIED_REFERENCE)]
        RELEVANT_MISCLASSIFIED_REFERENCE,
        [EnumMember(Value = DocConstantReasonRejected.STUDY_FITS_PROTOCOL_ADD_LATER)]
        STUDY_FITS_PROTOCOL_ADD_LATER,
        [EnumMember(Value = DocConstantReasonRejected.WRONG_COMPARISON)]
        WRONG_COMPARISON,
        [EnumMember(Value = DocConstantReasonRejected.WRONG_FOLLOWUP)]
        WRONG_FOLLOWUP,
        [EnumMember(Value = DocConstantReasonRejected.WRONG_INTERVENTION)]
        WRONG_INTERVENTION,
        [EnumMember(Value = DocConstantReasonRejected.WRONG_NUMBER_PARTICIPANTS)]
        WRONG_NUMBER_PARTICIPANTS,
        [EnumMember(Value = DocConstantReasonRejected.WRONG_OUTCOME_STRATIFICATION)]
        WRONG_OUTCOME_STRATIFICATION,
        [EnumMember(Value = DocConstantReasonRejected.WRONG_OUTCOMES)]
        WRONG_OUTCOMES,
        [EnumMember(Value = DocConstantReasonRejected.WRONG_POPULATION)]
        WRONG_POPULATION,
        [EnumMember(Value = DocConstantReasonRejected.WRONG_PUBLICATION_DATE_CUTOFF)]
        WRONG_PUBLICATION_DATE_CUTOFF,
        [EnumMember(Value = DocConstantReasonRejected.WRONG_STUDY_DESIGN)]
        WRONG_STUDY_DESIGN
    }
    
    public sealed partial class DocConstantReasonRejected
    {
        public const string ABSTRACT_INSUFFICIENT_INFORMATION = "Abstract with Insufficient Information";
        public const string ANIMAL_STUDY = "Animal study";
        public const string DOES_NOT_MEET_PROTOCOL = "Does not meet protocol";
        public const string DUPLICATE_PUBLICATION = "Duplicate Publication";
        public const string ERRONEOUS_DATA = "Erroneous Data";
        public const string FAILED_JOURNAL_FILTER = "Failed Journal Filter";
        public const string IN_VITRO_STUDY = "In vitro study";
        public const string MISSING_CHARACTERISTICS = "Missing Characteristic(s)";
        public const string MISSING_OUTCOMES = "Missing Outcome(s)";
        public const string NOT_CLINICAL_STUDY = "Not a Clinical Study";
        public const string NOT_ENGLISH = "Not English";
        public const string NOT_TREAMENT_STUDY = "Not a treatment Study";
        public const string OTHER = "Other";
        public const string RELEVANT_MISCLASSIFIED_REFERENCE = "Relevant misclassified reference";
        public const string STUDY_FITS_PROTOCOL_ADD_LATER = "Study fits protocol, to be possibly added later";
        public const string WRONG_COMPARISON = "Wrong Comparison";
        public const string WRONG_FOLLOWUP = "Wrong Follow-up";
        public const string WRONG_INTERVENTION = "Wrong Intervention";
        public const string WRONG_NUMBER_PARTICIPANTS = "Wrong Number of Participants";
        public const string WRONG_OUTCOME_STRATIFICATION = "Wrong Outcome Stratification";
        public const string WRONG_OUTCOMES = "Wrong Outcome(s)";
        public const string WRONG_POPULATION = "Wrong Population";
        public const string WRONG_PUBLICATION_DATE_CUTOFF = "Wrong Publication Date Cutoff";
        public const string WRONG_STUDY_DESIGN = "Wrong Study Design";
        
        #region Internals
        
        private static List<string> _all;
        
        public static List<string> All => _all ?? (_all = typeof(DocConstantReasonRejected).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        /// <summary>
        ///    The string value of the current instance
        /// </summary>
        private readonly string Value;

        /// <summary>
        ///    The enum constructor
        /// </summary>
        /// <param name="ItemName">Name of the item.</param>
        private DocConstantReasonRejected(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        /// <summary>
        /// Determines if the Constant contains an exact match (case insensitive) for the name
        /// </summary>
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        /// <summary>
        ///    Implicit cast to Enum
        /// </summary>
        /// <param name="Val">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator DocConstantReasonRejected(string Val)
        {
            return new DocConstantReasonRejected(Val);
        }

        /// <summary>
        ///    Implicit cast to string
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator string(DocConstantReasonRejected item)
        {
            return item?.Value ?? string.Empty;
        }

        /// <summary>
        ///    Override of ToString
        /// </summary>
        /// <returns>A <see cref="System.String" /> that represents this instance.</returns>
        public override string ToString()
        {
            return Value;
        }

        #endregion Internals

        #region IEquatable (DocConstantReasonRejected)

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public bool Equals(DocConstantReasonRejected obj)
        {
            return this == obj;
        }

        /// <summary>
        ///    == Equality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator ==(DocConstantReasonRejected ft1, DocConstantReasonRejected ft2)
        {
            //do a string comparison on the fieldtypes
            return string.Equals(Convert.ToString(ft1), Convert.ToString(ft2), StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        ///    != Inequality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator !=(DocConstantReasonRejected ft1, DocConstantReasonRejected ft2)
        {
            return !(ft1 == ft2);
        }

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantReasonRejected))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantReasonRejected) obj;
            }
            return ret;
        }

        /// <summary>
        ///    Get Hash Code
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode()
        {
            var ret = 23;
            const int prime = 37;
            ret = (ret * prime) + Value.GetHashCode();
            ret = (ret * prime) + All.GetHashCode();
            return ret;
        }

        #endregion IEquatable (DocConstantReasonRejected)
    }
}
