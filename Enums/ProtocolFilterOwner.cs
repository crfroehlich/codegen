//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ProtocolFilterOwnerEnm
    {
        [EnumMember(Value = DocConstantProtocolFilterOwner.ATTRIBUTE), SCDescript(DocConstantProtocolFilterOwner.ATTRIBUTE), SSDescript(DocConstantProtocolFilterOwner.ATTRIBUTE), SCDisplay(Name = DocConstantProtocolFilterOwner.ATTRIBUTE)]
        ATTRIBUTE = 9093548,
        [EnumMember(Value = DocConstantProtocolFilterOwner.DOSAGE_VALUE), SCDescript(DocConstantProtocolFilterOwner.DOSAGE_VALUE), SSDescript(DocConstantProtocolFilterOwner.DOSAGE_VALUE), SCDisplay(Name = DocConstantProtocolFilterOwner.DOSAGE_VALUE)]
        DOSAGE_VALUE = 9093553,
        [EnumMember(Value = DocConstantProtocolFilterOwner.GROUP), SCDescript(DocConstantProtocolFilterOwner.GROUP), SSDescript(DocConstantProtocolFilterOwner.GROUP), SCDisplay(Name = DocConstantProtocolFilterOwner.GROUP)]
        GROUP = 9093558,
        [EnumMember(Value = DocConstantProtocolFilterOwner.INTERVENTION), SCDescript(DocConstantProtocolFilterOwner.INTERVENTION), SSDescript(DocConstantProtocolFilterOwner.INTERVENTION), SCDisplay(Name = DocConstantProtocolFilterOwner.INTERVENTION)]
        INTERVENTION = 9093563,
        [EnumMember(Value = DocConstantProtocolFilterOwner.STUDY), SCDescript(DocConstantProtocolFilterOwner.STUDY), SSDescript(DocConstantProtocolFilterOwner.STUDY), SCDisplay(Name = DocConstantProtocolFilterOwner.STUDY)]
        STUDY = 9093568
    }
    
    public static partial class EnumExtensions
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static string ToEnumString(this ProtocolFilterOwnerEnm instance)
        {
            switch(instance)
            {
                case ProtocolFilterOwnerEnm.ATTRIBUTE:
                    return DocConstantProtocolFilterOwner.ATTRIBUTE;
                case ProtocolFilterOwnerEnm.DOSAGE_VALUE:
                    return DocConstantProtocolFilterOwner.DOSAGE_VALUE;
                case ProtocolFilterOwnerEnm.GROUP:
                    return DocConstantProtocolFilterOwner.GROUP;
                case ProtocolFilterOwnerEnm.INTERVENTION:
                    return DocConstantProtocolFilterOwner.INTERVENTION;
                case ProtocolFilterOwnerEnm.STUDY:
                    return DocConstantProtocolFilterOwner.STUDY;
                default:
                    return string.Empty;
            }
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static string ToEnumString(this ProtocolFilterOwnerEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantProtocolFilterOwner : IEquatable<DocConstantProtocolFilterOwner>, IEqualityComparer<DocConstantProtocolFilterOwner>
    {
        public const string ATTRIBUTE = "Attribute";
        public const string DOSAGE_VALUE = "Dosage Value";
        public const string GROUP = "Group";
        public const string INTERVENTION = "Intervention";
        public const string STUDY = "Study";
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private static List<string> _all;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> All => _all ?? (_all = typeof(DocConstantProtocolFilterOwner).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private readonly string Value;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private DocConstantProtocolFilterOwner(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static implicit operator DocConstantProtocolFilterOwner(string Val) => new DocConstantProtocolFilterOwner(Val);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static implicit operator string(DocConstantProtocolFilterOwner item) => item?.Value ?? string.Empty;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator DocConstantProtocolFilterOwner(ProtocolFilterOwnerEnm Val) => new DocConstantProtocolFilterOwner(Val.ToEnumString());
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator ProtocolFilterOwnerEnm(DocConstantProtocolFilterOwner item)
        {
            Enum.TryParse<ProtocolFilterOwnerEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override string ToString() => Value;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Equals(DocConstantProtocolFilterOwner obj) => this == obj;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static bool operator ==(DocConstantProtocolFilterOwner x, DocConstantProtocolFilterOwner y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Equals(DocConstantProtocolFilterOwner x, DocConstantProtocolFilterOwner y) => x == y;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static bool operator !=(DocConstantProtocolFilterOwner x, DocConstantProtocolFilterOwner y) => !(x == y);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantProtocolFilterOwner))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantProtocolFilterOwner) obj;
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int GetHashCode(DocConstantProtocolFilterOwner obj) => obj?.GetHashCode() ?? -17;
    }
}
