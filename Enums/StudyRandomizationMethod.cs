
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StudyRandomizationMethodEnm
    {
        [EnumMember(Value = DocConstantStudyRandomizationMethod.CLUSTER), SCDescript(DocConstantStudyRandomizationMethod.CLUSTER), SSDescript(DocConstantStudyRandomizationMethod.CLUSTER), SCDisplay(Name = DocConstantStudyRandomizationMethod.CLUSTER)]
        CLUSTER = 3658,
        [EnumMember(Value = DocConstantStudyRandomizationMethod.INDIVIDUAL), SCDescript(DocConstantStudyRandomizationMethod.INDIVIDUAL), SSDescript(DocConstantStudyRandomizationMethod.INDIVIDUAL), SCDisplay(Name = DocConstantStudyRandomizationMethod.INDIVIDUAL)]
        INDIVIDUAL = 3663,
        [EnumMember(Value = DocConstantStudyRandomizationMethod.INDIVIDUAL_CLUSTER), SCDescript(DocConstantStudyRandomizationMethod.INDIVIDUAL_CLUSTER), SSDescript(DocConstantStudyRandomizationMethod.INDIVIDUAL_CLUSTER), SCDisplay(Name = DocConstantStudyRandomizationMethod.INDIVIDUAL_CLUSTER)]
        INDIVIDUAL_CLUSTER = 3668,
        [EnumMember(Value = DocConstantStudyRandomizationMethod.N_A), SCDescript(DocConstantStudyRandomizationMethod.N_A), SSDescript(DocConstantStudyRandomizationMethod.N_A), SCDisplay(Name = DocConstantStudyRandomizationMethod.N_A)]
        N_A = 3673,
        [EnumMember(Value = DocConstantStudyRandomizationMethod.NR), SCDescript(DocConstantStudyRandomizationMethod.NR), SSDescript(DocConstantStudyRandomizationMethod.NR), SCDisplay(Name = DocConstantStudyRandomizationMethod.NR)]
        NR = 3678
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this StudyRandomizationMethodEnm instance)
        {
            switch(instance)
            {
                case StudyRandomizationMethodEnm.CLUSTER:
                    return DocConstantStudyRandomizationMethod.CLUSTER;
                case StudyRandomizationMethodEnm.INDIVIDUAL:
                    return DocConstantStudyRandomizationMethod.INDIVIDUAL;
                case StudyRandomizationMethodEnm.INDIVIDUAL_CLUSTER:
                    return DocConstantStudyRandomizationMethod.INDIVIDUAL_CLUSTER;
                case StudyRandomizationMethodEnm.N_A:
                    return DocConstantStudyRandomizationMethod.N_A;
                case StudyRandomizationMethodEnm.NR:
                    return DocConstantStudyRandomizationMethod.NR;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this StudyRandomizationMethodEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantStudyRandomizationMethod : IEquatable<DocConstantStudyRandomizationMethod>, IEqualityComparer<DocConstantStudyRandomizationMethod>
    {
        public const string CLUSTER = "Cluster";
        public const string INDIVIDUAL = "Individual";
        public const string INDIVIDUAL_CLUSTER = "Individual/Cluster";
        public const string N_A = "N/A";
        public const string NR = "NR";
        
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantStudyRandomizationMethod).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantStudyRandomizationMethod(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantStudyRandomizationMethod(string Val) => new DocConstantStudyRandomizationMethod(Val);

        public static implicit operator string(DocConstantStudyRandomizationMethod item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantStudyRandomizationMethod(StudyRandomizationMethodEnm Val) => new DocConstantStudyRandomizationMethod(Val.ToEnumString());

        public static explicit operator StudyRandomizationMethodEnm(DocConstantStudyRandomizationMethod item)
        {
            Enum.TryParse<StudyRandomizationMethodEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;



        public bool Equals(DocConstantStudyRandomizationMethod obj) => this == obj;

        public static bool operator ==(DocConstantStudyRandomizationMethod x, DocConstantStudyRandomizationMethod y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantStudyRandomizationMethod x, DocConstantStudyRandomizationMethod y) => x == y;
        
        public static bool operator !=(DocConstantStudyRandomizationMethod x, DocConstantStudyRandomizationMethod y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantStudyRandomizationMethod))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantStudyRandomizationMethod) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantStudyRandomizationMethod obj) => obj?.GetHashCode() ?? -17;

    }
}
