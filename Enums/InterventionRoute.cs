
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum InterventionRouteEnm
    {
        [EnumMember(Value = DocConstantInterventionRoute.GROUP_THERAPY), SCDescript(DocConstantInterventionRoute.GROUP_THERAPY), SSDescript(DocConstantInterventionRoute.GROUP_THERAPY), SCDisplay(Name = DocConstantInterventionRoute.GROUP_THERAPY)]
        GROUP_THERAPY = 1272,
        [EnumMember(Value = DocConstantInterventionRoute.HAI), SCDescript(DocConstantInterventionRoute.HAI), SSDescript(DocConstantInterventionRoute.HAI), SCDisplay(Name = DocConstantInterventionRoute.HAI)]
        HAI = 1277,
        [EnumMember(Value = DocConstantInterventionRoute.I_V), SCDescript(DocConstantInterventionRoute.I_V), SSDescript(DocConstantInterventionRoute.I_V), SCDisplay(Name = DocConstantInterventionRoute.I_V)]
        I_V = 1282,
        [EnumMember(Value = DocConstantInterventionRoute.IMPLANT), SCDescript(DocConstantInterventionRoute.IMPLANT), SSDescript(DocConstantInterventionRoute.IMPLANT), SCDisplay(Name = DocConstantInterventionRoute.IMPLANT)]
        IMPLANT = 1287,
        [EnumMember(Value = DocConstantInterventionRoute.INDIVIDUAL_THERAPY), SCDescript(DocConstantInterventionRoute.INDIVIDUAL_THERAPY), SSDescript(DocConstantInterventionRoute.INDIVIDUAL_THERAPY), SCDisplay(Name = DocConstantInterventionRoute.INDIVIDUAL_THERAPY)]
        INDIVIDUAL_THERAPY = 1292,
        [EnumMember(Value = DocConstantInterventionRoute.INHALENT), SCDescript(DocConstantInterventionRoute.INHALENT), SSDescript(DocConstantInterventionRoute.INHALENT), SCDisplay(Name = DocConstantInterventionRoute.INHALENT)]
        INHALENT = 1297,
        [EnumMember(Value = DocConstantInterventionRoute.INJECTION), SCDescript(DocConstantInterventionRoute.INJECTION), SSDescript(DocConstantInterventionRoute.INJECTION), SCDisplay(Name = DocConstantInterventionRoute.INJECTION)]
        INJECTION = 1302,
        [EnumMember(Value = DocConstantInterventionRoute.INSTILLED_INTO_EYE), SCDescript(DocConstantInterventionRoute.INSTILLED_INTO_EYE), SSDescript(DocConstantInterventionRoute.INSTILLED_INTO_EYE), SCDisplay(Name = DocConstantInterventionRoute.INSTILLED_INTO_EYE)]
        INSTILLED_INTO_EYE = 1307,
        [EnumMember(Value = DocConstantInterventionRoute.INTRAMUSCULAR), SCDescript(DocConstantInterventionRoute.INTRAMUSCULAR), SSDescript(DocConstantInterventionRoute.INTRAMUSCULAR), SCDisplay(Name = DocConstantInterventionRoute.INTRAMUSCULAR)]
        INTRAMUSCULAR = 1312,
        [EnumMember(Value = DocConstantInterventionRoute.INTRANASAL), SCDescript(DocConstantInterventionRoute.INTRANASAL), SSDescript(DocConstantInterventionRoute.INTRANASAL), SCDisplay(Name = DocConstantInterventionRoute.INTRANASAL)]
        INTRANASAL = 1317,
        [EnumMember(Value = DocConstantInterventionRoute.INTRATHECAL), SCDescript(DocConstantInterventionRoute.INTRATHECAL), SSDescript(DocConstantInterventionRoute.INTRATHECAL), SCDisplay(Name = DocConstantInterventionRoute.INTRATHECAL)]
        INTRATHECAL = 1322,
        [EnumMember(Value = DocConstantInterventionRoute.INTRAVESICULAR), SCDescript(DocConstantInterventionRoute.INTRAVESICULAR), SSDescript(DocConstantInterventionRoute.INTRAVESICULAR), SCDisplay(Name = DocConstantInterventionRoute.INTRAVESICULAR)]
        INTRAVESICULAR = 1327,
        [EnumMember(Value = DocConstantInterventionRoute.IONTOPHORETIC), SCDescript(DocConstantInterventionRoute.IONTOPHORETIC), SSDescript(DocConstantInterventionRoute.IONTOPHORETIC), SCDisplay(Name = DocConstantInterventionRoute.IONTOPHORETIC)]
        IONTOPHORETIC = 1332,
        [EnumMember(Value = DocConstantInterventionRoute.LAPAROSCOPIC_SURGERY), SCDescript(DocConstantInterventionRoute.LAPAROSCOPIC_SURGERY), SSDescript(DocConstantInterventionRoute.LAPAROSCOPIC_SURGERY), SCDisplay(Name = DocConstantInterventionRoute.LAPAROSCOPIC_SURGERY)]
        LAPAROSCOPIC_SURGERY = 1337,
        [EnumMember(Value = DocConstantInterventionRoute.OPEN_SURGERY), SCDescript(DocConstantInterventionRoute.OPEN_SURGERY), SSDescript(DocConstantInterventionRoute.OPEN_SURGERY), SCDisplay(Name = DocConstantInterventionRoute.OPEN_SURGERY)]
        OPEN_SURGERY = 1342,
        [EnumMember(Value = DocConstantInterventionRoute.ORAL), SCDescript(DocConstantInterventionRoute.ORAL), SSDescript(DocConstantInterventionRoute.ORAL), SCDisplay(Name = DocConstantInterventionRoute.ORAL)]
        ORAL = 1347,
        [EnumMember(Value = DocConstantInterventionRoute.SUBQ), SCDescript(DocConstantInterventionRoute.SUBQ), SSDescript(DocConstantInterventionRoute.SUBQ), SCDisplay(Name = DocConstantInterventionRoute.SUBQ)]
        SUBQ = 1352,
        [EnumMember(Value = DocConstantInterventionRoute.SUBQ_PEN), SCDescript(DocConstantInterventionRoute.SUBQ_PEN), SSDescript(DocConstantInterventionRoute.SUBQ_PEN), SCDisplay(Name = DocConstantInterventionRoute.SUBQ_PEN)]
        SUBQ_PEN = 1357,
        [EnumMember(Value = DocConstantInterventionRoute.SUBQ_VIAL), SCDescript(DocConstantInterventionRoute.SUBQ_VIAL), SSDescript(DocConstantInterventionRoute.SUBQ_VIAL), SCDisplay(Name = DocConstantInterventionRoute.SUBQ_VIAL)]
        SUBQ_VIAL = 1362,
        [EnumMember(Value = DocConstantInterventionRoute.SUPPOSITORY), SCDescript(DocConstantInterventionRoute.SUPPOSITORY), SSDescript(DocConstantInterventionRoute.SUPPOSITORY), SCDisplay(Name = DocConstantInterventionRoute.SUPPOSITORY)]
        SUPPOSITORY = 1367,
        [EnumMember(Value = DocConstantInterventionRoute.TOPICAL), SCDescript(DocConstantInterventionRoute.TOPICAL), SSDescript(DocConstantInterventionRoute.TOPICAL), SCDisplay(Name = DocConstantInterventionRoute.TOPICAL)]
        TOPICAL = 1372,
        [EnumMember(Value = DocConstantInterventionRoute.TRANSDERMAL), SCDescript(DocConstantInterventionRoute.TRANSDERMAL), SSDescript(DocConstantInterventionRoute.TRANSDERMAL), SCDisplay(Name = DocConstantInterventionRoute.TRANSDERMAL)]
        TRANSDERMAL = 1377
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this InterventionRouteEnm instance)
        {
            switch(instance)
            {
                case InterventionRouteEnm.GROUP_THERAPY:
                    return DocConstantInterventionRoute.GROUP_THERAPY;
                case InterventionRouteEnm.HAI:
                    return DocConstantInterventionRoute.HAI;
                case InterventionRouteEnm.I_V:
                    return DocConstantInterventionRoute.I_V;
                case InterventionRouteEnm.IMPLANT:
                    return DocConstantInterventionRoute.IMPLANT;
                case InterventionRouteEnm.INDIVIDUAL_THERAPY:
                    return DocConstantInterventionRoute.INDIVIDUAL_THERAPY;
                case InterventionRouteEnm.INHALENT:
                    return DocConstantInterventionRoute.INHALENT;
                case InterventionRouteEnm.INJECTION:
                    return DocConstantInterventionRoute.INJECTION;
                case InterventionRouteEnm.INSTILLED_INTO_EYE:
                    return DocConstantInterventionRoute.INSTILLED_INTO_EYE;
                case InterventionRouteEnm.INTRAMUSCULAR:
                    return DocConstantInterventionRoute.INTRAMUSCULAR;
                case InterventionRouteEnm.INTRANASAL:
                    return DocConstantInterventionRoute.INTRANASAL;
                case InterventionRouteEnm.INTRATHECAL:
                    return DocConstantInterventionRoute.INTRATHECAL;
                case InterventionRouteEnm.INTRAVESICULAR:
                    return DocConstantInterventionRoute.INTRAVESICULAR;
                case InterventionRouteEnm.IONTOPHORETIC:
                    return DocConstantInterventionRoute.IONTOPHORETIC;
                case InterventionRouteEnm.LAPAROSCOPIC_SURGERY:
                    return DocConstantInterventionRoute.LAPAROSCOPIC_SURGERY;
                case InterventionRouteEnm.OPEN_SURGERY:
                    return DocConstantInterventionRoute.OPEN_SURGERY;
                case InterventionRouteEnm.ORAL:
                    return DocConstantInterventionRoute.ORAL;
                case InterventionRouteEnm.SUBQ:
                    return DocConstantInterventionRoute.SUBQ;
                case InterventionRouteEnm.SUBQ_PEN:
                    return DocConstantInterventionRoute.SUBQ_PEN;
                case InterventionRouteEnm.SUBQ_VIAL:
                    return DocConstantInterventionRoute.SUBQ_VIAL;
                case InterventionRouteEnm.SUPPOSITORY:
                    return DocConstantInterventionRoute.SUPPOSITORY;
                case InterventionRouteEnm.TOPICAL:
                    return DocConstantInterventionRoute.TOPICAL;
                case InterventionRouteEnm.TRANSDERMAL:
                    return DocConstantInterventionRoute.TRANSDERMAL;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this InterventionRouteEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantInterventionRoute : IEquatable<DocConstantInterventionRoute>, IEqualityComparer<DocConstantInterventionRoute>
    {
        public const string GROUP_THERAPY = "Group Therapy";
        public const string HAI = "HAI";
        public const string I_V = "I.V.";
        public const string IMPLANT = "Implant";
        public const string INDIVIDUAL_THERAPY = "Individual Therapy";
        public const string INHALENT = "Inhalent";
        public const string INJECTION = "Injection";
        public const string INSTILLED_INTO_EYE = "Instilled into Eye";
        public const string INTRAMUSCULAR = "Intramuscular";
        public const string INTRANASAL = "Intranasal";
        public const string INTRATHECAL = "Intrathecal";
        public const string INTRAVESICULAR = "Intravesicular";
        public const string IONTOPHORETIC = "Iontophoretic";
        public const string LAPAROSCOPIC_SURGERY = "Laparoscopic Surgery";
        public const string OPEN_SURGERY = "Open Surgery";
        public const string ORAL = "ORAL";
        public const string SUBQ = "SubQ";
        public const string SUBQ_PEN = "SubQ (Pen)";
        public const string SUBQ_VIAL = "SubQ (Vial)";
        public const string SUPPOSITORY = "Suppository";
        public const string TOPICAL = "Topical";
        public const string TRANSDERMAL = "Transdermal";
        
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantInterventionRoute).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantInterventionRoute(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantInterventionRoute(string Val) => new DocConstantInterventionRoute(Val);

        public static implicit operator string(DocConstantInterventionRoute item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantInterventionRoute(InterventionRouteEnm Val) => new DocConstantInterventionRoute(Val.ToEnumString());

        public static explicit operator InterventionRouteEnm(DocConstantInterventionRoute item)
        {
            Enum.TryParse<InterventionRouteEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;



        public bool Equals(DocConstantInterventionRoute obj) => this == obj;

        public static bool operator ==(DocConstantInterventionRoute x, DocConstantInterventionRoute y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantInterventionRoute x, DocConstantInterventionRoute y) => x == y;
        
        public static bool operator !=(DocConstantInterventionRoute x, DocConstantInterventionRoute y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantInterventionRoute))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantInterventionRoute) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantInterventionRoute obj) => obj?.GetHashCode() ?? -17;

    }
}
