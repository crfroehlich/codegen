//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum InterventionRouteEnm
    {
        [EnumMember(Value = DocConstantInterventionRoute.GROUP_THERAPY)]
        GROUP_THERAPY,
        [EnumMember(Value = DocConstantInterventionRoute.HAI)]
        HAI,
        [EnumMember(Value = DocConstantInterventionRoute.I_V)]
        I_V,
        [EnumMember(Value = DocConstantInterventionRoute.IMPLANT)]
        IMPLANT,
        [EnumMember(Value = DocConstantInterventionRoute.INDIVIDUAL_THERAPY)]
        INDIVIDUAL_THERAPY,
        [EnumMember(Value = DocConstantInterventionRoute.INHALENT)]
        INHALENT,
        [EnumMember(Value = DocConstantInterventionRoute.INJECTION)]
        INJECTION,
        [EnumMember(Value = DocConstantInterventionRoute.INSTILLED_INTO_EYE)]
        INSTILLED_INTO_EYE,
        [EnumMember(Value = DocConstantInterventionRoute.INTRAMUSCULAR)]
        INTRAMUSCULAR,
        [EnumMember(Value = DocConstantInterventionRoute.INTRANASAL)]
        INTRANASAL,
        [EnumMember(Value = DocConstantInterventionRoute.INTRATHECAL)]
        INTRATHECAL,
        [EnumMember(Value = DocConstantInterventionRoute.INTRAVESICULAR)]
        INTRAVESICULAR,
        [EnumMember(Value = DocConstantInterventionRoute.IONTOPHORETIC)]
        IONTOPHORETIC,
        [EnumMember(Value = DocConstantInterventionRoute.LAPAROSCOPIC_SURGERY)]
        LAPAROSCOPIC_SURGERY,
        [EnumMember(Value = DocConstantInterventionRoute.OPEN_SURGERY)]
        OPEN_SURGERY,
        [EnumMember(Value = DocConstantInterventionRoute.ORAL)]
        ORAL,
        [EnumMember(Value = DocConstantInterventionRoute.SUBQ)]
        SUBQ,
        [EnumMember(Value = DocConstantInterventionRoute.SUBQ_PEN)]
        SUBQ_PEN,
        [EnumMember(Value = DocConstantInterventionRoute.SUBQ_VIAL)]
        SUBQ_VIAL,
        [EnumMember(Value = DocConstantInterventionRoute.SUPPOSITORY)]
        SUPPOSITORY,
        [EnumMember(Value = DocConstantInterventionRoute.TOPICAL)]
        TOPICAL,
        [EnumMember(Value = DocConstantInterventionRoute.TRANSDERMAL)]
        TRANSDERMAL
    }
    
	public static partial class EnumExtensions
    {
        public static string ToEnumString(this InterventionRouteEnm instance)
		{
			switch(instance) 
			{
                case InterventionRouteEnm.GROUP_THERAPY:
                    return DocConstantInterventionRoute.GROUP_THERAPY;
                case InterventionRouteEnm.HAI:
                    return DocConstantInterventionRoute.HAI;
                case InterventionRouteEnm.I_V:
                    return DocConstantInterventionRoute.I_V;
                case InterventionRouteEnm.IMPLANT:
                    return DocConstantInterventionRoute.IMPLANT;
                case InterventionRouteEnm.INDIVIDUAL_THERAPY:
                    return DocConstantInterventionRoute.INDIVIDUAL_THERAPY;
                case InterventionRouteEnm.INHALENT:
                    return DocConstantInterventionRoute.INHALENT;
                case InterventionRouteEnm.INJECTION:
                    return DocConstantInterventionRoute.INJECTION;
                case InterventionRouteEnm.INSTILLED_INTO_EYE:
                    return DocConstantInterventionRoute.INSTILLED_INTO_EYE;
                case InterventionRouteEnm.INTRAMUSCULAR:
                    return DocConstantInterventionRoute.INTRAMUSCULAR;
                case InterventionRouteEnm.INTRANASAL:
                    return DocConstantInterventionRoute.INTRANASAL;
                case InterventionRouteEnm.INTRATHECAL:
                    return DocConstantInterventionRoute.INTRATHECAL;
                case InterventionRouteEnm.INTRAVESICULAR:
                    return DocConstantInterventionRoute.INTRAVESICULAR;
                case InterventionRouteEnm.IONTOPHORETIC:
                    return DocConstantInterventionRoute.IONTOPHORETIC;
                case InterventionRouteEnm.LAPAROSCOPIC_SURGERY:
                    return DocConstantInterventionRoute.LAPAROSCOPIC_SURGERY;
                case InterventionRouteEnm.OPEN_SURGERY:
                    return DocConstantInterventionRoute.OPEN_SURGERY;
                case InterventionRouteEnm.ORAL:
                    return DocConstantInterventionRoute.ORAL;
                case InterventionRouteEnm.SUBQ:
                    return DocConstantInterventionRoute.SUBQ;
                case InterventionRouteEnm.SUBQ_PEN:
                    return DocConstantInterventionRoute.SUBQ_PEN;
                case InterventionRouteEnm.SUBQ_VIAL:
                    return DocConstantInterventionRoute.SUBQ_VIAL;
                case InterventionRouteEnm.SUPPOSITORY:
                    return DocConstantInterventionRoute.SUPPOSITORY;
                case InterventionRouteEnm.TOPICAL:
                    return DocConstantInterventionRoute.TOPICAL;
                case InterventionRouteEnm.TRANSDERMAL:
                    return DocConstantInterventionRoute.TRANSDERMAL;
				default:
					return string.Empty;
			}
		}
    }

    public sealed partial class DocConstantInterventionRoute : IEquatable<DocConstantInterventionRoute>, IEqualityComparer<DocConstantInterventionRoute>
    {
        public const string GROUP_THERAPY = "Group Therapy";
        public const string HAI = "HAI";
        public const string I_V = "I.V.";
        public const string IMPLANT = "Implant";
        public const string INDIVIDUAL_THERAPY = "Individual Therapy";
        public const string INHALENT = "Inhalent";
        public const string INJECTION = "Injection";
        public const string INSTILLED_INTO_EYE = "Instilled into Eye";
        public const string INTRAMUSCULAR = "Intramuscular";
        public const string INTRANASAL = "Intranasal";
        public const string INTRATHECAL = "Intrathecal";
        public const string INTRAVESICULAR = "Intravesicular";
        public const string IONTOPHORETIC = "Iontophoretic";
        public const string LAPAROSCOPIC_SURGERY = "Laparoscopic Surgery";
        public const string OPEN_SURGERY = "Open Surgery";
        public const string ORAL = "ORAL";
        public const string SUBQ = "SubQ";
        public const string SUBQ_PEN = "SubQ (Pen)";
        public const string SUBQ_VIAL = "SubQ (Vial)";
        public const string SUPPOSITORY = "Suppository";
        public const string TOPICAL = "Topical";
        public const string TRANSDERMAL = "Transdermal";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantInterventionRoute).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantInterventionRoute(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantInterventionRoute(string Val) => new DocConstantInterventionRoute(Val);

        public static implicit operator string(DocConstantInterventionRoute item) => item?.Value ?? string.Empty;

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable (DocConstantInterventionRoute)

        public bool Equals(DocConstantInterventionRoute obj) => this == obj;

        public static bool operator ==(DocConstantInterventionRoute x, DocConstantInterventionRoute y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
		
		public bool Equals(DocConstantInterventionRoute x, DocConstantInterventionRoute y) => x == y;
        
        public static bool operator !=(DocConstantInterventionRoute x, DocConstantInterventionRoute y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantInterventionRoute))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantInterventionRoute) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value.GetHashCode();
				
        public int GetHashCode(DocConstantInterventionRoute obj) => obj.GetHashCode();

        #endregion IEquatable
    }
}
