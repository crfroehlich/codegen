//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by a CodeSmith Generator project.
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum InterventionRouteEnm
    {
        [EnumMember(Value = DocConstantInterventionRoute.GROUP_THERAPY)]
        GROUP_THERAPY,
        [EnumMember(Value = DocConstantInterventionRoute.HAI)]
        HAI,
        [EnumMember(Value = DocConstantInterventionRoute.I_V)]
        I_V,
        [EnumMember(Value = DocConstantInterventionRoute.IMPLANT)]
        IMPLANT,
        [EnumMember(Value = DocConstantInterventionRoute.INDIVIDUAL_THERAPY)]
        INDIVIDUAL_THERAPY,
        [EnumMember(Value = DocConstantInterventionRoute.INHALENT)]
        INHALENT,
        [EnumMember(Value = DocConstantInterventionRoute.INJECTION)]
        INJECTION,
        [EnumMember(Value = DocConstantInterventionRoute.INSTILLED_INTO_EYE)]
        INSTILLED_INTO_EYE,
        [EnumMember(Value = DocConstantInterventionRoute.INTRAMUSCULAR)]
        INTRAMUSCULAR,
        [EnumMember(Value = DocConstantInterventionRoute.INTRANASAL)]
        INTRANASAL,
        [EnumMember(Value = DocConstantInterventionRoute.INTRATHECAL)]
        INTRATHECAL,
        [EnumMember(Value = DocConstantInterventionRoute.INTRAVESICULAR)]
        INTRAVESICULAR,
        [EnumMember(Value = DocConstantInterventionRoute.IONTOPHORETIC)]
        IONTOPHORETIC,
        [EnumMember(Value = DocConstantInterventionRoute.LAPAROSCOPIC_SURGERY)]
        LAPAROSCOPIC_SURGERY,
        [EnumMember(Value = DocConstantInterventionRoute.OPEN_SURGERY)]
        OPEN_SURGERY,
        [EnumMember(Value = DocConstantInterventionRoute.ORAL)]
        ORAL,
        [EnumMember(Value = DocConstantInterventionRoute.SUBQ)]
        SUBQ,
        [EnumMember(Value = DocConstantInterventionRoute.SUBQ_PEN)]
        SUBQ_PEN,
        [EnumMember(Value = DocConstantInterventionRoute.SUBQ_VIAL)]
        SUBQ_VIAL,
        [EnumMember(Value = DocConstantInterventionRoute.SUPPOSITORY)]
        SUPPOSITORY,
        [EnumMember(Value = DocConstantInterventionRoute.TOPICAL)]
        TOPICAL,
        [EnumMember(Value = DocConstantInterventionRoute.TRANSDERMAL)]
        TRANSDERMAL
    }
    
    public sealed partial class DocConstantInterventionRoute
    {
        public const string GROUP_THERAPY = "Group Therapy";
        public const string HAI = "HAI";
        public const string I_V = "I.V.";
        public const string IMPLANT = "Implant";
        public const string INDIVIDUAL_THERAPY = "Individual Therapy";
        public const string INHALENT = "Inhalent";
        public const string INJECTION = "Injection";
        public const string INSTILLED_INTO_EYE = "Instilled into Eye";
        public const string INTRAMUSCULAR = "Intramuscular";
        public const string INTRANASAL = "Intranasal";
        public const string INTRATHECAL = "Intrathecal";
        public const string INTRAVESICULAR = "Intravesicular";
        public const string IONTOPHORETIC = "Iontophoretic";
        public const string LAPAROSCOPIC_SURGERY = "Laparoscopic Surgery";
        public const string OPEN_SURGERY = "Open Surgery";
        public const string ORAL = "ORAL";
        public const string SUBQ = "SubQ";
        public const string SUBQ_PEN = "SubQ (Pen)";
        public const string SUBQ_VIAL = "SubQ (Vial)";
        public const string SUPPOSITORY = "Suppository";
        public const string TOPICAL = "Topical";
        public const string TRANSDERMAL = "Transdermal";
        
        #region Internals
        
        private static List<string> _all;
        
        public static List<string> All => _all ?? (_all = typeof(DocConstantInterventionRoute).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        /// <summary>
        ///    The string value of the current instance
        /// </summary>
        private readonly string Value;

        /// <summary>
        ///    The enum constructor
        /// </summary>
        /// <param name="ItemName">Name of the item.</param>
        private DocConstantInterventionRoute(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        /// <summary>
        /// Determines if the Constant contains an exact match (case insensitive) for the name
        /// </summary>
        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        /// <summary>
        ///    Implicit cast to Enum
        /// </summary>
        /// <param name="Val">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator DocConstantInterventionRoute(string Val)
        {
            return new DocConstantInterventionRoute(Val);
        }

        /// <summary>
        ///    Implicit cast to string
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator string(DocConstantInterventionRoute item)
        {
            return item?.Value ?? string.Empty;
        }

        /// <summary>
        ///    Override of ToString
        /// </summary>
        /// <returns>A <see cref="System.String" /> that represents this instance.</returns>
        public override string ToString()
        {
            return Value;
        }

        #endregion Internals

        #region IEquatable (DocConstantInterventionRoute)

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public bool Equals(DocConstantInterventionRoute obj)
        {
            return this == obj;
        }

        /// <summary>
        ///    == Equality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator ==(DocConstantInterventionRoute ft1, DocConstantInterventionRoute ft2)
        {
            //do a string comparison on the fieldtypes
            return string.Equals(Convert.ToString(ft1), Convert.ToString(ft2), StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        ///    != Inequality operator guarantees we're evaluating instance values
        /// </summary>
        /// <param name="ft1">The FT1.</param>
        /// <param name="ft2">The FT2.</param>
        /// <returns>The result of the operator.</returns>
        public static bool operator !=(DocConstantInterventionRoute ft1, DocConstantInterventionRoute ft2)
        {
            return !(ft1 == ft2);
        }

        /// <summary>
        ///    Equals
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantInterventionRoute))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantInterventionRoute) obj;
            }
            return ret;
        }

        /// <summary>
        ///    Get Hash Code
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode()
        {
            var ret = 23;
            const int prime = 37;
            ret = (ret * prime) + Value.GetHashCode();
            ret = (ret * prime) + All.GetHashCode();
            return ret;
        }

        #endregion IEquatable (DocConstantInterventionRoute)
    }
}