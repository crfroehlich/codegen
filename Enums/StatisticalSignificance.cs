//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;

using ServiceStack;

using SCDescript = System.ComponentModel.DescriptionAttribute;
using SCDisplay = System.ComponentModel.DataAnnotations.DisplayAttribute;
using SSDescript = ServiceStack.DataAnnotations.DescriptionAttribute;
namespace Services.Enums
{
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StatisticalSignificanceEnm
    {
        [EnumMember(Value = DocConstantStatisticalSignificance.NS), SCDescript(DocConstantStatisticalSignificance.NS), SSDescript(DocConstantStatisticalSignificance.NS), SCDisplay(Name = DocConstantStatisticalSignificance.NS)]
        NS = 2952,
        [EnumMember(Value = DocConstantStatisticalSignificance.NSS), SCDescript(DocConstantStatisticalSignificance.NSS), SSDescript(DocConstantStatisticalSignificance.NSS), SCDisplay(Name = DocConstantStatisticalSignificance.NSS)]
        NSS = 2957,
        [EnumMember(Value = DocConstantStatisticalSignificance.S), SCDescript(DocConstantStatisticalSignificance.S), SSDescript(DocConstantStatisticalSignificance.S), SCDisplay(Name = DocConstantStatisticalSignificance.S)]
        S = 2962,
        [EnumMember(Value = DocConstantStatisticalSignificance.SS), SCDescript(DocConstantStatisticalSignificance.SS), SSDescript(DocConstantStatisticalSignificance.SS), SCDisplay(Name = DocConstantStatisticalSignificance.SS)]
        SS = 2967,
        [EnumMember(Value = DocConstantStatisticalSignificance.UNKNOWN), SCDescript(DocConstantStatisticalSignificance.UNKNOWN), SSDescript(DocConstantStatisticalSignificance.UNKNOWN), SCDisplay(Name = DocConstantStatisticalSignificance.UNKNOWN)]
        UNKNOWN = 2972
    }
    
    public static partial class EnumExtensions
    {
        public static string ToEnumString(this StatisticalSignificanceEnm instance)
        {
            switch(instance)
            {
                case StatisticalSignificanceEnm.NS:
                    return DocConstantStatisticalSignificance.NS;
                case StatisticalSignificanceEnm.NSS:
                    return DocConstantStatisticalSignificance.NSS;
                case StatisticalSignificanceEnm.S:
                    return DocConstantStatisticalSignificance.S;
                case StatisticalSignificanceEnm.SS:
                    return DocConstantStatisticalSignificance.SS;
                case StatisticalSignificanceEnm.UNKNOWN:
                    return DocConstantStatisticalSignificance.UNKNOWN;
                default:
                    return string.Empty;
            }
        }

        public static string ToEnumString(this StatisticalSignificanceEnm? instance)
        {
            if(null == instance) return string.Empty;
            return instance.Value.ToEnumString();
        }
    }

    public sealed partial class DocConstantStatisticalSignificance : IEquatable<DocConstantStatisticalSignificance>, IEqualityComparer<DocConstantStatisticalSignificance>
    {
        public const string NS = "NS";
        public const string NSS = "NSS";
        public const string S = "S";
        public const string SS = "SS";
        public const string UNKNOWN = "Unknown";
        
        #region Internals
        
        private static List<string> _all;
        public static List<string> All => _all ?? (_all = typeof(DocConstantStatisticalSignificance).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy).Where(fi => fi.IsLiteral && !fi.IsInitOnly).Select( fi => fi.GetRawConstantValue().ToString() ).OrderBy(n => n).ToList());

        private readonly string Value;

        private DocConstantStatisticalSignificance(string ItemName = null)
        {
            ItemName = ItemName ?? string.Empty;
            Value = FirstOrDefault(ItemName) ?? ItemName;
        }

        public static bool Contains(string name) => All.Any(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));
        
        public static string FirstOrDefault(string name) => All.FirstOrDefault(val => string.Equals(val, name, StringComparison.OrdinalIgnoreCase));

        public static implicit operator DocConstantStatisticalSignificance(string Val) => new DocConstantStatisticalSignificance(Val);

        public static implicit operator string(DocConstantStatisticalSignificance item) => item?.Value ?? string.Empty;
        
        public static explicit operator DocConstantStatisticalSignificance(StatisticalSignificanceEnm Val) => new DocConstantStatisticalSignificance(Val.ToEnumString());

        public static explicit operator StatisticalSignificanceEnm(DocConstantStatisticalSignificance item)
        {
            Enum.TryParse<StatisticalSignificanceEnm>(item.ToString(), true, out var tryRet);
            return tryRet;
        }

        public override string ToString() => Value;

        #endregion Internals

        #region IEquatable

        public bool Equals(DocConstantStatisticalSignificance obj) => this == obj;

        public static bool operator ==(DocConstantStatisticalSignificance x, DocConstantStatisticalSignificance y) => DocTools.AreEqual(DocConvert.ToString(x), DocConvert.ToString(y));
        
        public bool Equals(DocConstantStatisticalSignificance x, DocConstantStatisticalSignificance y) => x == y;
        
        public static bool operator !=(DocConstantStatisticalSignificance x, DocConstantStatisticalSignificance y) => !(x == y);

        public override bool Equals(object obj)
        {
            var ret = false;
            if(!(obj is DocConstantStatisticalSignificance))
            {
                ret = false;
            }
            else
            {
                ret = this == (DocConstantStatisticalSignificance) obj;
            }
            return ret;
        }

        public override int GetHashCode() => 17 * Value?.GetHashCode() ?? -1;
                
        public int GetHashCode(DocConstantStatisticalSignificance obj) => obj?.GetHashCode() ?? -17;

        #endregion IEquatable
    }
}
