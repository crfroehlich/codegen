//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by a CodeSmith Generator project.
//
//    This class can be customized by adding or removing code from supported Custom regions
//    (e.g. Custom Imports, Custom Region 1).
//
//    All other changes to this file will cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using Services.Dto;
using Services.Dto.Types;
using Services.Models;
using Services.Schema;

using System;
using System.Collections.Generic;

using Attribute = Services.Dto.Attribute;

namespace Services.Core
{
    /// <summary> A document mapper configuration. </summary>
    public partial class DocMapperConfig
    {
        private static bool _executed = false;
        private static readonly object _lock = new object();

        /// <summary> Creates automatic maps. </summary>
        public static void CreateAutoMaps()
        {
            lock (_lock)
            {
                if (_executed) return;
                _executed = true;
            }

            Mapper.Initialize(cfg =>
            {
                Init(cfg);
                #region Standard Map Inheritance
            cfg.CreateMap<IDocType, IDtoType>()
            .Include<DocTypeAssociationMeasure, TypeAssociationMeasure>()
            .Include<DocTypeBoolean, TypeBoolean>()
            .Include<DocTypeCalendarDate, TypeCalendarDate>()
            .Include<DocTypeCalendarDates, TypeCalendarDates>()
            .Include<DocTypeContact, TypeContact>()
            .Include<DocTypeDateTimeRange, TypeDateTimeRange>()
            .Include<DocTypeDecimal, TypeDecimal>()
            .Include<DocTypeDecimalRange, TypeDecimalRange>()
            .Include<DocTypeDesignNestedStudyIdLink, TypeDesignNestedStudyIdLink>()
            .Include<DocTypeEventCounts, TypeEventCounts>()
            .Include<DocTypeFacility, TypeFacility>()
            .Include<DocTypeFixedDoseIntervention, TypeFixedDoseIntervention>()
            .Include<DocTypeFlag, TypeFlag>()
            .Include<DocTypeFunding, TypeFunding>()
            .Include<DocTypeInteger, TypeInteger>()
            .Include<DocTypeInterval, TypeInterval>()
            .Include<DocTypeIntervals, TypeIntervals>()
            .Include<DocTypeLookup, TypeLookup>()
            .Include<DocTypeMeanBase, TypeMeanBase>()
            .Include<DocTypeMemo, TypeMemo>()
            .Include<DocTypeNPersons, TypeNPersons>()
            .Include<DocTypeParticipant, TypeParticipant>()
            .Include<DocTypeParticipants, TypeParticipants>()
            .Include<DocTypePopulationAnalyzed, TypePopulationAnalyzed>()
            .Include<DocTypePValue, TypePValue>()
            .Include<DocTypeRate, TypeRate>()
            .Include<DocTypeSettingLocation, TypeSettingLocation>()
            .Include<DocTypeSettingLocationTotal, TypeSettingLocationTotal>()
            .Include<DocTypeStudyDoc, TypeStudyDoc>()
            .Include<DocTypeStudyObjective, TypeStudyObjective>()
            .Include<DocTypeStudyReference, TypeStudyReference>()
            .Include<DocTypeSubgroupDescriptor, TypeSubgroupDescriptor>()
            .Include<DocTypeTimepoint, TypeTimepoint>()
            .Include<DocTypeTimepoints, TypeTimepoints>()
            .Include<DocTypeUncollectedValue, TypeUncollectedValue>()
            .Include<DocTypeUnitRange, TypeUnitRange>()
            .Include<DocTypeUnitsRange, TypeUnitsRange>()
            .Include<DocTypeUnitValue, TypeUnitValue>()
            .Include<DocTypeYesNoNa, TypeYesNoNa>()
;

            cfg.CreateMap<IDtoType, IDocType>()
            .Include<TypeAssociationMeasure, DocTypeAssociationMeasure>()
            .Include<TypeBoolean, DocTypeBoolean>()
            .Include<TypeCalendarDate, DocTypeCalendarDate>()
            .Include<TypeCalendarDates, DocTypeCalendarDates>()
            .Include<TypeContact, DocTypeContact>()
            .Include<TypeDateTimeRange, DocTypeDateTimeRange>()
            .Include<TypeDecimal, DocTypeDecimal>()
            .Include<TypeDecimalRange, DocTypeDecimalRange>()
            .Include<TypeDesignNestedStudyIdLink, DocTypeDesignNestedStudyIdLink>()
            .Include<TypeEventCounts, DocTypeEventCounts>()
            .Include<TypeFacility, DocTypeFacility>()
            .Include<TypeFixedDoseIntervention, DocTypeFixedDoseIntervention>()
            .Include<TypeFlag, DocTypeFlag>()
            .Include<TypeFunding, DocTypeFunding>()
            .Include<TypeInteger, DocTypeInteger>()
            .Include<TypeInterval, DocTypeInterval>()
            .Include<TypeIntervals, DocTypeIntervals>()
            .Include<TypeLookup, DocTypeLookup>()
            .Include<TypeMeanBase, DocTypeMeanBase>()
            .Include<TypeMemo, DocTypeMemo>()
            .Include<TypeNPersons, DocTypeNPersons>()
            .Include<TypeParticipant, DocTypeParticipant>()
            .Include<TypeParticipants, DocTypeParticipants>()
            .Include<TypePopulationAnalyzed, DocTypePopulationAnalyzed>()
            .Include<TypePValue, DocTypePValue>()
            .Include<TypeRate, DocTypeRate>()
            .Include<TypeSettingLocation, DocTypeSettingLocation>()
            .Include<TypeSettingLocationTotal, DocTypeSettingLocationTotal>()
            .Include<TypeStudyDoc, DocTypeStudyDoc>()
            .Include<TypeStudyObjective, DocTypeStudyObjective>()
            .Include<TypeStudyReference, DocTypeStudyReference>()
            .Include<TypeSubgroupDescriptor, DocTypeSubgroupDescriptor>()
            .Include<TypeTimepoint, DocTypeTimepoint>()
            .Include<TypeTimepoints, DocTypeTimepoints>()
            .Include<TypeUncollectedValue, DocTypeUncollectedValue>()
            .Include<TypeUnitRange, DocTypeUnitRange>()
            .Include<TypeUnitsRange, DocTypeUnitsRange>()
            .Include<TypeUnitValue, DocTypeUnitValue>()
            .Include<TypeYesNoNa, DocTypeYesNoNa>()
;

            cfg.CreateMap<DocAttribute, Attribute>()
                .ForMember(dest => dest.Source, opt => opt.Ignore() )
                .ForMember(dest => dest.Row, opt => opt.Ignore() )
                .ForMember(dest => dest.Column, opt => opt.Ignore() )
                .ForMember(dest => dest.ArmPopulation, opt => opt.Ignore() )
                .ForMember(dest => dest.ArmPopulationType, opt => opt.Ignore() )
                .ForMember(dest => dest.IsCrossover, opt => opt.Ignore() )
                .ForMember(dest => dest.NonSymmetricalCi, opt => opt.Ignore() )
                .ForMember(dest => dest.Status, opt => opt.Ignore() )
                .ForMember(dest => dest.WithinGroupPval, opt => opt.Ignore() )
                .ForMember(dest => dest.N, opt => opt.Ignore() )
                .ForMember(dest => dest.Label, opt => opt.Ignore() )
                .ForMember(dest => dest.AssociationMeasureValue, opt => opt.Ignore() )
                .ForMember(dest => dest.BooleanValue, opt => opt.Ignore() )
                .ForMember(dest => dest.CalendarDateValue, opt => opt.Ignore() )
                .ForMember(dest => dest.CalendarDatesValue, opt => opt.Ignore() )
                .ForMember(dest => dest.ContactValue, opt => opt.Ignore() )
                .ForMember(dest => dest.DateTimeValue, opt => opt.Ignore() )
                .ForMember(dest => dest.DateTimeRangeValue, opt => opt.Ignore() )
                .ForMember(dest => dest.DecimalValue, opt => opt.Ignore() )
                .ForMember(dest => dest.DecimalRangeValue, opt => opt.Ignore() )
                .ForMember(dest => dest.DesignNestedStudyIdLinkValue, opt => opt.Ignore() )
                .ForMember(dest => dest.EventCountsValue, opt => opt.Ignore() )
                .ForMember(dest => dest.FacilityValue, opt => opt.Ignore() )
                .ForMember(dest => dest.FixedDoseInterventionValue, opt => opt.Ignore() )
                .ForMember(dest => dest.FlagValue, opt => opt.Ignore() )
                .ForMember(dest => dest.FundingValue, opt => opt.Ignore() )
                .ForMember(dest => dest.IntegerValue, opt => opt.Ignore() )
                .ForMember(dest => dest.IntervalValue, opt => opt.Ignore() )
                .ForMember(dest => dest.IntervalsValue, opt => opt.Ignore() )
                .ForMember(dest => dest.LookupValue, opt => opt.Ignore() )
                .ForMember(dest => dest.MeanBaseValue, opt => opt.Ignore() )
                .ForMember(dest => dest.MemoValue, opt => opt.Ignore() )
                .ForMember(dest => dest.NPersonsValue, opt => opt.Ignore() )
                .ForMember(dest => dest.ParticipantValue, opt => opt.Ignore() )
                .ForMember(dest => dest.ParticipantsValue, opt => opt.Ignore() )
                .ForMember(dest => dest.PopulationAnalyzedValue, opt => opt.Ignore() )
                .ForMember(dest => dest.PValueValue, opt => opt.Ignore() )
                .ForMember(dest => dest.RateValue, opt => opt.Ignore() )
                .ForMember(dest => dest.SettingLocationValue, opt => opt.Ignore() )
                .ForMember(dest => dest.SettingLocationTotalValue, opt => opt.Ignore() )
                .ForMember(dest => dest.StudyDocValue, opt => opt.Ignore() )
                .ForMember(dest => dest.StudyObjectiveValue, opt => opt.Ignore() )
                .ForMember(dest => dest.StudyReferenceValue, opt => opt.Ignore() )
                .ForMember(dest => dest.SubgroupDescriptorValue, opt => opt.Ignore() )
                .ForMember(dest => dest.TimepointValue, opt => opt.Ignore() )
                .ForMember(dest => dest.TimepointsValue, opt => opt.Ignore() )
                .ForMember(dest => dest.UncollectedValueValue, opt => opt.Ignore() )
                .ForMember(dest => dest.UnitRangeValue, opt => opt.Ignore() )
                .ForMember(dest => dest.UnitsValue, opt => opt.Ignore() )
                .ForMember(dest => dest.UnitsRangeValue, opt => opt.Ignore() )
                .ForMember(dest => dest.UnitValueValue, opt => opt.Ignore() )
                .ForMember(dest => dest.YesNoNaValue, opt => opt.Ignore() )
;

            cfg.CreateMap<DocAttribute, Attribute>()
                .ForMember(dest => dest.Source, opt => opt.Ignore() )
                .ForMember(dest => dest.Row, opt => opt.Ignore() )
                .ForMember(dest => dest.Column, opt => opt.Ignore() )
                .ForMember(dest => dest.ArmPopulation, opt => opt.Ignore() )
                .ForMember(dest => dest.ArmPopulationType, opt => opt.Ignore() )
                .ForMember(dest => dest.IsCrossover, opt => opt.Ignore() )
                .ForMember(dest => dest.NonSymmetricalCi, opt => opt.Ignore() )
                .ForMember(dest => dest.Status, opt => opt.Ignore() )
                .ForMember(dest => dest.WithinGroupPval, opt => opt.Ignore() )
                .ForMember(dest => dest.N, opt => opt.Ignore() )
                .ForMember(dest => dest.Label, opt => opt.Ignore() )
                .ForMember(dest => dest.AssociationMeasureValue, opt => opt.Ignore() )
                .ForMember(dest => dest.BooleanValue, opt => opt.Ignore() )
                .ForMember(dest => dest.CalendarDateValue, opt => opt.Ignore() )
                .ForMember(dest => dest.CalendarDatesValue, opt => opt.Ignore() )
                .ForMember(dest => dest.ContactValue, opt => opt.Ignore() )
                .ForMember(dest => dest.DateTimeValue, opt => opt.Ignore() )
                .ForMember(dest => dest.DateTimeRangeValue, opt => opt.Ignore() )
                .ForMember(dest => dest.DecimalValue, opt => opt.Ignore() )
                .ForMember(dest => dest.DecimalRangeValue, opt => opt.Ignore() )
                .ForMember(dest => dest.DesignNestedStudyIdLinkValue, opt => opt.Ignore() )
                .ForMember(dest => dest.EventCountsValue, opt => opt.Ignore() )
                .ForMember(dest => dest.FacilityValue, opt => opt.Ignore() )
                .ForMember(dest => dest.FixedDoseInterventionValue, opt => opt.Ignore() )
                .ForMember(dest => dest.FlagValue, opt => opt.Ignore() )
                .ForMember(dest => dest.FundingValue, opt => opt.Ignore() )
                .ForMember(dest => dest.IntegerValue, opt => opt.Ignore() )
                .ForMember(dest => dest.IntervalValue, opt => opt.Ignore() )
                .ForMember(dest => dest.IntervalsValue, opt => opt.Ignore() )
                .ForMember(dest => dest.LookupValue, opt => opt.Ignore() )
                .ForMember(dest => dest.MeanBaseValue, opt => opt.Ignore() )
                .ForMember(dest => dest.MemoValue, opt => opt.Ignore() )
                .ForMember(dest => dest.NPersonsValue, opt => opt.Ignore() )
                .ForMember(dest => dest.ParticipantValue, opt => opt.Ignore() )
                .ForMember(dest => dest.ParticipantsValue, opt => opt.Ignore() )
                .ForMember(dest => dest.PopulationAnalyzedValue, opt => opt.Ignore() )
                .ForMember(dest => dest.PValueValue, opt => opt.Ignore() )
                .ForMember(dest => dest.RateValue, opt => opt.Ignore() )
                .ForMember(dest => dest.SettingLocationValue, opt => opt.Ignore() )
                .ForMember(dest => dest.SettingLocationTotalValue, opt => opt.Ignore() )
                .ForMember(dest => dest.StudyDocValue, opt => opt.Ignore() )
                .ForMember(dest => dest.StudyObjectiveValue, opt => opt.Ignore() )
                .ForMember(dest => dest.StudyReferenceValue, opt => opt.Ignore() )
                .ForMember(dest => dest.SubgroupDescriptorValue, opt => opt.Ignore() )
                .ForMember(dest => dest.TimepointValue, opt => opt.Ignore() )
                .ForMember(dest => dest.TimepointsValue, opt => opt.Ignore() )
                .ForMember(dest => dest.UncollectedValueValue, opt => opt.Ignore() )
                .ForMember(dest => dest.UnitRangeValue, opt => opt.Ignore() )
                .ForMember(dest => dest.UnitsValue, opt => opt.Ignore() )
                .ForMember(dest => dest.UnitsRangeValue, opt => opt.Ignore() )
                .ForMember(dest => dest.UnitValueValue, opt => opt.Ignore() )
                .ForMember(dest => dest.YesNoNaValue, opt => opt.Ignore() )
;

                #endregion Standard Map Inheritance
                
                #region Model Mapping 
            cfg.AddProfile<AppMapper>();
            cfg.AddProfile<AttributeMapper>();
            cfg.AddProfile<AttributeCategoryMapper>();
            cfg.AddProfile<AttributeIntervalMapper>();
            cfg.AddProfile<AuditDeltaMapper>();
            cfg.AddProfile<AuditRecordMapper>();
            cfg.AddProfile<BackgroundTaskMapper>();
            cfg.AddProfile<BackgroundTaskHistoryMapper>();
            cfg.AddProfile<BackgroundTaskItemMapper>();
            cfg.AddProfile<BroadcastMapper>();
            cfg.AddProfile<CharacteristicMapper>();
            cfg.AddProfile<ClientMapper>();
            cfg.AddProfile<ComparatorMapper>();
            cfg.AddProfile<DatabaseVersionMapper>();
            cfg.AddProfile<DefaultMapper>();
            cfg.AddProfile<DivisionMapper>();
            cfg.AddProfile<DocumentMapper>();
            cfg.AddProfile<DocumentAttributeMapper>();
            cfg.AddProfile<DocumentSetMapper>();
            cfg.AddProfile<DocumentSetHistoryMapper>();
            cfg.AddProfile<EventMapper>();
            cfg.AddProfile<FeatureSetMapper>();
            cfg.AddProfile<GlossaryMapper>();
            cfg.AddProfile<HelpMapper>();
            cfg.AddProfile<HistoryMapper>();
            cfg.AddProfile<ImpersonationMapper>();
            cfg.AddProfile<ImportDataMapper>();
            cfg.AddProfile<IntervalMapper>();
            cfg.AddProfile<InterventionMapper>();
            cfg.AddProfile<JctAttributeCategoryAttributeDocumentSetMapper>();
            cfg.AddProfile<JunctionMapper>();
            cfg.AddProfile<LocaleMapper>();
            cfg.AddProfile<LocaleLookupMapper>();
            cfg.AddProfile<LookupCategoryMapper>();
            cfg.AddProfile<LookupTableMapper>();
            cfg.AddProfile<LookupTableBindingMapper>();
            cfg.AddProfile<LookupTableEnumMapper>();
            cfg.AddProfile<MeanRangesMapper>();
            cfg.AddProfile<MeanRangeValueMapper>();
            cfg.AddProfile<MeanVariancesMapper>();
            cfg.AddProfile<MeanVarianceValueMapper>();
            cfg.AddProfile<OutcomeMapper>();
            cfg.AddProfile<PageMapper>();
            cfg.AddProfile<ProjectMapper>();
            cfg.AddProfile<QueueChannelMapper>();
            cfg.AddProfile<ReleaseStatusMapper>();
            cfg.AddProfile<RoleMapper>();
            cfg.AddProfile<ScopeMapper>();
            cfg.AddProfile<StatsMapper>();
            cfg.AddProfile<StatsRecordMapper>();
            cfg.AddProfile<StatsStudySetMapper>();
            cfg.AddProfile<StudyDesignMapper>();
            cfg.AddProfile<StudyTypeMapper>();
            cfg.AddProfile<TagMapper>();
            cfg.AddProfile<TeamMapper>();
            cfg.AddProfile<TermCategoryMapper>();
            cfg.AddProfile<TermMasterMapper>();
            cfg.AddProfile<TermSynonymMapper>();
            cfg.AddProfile<TimeCardMapper>();
            cfg.AddProfile<TimePointMapper>();
            cfg.AddProfile<UnitConversionRulesMapper>();
            cfg.AddProfile<UnitOfMeasureMapper>();
            cfg.AddProfile<UnitValueMapper>();
            cfg.AddProfile<UpdateMapper>();
            cfg.AddProfile<UserMapper>();
            cfg.AddProfile<UserRequestMapper>();
            cfg.AddProfile<UserSessionMapper>();
            cfg.AddProfile<UserTypeMapper>();
            cfg.AddProfile<ValueTypeMapper>();
            cfg.AddProfile<VariableInstanceMapper>();
            cfg.AddProfile<VariableRuleMapper>();
            cfg.AddProfile<WorkflowMapper>();
            cfg.AddProfile<WorkflowCommentMapper>();
            cfg.AddProfile<WorkflowTaskMapper>();
                #endregion Model Mapping 
                
                #region Type Mapping 
            cfg.CreateMap<DocTypeAssociationMeasure, TypeAssociationMeasure>()
                .ConstructUsing(new Func<DocTypeAssociationMeasure, TypeAssociationMeasure>(c => new TypeAssociationMeasure() ) )
                .ForMember(dest => dest.AM, opt => opt.MapFrom(src => (null == src || null == src.AM ) ? null : src.AM.ToReference() ) )
                .ForMember(dest => dest.AdjustedDescription, opt => opt.MapFrom(src => (null == src || null == src.AdjustedDescription ) ? null : src.AdjustedDescription.ToReference() ) )
                .ForMember(dest => dest.PersonCount, opt => opt.MapFrom(src => (null == src || null == src.PersonCount ) ? null : src.PersonCount.ToReference() ) )
                .ForMember(dest => dest.VarianceType, opt => opt.MapFrom(src => (null == src || null == src.VarianceType ) ? null : src.VarianceType.ToReference() ) )
;            cfg.CreateMap<DocStructureAssociationMeasure, TypeAssociationMeasure>()
                .ConstructUsing(new Func<DocStructureAssociationMeasure, TypeAssociationMeasure>(c => new TypeAssociationMeasure() ) );
            cfg.CreateMap<DocTypeAssociationMeasure, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeAssociationMeasure>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeAssociationMeasure>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeAssociationMeasure, DocTypeAssociationMeasure>()
                .ConstructUsing(new Func<TypeAssociationMeasure, DocTypeAssociationMeasure>(c => new DocTypeAssociationMeasure() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.AM, opt => opt.MapFrom(src => (null == src || null == src.AM || string.IsNullOrEmpty(src.AM.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("AssociationMeasure", src.AM.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.AdjustedDescription, opt => opt.MapFrom(src => (null == src || null == src.AdjustedDescription || string.IsNullOrEmpty(src.AdjustedDescription.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("AdjustedDescription", src.AdjustedDescription.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.PValue, opt => opt.MapFrom(src => (null == src || null == src.PValue ) ? new DocTypePValue() : Mapper.Map(src.PValue, new DocTypePValue() ) ) )
                .ForMember(dest => dest.PersonCount, opt => opt.MapFrom(src => (null == src || null == src.PersonCount || string.IsNullOrEmpty(src.PersonCount.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("AmPersonCount", src.PersonCount.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.VarianceType, opt => opt.MapFrom(src => (null == src || null == src.VarianceType || string.IsNullOrEmpty(src.VarianceType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("MeanVarianceType", src.VarianceType.Name ).ToLookupTable() ) )
;

            cfg.CreateMap<DocTypeBoolean, TypeBoolean>()
                .ConstructUsing(new Func<DocTypeBoolean, TypeBoolean>(c => new TypeBoolean() ) )
;            cfg.CreateMap<DocStructureBoolean, TypeBoolean>()
                .ConstructUsing(new Func<DocStructureBoolean, TypeBoolean>(c => new TypeBoolean() ) );
            cfg.CreateMap<DocTypeBoolean, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeBoolean>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeBoolean>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeBoolean, DocTypeBoolean>()
                .ConstructUsing(new Func<TypeBoolean, DocTypeBoolean>(c => new DocTypeBoolean() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
;

            cfg.CreateMap<DocTypeCalendarDate, TypeCalendarDate>()
                .ConstructUsing(new Func<DocTypeCalendarDate, TypeCalendarDate>(c => new TypeCalendarDate() ) )
;            cfg.CreateMap<DocStructureCalendarDate, TypeCalendarDate>()
                .ConstructUsing(new Func<DocStructureCalendarDate, TypeCalendarDate>(c => new TypeCalendarDate() ) );
            cfg.CreateMap<DocTypeCalendarDate, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeCalendarDate>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeCalendarDate>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeCalendarDate, DocTypeCalendarDate>()
                .ConstructUsing(new Func<TypeCalendarDate, DocTypeCalendarDate>(c => new DocTypeCalendarDate() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.CalendarDateEnd, opt => opt.MapFrom(src => (null == src || null == src.CalendarDateEnd ) ? new DocTypeDateTime() : Mapper.Map(src.CalendarDateEnd, new DocTypeDateTime() ) ) )
                .ForMember(dest => dest.CalendarDateStart, opt => opt.MapFrom(src => (null == src || null == src.CalendarDateStart ) ? new DocTypeDateTime() : Mapper.Map(src.CalendarDateStart, new DocTypeDateTime() ) ) )
;

            cfg.CreateMap<DocTypeCalendarDates, TypeCalendarDates>()
                .ConstructUsing(new Func<DocTypeCalendarDates, TypeCalendarDates>(c => new TypeCalendarDates() ) )
;            cfg.CreateMap<DocStructureCalendarDates, TypeCalendarDates>()
                .ConstructUsing(new Func<DocStructureCalendarDates, TypeCalendarDates>(c => new TypeCalendarDates() ) );
            cfg.CreateMap<DocTypeCalendarDates, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeCalendarDates>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeCalendarDates>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeCalendarDates, DocTypeCalendarDates>()
                .ConstructUsing(new Func<TypeCalendarDates, DocTypeCalendarDates>(c => new DocTypeCalendarDates() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.CalendarDates, opt => opt.MapFrom(src => (null == src || null == src.CalendarDates ) ? new List<DocTypeCalendarDate>() : Mapper.Map(src.CalendarDates, new List<DocTypeCalendarDate>() ) ) )
;

            cfg.CreateMap<DocTypeContact, TypeContact>()
                .ConstructUsing(new Func<DocTypeContact, TypeContact>(c => new TypeContact() ) )
;            cfg.CreateMap<DocStructureContact, TypeContact>()
                .ConstructUsing(new Func<DocStructureContact, TypeContact>(c => new TypeContact() ) );
            cfg.CreateMap<DocTypeContact, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeContact>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeContact>()
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name ) )
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeContact, DocTypeContact>()
                .ConstructUsing(new Func<TypeContact, DocTypeContact>(c => new DocTypeContact() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
;

            cfg.CreateMap<DocTypeDateTime, TypeDateTime>()
                .ConstructUsing(new Func<DocTypeDateTime, TypeDateTime>(c => new TypeDateTime() ) )
;            cfg.CreateMap<DocStructureDateTime, TypeDateTime>()
                .ConstructUsing(new Func<DocStructureDateTime, TypeDateTime>(c => new TypeDateTime() ) );
            cfg.CreateMap<DocTypeDateTime, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeDateTime>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeDateTime>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeDateTime, DocTypeDateTime>()
                .ConstructUsing(new Func<TypeDateTime, DocTypeDateTime>(c => new DocTypeDateTime() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
;

            cfg.CreateMap<DocTypeDateTimeRange, TypeDateTimeRange>()
                .ConstructUsing(new Func<DocTypeDateTimeRange, TypeDateTimeRange>(c => new TypeDateTimeRange() ) )
;            cfg.CreateMap<DocStructureDateTimeRange, TypeDateTimeRange>()
                .ConstructUsing(new Func<DocStructureDateTimeRange, TypeDateTimeRange>(c => new TypeDateTimeRange() ) );
            cfg.CreateMap<DocTypeDateTimeRange, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeDateTimeRange>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeDateTimeRange>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeDateTimeRange, DocTypeDateTimeRange>()
                .ConstructUsing(new Func<TypeDateTimeRange, DocTypeDateTimeRange>(c => new DocTypeDateTimeRange() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.From, opt => opt.MapFrom(src => (null == src || null == src.From ) ? new DocTypeDateTime() : Mapper.Map(src.From, new DocTypeDateTime() ) ) )
                .ForMember(dest => dest.To, opt => opt.MapFrom(src => (null == src || null == src.To ) ? new DocTypeDateTime() : Mapper.Map(src.To, new DocTypeDateTime() ) ) )
;

            cfg.CreateMap<DocTypeDecimal, TypeDecimal>()
                .ConstructUsing(new Func<DocTypeDecimal, TypeDecimal>(c => new TypeDecimal() ) )
                .ForMember(dest => dest.EqualityOperator, opt => opt.MapFrom(src => (null == src || null == src.EqualityOperator ) ? null : src.EqualityOperator.ToReference() ) )
;            cfg.CreateMap<DocStructureDecimal, TypeDecimal>()
                .ConstructUsing(new Func<DocStructureDecimal, TypeDecimal>(c => new TypeDecimal() ) );
            cfg.CreateMap<DocTypeDecimal, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeDecimal>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeDecimal>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeDecimal, DocTypeDecimal>()
                .ConstructUsing(new Func<TypeDecimal, DocTypeDecimal>(c => new DocTypeDecimal() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.EqualityOperator, opt => opt.MapFrom(src => (null == src || null == src.EqualityOperator || string.IsNullOrEmpty(src.EqualityOperator.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("EqualityOperator", src.EqualityOperator.Name ).ToLookupTable() ) )
;

            cfg.CreateMap<DocTypeDecimalRange, TypeDecimalRange>()
                .ConstructUsing(new Func<DocTypeDecimalRange, TypeDecimalRange>(c => new TypeDecimalRange() ) )
;            cfg.CreateMap<DocStructureDecimalRange, TypeDecimalRange>()
                .ConstructUsing(new Func<DocStructureDecimalRange, TypeDecimalRange>(c => new TypeDecimalRange() ) );
            cfg.CreateMap<DocTypeDecimalRange, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeDecimalRange>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeDecimalRange>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeDecimalRange, DocTypeDecimalRange>()
                .ConstructUsing(new Func<TypeDecimalRange, DocTypeDecimalRange>(c => new DocTypeDecimalRange() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.High, opt => opt.MapFrom(src => (null == src || null == src.High ) ? new DocTypeDecimal() : Mapper.Map(src.High, new DocTypeDecimal() ) ) )
                .ForMember(dest => dest.Low, opt => opt.MapFrom(src => (null == src || null == src.Low ) ? new DocTypeDecimal() : Mapper.Map(src.Low, new DocTypeDecimal() ) ) )
;

            cfg.CreateMap<DocTypeDesignNestedStudyIdLink, TypeDesignNestedStudyIdLink>()
                .ConstructUsing(new Func<DocTypeDesignNestedStudyIdLink, TypeDesignNestedStudyIdLink>(c => new TypeDesignNestedStudyIdLink() ) )
;            cfg.CreateMap<DocStructureDesignNestedStudyIdLink, TypeDesignNestedStudyIdLink>()
                .ConstructUsing(new Func<DocStructureDesignNestedStudyIdLink, TypeDesignNestedStudyIdLink>(c => new TypeDesignNestedStudyIdLink() ) );
            cfg.CreateMap<DocTypeDesignNestedStudyIdLink, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeDesignNestedStudyIdLink>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeDesignNestedStudyIdLink>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeDesignNestedStudyIdLink, DocTypeDesignNestedStudyIdLink>()
                .ConstructUsing(new Func<TypeDesignNestedStudyIdLink, DocTypeDesignNestedStudyIdLink>(c => new DocTypeDesignNestedStudyIdLink() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
;

            cfg.CreateMap<DocTypeEventCounts, TypeEventCounts>()
                .ConstructUsing(new Func<DocTypeEventCounts, TypeEventCounts>(c => new TypeEventCounts() ) )
;            cfg.CreateMap<DocStructureEventCounts, TypeEventCounts>()
                .ConstructUsing(new Func<DocStructureEventCounts, TypeEventCounts>(c => new TypeEventCounts() ) );
            cfg.CreateMap<DocTypeEventCounts, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeEventCounts>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeEventCounts>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeEventCounts, DocTypeEventCounts>()
                .ConstructUsing(new Func<TypeEventCounts, DocTypeEventCounts>(c => new DocTypeEventCounts() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.SubjectsAffected, opt => opt.MapFrom(src => (null == src || null == src.SubjectsAffected ) ? new DocTypeInteger() : Mapper.Map(src.SubjectsAffected, new DocTypeInteger() ) ) )
                .ForMember(dest => dest.SubjectsAtRisk, opt => opt.MapFrom(src => (null == src || null == src.SubjectsAtRisk ) ? new DocTypeInteger() : Mapper.Map(src.SubjectsAtRisk, new DocTypeInteger() ) ) )
                .ForMember(dest => dest.Events, opt => opt.MapFrom(src => (null == src || null == src.Events ) ? new DocTypeInteger() : Mapper.Map(src.Events, new DocTypeInteger() ) ) )
;

            cfg.CreateMap<DocTypeFacility, TypeFacility>()
                .ConstructUsing(new Func<DocTypeFacility, TypeFacility>(c => new TypeFacility() ) )
                .ForMember(dest => dest.City, opt => opt.MapFrom(src => (null == src || null == src.City ) ? null : src.City.ToReference() ) )
                .ForMember(dest => dest.State, opt => opt.MapFrom(src => (null == src || null == src.State ) ? null : src.State.ToReference() ) )
                .ForMember(dest => dest.Country, opt => opt.MapFrom(src => (null == src || null == src.Country ) ? null : src.Country.ToReference() ) )
;            cfg.CreateMap<DocStructureFacility, TypeFacility>()
                .ConstructUsing(new Func<DocStructureFacility, TypeFacility>(c => new TypeFacility() ) );
            cfg.CreateMap<DocTypeFacility, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeFacility>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeFacility>()
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name ) )
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeFacility, DocTypeFacility>()
                .ConstructUsing(new Func<TypeFacility, DocTypeFacility>(c => new DocTypeFacility() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.City, opt => opt.MapFrom(src => (null == src || null == src.City || string.IsNullOrEmpty(src.City.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("SettingLocationName", src.City.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.State, opt => opt.MapFrom(src => (null == src || null == src.State || string.IsNullOrEmpty(src.State.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("SettingLocationName", src.State.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.Country, opt => opt.MapFrom(src => (null == src || null == src.Country || string.IsNullOrEmpty(src.Country.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("SettingLocationName", src.Country.Name ).ToLookupTable() ) )
;

            cfg.CreateMap<DocTypeFixedDoseIntervention, TypeFixedDoseIntervention>()
                .ConstructUsing(new Func<DocTypeFixedDoseIntervention, TypeFixedDoseIntervention>(c => new TypeFixedDoseIntervention() ) )
                .ForMember(dest => dest.Intervention, opt => opt.MapFrom(src => (null == src || null == src.Intervention ) ? null : src.Intervention.ToReference() ) )
;            cfg.CreateMap<DocStructureFixedDoseIntervention, TypeFixedDoseIntervention>()
                .ConstructUsing(new Func<DocStructureFixedDoseIntervention, TypeFixedDoseIntervention>(c => new TypeFixedDoseIntervention() ) );
            cfg.CreateMap<DocTypeFixedDoseIntervention, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeFixedDoseIntervention>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeFixedDoseIntervention>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeFixedDoseIntervention, DocTypeFixedDoseIntervention>()
                .ConstructUsing(new Func<TypeFixedDoseIntervention, DocTypeFixedDoseIntervention>(c => new DocTypeFixedDoseIntervention() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.DoseConcentration, opt => opt.MapFrom(src => (null == src || null == src.DoseConcentration ) ? new DocTypeUnitValue() : Mapper.Map(src.DoseConcentration, new DocTypeUnitValue() ) ) )
                .ForMember(dest => dest.Intervention, opt => opt.MapFrom(src => (null == src || null == src.Intervention || string.IsNullOrEmpty(src.Intervention.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("Intervention", src.Intervention.Name ).ToLookupTable() ) )
;

            cfg.CreateMap<DocTypeFlag, TypeFlag>()
                .ConstructUsing(new Func<DocTypeFlag, TypeFlag>(c => new TypeFlag() ) )
                .ForMember(dest => dest.FlagType, opt => opt.MapFrom(src => (null == src || null == src.FlagType ) ? null : src.FlagType.ToReference() ) )
;            cfg.CreateMap<DocStructureFlag, TypeFlag>()
                .ConstructUsing(new Func<DocStructureFlag, TypeFlag>(c => new TypeFlag() ) );
            cfg.CreateMap<DocTypeFlag, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeFlag>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeFlag>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeFlag, DocTypeFlag>()
                .ConstructUsing(new Func<TypeFlag, DocTypeFlag>(c => new DocTypeFlag() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.FlagType, opt => opt.MapFrom(src => (null == src || null == src.FlagType || string.IsNullOrEmpty(src.FlagType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("FlagType", src.FlagType.Name ).ToLookupTable() ) )
;

            cfg.CreateMap<DocTypeFunding, TypeFunding>()
                .ConstructUsing(new Func<DocTypeFunding, TypeFunding>(c => new TypeFunding() ) )
                .ForMember(dest => dest.FundingInstitution, opt => opt.MapFrom(src => (null == src || null == src.FundingInstitution ) ? null : src.FundingInstitution.ToReference() ) )
                .ForMember(dest => dest.FundingType, opt => opt.MapFrom(src => (null == src || null == src.FundingType ) ? null : src.FundingType.ToReference() ) )
                .ForMember(dest => dest.InstitutionType, opt => opt.MapFrom(src => (null == src || null == src.InstitutionType ) ? null : src.InstitutionType.ToReference() ) )
;            cfg.CreateMap<DocStructureFunding, TypeFunding>()
                .ConstructUsing(new Func<DocStructureFunding, TypeFunding>(c => new TypeFunding() ) );
            cfg.CreateMap<DocTypeFunding, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeFunding>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeFunding>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeFunding, DocTypeFunding>()
                .ConstructUsing(new Func<TypeFunding, DocTypeFunding>(c => new DocTypeFunding() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.FundingInstitution, opt => opt.MapFrom(src => (null == src || null == src.FundingInstitution || string.IsNullOrEmpty(src.FundingInstitution.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("FundingInstitution", src.FundingInstitution.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.FundingType, opt => opt.MapFrom(src => (null == src || null == src.FundingType || string.IsNullOrEmpty(src.FundingType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("FundingType", src.FundingType.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.InstitutionType, opt => opt.MapFrom(src => (null == src || null == src.InstitutionType || string.IsNullOrEmpty(src.InstitutionType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("InstitutionType", src.InstitutionType.Name ).ToLookupTable() ) )
;

            cfg.CreateMap<DocTypeInteger, TypeInteger>()
                .ConstructUsing(new Func<DocTypeInteger, TypeInteger>(c => new TypeInteger() ) )
                .ForMember(dest => dest.EqualityOperator, opt => opt.MapFrom(src => (null == src || null == src.EqualityOperator ) ? null : src.EqualityOperator.ToReference() ) )
;            cfg.CreateMap<DocStructureInteger, TypeInteger>()
                .ConstructUsing(new Func<DocStructureInteger, TypeInteger>(c => new TypeInteger() ) );
            cfg.CreateMap<DocTypeInteger, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeInteger>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeInteger>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeInteger, DocTypeInteger>()
                .ConstructUsing(new Func<TypeInteger, DocTypeInteger>(c => new DocTypeInteger() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.EqualityOperator, opt => opt.MapFrom(src => (null == src || null == src.EqualityOperator || string.IsNullOrEmpty(src.EqualityOperator.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("EqualityOperator", src.EqualityOperator.Name ).ToLookupTable() ) )
;

            cfg.CreateMap<DocTypeInterval, TypeInterval>()
                .ConstructUsing(new Func<DocTypeInterval, TypeInterval>(c => new TypeInterval() ) )
;            cfg.CreateMap<DocStructureInterval, TypeInterval>()
                .ConstructUsing(new Func<DocStructureInterval, TypeInterval>(c => new TypeInterval() ) );
            cfg.CreateMap<DocTypeInterval, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeInterval>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeInterval>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeInterval, DocTypeInterval>()
                .ConstructUsing(new Func<TypeInterval, DocTypeInterval>(c => new DocTypeInterval() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.CalendarDateEnd, opt => opt.MapFrom(src => (null == src || null == src.CalendarDateEnd ) ? new DocTypeDateTime() : Mapper.Map(src.CalendarDateEnd, new DocTypeDateTime() ) ) )
                .ForMember(dest => dest.CalendarDateStart, opt => opt.MapFrom(src => (null == src || null == src.CalendarDateStart ) ? new DocTypeDateTime() : Mapper.Map(src.CalendarDateStart, new DocTypeDateTime() ) ) )
                .ForMember(dest => dest.FollowUp, opt => opt.MapFrom(src => (null == src || null == src.FollowUp ) ? new DocTypeTimepoint() : Mapper.Map(src.FollowUp, new DocTypeTimepoint() ) ) )
                .ForMember(dest => dest.TimeOfDay, opt => opt.MapFrom(src => (null == src || null == src.TimeOfDay ) ? new DocTypeTimepoint() : Mapper.Map(src.TimeOfDay, new DocTypeTimepoint() ) ) )
;

            cfg.CreateMap<DocTypeIntervals, TypeIntervals>()
                .ConstructUsing(new Func<DocTypeIntervals, TypeIntervals>(c => new TypeIntervals() ) )
;            cfg.CreateMap<DocStructureIntervals, TypeIntervals>()
                .ConstructUsing(new Func<DocStructureIntervals, TypeIntervals>(c => new TypeIntervals() ) );
            cfg.CreateMap<DocTypeIntervals, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeIntervals>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeIntervals>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeIntervals, DocTypeIntervals>()
                .ConstructUsing(new Func<TypeIntervals, DocTypeIntervals>(c => new DocTypeIntervals() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.CalendarDates, opt => opt.MapFrom(src => (null == src || null == src.CalendarDates ) ? new DocTypeCalendarDates() : Mapper.Map(src.CalendarDates, new DocTypeCalendarDates() ) ) )
                .ForMember(dest => dest.FollowUps, opt => opt.MapFrom(src => (null == src || null == src.FollowUps ) ? new DocTypeTimepoints() : Mapper.Map(src.FollowUps, new DocTypeTimepoints() ) ) )
                .ForMember(dest => dest.TimeOfDays, opt => opt.MapFrom(src => (null == src || null == src.TimeOfDays ) ? new DocTypeTimepoints() : Mapper.Map(src.TimeOfDays, new DocTypeTimepoints() ) ) )
;

            cfg.CreateMap<DocTypeLookup, TypeLookup>()
                .ConstructUsing(new Func<DocTypeLookup, TypeLookup>(c => new TypeLookup() ) )
;            cfg.CreateMap<DocStructureLookup, TypeLookup>()
                .ConstructUsing(new Func<DocStructureLookup, TypeLookup>(c => new TypeLookup() ) );
            cfg.CreateMap<DocTypeLookup, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeLookup>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeLookup>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeLookup, DocTypeLookup>()
                .ConstructUsing(new Func<TypeLookup, DocTypeLookup>(c => new DocTypeLookup() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
;

            cfg.CreateMap<DocTypeMeanBase, TypeMeanBase>()
                .ConstructUsing(new Func<DocTypeMeanBase, TypeMeanBase>(c => new TypeMeanBase() ) )
                .ForMember(dest => dest.MeanCalculationType, opt => opt.MapFrom(src => (null == src || null == src.MeanCalculationType ) ? null : src.MeanCalculationType.ToReference() ) )
                .ForMember(dest => dest.MeanVariableType, opt => opt.MapFrom(src => (null == src || null == src.MeanVariableType ) ? null : src.MeanVariableType.ToReference() ) )
                .ForMember(dest => dest.MeanVarianceType, opt => opt.MapFrom(src => (null == src || null == src.MeanVarianceType ) ? null : src.MeanVarianceType.ToReference() ) )
;            cfg.CreateMap<DocStructureMeanBase, TypeMeanBase>()
                .ConstructUsing(new Func<DocStructureMeanBase, TypeMeanBase>(c => new TypeMeanBase() ) );
            cfg.CreateMap<DocTypeMeanBase, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeMeanBase>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeMeanBase>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeMeanBase, DocTypeMeanBase>()
                .ConstructUsing(new Func<TypeMeanBase, DocTypeMeanBase>(c => new DocTypeMeanBase() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.MeanCalculationType, opt => opt.MapFrom(src => (null == src || null == src.MeanCalculationType || string.IsNullOrEmpty(src.MeanCalculationType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("MeanCalculationType", src.MeanCalculationType.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.MeanVariableType, opt => opt.MapFrom(src => (null == src || null == src.MeanVariableType || string.IsNullOrEmpty(src.MeanVariableType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("MeanVariableType", src.MeanVariableType.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.MeanVariableValueRange, opt => opt.MapFrom(src => (null == src || null == src.MeanVariableValueRange ) ? new DocTypeUnitsRange() : Mapper.Map(src.MeanVariableValueRange, new DocTypeUnitsRange() ) ) )
                .ForMember(dest => dest.MeanVarianceType, opt => opt.MapFrom(src => (null == src || null == src.MeanVarianceType || string.IsNullOrEmpty(src.MeanVarianceType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("MeanVarianceType", src.MeanVarianceType.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.MeanVarianceValueRange, opt => opt.MapFrom(src => (null == src || null == src.MeanVarianceValueRange ) ? new DocTypeDecimalRange() : Mapper.Map(src.MeanVarianceValueRange, new DocTypeDecimalRange() ) ) )
                .AfterMap((s, d) => AfterDocTypeMeanBaseConvert(s, d));


            cfg.CreateMap<DocTypeMemo, TypeMemo>()
                .ConstructUsing(new Func<DocTypeMemo, TypeMemo>(c => new TypeMemo() ) )
;            cfg.CreateMap<DocStructureMemo, TypeMemo>()
                .ConstructUsing(new Func<DocStructureMemo, TypeMemo>(c => new TypeMemo() ) );
            cfg.CreateMap<DocTypeMemo, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeMemo>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeMemo>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeMemo, DocTypeMemo>()
                .ConstructUsing(new Func<TypeMemo, DocTypeMemo>(c => new DocTypeMemo() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
;

            cfg.CreateMap<DocTypeNPersons, TypeNPersons>()
                .ConstructUsing(new Func<DocTypeNPersons, TypeNPersons>(c => new TypeNPersons() ) )
                .ForMember(dest => dest.MeanVarianceType, opt => opt.MapFrom(src => (null == src || null == src.MeanVarianceType ) ? null : src.MeanVarianceType.ToReference() ) )
                .ForMember(dest => dest.PrevalenceType, opt => opt.MapFrom(src => (null == src || null == src.PrevalenceType ) ? null : src.PrevalenceType.ToReference() ) )
;            cfg.CreateMap<DocStructureNPersons, TypeNPersons>()
                .ConstructUsing(new Func<DocStructureNPersons, TypeNPersons>(c => new TypeNPersons() ) );
            cfg.CreateMap<DocTypeNPersons, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeNPersons>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeNPersons>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeNPersons, DocTypeNPersons>()
                .ConstructUsing(new Func<TypeNPersons, DocTypeNPersons>(c => new DocTypeNPersons() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.MeanVarianceType, opt => opt.MapFrom(src => (null == src || null == src.MeanVarianceType || string.IsNullOrEmpty(src.MeanVarianceType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("MeanVarianceType", src.MeanVarianceType.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.MeanVarianceValueRange, opt => opt.MapFrom(src => (null == src || null == src.MeanVarianceValueRange ) ? new DocTypeDecimalRange() : Mapper.Map(src.MeanVarianceValueRange, new DocTypeDecimalRange() ) ) )
                .ForMember(dest => dest.NumberEvents, opt => opt.MapFrom(src => (null == src || null == src.NumberEvents ) ? new DocTypeInteger() : Mapper.Map(src.NumberEvents, new DocTypeInteger() ) ) )
                .ForMember(dest => dest.Participants, opt => opt.MapFrom(src => (null == src || null == src.Participants ) ? new DocTypeParticipant() : Mapper.Map(src.Participants, new DocTypeParticipant() ) ) )
                .ForMember(dest => dest.PrevalenceType, opt => opt.MapFrom(src => (null == src || null == src.PrevalenceType || string.IsNullOrEmpty(src.PrevalenceType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("PrevalenceType", src.PrevalenceType.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.Rate, opt => opt.MapFrom(src => (null == src || null == src.Rate ) ? new DocTypeUnitValue() : Mapper.Map(src.Rate, new DocTypeUnitValue() ) ) )
;

            cfg.CreateMap<DocTypeParticipant, TypeParticipant>()
                .ConstructUsing(new Func<DocTypeParticipant, TypeParticipant>(c => new TypeParticipant() ) )
;            cfg.CreateMap<DocStructureParticipant, TypeParticipant>()
                .ConstructUsing(new Func<DocStructureParticipant, TypeParticipant>(c => new TypeParticipant() ) );
            cfg.CreateMap<DocTypeParticipant, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeParticipant>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeParticipant>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeParticipant, DocTypeParticipant>()
                .ConstructUsing(new Func<TypeParticipant, DocTypeParticipant>(c => new DocTypeParticipant() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.Number, opt => opt.MapFrom(src => (null == src || null == src.Number ) ? new DocTypeInteger() : Mapper.Map(src.Number, new DocTypeInteger() ) ) )
                .ForMember(dest => dest.Percent, opt => opt.MapFrom(src => (null == src || null == src.Percent ) ? new DocTypeDecimal() : Mapper.Map(src.Percent, new DocTypeDecimal() ) ) )
;

            cfg.CreateMap<DocTypeParticipants, TypeParticipants>()
                .ConstructUsing(new Func<DocTypeParticipants, TypeParticipants>(c => new TypeParticipants() ) )
;            cfg.CreateMap<DocStructureParticipants, TypeParticipants>()
                .ConstructUsing(new Func<DocStructureParticipants, TypeParticipants>(c => new TypeParticipants() ) );
            cfg.CreateMap<DocTypeParticipants, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeParticipants>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeParticipants>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeParticipants, DocTypeParticipants>()
                .ConstructUsing(new Func<TypeParticipants, DocTypeParticipants>(c => new DocTypeParticipants() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.Female, opt => opt.MapFrom(src => (null == src || null == src.Female ) ? new DocTypeParticipant() : Mapper.Map(src.Female, new DocTypeParticipant() ) ) )
                .ForMember(dest => dest.Male, opt => opt.MapFrom(src => (null == src || null == src.Male ) ? new DocTypeParticipant() : Mapper.Map(src.Male, new DocTypeParticipant() ) ) )
                .ForMember(dest => dest.Unknown, opt => opt.MapFrom(src => (null == src || null == src.Unknown ) ? new DocTypeParticipant() : Mapper.Map(src.Unknown, new DocTypeParticipant() ) ) )
;

            cfg.CreateMap<DocTypePopulationAnalyzed, TypePopulationAnalyzed>()
                .ConstructUsing(new Func<DocTypePopulationAnalyzed, TypePopulationAnalyzed>(c => new TypePopulationAnalyzed() ) )
                .ForMember(dest => dest.Scope, opt => opt.MapFrom(src => (null == src || null == src.Scope ) ? null : src.Scope.ToReference() ) )
                .ForMember(dest => dest.Units, opt => opt.MapFrom(src => (null == src || null == src.Units ) ? null : src.Units.ToReference() ) )
;            cfg.CreateMap<DocStructurePopulationAnalyzed, TypePopulationAnalyzed>()
                .ConstructUsing(new Func<DocStructurePopulationAnalyzed, TypePopulationAnalyzed>(c => new TypePopulationAnalyzed() ) );
            cfg.CreateMap<DocTypePopulationAnalyzed, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypePopulationAnalyzed>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypePopulationAnalyzed>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypePopulationAnalyzed, DocTypePopulationAnalyzed>()
                .ConstructUsing(new Func<TypePopulationAnalyzed, DocTypePopulationAnalyzed>(c => new DocTypePopulationAnalyzed() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.Scope, opt => opt.MapFrom(src => (null == src || null == src.Scope || string.IsNullOrEmpty(src.Scope.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("ArmPopulationN", src.Scope.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.Units, opt => opt.MapFrom(src => (null == src || null == src.Units || string.IsNullOrEmpty(src.Units.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("PopulationType", src.Units.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.N, opt => opt.MapFrom(src => (null == src || null == src.N ) ? new DocTypeInteger() : Mapper.Map(src.N, new DocTypeInteger() ) ) )
;

            cfg.CreateMap<DocTypePValue, TypePValue>()
                .ConstructUsing(new Func<DocTypePValue, TypePValue>(c => new TypePValue() ) )
                .ForMember(dest => dest.EqualityOperator, opt => opt.MapFrom(src => (null == src || null == src.EqualityOperator ) ? null : src.EqualityOperator.ToReference() ) )
                .ForMember(dest => dest.Significance, opt => opt.MapFrom(src => (null == src || null == src.Significance ) ? null : src.Significance.ToReference() ) )
;            cfg.CreateMap<DocStructurePValue, TypePValue>()
                .ConstructUsing(new Func<DocStructurePValue, TypePValue>(c => new TypePValue() ) );
            cfg.CreateMap<DocTypePValue, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypePValue>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypePValue>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypePValue, DocTypePValue>()
                .ConstructUsing(new Func<TypePValue, DocTypePValue>(c => new DocTypePValue() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.EqualityOperator, opt => opt.MapFrom(src => (null == src || null == src.EqualityOperator || string.IsNullOrEmpty(src.EqualityOperator.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("EqualityOperator", src.EqualityOperator.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.Significance, opt => opt.MapFrom(src => (null == src || null == src.Significance || string.IsNullOrEmpty(src.Significance.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("StatisticalSignificance", src.Significance.Name ).ToLookupTable() ) )
;

            cfg.CreateMap<DocTypeRate, TypeRate>()
                .ConstructUsing(new Func<DocTypeRate, TypeRate>(c => new TypeRate() ) )
                .ForMember(dest => dest.CumulativeIncidenceRateType, opt => opt.MapFrom(src => (null == src || null == src.CumulativeIncidenceRateType ) ? null : src.CumulativeIncidenceRateType.ToReference() ) )
                .ForMember(dest => dest.CumulativeMeanVarianceType, opt => opt.MapFrom(src => (null == src || null == src.CumulativeMeanVarianceType ) ? null : src.CumulativeMeanVarianceType.ToReference() ) )
                .ForMember(dest => dest.IncidenceRateType, opt => opt.MapFrom(src => (null == src || null == src.IncidenceRateType ) ? null : src.IncidenceRateType.ToReference() ) )
                .ForMember(dest => dest.MeanVarianceType, opt => opt.MapFrom(src => (null == src || null == src.MeanVarianceType ) ? null : src.MeanVarianceType.ToReference() ) )
                .ForMember(dest => dest.IncidenceRateField, opt => opt.MapFrom(src => (null == src || null == src.IncidenceRateField ) ? null : src.IncidenceRateField.ToReference() ) )
                .ForMember(dest => dest.CumulativeIncidenceRateField, opt => opt.MapFrom(src => (null == src || null == src.CumulativeIncidenceRateField ) ? null : src.CumulativeIncidenceRateField.ToReference() ) )
;            cfg.CreateMap<DocStructureRate, TypeRate>()
                .ConstructUsing(new Func<DocStructureRate, TypeRate>(c => new TypeRate() ) );
            cfg.CreateMap<DocTypeRate, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeRate>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeRate>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeRate, DocTypeRate>()
                .ConstructUsing(new Func<TypeRate, DocTypeRate>(c => new DocTypeRate() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.CountAlternate, opt => opt.MapFrom(src => (null == src || null == src.CountAlternate ) ? new DocTypeDecimal() : Mapper.Map(src.CountAlternate, new DocTypeDecimal() ) ) )
                .ForMember(dest => dest.CumulativeIncidenceRateType, opt => opt.MapFrom(src => (null == src || null == src.CumulativeIncidenceRateType || string.IsNullOrEmpty(src.CumulativeIncidenceRateType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("IncidenceRateType", src.CumulativeIncidenceRateType.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.CumulativeMeanVarianceType, opt => opt.MapFrom(src => (null == src || null == src.CumulativeMeanVarianceType || string.IsNullOrEmpty(src.CumulativeMeanVarianceType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("MeanVarianceType", src.CumulativeMeanVarianceType.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.CumulativeMeanVarianceValueRange, opt => opt.MapFrom(src => (null == src || null == src.CumulativeMeanVarianceValueRange ) ? new DocTypeDecimalRange() : Mapper.Map(src.CumulativeMeanVarianceValueRange, new DocTypeDecimalRange() ) ) )
                .ForMember(dest => dest.CumulativeRate, opt => opt.MapFrom(src => (null == src || null == src.CumulativeRate ) ? new DocTypeUnitValue() : Mapper.Map(src.CumulativeRate, new DocTypeUnitValue() ) ) )
                .ForMember(dest => dest.IncidenceRateType, opt => opt.MapFrom(src => (null == src || null == src.IncidenceRateType || string.IsNullOrEmpty(src.IncidenceRateType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("IncidenceRateType", src.IncidenceRateType.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.MeanVarianceType, opt => opt.MapFrom(src => (null == src || null == src.MeanVarianceType || string.IsNullOrEmpty(src.MeanVarianceType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("MeanVarianceType", src.MeanVarianceType.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.MeanVarianceValueRange, opt => opt.MapFrom(src => (null == src || null == src.MeanVarianceValueRange ) ? new DocTypeDecimalRange() : Mapper.Map(src.MeanVarianceValueRange, new DocTypeDecimalRange() ) ) )
                .ForMember(dest => dest.NumberAlternate, opt => opt.MapFrom(src => (null == src || null == src.NumberAlternate ) ? new DocTypeDecimal() : Mapper.Map(src.NumberAlternate, new DocTypeDecimal() ) ) )
                .ForMember(dest => dest.NumberEvents, opt => opt.MapFrom(src => (null == src || null == src.NumberEvents ) ? new DocTypeInteger() : Mapper.Map(src.NumberEvents, new DocTypeInteger() ) ) )
                .ForMember(dest => dest.Participants, opt => opt.MapFrom(src => (null == src || null == src.Participants ) ? new DocTypeParticipant() : Mapper.Map(src.Participants, new DocTypeParticipant() ) ) )
                .ForMember(dest => dest.Rate, opt => opt.MapFrom(src => (null == src || null == src.Rate ) ? new DocTypeUnitValue() : Mapper.Map(src.Rate, new DocTypeUnitValue() ) ) )
                .ForMember(dest => dest.TotalPersonTime, opt => opt.MapFrom(src => (null == src || null == src.TotalPersonTime ) ? new DocTypeDecimal() : Mapper.Map(src.TotalPersonTime, new DocTypeDecimal() ) ) )
                .ForMember(dest => dest.TotalPersonTimeValue, opt => opt.MapFrom(src => (null == src || null == src.TotalPersonTimeValue ) ? new DocTypeUnitValue() : Mapper.Map(src.TotalPersonTimeValue, new DocTypeUnitValue() ) ) )
                .ForMember(dest => dest.IncidenceRateField, opt => opt.MapFrom(src => (null == src || null == src.IncidenceRateField || string.IsNullOrEmpty(src.IncidenceRateField.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("MeanVariableType", src.IncidenceRateField.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.CumulativeIncidenceRateField, opt => opt.MapFrom(src => (null == src || null == src.CumulativeIncidenceRateField || string.IsNullOrEmpty(src.CumulativeIncidenceRateField.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("MeanVariableType", src.CumulativeIncidenceRateField.Name ).ToLookupTable() ) )
;

            cfg.CreateMap<DocTypeSettingLocation, TypeSettingLocation>()
                .ConstructUsing(new Func<DocTypeSettingLocation, TypeSettingLocation>(c => new TypeSettingLocation() ) )
                .ForMember(dest => dest.SettingLocationName, opt => opt.MapFrom(src => (null == src || null == src.SettingLocationName ) ? null : src.SettingLocationName.ToReference() ) )
                .ForMember(dest => dest.SettingLocationType, opt => opt.MapFrom(src => (null == src || null == src.SettingLocationType ) ? null : src.SettingLocationType.ToReference() ) )
;            cfg.CreateMap<DocStructureSettingLocation, TypeSettingLocation>()
                .ConstructUsing(new Func<DocStructureSettingLocation, TypeSettingLocation>(c => new TypeSettingLocation() ) );
            cfg.CreateMap<DocTypeSettingLocation, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeSettingLocation>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeSettingLocation>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeSettingLocation, DocTypeSettingLocation>()
                .ConstructUsing(new Func<TypeSettingLocation, DocTypeSettingLocation>(c => new DocTypeSettingLocation() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.Mean, opt => opt.MapFrom(src => (null == src || null == src.Mean ) ? new DocTypeMeanBase() : Mapper.Map(src.Mean, new DocTypeMeanBase() ) ) )
                .ForMember(dest => dest.NumberPercentage, opt => opt.MapFrom(src => (null == src || null == src.NumberPercentage ) ? new DocTypeParticipant() : Mapper.Map(src.NumberPercentage, new DocTypeParticipant() ) ) )
                .ForMember(dest => dest.SettingLocationName, opt => opt.MapFrom(src => (null == src || null == src.SettingLocationName || string.IsNullOrEmpty(src.SettingLocationName.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("SettingLocationName", src.SettingLocationName.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.SettingLocationType, opt => opt.MapFrom(src => (null == src || null == src.SettingLocationType || string.IsNullOrEmpty(src.SettingLocationType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("SettingLocationType", src.SettingLocationType.Name ).ToLookupTable() ) )
;

            cfg.CreateMap<DocTypeSettingLocationTotal, TypeSettingLocationTotal>()
                .ConstructUsing(new Func<DocTypeSettingLocationTotal, TypeSettingLocationTotal>(c => new TypeSettingLocationTotal() ) )
;            cfg.CreateMap<DocStructureSettingLocationTotal, TypeSettingLocationTotal>()
                .ConstructUsing(new Func<DocStructureSettingLocationTotal, TypeSettingLocationTotal>(c => new TypeSettingLocationTotal() ) );
            cfg.CreateMap<DocTypeSettingLocationTotal, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeSettingLocationTotal>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeSettingLocationTotal>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeSettingLocationTotal, DocTypeSettingLocationTotal>()
                .ConstructUsing(new Func<TypeSettingLocationTotal, DocTypeSettingLocationTotal>(c => new DocTypeSettingLocationTotal() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.Mean, opt => opt.MapFrom(src => (null == src || null == src.Mean ) ? new DocTypeMeanBase() : Mapper.Map(src.Mean, new DocTypeMeanBase() ) ) )
                .ForMember(dest => dest.NumberPercentage, opt => opt.MapFrom(src => (null == src || null == src.NumberPercentage ) ? new DocTypeParticipant() : Mapper.Map(src.NumberPercentage, new DocTypeParticipant() ) ) )
                .ForMember(dest => dest.Total, opt => opt.MapFrom(src => (null == src || null == src.Total ) ? new DocTypeInteger() : Mapper.Map(src.Total, new DocTypeInteger() ) ) )
;

            cfg.CreateMap<DocTypeStudyDoc, TypeStudyDoc>()
                .ConstructUsing(new Func<DocTypeStudyDoc, TypeStudyDoc>(c => new TypeStudyDoc() ) )
;            cfg.CreateMap<DocStructureStudyDoc, TypeStudyDoc>()
                .ConstructUsing(new Func<DocStructureStudyDoc, TypeStudyDoc>(c => new TypeStudyDoc() ) );
            cfg.CreateMap<DocTypeStudyDoc, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeStudyDoc>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeStudyDoc>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeStudyDoc, DocTypeStudyDoc>()
                .ConstructUsing(new Func<TypeStudyDoc, DocTypeStudyDoc>(c => new DocTypeStudyDoc() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
;

            cfg.CreateMap<DocTypeStudyObjective, TypeStudyObjective>()
                .ConstructUsing(new Func<DocTypeStudyObjective, TypeStudyObjective>(c => new TypeStudyObjective() ) )
                .ForMember(dest => dest.Objective, opt => opt.MapFrom(src => (null == src || null == src.Objective ) ? null : src.Objective.ToReference() ) )
;            cfg.CreateMap<DocStructureStudyObjective, TypeStudyObjective>()
                .ConstructUsing(new Func<DocStructureStudyObjective, TypeStudyObjective>(c => new TypeStudyObjective() ) );
            cfg.CreateMap<DocTypeStudyObjective, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeStudyObjective>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeStudyObjective>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeStudyObjective, DocTypeStudyObjective>()
                .ConstructUsing(new Func<TypeStudyObjective, DocTypeStudyObjective>(c => new DocTypeStudyObjective() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.Objective, opt => opt.MapFrom(src => (null == src || null == src.Objective || string.IsNullOrEmpty(src.Objective.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("StudyObjective", src.Objective.Name ).ToLookupTable() ) )
;

            cfg.CreateMap<DocTypeStudyReference, TypeStudyReference>()
                .ConstructUsing(new Func<DocTypeStudyReference, TypeStudyReference>(c => new TypeStudyReference() ) )
;            cfg.CreateMap<DocStructureStudyReference, TypeStudyReference>()
                .ConstructUsing(new Func<DocStructureStudyReference, TypeStudyReference>(c => new TypeStudyReference() ) );
            cfg.CreateMap<DocTypeStudyReference, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeStudyReference>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeStudyReference>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeStudyReference, DocTypeStudyReference>()
                .ConstructUsing(new Func<TypeStudyReference, DocTypeStudyReference>(c => new DocTypeStudyReference() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
;

            cfg.CreateMap<DocTypeSubgroupDescriptor, TypeSubgroupDescriptor>()
                .ConstructUsing(new Func<DocTypeSubgroupDescriptor, TypeSubgroupDescriptor>(c => new TypeSubgroupDescriptor() ) )
                .ForMember(dest => dest.SubgroupName, opt => opt.MapFrom(src => (null == src || null == src.SubgroupName ) ? null : src.SubgroupName.ToReference() ) )
                .ForMember(dest => dest.SubgroupCategoryName, opt => opt.MapFrom(src => (null == src || null == src.SubgroupCategoryName ) ? null : src.SubgroupCategoryName.ToReference() ) )
;            cfg.CreateMap<DocStructureSubgroupDescriptor, TypeSubgroupDescriptor>()
                .ConstructUsing(new Func<DocStructureSubgroupDescriptor, TypeSubgroupDescriptor>(c => new TypeSubgroupDescriptor() ) );
            cfg.CreateMap<DocTypeSubgroupDescriptor, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeSubgroupDescriptor>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeSubgroupDescriptor>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeSubgroupDescriptor, DocTypeSubgroupDescriptor>()
                .ConstructUsing(new Func<TypeSubgroupDescriptor, DocTypeSubgroupDescriptor>(c => new DocTypeSubgroupDescriptor() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.SubgroupName, opt => opt.MapFrom(src => (null == src || null == src.SubgroupName || string.IsNullOrEmpty(src.SubgroupName.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("SubgroupName", src.SubgroupName.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.SubgroupCategoryName, opt => opt.MapFrom(src => (null == src || null == src.SubgroupCategoryName || string.IsNullOrEmpty(src.SubgroupCategoryName.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("SubgroupCategoryName", src.SubgroupCategoryName.Name ).ToLookupTable() ) )
                .AfterMap((s, d) => AfterSubgroupDescriptor(s, d));


            cfg.CreateMap<DocTypeTimepoint, TypeTimepoint>()
                .ConstructUsing(new Func<DocTypeTimepoint, TypeTimepoint>(c => new TypeTimepoint() ) )
                .ForMember(dest => dest.Type, opt => opt.MapFrom(src => (null == src || null == src.Type ) ? null : src.Type.ToReference() ) )
;            cfg.CreateMap<DocStructureTimepoint, TypeTimepoint>()
                .ConstructUsing(new Func<DocStructureTimepoint, TypeTimepoint>(c => new TypeTimepoint() ) );
            cfg.CreateMap<DocTypeTimepoint, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeTimepoint>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeTimepoint>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeTimepoint, DocTypeTimepoint>()
                .ConstructUsing(new Func<TypeTimepoint, DocTypeTimepoint>(c => new DocTypeTimepoint() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.MeanValue, opt => opt.MapFrom(src => (null == src || null == src.MeanValue ) ? new DocTypeMeanBase() : Mapper.Map(src.MeanValue, new DocTypeMeanBase() ) ) )
                .ForMember(dest => dest.SingleValue, opt => opt.MapFrom(src => (null == src || null == src.SingleValue ) ? new DocTypeUnitValue() : Mapper.Map(src.SingleValue, new DocTypeUnitValue() ) ) )
                .ForMember(dest => dest.TotalValue, opt => opt.MapFrom(src => (null == src || null == src.TotalValue ) ? new DocTypeUnitRange() : Mapper.Map(src.TotalValue, new DocTypeUnitRange() ) ) )
                .ForMember(dest => dest.Type, opt => opt.MapFrom(src => (null == src || null == src.Type || string.IsNullOrEmpty(src.Type.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("TimepointType", src.Type.Name ).ToLookupTable() ) )
;

            cfg.CreateMap<DocTypeTimepoints, TypeTimepoints>()
                .ConstructUsing(new Func<DocTypeTimepoints, TypeTimepoints>(c => new TypeTimepoints() ) )
;            cfg.CreateMap<DocStructureTimepoints, TypeTimepoints>()
                .ConstructUsing(new Func<DocStructureTimepoints, TypeTimepoints>(c => new TypeTimepoints() ) );
            cfg.CreateMap<DocTypeTimepoints, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeTimepoints>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeTimepoints>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeTimepoints, DocTypeTimepoints>()
                .ConstructUsing(new Func<TypeTimepoints, DocTypeTimepoints>(c => new DocTypeTimepoints() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.Timepoints, opt => opt.MapFrom(src => (null == src || null == src.Timepoints ) ? new List<DocTypeTimepoint>() : Mapper.Map(src.Timepoints, new List<DocTypeTimepoint>() ) ) )
;

            cfg.CreateMap<DocTypeUncollectedValue, TypeUncollectedValue>()
                .ConstructUsing(new Func<DocTypeUncollectedValue, TypeUncollectedValue>(c => new TypeUncollectedValue() ) )
                .ForMember(dest => dest.FieldType, opt => opt.MapFrom(src => (null == src || null == src.FieldType ) ? null : src.FieldType.ToReference() ) )
;            cfg.CreateMap<DocStructureUncollectedValue, TypeUncollectedValue>()
                .ConstructUsing(new Func<DocStructureUncollectedValue, TypeUncollectedValue>(c => new TypeUncollectedValue() ) );
            cfg.CreateMap<DocTypeUncollectedValue, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeUncollectedValue>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeUncollectedValue>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeUncollectedValue, DocTypeUncollectedValue>()
                .ConstructUsing(new Func<TypeUncollectedValue, DocTypeUncollectedValue>(c => new DocTypeUncollectedValue() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.FieldType, opt => opt.MapFrom(src => (null == src || null == src.FieldType || string.IsNullOrEmpty(src.FieldType.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("FieldType", src.FieldType.Name ).ToLookupTable() ) )
                .ForMember(dest => dest.Intervals, opt => opt.MapFrom(src => (null == src || null == src.Intervals ) ? new DocTypeIntervals() : Mapper.Map(src.Intervals, new DocTypeIntervals() ) ) )
;

            cfg.CreateMap<DocTypeUnitRange, TypeUnitRange>()
                .ConstructUsing(new Func<DocTypeUnitRange, TypeUnitRange>(c => new TypeUnitRange() ) )
                .ForMember(dest => dest.Type, opt => opt.MapFrom(src => (null == src || null == src.Type ) ? null : src.Type.ToReference() ) )
;            cfg.CreateMap<DocStructureUnitRange, TypeUnitRange>()
                .ConstructUsing(new Func<DocStructureUnitRange, TypeUnitRange>(c => new TypeUnitRange() ) );
            cfg.CreateMap<DocTypeUnitRange, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeUnitRange>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeUnitRange>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeUnitRange, DocTypeUnitRange>()
                .ConstructUsing(new Func<TypeUnitRange, DocTypeUnitRange>(c => new DocTypeUnitRange() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.High, opt => opt.MapFrom(src => (null == src || null == src.High ) ? new DocTypeUnitValue() : Mapper.Map(src.High, new DocTypeUnitValue() ) ) )
                .ForMember(dest => dest.Low, opt => opt.MapFrom(src => (null == src || null == src.Low ) ? new DocTypeUnitValue() : Mapper.Map(src.Low, new DocTypeUnitValue() ) ) )
                .ForMember(dest => dest.Type, opt => opt.MapFrom(src => (null == src || null == src.Type || string.IsNullOrEmpty(src.Type.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("RangeType", src.Type.Name ).ToLookupTable() ) )
                .AfterMap((s, d) => AfterDocTypeUnitRangeConvert(s, d));


            cfg.CreateMap<DocTypeUnits, TypeUnits>()
                .ConstructUsing(new Func<DocTypeUnits, TypeUnits>(c => new TypeUnits() ) )
;            cfg.CreateMap<DocStructureUnits, TypeUnits>()
                .ConstructUsing(new Func<DocStructureUnits, TypeUnits>(c => new TypeUnits() ) );
            cfg.CreateMap<DocTypeUnits, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeUnits>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeUnits>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeUnits, DocTypeUnits>()
                .ConstructUsing(new Func<TypeUnits, DocTypeUnits>(c => new DocTypeUnits() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .AfterMap((s, d) => AfterDocTypeUnitsConvert(s, d));


            cfg.CreateMap<DocTypeUnitsRange, TypeUnitsRange>()
                .ConstructUsing(new Func<DocTypeUnitsRange, TypeUnitsRange>(c => new TypeUnitsRange() ) )
;            cfg.CreateMap<DocStructureUnitsRange, TypeUnitsRange>()
                .ConstructUsing(new Func<DocStructureUnitsRange, TypeUnitsRange>(c => new TypeUnitsRange() ) );
            cfg.CreateMap<DocTypeUnitsRange, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeUnitsRange>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeUnitsRange>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeUnitsRange, DocTypeUnitsRange>()
                .ConstructUsing(new Func<TypeUnitsRange, DocTypeUnitsRange>(c => new DocTypeUnitsRange() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .AfterMap((s, d) => AfterDocTypeUnitsRangeConvert(s, d));


            cfg.CreateMap<DocTypeUnitValue, TypeUnitValue>()
                .ConstructUsing(new Func<DocTypeUnitValue, TypeUnitValue>(c => new TypeUnitValue() ) )
                .ForMember(dest => dest.EqualityOperator, opt => opt.MapFrom(src => (null == src || null == src.EqualityOperator ) ? null : src.EqualityOperator.ToReference() ) )
;            cfg.CreateMap<DocStructureUnitValue, TypeUnitValue>()
                .ConstructUsing(new Func<DocStructureUnitValue, TypeUnitValue>(c => new TypeUnitValue() ) );
            cfg.CreateMap<DocTypeUnitValue, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeUnitValue>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeUnitValue>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeUnitValue, DocTypeUnitValue>()
                .ConstructUsing(new Func<TypeUnitValue, DocTypeUnitValue>(c => new DocTypeUnitValue() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.EqualityOperator, opt => opt.MapFrom(src => (null == src || null == src.EqualityOperator || string.IsNullOrEmpty(src.EqualityOperator.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("EqualityOperator", src.EqualityOperator.Name ).ToLookupTable() ) )
                .AfterMap((s, d) => AfterDocTypeUnitValueConvert(s, d));


            cfg.CreateMap<DocTypeYesNoNa, TypeYesNoNa>()
                .ConstructUsing(new Func<DocTypeYesNoNa, TypeYesNoNa>(c => new TypeYesNoNa() ) )
                .ForMember(dest => dest.YesNoNa, opt => opt.MapFrom(src => (null == src || null == src.YesNoNa ) ? null : src.YesNoNa.ToReference() ) )
;            cfg.CreateMap<DocStructureYesNoNa, TypeYesNoNa>()
                .ConstructUsing(new Func<DocStructureYesNoNa, TypeYesNoNa>(c => new TypeYesNoNa() ) );
            cfg.CreateMap<DocTypeYesNoNa, Reference>()
                .ForMember(dest => dest.Id, opt => opt.Ignore() )
                .ForMember(dest => dest.Name, opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeYesNoNa>()
                .ForAllMembers(opt => opt.Ignore() )
;
            cfg.CreateMap<Reference, DocTypeYesNoNa>()
                .ForMember(dest => dest.Gestalt, opt => opt.MapFrom(src => src.Gestalt ) )
;
            cfg.CreateMap<TypeYesNoNa, DocTypeYesNoNa>()
                .ConstructUsing(new Func<TypeYesNoNa, DocTypeYesNoNa>(c => new DocTypeYesNoNa() ) )
                .ForMember(dest => dest.Execute, opt => opt.Ignore() )
                .ForMember(dest => dest.Gestalt, opt => opt.Ignore() )
                .ForMember(dest => dest.Hash, opt => opt.Ignore() )
                .ForMember(dest => dest.YesNoNa, opt => opt.MapFrom(src => (null == src || null == src.YesNoNa || string.IsNullOrEmpty(src.YesNoNa.Name ) ) ? null : DocEntityLookupTable.GetOrInsertLookupTable("YesNoNa", src.YesNoNa.Name ).ToLookupTable() ) )
;

                #endregion Type Mapping 
            } );
        }
    }
}

