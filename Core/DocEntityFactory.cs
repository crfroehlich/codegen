//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by a CodeSmith Generator project.
//
//    This class can be customized by adding or removing code from supported Custom regions
//    (e.g. Custom Imports, Custom Region 1).
//
//    All other changes to this file will cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Services.Dto;
using Services.Enums;

using System;
using System.Collections.Generic;
using System.Linq;

using Xtensive.Orm;

namespace Services.Schema
{
    /// <summary> A document entity factory. </summary>
    public static class DocEntityFactory
    {

        public static DocConstantModelName GetEnumModelName<T>()
        {
            var ret = string.Empty;
                if(typeof(T) == typeof(DocEntityApp))
                {
                    ret = DocConstantModelName.APP;
                }
                else if(typeof(T) == typeof(DocEntityAttribute))
                {
                    ret = DocConstantModelName.ATTRIBUTE;
                }
                else if(typeof(T) == typeof(DocEntityAttributeCategory))
                {
                    ret = DocConstantModelName.ATTRIBUTECATEGORY;
                }
                else if(typeof(T) == typeof(DocEntityAttributeInterval))
                {
                    ret = DocConstantModelName.ATTRIBUTEINTERVAL;
                }
                else if(typeof(T) == typeof(DocEntityAuditDelta))
                {
                    ret = DocConstantModelName.AUDITDELTA;
                }
                else if(typeof(T) == typeof(DocEntityAuditRecord))
                {
                    ret = DocConstantModelName.AUDITRECORD;
                }
                else if(typeof(T) == typeof(DocEntityBackgroundTask))
                {
                    ret = DocConstantModelName.BACKGROUNDTASK;
                }
                else if(typeof(T) == typeof(DocEntityBackgroundTaskHistory))
                {
                    ret = DocConstantModelName.BACKGROUNDTASKHISTORY;
                }
                else if(typeof(T) == typeof(DocEntityBackgroundTaskItem))
                {
                    ret = DocConstantModelName.BACKGROUNDTASKITEM;
                }
                else if(typeof(T) == typeof(DocEntityBroadcast))
                {
                    ret = DocConstantModelName.BROADCAST;
                }
                else if(typeof(T) == typeof(DocEntityCharacteristic))
                {
                    ret = DocConstantModelName.CHARACTERISTIC;
                }
                else if(typeof(T) == typeof(DocEntityClient))
                {
                    ret = DocConstantModelName.CLIENT;
                }
                else if(typeof(T) == typeof(DocEntityDatabaseVersion))
                {
                    ret = DocConstantModelName.DATABASEVERSION;
                }
                else if(typeof(T) == typeof(DocEntityDateTime))
                {
                    ret = DocConstantModelName.DATETIME;
                }
                else if(typeof(T) == typeof(DocEntityDefault))
                {
                    ret = DocConstantModelName.DEFAULT;
                }
                else if(typeof(T) == typeof(DocEntityDivision))
                {
                    ret = DocConstantModelName.DIVISION;
                }
                else if(typeof(T) == typeof(DocEntityDocument))
                {
                    ret = DocConstantModelName.DOCUMENT;
                }
                else if(typeof(T) == typeof(DocEntityDocumentAttribute))
                {
                    ret = DocConstantModelName.DOCUMENTATTRIBUTE;
                }
                else if(typeof(T) == typeof(DocEntityDocumentSet))
                {
                    ret = DocConstantModelName.DOCUMENTSET;
                }
                else if(typeof(T) == typeof(DocEntityDocumentSetHistory))
                {
                    ret = DocConstantModelName.DOCUMENTSETHISTORY;
                }
                else if(typeof(T) == typeof(DocEntityEvent))
                {
                    ret = DocConstantModelName.EVENT;
                }
                else if(typeof(T) == typeof(DocEntityFeatureSet))
                {
                    ret = DocConstantModelName.FEATURESET;
                }
                else if(typeof(T) == typeof(DocEntityForeignKey))
                {
                    ret = DocConstantModelName.FOREIGNKEY;
                }
                else if(typeof(T) == typeof(DocEntityGlossary))
                {
                    ret = DocConstantModelName.GLOSSARY;
                }
                else if(typeof(T) == typeof(DocEntityHelp))
                {
                    ret = DocConstantModelName.HELP;
                }
                else if(typeof(T) == typeof(DocEntityHistory))
                {
                    ret = DocConstantModelName.HISTORY;
                }
                else if(typeof(T) == typeof(DocEntityImpersonation))
                {
                    ret = DocConstantModelName.IMPERSONATION;
                }
                else if(typeof(T) == typeof(DocEntityImportData))
                {
                    ret = DocConstantModelName.IMPORTDATA;
                }
                else if(typeof(T) == typeof(DocEntityInterval))
                {
                    ret = DocConstantModelName.INTERVAL;
                }
                else if(typeof(T) == typeof(DocEntityIntervention))
                {
                    ret = DocConstantModelName.INTERVENTION;
                }
                else if(typeof(T) == typeof(DocEntityJctAttributeCategoryAttributeDocumentSet))
                {
                    ret = DocConstantModelName.JCTATTRIBUTECATEGORYATTRIBUTEDOCUMENTSET;
                }
                else if(typeof(T) == typeof(DocEntityJunction))
                {
                    ret = DocConstantModelName.JUNCTION;
                }
                else if(typeof(T) == typeof(DocEntityLocale))
                {
                    ret = DocConstantModelName.LOCALE;
                }
                else if(typeof(T) == typeof(DocEntityLocaleLookup))
                {
                    ret = DocConstantModelName.LOCALELOOKUP;
                }
                else if(typeof(T) == typeof(DocEntityLookupCategory))
                {
                    ret = DocConstantModelName.LOOKUPCATEGORY;
                }
                else if(typeof(T) == typeof(DocEntityLookupTable))
                {
                    ret = DocConstantModelName.LOOKUPTABLE;
                }
                else if(typeof(T) == typeof(DocEntityLookupTableBinding))
                {
                    ret = DocConstantModelName.LOOKUPTABLEBINDING;
                }
                else if(typeof(T) == typeof(DocEntityLookupTableEnum))
                {
                    ret = DocConstantModelName.LOOKUPTABLEENUM;
                }
                else if(typeof(T) == typeof(DocEntityMeanRanges))
                {
                    ret = DocConstantModelName.MEANRANGES;
                }
                else if(typeof(T) == typeof(DocEntityMeanRangeValue))
                {
                    ret = DocConstantModelName.MEANRANGEVALUE;
                }
                else if(typeof(T) == typeof(DocEntityMeanVariances))
                {
                    ret = DocConstantModelName.MEANVARIANCES;
                }
                else if(typeof(T) == typeof(DocEntityMeanVarianceValue))
                {
                    ret = DocConstantModelName.MEANVARIANCEVALUE;
                }
                else if(typeof(T) == typeof(DocEntityOutcome))
                {
                    ret = DocConstantModelName.OUTCOME;
                }
                else if(typeof(T) == typeof(DocEntityPackage))
                {
                    ret = DocConstantModelName.PACKAGE;
                }
                else if(typeof(T) == typeof(DocEntityPage))
                {
                    ret = DocConstantModelName.PAGE;
                }
                else if(typeof(T) == typeof(DocEntityQueueChannel))
                {
                    ret = DocConstantModelName.QUEUECHANNEL;
                }
                else if(typeof(T) == typeof(DocEntityReleaseStatus))
                {
                    ret = DocConstantModelName.RELEASESTATUS;
                }
                else if(typeof(T) == typeof(DocEntityRole))
                {
                    ret = DocConstantModelName.ROLE;
                }
                else if(typeof(T) == typeof(DocEntityScope))
                {
                    ret = DocConstantModelName.SCOPE;
                }
                else if(typeof(T) == typeof(DocEntityStats))
                {
                    ret = DocConstantModelName.STATS;
                }
                else if(typeof(T) == typeof(DocEntityStatsRecord))
                {
                    ret = DocConstantModelName.STATSRECORD;
                }
                else if(typeof(T) == typeof(DocEntityStatsStudySet))
                {
                    ret = DocConstantModelName.STATSSTUDYSET;
                }
                else if(typeof(T) == typeof(DocEntityStudyDesign))
                {
                    ret = DocConstantModelName.STUDYDESIGN;
                }
                else if(typeof(T) == typeof(DocEntityStudyType))
                {
                    ret = DocConstantModelName.STUDYTYPE;
                }
                else if(typeof(T) == typeof(DocEntityTag))
                {
                    ret = DocConstantModelName.TAG;
                }
                else if(typeof(T) == typeof(DocEntityTeam))
                {
                    ret = DocConstantModelName.TEAM;
                }
                else if(typeof(T) == typeof(DocEntityTermCategory))
                {
                    ret = DocConstantModelName.TERMCATEGORY;
                }
                else if(typeof(T) == typeof(DocEntityTermMaster))
                {
                    ret = DocConstantModelName.TERMMASTER;
                }
                else if(typeof(T) == typeof(DocEntityTermSynonym))
                {
                    ret = DocConstantModelName.TERMSYNONYM;
                }
                else if(typeof(T) == typeof(DocEntityTimeCard))
                {
                    ret = DocConstantModelName.TIMECARD;
                }
                else if(typeof(T) == typeof(DocEntityTimePoint))
                {
                    ret = DocConstantModelName.TIMEPOINT;
                }
                else if(typeof(T) == typeof(DocEntityUnitConversionRules))
                {
                    ret = DocConstantModelName.UNITCONVERSIONRULES;
                }
                else if(typeof(T) == typeof(DocEntityUnitOfMeasure))
                {
                    ret = DocConstantModelName.UNITOFMEASURE;
                }
                else if(typeof(T) == typeof(DocEntityUnits))
                {
                    ret = DocConstantModelName.UNITS;
                }
                else if(typeof(T) == typeof(DocEntityUnitValue))
                {
                    ret = DocConstantModelName.UNITVALUE;
                }
                else if(typeof(T) == typeof(DocEntityUpdate))
                {
                    ret = DocConstantModelName.UPDATE;
                }
                else if(typeof(T) == typeof(DocEntityUser))
                {
                    ret = DocConstantModelName.USER;
                }
                else if(typeof(T) == typeof(DocEntityUserRequest))
                {
                    ret = DocConstantModelName.USERREQUEST;
                }
                else if(typeof(T) == typeof(DocEntityUserSession))
                {
                    ret = DocConstantModelName.USERSESSION;
                }
                else if(typeof(T) == typeof(DocEntityUserType))
                {
                    ret = DocConstantModelName.USERTYPE;
                }
                else if(typeof(T) == typeof(DocEntityValueType))
                {
                    ret = DocConstantModelName.VALUETYPE;
                }
                else if(typeof(T) == typeof(DocEntityVariableInstance))
                {
                    ret = DocConstantModelName.VARIABLEINSTANCE;
                }
                else if(typeof(T) == typeof(DocEntityVariableRule))
                {
                    ret = DocConstantModelName.VARIABLERULE;
                }
                else if(typeof(T) == typeof(DocEntityWorkflow))
                {
                    ret = DocConstantModelName.WORKFLOW;
                }
                else if(typeof(T) == typeof(DocEntityWorkflowComment))
                {
                    ret = DocConstantModelName.WORKFLOWCOMMENT;
                }
                else if(typeof(T) == typeof(DocEntityWorkflowTask))
                {
                    ret = DocConstantModelName.WORKFLOWTASK;
                }
            return ret;
        }

        

        public static T MakeEntity<T>(Session session) where T : DocEntityBase, new()
        {
            var model = GetEnumModelName<T>();
            return (T) MakeEntity(session, model);
        }

        public static IDocEntity MakeEntity(Session session, DocConstantModelName modelName)
        {
            DocEntityBase ret;

            switch(modelName)
            {
                //Cannot directly instance these types
                case DocConstantModelName.ENTITY:
                case DocConstantModelName.ENTITYAUDITRECORD:
                    ret = null;
                    break;
                case DocConstantModelName.APP:
                    ret = new DocEntityApp(session);
                    break;
                case DocConstantModelName.ATTRIBUTE:
                    ret = new DocEntityAttribute(session);
                    break;
                case DocConstantModelName.ATTRIBUTECATEGORY:
                    ret = new DocEntityAttributeCategory(session);
                    break;
                case DocConstantModelName.ATTRIBUTEINTERVAL:
                    ret = new DocEntityAttributeInterval(session);
                    break;
                case DocConstantModelName.AUDITDELTA:
                    ret = new DocEntityAuditDelta(session);
                    break;
                case DocConstantModelName.AUDITRECORD:
                    ret = new DocEntityAuditRecord(session);
                    break;
                case DocConstantModelName.BACKGROUNDTASK:
                    ret = new DocEntityBackgroundTask(session);
                    break;
                case DocConstantModelName.BACKGROUNDTASKHISTORY:
                    ret = new DocEntityBackgroundTaskHistory(session);
                    break;
                case DocConstantModelName.BACKGROUNDTASKITEM:
                    ret = new DocEntityBackgroundTaskItem(session);
                    break;
                case DocConstantModelName.BROADCAST:
                    ret = new DocEntityBroadcast(session);
                    break;
                case DocConstantModelName.CHARACTERISTIC:
                    ret = new DocEntityCharacteristic(session);
                    break;
                case DocConstantModelName.CLIENT:
                    ret = new DocEntityClient(session);
                    break;
                case DocConstantModelName.DATABASEVERSION:
                    ret = new DocEntityDatabaseVersion(session);
                    break;
                case DocConstantModelName.DATETIME:
                    ret = new DocEntityDateTime(session);
                    break;
                case DocConstantModelName.DEFAULT:
                    ret = new DocEntityDefault(session);
                    break;
                case DocConstantModelName.DIVISION:
                    ret = new DocEntityDivision(session);
                    break;
                case DocConstantModelName.DOCUMENT:
                    ret = new DocEntityDocument(session);
                    break;
                case DocConstantModelName.DOCUMENTATTRIBUTE:
                    ret = new DocEntityDocumentAttribute(session);
                    break;
                case DocConstantModelName.DOCUMENTSET:
                    ret = new DocEntityDocumentSet(session);
                    break;
                case DocConstantModelName.DOCUMENTSETHISTORY:
                    ret = new DocEntityDocumentSetHistory(session);
                    break;
                case DocConstantModelName.EVENT:
                    ret = new DocEntityEvent(session);
                    break;
                case DocConstantModelName.FEATURESET:
                    ret = new DocEntityFeatureSet(session);
                    break;
                case DocConstantModelName.FOREIGNKEY:
                    ret = new DocEntityForeignKey(session);
                    break;
                case DocConstantModelName.GLOSSARY:
                    ret = new DocEntityGlossary(session);
                    break;
                case DocConstantModelName.HELP:
                    ret = new DocEntityHelp(session);
                    break;
                case DocConstantModelName.HISTORY:
                    ret = new DocEntityHistory(session);
                    break;
                case DocConstantModelName.IMPERSONATION:
                    ret = new DocEntityImpersonation(session);
                    break;
                case DocConstantModelName.IMPORTDATA:
                    ret = new DocEntityImportData(session);
                    break;
                case DocConstantModelName.INTERVAL:
                    ret = new DocEntityInterval(session);
                    break;
                case DocConstantModelName.INTERVENTION:
                    ret = new DocEntityIntervention(session);
                    break;
                case DocConstantModelName.JCTATTRIBUTECATEGORYATTRIBUTEDOCUMENTSET:
                    ret = new DocEntityJctAttributeCategoryAttributeDocumentSet(session);
                    break;
                case DocConstantModelName.JUNCTION:
                    ret = new DocEntityJunction(session);
                    break;
                case DocConstantModelName.LOCALE:
                    ret = new DocEntityLocale(session);
                    break;
                case DocConstantModelName.LOCALELOOKUP:
                    ret = new DocEntityLocaleLookup(session);
                    break;
                case DocConstantModelName.LOOKUPCATEGORY:
                    ret = new DocEntityLookupCategory(session);
                    break;
                case DocConstantModelName.LOOKUPTABLE:
                    ret = new DocEntityLookupTable(session);
                    break;
                case DocConstantModelName.LOOKUPTABLEBINDING:
                    ret = new DocEntityLookupTableBinding(session);
                    break;
                case DocConstantModelName.LOOKUPTABLEENUM:
                    ret = new DocEntityLookupTableEnum(session);
                    break;
                case DocConstantModelName.MEANRANGES:
                    ret = new DocEntityMeanRanges(session);
                    break;
                case DocConstantModelName.MEANRANGEVALUE:
                    ret = new DocEntityMeanRangeValue(session);
                    break;
                case DocConstantModelName.MEANVARIANCES:
                    ret = new DocEntityMeanVariances(session);
                    break;
                case DocConstantModelName.MEANVARIANCEVALUE:
                    ret = new DocEntityMeanVarianceValue(session);
                    break;
                case DocConstantModelName.OUTCOME:
                    ret = new DocEntityOutcome(session);
                    break;
                case DocConstantModelName.PACKAGE:
                    ret = new DocEntityPackage(session);
                    break;
                case DocConstantModelName.PAGE:
                    ret = new DocEntityPage(session);
                    break;
                case DocConstantModelName.QUEUECHANNEL:
                    ret = new DocEntityQueueChannel(session);
                    break;
                case DocConstantModelName.RELEASESTATUS:
                    ret = new DocEntityReleaseStatus(session);
                    break;
                case DocConstantModelName.ROLE:
                    ret = new DocEntityRole(session);
                    break;
                case DocConstantModelName.SCOPE:
                    ret = new DocEntityScope(session);
                    break;
                case DocConstantModelName.STATS:
                    ret = new DocEntityStats(session);
                    break;
                case DocConstantModelName.STATSRECORD:
                    ret = new DocEntityStatsRecord(session);
                    break;
                case DocConstantModelName.STATSSTUDYSET:
                    ret = new DocEntityStatsStudySet(session);
                    break;
                case DocConstantModelName.STUDYDESIGN:
                    ret = new DocEntityStudyDesign(session);
                    break;
                case DocConstantModelName.STUDYTYPE:
                    ret = new DocEntityStudyType(session);
                    break;
                case DocConstantModelName.TAG:
                    ret = new DocEntityTag(session);
                    break;
                case DocConstantModelName.TEAM:
                    ret = new DocEntityTeam(session);
                    break;
                case DocConstantModelName.TERMCATEGORY:
                    ret = new DocEntityTermCategory(session);
                    break;
                case DocConstantModelName.TERMMASTER:
                    ret = new DocEntityTermMaster(session);
                    break;
                case DocConstantModelName.TERMSYNONYM:
                    ret = new DocEntityTermSynonym(session);
                    break;
                case DocConstantModelName.TIMECARD:
                    ret = new DocEntityTimeCard(session);
                    break;
                case DocConstantModelName.TIMEPOINT:
                    ret = new DocEntityTimePoint(session);
                    break;
                case DocConstantModelName.UNITCONVERSIONRULES:
                    ret = new DocEntityUnitConversionRules(session);
                    break;
                case DocConstantModelName.UNITOFMEASURE:
                    ret = new DocEntityUnitOfMeasure(session);
                    break;
                case DocConstantModelName.UNITS:
                    ret = new DocEntityUnits(session);
                    break;
                case DocConstantModelName.UNITVALUE:
                    ret = new DocEntityUnitValue(session);
                    break;
                case DocConstantModelName.UPDATE:
                    ret = new DocEntityUpdate(session);
                    break;
                case DocConstantModelName.USER:
                    ret = new DocEntityUser(session);
                    break;
                case DocConstantModelName.USERREQUEST:
                    ret = new DocEntityUserRequest(session);
                    break;
                case DocConstantModelName.USERSESSION:
                    ret = new DocEntityUserSession(session);
                    break;
                case DocConstantModelName.USERTYPE:
                    ret = new DocEntityUserType(session);
                    break;
                case DocConstantModelName.VALUETYPE:
                    ret = new DocEntityValueType(session);
                    break;
                case DocConstantModelName.VARIABLEINSTANCE:
                    ret = new DocEntityVariableInstance(session);
                    break;
                case DocConstantModelName.VARIABLERULE:
                    ret = new DocEntityVariableRule(session);
                    break;
                case DocConstantModelName.WORKFLOW:
                    ret = new DocEntityWorkflow(session);
                    break;
                case DocConstantModelName.WORKFLOWCOMMENT:
                    ret = new DocEntityWorkflowComment(session);
                    break;
                case DocConstantModelName.WORKFLOWTASK:
                    ret = new DocEntityWorkflowTask(session);
                    break;
                default:
                    throw new NotImplementedException("The Model Factory does not support {" + modelName + "}");
            }
            return ret;
        }



        public static T GetEntity<T>(int id, DocConstantModelName model = null) where T : DocEntityBase, new()
        {
            model = model ?? GetEnumModelName<T>();
            return (T) GetEntity(id, model);
        }

        public static IDocEntity GetEntity(int id, DocConstantModelName modelName)
        {
            DocEntityBase ret;

            switch(modelName)
            {
                case DocConstantModelName.APP:
                    ret = DocEntityApp.GetApp(id);
                    break;
                case DocConstantModelName.ATTRIBUTE:
                    ret = DocEntityAttribute.GetAttribute(id);
                    break;
                case DocConstantModelName.ATTRIBUTECATEGORY:
                    ret = DocEntityAttributeCategory.GetAttributeCategory(id);
                    break;
                case DocConstantModelName.ATTRIBUTEINTERVAL:
                    ret = DocEntityAttributeInterval.GetAttributeInterval(id);
                    break;
                case DocConstantModelName.AUDITDELTA:
                    ret = DocEntityAuditDelta.GetAuditDelta(id);
                    break;
                case DocConstantModelName.AUDITRECORD:
                    ret = DocEntityAuditRecord.GetAuditRecord(id);
                    break;
                case DocConstantModelName.BACKGROUNDTASK:
                    ret = DocEntityBackgroundTask.GetBackgroundTask(id);
                    break;
                case DocConstantModelName.BACKGROUNDTASKHISTORY:
                    ret = DocEntityBackgroundTaskHistory.GetBackgroundTaskHistory(id);
                    break;
                case DocConstantModelName.BACKGROUNDTASKITEM:
                    ret = DocEntityBackgroundTaskItem.GetBackgroundTaskItem(id);
                    break;
                case DocConstantModelName.BROADCAST:
                    ret = DocEntityBroadcast.GetBroadcast(id);
                    break;
                case DocConstantModelName.CHARACTERISTIC:
                    ret = DocEntityCharacteristic.GetCharacteristic(id);
                    break;
                case DocConstantModelName.CLIENT:
                    ret = DocEntityClient.GetClient(id);
                    break;
                case DocConstantModelName.DATABASEVERSION:
                    ret = DocEntityDatabaseVersion.GetDatabaseVersion(id);
                    break;
                case DocConstantModelName.DATETIME:
                    ret = DocEntityDateTime.GetDateTime(id);
                    break;
                case DocConstantModelName.DEFAULT:
                    ret = DocEntityDefault.GetDefault(id);
                    break;
                case DocConstantModelName.DIVISION:
                    ret = DocEntityDivision.GetDivision(id);
                    break;
                case DocConstantModelName.DOCUMENT:
                    ret = DocEntityDocument.GetDocument(id);
                    break;
                case DocConstantModelName.DOCUMENTATTRIBUTE:
                    ret = DocEntityDocumentAttribute.GetDocumentAttribute(id);
                    break;
                case DocConstantModelName.DOCUMENTSET:
                    ret = DocEntityDocumentSet.GetDocumentSet(id);
                    break;
                case DocConstantModelName.DOCUMENTSETHISTORY:
                    ret = DocEntityDocumentSetHistory.GetDocumentSetHistory(id);
                    break;
                case DocConstantModelName.EVENT:
                    ret = DocEntityEvent.GetEvent(id);
                    break;
                case DocConstantModelName.FEATURESET:
                    ret = DocEntityFeatureSet.GetFeatureSet(id);
                    break;
                case DocConstantModelName.FOREIGNKEY:
                    ret = DocEntityForeignKey.GetForeignKey(id);
                    break;
                case DocConstantModelName.GLOSSARY:
                    ret = DocEntityGlossary.GetGlossary(id);
                    break;
                case DocConstantModelName.HELP:
                    ret = DocEntityHelp.GetHelp(id);
                    break;
                case DocConstantModelName.HISTORY:
                    ret = DocEntityHistory.GetHistory(id);
                    break;
                case DocConstantModelName.IMPERSONATION:
                    ret = DocEntityImpersonation.GetImpersonation(id);
                    break;
                case DocConstantModelName.IMPORTDATA:
                    ret = DocEntityImportData.GetImportData(id);
                    break;
                case DocConstantModelName.INTERVAL:
                    ret = DocEntityInterval.GetInterval(id);
                    break;
                case DocConstantModelName.INTERVENTION:
                    ret = DocEntityIntervention.GetIntervention(id);
                    break;
                case DocConstantModelName.JCTATTRIBUTECATEGORYATTRIBUTEDOCUMENTSET:
                    ret = DocEntityJctAttributeCategoryAttributeDocumentSet.GetJctAttributeCategoryAttributeDocumentSet(id);
                    break;
                case DocConstantModelName.JUNCTION:
                    ret = DocEntityJunction.GetJunction(id);
                    break;
                case DocConstantModelName.LOCALE:
                    ret = DocEntityLocale.GetLocale(id);
                    break;
                case DocConstantModelName.LOCALELOOKUP:
                    ret = DocEntityLocaleLookup.GetLocaleLookup(id);
                    break;
                case DocConstantModelName.LOOKUPCATEGORY:
                    ret = DocEntityLookupCategory.GetLookupCategory(id);
                    break;
                case DocConstantModelName.LOOKUPTABLE:
                    ret = DocEntityLookupTable.GetLookupTable(id);
                    break;
                case DocConstantModelName.LOOKUPTABLEBINDING:
                    ret = DocEntityLookupTableBinding.GetLookupTableBinding(id);
                    break;
                case DocConstantModelName.LOOKUPTABLEENUM:
                    ret = DocEntityLookupTableEnum.GetLookupTableEnum(id);
                    break;
                case DocConstantModelName.MEANRANGES:
                    ret = DocEntityMeanRanges.GetMeanRanges(id);
                    break;
                case DocConstantModelName.MEANRANGEVALUE:
                    ret = DocEntityMeanRangeValue.GetMeanRangeValue(id);
                    break;
                case DocConstantModelName.MEANVARIANCES:
                    ret = DocEntityMeanVariances.GetMeanVariances(id);
                    break;
                case DocConstantModelName.MEANVARIANCEVALUE:
                    ret = DocEntityMeanVarianceValue.GetMeanVarianceValue(id);
                    break;
                case DocConstantModelName.OUTCOME:
                    ret = DocEntityOutcome.GetOutcome(id);
                    break;
                case DocConstantModelName.PACKAGE:
                    ret = DocEntityPackage.GetPackage(id);
                    break;
                case DocConstantModelName.PAGE:
                    ret = DocEntityPage.GetPage(id);
                    break;
                case DocConstantModelName.QUEUECHANNEL:
                    ret = DocEntityQueueChannel.GetQueueChannel(id);
                    break;
                case DocConstantModelName.RELEASESTATUS:
                    ret = DocEntityReleaseStatus.GetReleaseStatus(id);
                    break;
                case DocConstantModelName.ROLE:
                    ret = DocEntityRole.GetRole(id);
                    break;
                case DocConstantModelName.SCOPE:
                    ret = DocEntityScope.GetScope(id);
                    break;
                case DocConstantModelName.STATS:
                    ret = DocEntityStats.GetStats(id);
                    break;
                case DocConstantModelName.STATSRECORD:
                    ret = DocEntityStatsRecord.GetStatsRecord(id);
                    break;
                case DocConstantModelName.STATSSTUDYSET:
                    ret = DocEntityStatsStudySet.GetStatsStudySet(id);
                    break;
                case DocConstantModelName.STUDYDESIGN:
                    ret = DocEntityStudyDesign.GetStudyDesign(id);
                    break;
                case DocConstantModelName.STUDYTYPE:
                    ret = DocEntityStudyType.GetStudyType(id);
                    break;
                case DocConstantModelName.TAG:
                    ret = DocEntityTag.GetTag(id);
                    break;
                case DocConstantModelName.TEAM:
                    ret = DocEntityTeam.GetTeam(id);
                    break;
                case DocConstantModelName.TERMCATEGORY:
                    ret = DocEntityTermCategory.GetTermCategory(id);
                    break;
                case DocConstantModelName.TERMMASTER:
                    ret = DocEntityTermMaster.GetTermMaster(id);
                    break;
                case DocConstantModelName.TERMSYNONYM:
                    ret = DocEntityTermSynonym.GetTermSynonym(id);
                    break;
                case DocConstantModelName.TIMECARD:
                    ret = DocEntityTimeCard.GetTimeCard(id);
                    break;
                case DocConstantModelName.TIMEPOINT:
                    ret = DocEntityTimePoint.GetTimePoint(id);
                    break;
                case DocConstantModelName.UNITCONVERSIONRULES:
                    ret = DocEntityUnitConversionRules.GetUnitConversionRules(id);
                    break;
                case DocConstantModelName.UNITOFMEASURE:
                    ret = DocEntityUnitOfMeasure.GetUnitOfMeasure(id);
                    break;
                case DocConstantModelName.UNITS:
                    ret = DocEntityUnits.GetUnits(id);
                    break;
                case DocConstantModelName.UNITVALUE:
                    ret = DocEntityUnitValue.GetUnitValue(id);
                    break;
                case DocConstantModelName.UPDATE:
                    ret = DocEntityUpdate.GetUpdate(id);
                    break;
                case DocConstantModelName.USER:
                    ret = DocEntityUser.GetUser(id);
                    break;
                case DocConstantModelName.USERREQUEST:
                    ret = DocEntityUserRequest.GetUserRequest(id);
                    break;
                case DocConstantModelName.USERSESSION:
                    ret = DocEntityUserSession.GetUserSession(id);
                    break;
                case DocConstantModelName.USERTYPE:
                    ret = DocEntityUserType.GetUserType(id);
                    break;
                case DocConstantModelName.VALUETYPE:
                    ret = DocEntityValueType.GetValueType(id);
                    break;
                case DocConstantModelName.VARIABLEINSTANCE:
                    ret = DocEntityVariableInstance.GetVariableInstance(id);
                    break;
                case DocConstantModelName.VARIABLERULE:
                    ret = DocEntityVariableRule.GetVariableRule(id);
                    break;
                case DocConstantModelName.WORKFLOW:
                    ret = DocEntityWorkflow.GetWorkflow(id);
                    break;
                case DocConstantModelName.WORKFLOWCOMMENT:
                    ret = DocEntityWorkflowComment.GetWorkflowComment(id);
                    break;
                case DocConstantModelName.WORKFLOWTASK:
                    ret = DocEntityWorkflowTask.GetWorkflowTask(id);
                    break;
                default:
                    throw new NotImplementedException("The Model Factory does not support {" + modelName + "}");
            }
            return ret;
        }
        

        public static List<Reference> GetReferences<T>(Session session, DocEntitySet<T> entities) where T : DocEntityBase, IDocEntity, new()
        {
            List<Reference> ret;
            var modelName = GetEnumModelName<T>();
            switch(modelName)
            {
                case DocConstantModelName.APP:
                    {
                       ret = entities.Cast<DocEntityApp>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.ATTRIBUTE:
                    {
                       ret = entities.Cast<DocEntityAttribute>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.ATTRIBUTECATEGORY:
                    {
                       ret = entities.Cast<DocEntityAttributeCategory>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.ATTRIBUTEINTERVAL:
                    {
                       ret = entities.Cast<DocEntityAttributeInterval>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.AUDITDELTA:
                    {
                       ret = entities.Cast<DocEntityAuditDelta>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.AUDITRECORD:
                    {
                       ret = entities.Cast<DocEntityAuditRecord>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.BACKGROUNDTASK:
                    {
                       ret = entities.Cast<DocEntityBackgroundTask>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.BACKGROUNDTASKHISTORY:
                    {
                       ret = entities.Cast<DocEntityBackgroundTaskHistory>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.BACKGROUNDTASKITEM:
                    {
                       ret = entities.Cast<DocEntityBackgroundTaskItem>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.BROADCAST:
                    {
                       ret = entities.Cast<DocEntityBroadcast>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.CHARACTERISTIC:
                    {
                       ret = entities.Cast<DocEntityCharacteristic>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.CLIENT:
                    {
                       ret = entities.Cast<DocEntityClient>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.DATABASEVERSION:
                    {
                       ret = entities.Cast<DocEntityDatabaseVersion>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.DATETIME:
                    {
                       ret = entities.Cast<DocEntityDateTime>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.DEFAULT:
                    {
                       ret = entities.Cast<DocEntityDefault>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.DIVISION:
                    {
                       ret = entities.Cast<DocEntityDivision>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.DOCUMENT:
                    {
                       ret = entities.Cast<DocEntityDocument>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.DOCUMENTATTRIBUTE:
                    {
                       ret = entities.Cast<DocEntityDocumentAttribute>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.DOCUMENTSET:
                    {
                       ret = entities.Cast<DocEntityDocumentSet>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.DOCUMENTSETHISTORY:
                    {
                       ret = entities.Cast<DocEntityDocumentSetHistory>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.EVENT:
                    {
                       ret = entities.Cast<DocEntityEvent>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.FEATURESET:
                    {
                       ret = entities.Cast<DocEntityFeatureSet>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.FOREIGNKEY:
                    {
                       ret = entities.Cast<DocEntityForeignKey>().Select(e => new Reference() { Id = e.Id, Name = e.KeyName, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.GLOSSARY:
                    {
                       ret = entities.Cast<DocEntityGlossary>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.HELP:
                    {
                       ret = entities.Cast<DocEntityHelp>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.HISTORY:
                    {
                       ret = entities.Cast<DocEntityHistory>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.IMPERSONATION:
                    {
                       ret = entities.Cast<DocEntityImpersonation>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.IMPORTDATA:
                    {
                       ret = entities.Cast<DocEntityImportData>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.INTERVAL:
                    {
                       ret = entities.Cast<DocEntityInterval>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.INTERVENTION:
                    {
                       ret = entities.Cast<DocEntityIntervention>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.JCTATTRIBUTECATEGORYATTRIBUTEDOCUMENTSET:
                    {
                       ret = entities.Cast<DocEntityJctAttributeCategoryAttributeDocumentSet>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.JUNCTION:
                    {
                       ret = entities.Cast<DocEntityJunction>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.LOCALE:
                    {
                       ret = entities.Cast<DocEntityLocale>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.LOCALELOOKUP:
                    {
                       ret = entities.Cast<DocEntityLocaleLookup>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.LOOKUPCATEGORY:
                    {
                       ret = entities.Cast<DocEntityLookupCategory>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.LOOKUPTABLE:
                    {
                       ret = entities.Cast<DocEntityLookupTable>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.LOOKUPTABLEBINDING:
                    {
                       ret = entities.Cast<DocEntityLookupTableBinding>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.LOOKUPTABLEENUM:
                    {
                       ret = entities.Cast<DocEntityLookupTableEnum>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.MEANRANGES:
                    {
                       ret = entities.Cast<DocEntityMeanRanges>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.MEANRANGEVALUE:
                    {
                       ret = entities.Cast<DocEntityMeanRangeValue>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.MEANVARIANCES:
                    {
                       ret = entities.Cast<DocEntityMeanVariances>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.MEANVARIANCEVALUE:
                    {
                       ret = entities.Cast<DocEntityMeanVarianceValue>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.OUTCOME:
                    {
                       ret = entities.Cast<DocEntityOutcome>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.PACKAGE:
                    {
                       ret = entities.Cast<DocEntityPackage>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.PAGE:
                    {
                       ret = entities.Cast<DocEntityPage>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.QUEUECHANNEL:
                    {
                       ret = entities.Cast<DocEntityQueueChannel>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.RELEASESTATUS:
                    {
                       ret = entities.Cast<DocEntityReleaseStatus>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.ROLE:
                    {
                       ret = entities.Cast<DocEntityRole>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.SCOPE:
                    {
                       ret = entities.Cast<DocEntityScope>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.STATS:
                    {
                       ret = entities.Cast<DocEntityStats>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.STATSRECORD:
                    {
                       ret = entities.Cast<DocEntityStatsRecord>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.STATSSTUDYSET:
                    {
                       ret = entities.Cast<DocEntityStatsStudySet>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.STUDYDESIGN:
                    {
                       ret = entities.Cast<DocEntityStudyDesign>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.STUDYTYPE:
                    {
                       ret = entities.Cast<DocEntityStudyType>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.TAG:
                    {
                       ret = entities.Cast<DocEntityTag>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.TEAM:
                    {
                       ret = entities.Cast<DocEntityTeam>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.TERMCATEGORY:
                    {
                       ret = entities.Cast<DocEntityTermCategory>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.TERMMASTER:
                    {
                       ret = entities.Cast<DocEntityTermMaster>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.TERMSYNONYM:
                    {
                       ret = entities.Cast<DocEntityTermSynonym>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.TIMECARD:
                    {
                       ret = entities.Cast<DocEntityTimeCard>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.TIMEPOINT:
                    {
                       ret = entities.Cast<DocEntityTimePoint>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.UNITCONVERSIONRULES:
                    {
                       ret = entities.Cast<DocEntityUnitConversionRules>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.UNITOFMEASURE:
                    {
                       ret = entities.Cast<DocEntityUnitOfMeasure>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.UNITS:
                    {
                       ret = entities.Cast<DocEntityUnits>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.UNITVALUE:
                    {
                       ret = entities.Cast<DocEntityUnitValue>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.UPDATE:
                    {
                       ret = entities.Cast<DocEntityUpdate>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.USER:
                    {
                       ret = entities.Cast<DocEntityUser>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.USERREQUEST:
                    {
                       ret = entities.Cast<DocEntityUserRequest>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.USERSESSION:
                    {
                       ret = entities.Cast<DocEntityUserSession>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.USERTYPE:
                    {
                       ret = entities.Cast<DocEntityUserType>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.VALUETYPE:
                    {
                       ret = entities.Cast<DocEntityValueType>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.VARIABLEINSTANCE:
                    {
                       ret = entities.Cast<DocEntityVariableInstance>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.VARIABLERULE:
                    {
                       ret = entities.Cast<DocEntityVariableRule>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.WORKFLOW:
                    {
                       ret = entities.Cast<DocEntityWorkflow>().Select(e => new Reference() { Id = e.Id, Name = $"{e.Name}", Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.WORKFLOWCOMMENT:
                    {
                       ret = entities.Cast<DocEntityWorkflowComment>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                case DocConstantModelName.WORKFLOWTASK:
                    {
                       ret = entities.Cast<DocEntityWorkflowTask>().Select(e => new Reference() { Id = e.Id, Name = e.Gestalt, Gestalt = e.Gestalt }).ToList();
                    }
                    break;
                default:
                    throw new NotImplementedException("GetReferences does not support {" + modelName + "}");
            }
            return ret;
        }
    }
}