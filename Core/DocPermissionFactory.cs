//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by a CodeSmith Generator project.
//
//    This class can be customized by adding or removing code from supported Custom regions
//    (e.g. Custom Imports, Custom Region 1).
//
//    All other changes to this file will cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Linq;

using Services.Dto;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;

namespace Services.Core
{
    public static partial class DocPermissionFactory
    {
        /// <summary>
        /// Get Visible Fields for classes which bypass standard logic
        /// </summary>
        public static List<string> GetVisibleFieldOverrides<T>(string table, List<string> requestedFields) where T : IDto
        {
            var ret = new List<string>();
            requestedFields = requestedFields ?? new List<string>();

            switch(table.ToLower())
            {
            }
            return ret;
        }
    
        /// <summary>
        /// Get Visible Fields based on current user's permission
        /// </summary>
        public static List<string> GetVisibleFields<T>(User currentUser, string table, List<string> requestedFields) where T : IDto
        {
            requestedFields = requestedFields ?? new List<string>();

            var overrides = GetVisibleFieldOverrides<T>(table, requestedFields);
            if(true == overrides?.Any()) return overrides;
            
            var ret = new List<string>();

            currentUser = GetPermissionsUser(currentUser);

            if(null == currentUser) return ret;

            if (true == currentUser.IsSystemUser || true == currentUser.IsSuperAdmin)
            {
                ret = requestedFields ?? new List<string>();
            }
            else
            {
                if (HasClassPermission(currentUser, DocConstantPermission.VIEW, table))
                {
                    var metadata = DocResources.Settings.Metadata;
                    foreach (var f in requestedFields)
                    {
                        var prop = metadata.GetProperty(table, f);
                        if (null != prop)
                        {
                            //If we're asking for a collection of relationships, first make sure we have class level permission
                            if (prop.Type == "relationships")
                            {
                                if (!HasClassPermission(currentUser, DocConstantPermission.VIEW, prop.Target))
                                    continue;
                            }
                            //Now check for property level permission
                            if (currentUser.HasProperty(table, f, DocConstantPermission.VIEW))
                            {
                                ret.Add(f);
                            }
                        }
                        else
                        {
                            //edge case, we're probably here for Gestalt and other built-in properties
                            if (currentUser.HasProperty(table, f, DocConstantPermission.VIEW))
                            {
                                ret.Add(f);
                            }
                        }
                    }
                }
            }
            return ret;
        }
    }
}