//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class DataSetBase : DocumentSetBase
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSetBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSetBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSetBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSetBase(int? pId, string pAdditionalCriteria, List<Reference> pCharacteristics, int? pCharacteristicsCount, List<Reference> pComparators, int? pComparatorsCount, string pDataCollection, int? pEvidencePortalId, string pExtractionProtocol, int? pFqId, int? pFramedQuestionId, string pGeneralScope, List<Reference> pImports, int? pImportsCount, string pIndications, List<Reference> pInterventions, int? pInterventionsCount, string pNotes, string pOriginalComparators, string pOriginalDatabase, string pOriginalDesigns, string pOriginalInterventions, string pOriginalOutcomes, List<Reference> pOutcomes, int? pOutcomesCount, string pParticipants, Reference pPrismaWorkflow, int? pPrismaWorkflowId, List<Reference> pProjects, int? pProjectsCount, bool pShowEtw, bool pShowPublicationType, List<Reference> pStudyDesigns, int? pStudyDesignsCount) : this(DocConvert.ToInt(pId)) 
        {
            AdditionalCriteria = pAdditionalCriteria;
            Characteristics = pCharacteristics;
            CharacteristicsCount = pCharacteristicsCount;
            Comparators = pComparators;
            ComparatorsCount = pComparatorsCount;
            DataCollection = pDataCollection;
            EvidencePortalId = pEvidencePortalId;
            ExtractionProtocol = pExtractionProtocol;
            FqId = pFqId;
            FramedQuestionId = pFramedQuestionId;
            GeneralScope = pGeneralScope;
            Imports = pImports;
            ImportsCount = pImportsCount;
            Indications = pIndications;
            Interventions = pInterventions;
            InterventionsCount = pInterventionsCount;
            Notes = pNotes;
            OriginalComparators = pOriginalComparators;
            OriginalDatabase = pOriginalDatabase;
            OriginalDesigns = pOriginalDesigns;
            OriginalInterventions = pOriginalInterventions;
            OriginalOutcomes = pOriginalOutcomes;
            Outcomes = pOutcomes;
            OutcomesCount = pOutcomesCount;
            Participants = pParticipants;
            PrismaWorkflow = pPrismaWorkflow;
            PrismaWorkflowId = pPrismaWorkflowId;
            Projects = pProjects;
            ProjectsCount = pProjectsCount;
            ShowEtw = pShowEtw;
            ShowPublicationType = pShowPublicationType;
            StudyDesigns = pStudyDesigns;
            StudyDesignsCount = pStudyDesignsCount;
        }

        [ApiMember(Name = nameof(AdditionalCriteria), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string AdditionalCriteria { get; set; }


        [ApiMember(Name = nameof(Characteristics), Description = "Tag", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Characteristics { get; set; }
        [ApiMember(Name = nameof(CharacteristicsIds), Description = "Tag Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> CharacteristicsIds { get; set; }
        [ApiMember(Name = nameof(CharacteristicsCount), Description = "Tag Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? CharacteristicsCount { get; set; }


        [ApiMember(Name = nameof(Comparators), Description = "Tag", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Comparators { get; set; }
        [ApiMember(Name = nameof(ComparatorsIds), Description = "Tag Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ComparatorsIds { get; set; }
        [ApiMember(Name = nameof(ComparatorsCount), Description = "Tag Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ComparatorsCount { get; set; }


        [ApiMember(Name = nameof(DataCollection), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string DataCollection { get; set; }


        [ApiMember(Name = nameof(EvidencePortalId), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? EvidencePortalId { get; set; }


        [ApiMember(Name = nameof(ExtractionProtocol), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string ExtractionProtocol { get; set; }


        [ApiMember(Name = nameof(FqId), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? FqId { get; set; }


        [ApiMember(Name = nameof(FramedQuestionId), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? FramedQuestionId { get; set; }


        [ApiMember(Name = nameof(GeneralScope), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string GeneralScope { get; set; }


        [ApiMember(Name = nameof(Imports), Description = "ImportData", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Imports { get; set; }
        [ApiMember(Name = nameof(ImportsIds), Description = "ImportData Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ImportsIds { get; set; }
        [ApiMember(Name = nameof(ImportsCount), Description = "ImportData Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ImportsCount { get; set; }


        [ApiMember(Name = nameof(Indications), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Indications { get; set; }


        [ApiMember(Name = nameof(Interventions), Description = "Tag", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Interventions { get; set; }
        [ApiMember(Name = nameof(InterventionsIds), Description = "Tag Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> InterventionsIds { get; set; }
        [ApiMember(Name = nameof(InterventionsCount), Description = "Tag Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? InterventionsCount { get; set; }


        [ApiMember(Name = nameof(Notes), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Notes { get; set; }


        [ApiMember(Name = nameof(OriginalComparators), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string OriginalComparators { get; set; }


        [ApiMember(Name = nameof(OriginalDatabase), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string OriginalDatabase { get; set; }


        [ApiMember(Name = nameof(OriginalDesigns), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string OriginalDesigns { get; set; }


        [ApiMember(Name = nameof(OriginalInterventions), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string OriginalInterventions { get; set; }


        [ApiMember(Name = nameof(OriginalOutcomes), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string OriginalOutcomes { get; set; }


        [ApiMember(Name = nameof(Outcomes), Description = "Tag", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Outcomes { get; set; }
        [ApiMember(Name = nameof(OutcomesIds), Description = "Tag Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> OutcomesIds { get; set; }
        [ApiMember(Name = nameof(OutcomesCount), Description = "Tag Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? OutcomesCount { get; set; }


        [ApiMember(Name = nameof(Participants), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Participants { get; set; }


        [ApiMember(Name = nameof(PrismaWorkflow), Description = "Workflow", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference PrismaWorkflow { get; set; }
        [ApiMember(Name = nameof(PrismaWorkflowId), Description = "Primary Key of Workflow", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? PrismaWorkflowId { get; set; }


        [ApiMember(Name = nameof(Projects), Description = "Project", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Projects { get; set; }
        [ApiMember(Name = nameof(ProjectsIds), Description = "Project Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ProjectsIds { get; set; }
        [ApiMember(Name = nameof(ProjectsCount), Description = "Project Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ProjectsCount { get; set; }


        [ApiMember(Name = nameof(ShowEtw), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ShowEtw { get; set; }


        [ApiMember(Name = nameof(ShowPublicationType), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ShowPublicationType { get; set; }


        [ApiMember(Name = nameof(StudyDesigns), Description = "StudyDesign", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> StudyDesigns { get; set; }
        [ApiMember(Name = nameof(StudyDesignsIds), Description = "StudyDesign Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> StudyDesignsIds { get; set; }
        [ApiMember(Name = nameof(StudyDesignsCount), Description = "StudyDesign Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? StudyDesignsCount { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out string pAdditionalCriteria, out List<Reference> pCharacteristics, out int? pCharacteristicsCount, out List<Reference> pComparators, out int? pComparatorsCount, out string pDataCollection, out int? pEvidencePortalId, out string pExtractionProtocol, out int? pFqId, out int? pFramedQuestionId, out string pGeneralScope, out List<Reference> pImports, out int? pImportsCount, out string pIndications, out List<Reference> pInterventions, out int? pInterventionsCount, out string pNotes, out string pOriginalComparators, out string pOriginalDatabase, out string pOriginalDesigns, out string pOriginalInterventions, out string pOriginalOutcomes, out List<Reference> pOutcomes, out int? pOutcomesCount, out string pParticipants, out Reference pPrismaWorkflow, out int? pPrismaWorkflowId, out List<Reference> pProjects, out int? pProjectsCount, out bool pShowEtw, out bool pShowPublicationType, out List<Reference> pStudyDesigns, out int? pStudyDesignsCount)
        {
            pAdditionalCriteria = AdditionalCriteria;
            pCharacteristics = Characteristics;
            pCharacteristicsCount = CharacteristicsCount;
            pComparators = Comparators;
            pComparatorsCount = ComparatorsCount;
            pDataCollection = DataCollection;
            pEvidencePortalId = EvidencePortalId;
            pExtractionProtocol = ExtractionProtocol;
            pFqId = FqId;
            pFramedQuestionId = FramedQuestionId;
            pGeneralScope = GeneralScope;
            pImports = Imports;
            pImportsCount = ImportsCount;
            pIndications = Indications;
            pInterventions = Interventions;
            pInterventionsCount = InterventionsCount;
            pNotes = Notes;
            pOriginalComparators = OriginalComparators;
            pOriginalDatabase = OriginalDatabase;
            pOriginalDesigns = OriginalDesigns;
            pOriginalInterventions = OriginalInterventions;
            pOriginalOutcomes = OriginalOutcomes;
            pOutcomes = Outcomes;
            pOutcomesCount = OutcomesCount;
            pParticipants = Participants;
            pPrismaWorkflow = PrismaWorkflow;
            pPrismaWorkflowId = PrismaWorkflowId;
            pProjects = Projects;
            pProjectsCount = ProjectsCount;
            pShowEtw = ShowEtw;
            pShowPublicationType = ShowPublicationType;
            pStudyDesigns = StudyDesigns;
            pStudyDesignsCount = StudyDesignsCount;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public DataSetBase With(int? pId = Id, string pAdditionalCriteria = AdditionalCriteria, List<Reference> pCharacteristics = Characteristics, int? pCharacteristicsCount = CharacteristicsCount, List<Reference> pComparators = Comparators, int? pComparatorsCount = ComparatorsCount, string pDataCollection = DataCollection, int? pEvidencePortalId = EvidencePortalId, string pExtractionProtocol = ExtractionProtocol, int? pFqId = FqId, int? pFramedQuestionId = FramedQuestionId, string pGeneralScope = GeneralScope, List<Reference> pImports = Imports, int? pImportsCount = ImportsCount, string pIndications = Indications, List<Reference> pInterventions = Interventions, int? pInterventionsCount = InterventionsCount, string pNotes = Notes, string pOriginalComparators = OriginalComparators, string pOriginalDatabase = OriginalDatabase, string pOriginalDesigns = OriginalDesigns, string pOriginalInterventions = OriginalInterventions, string pOriginalOutcomes = OriginalOutcomes, List<Reference> pOutcomes = Outcomes, int? pOutcomesCount = OutcomesCount, string pParticipants = Participants, Reference pPrismaWorkflow = PrismaWorkflow, int? pPrismaWorkflowId = PrismaWorkflowId, List<Reference> pProjects = Projects, int? pProjectsCount = ProjectsCount, bool pShowEtw = ShowEtw, bool pShowPublicationType = ShowPublicationType, List<Reference> pStudyDesigns = StudyDesigns, int? pStudyDesignsCount = StudyDesignsCount) => 
        //	new DataSetBase(pId, pAdditionalCriteria, pCharacteristics, pCharacteristicsCount, pComparators, pComparatorsCount, pDataCollection, pEvidencePortalId, pExtractionProtocol, pFqId, pFramedQuestionId, pGeneralScope, pImports, pImportsCount, pIndications, pInterventions, pInterventionsCount, pNotes, pOriginalComparators, pOriginalDatabase, pOriginalDesigns, pOriginalInterventions, pOriginalOutcomes, pOutcomes, pOutcomesCount, pParticipants, pPrismaWorkflow, pPrismaWorkflowId, pProjects, pProjectsCount, pShowEtw, pShowPublicationType, pStudyDesigns, pStudyDesignsCount);

    }


    [Route("/dataset", "POST")]
    [Route("/dataset/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class DataSet : DataSetBase, IReturn<DataSet>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSet() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSet(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSet(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSet(int? pId, string pAdditionalCriteria, List<Reference> pCharacteristics, int? pCharacteristicsCount, List<Reference> pComparators, int? pComparatorsCount, string pDataCollection, int? pEvidencePortalId, string pExtractionProtocol, int? pFqId, int? pFramedQuestionId, string pGeneralScope, List<Reference> pImports, int? pImportsCount, string pIndications, List<Reference> pInterventions, int? pInterventionsCount, string pNotes, string pOriginalComparators, string pOriginalDatabase, string pOriginalDesigns, string pOriginalInterventions, string pOriginalOutcomes, List<Reference> pOutcomes, int? pOutcomesCount, string pParticipants, Reference pPrismaWorkflow, int? pPrismaWorkflowId, List<Reference> pProjects, int? pProjectsCount, bool pShowEtw, bool pShowPublicationType, List<Reference> pStudyDesigns, int? pStudyDesignsCount) :
            base(pId, pAdditionalCriteria, pCharacteristics, pCharacteristicsCount, pComparators, pComparatorsCount, pDataCollection, pEvidencePortalId, pExtractionProtocol, pFqId, pFramedQuestionId, pGeneralScope, pImports, pImportsCount, pIndications, pInterventions, pInterventionsCount, pNotes, pOriginalComparators, pOriginalDatabase, pOriginalDesigns, pOriginalInterventions, pOriginalOutcomes, pOutcomes, pOutcomesCount, pParticipants, pPrismaWorkflow, pPrismaWorkflowId, pProjects, pProjectsCount, pShowEtw, pShowPublicationType, pStudyDesigns, pStudyDesignsCount) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<DataSet>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(AdditionalCriteria),nameof(Characteristics),nameof(CharacteristicsCount),nameof(Comparators),nameof(ComparatorsCount),nameof(Created),nameof(CreatorId),nameof(DataCollection),nameof(EvidencePortalId),nameof(ExtractionProtocol),nameof(FqId),nameof(FramedQuestionId),nameof(GeneralScope),nameof(Gestalt),nameof(Imports),nameof(ImportsCount),nameof(Indications),nameof(Interventions),nameof(InterventionsCount),nameof(Locked),nameof(Notes),nameof(OriginalComparators),nameof(OriginalDatabase),nameof(OriginalDesigns),nameof(OriginalInterventions),nameof(OriginalOutcomes),nameof(Outcomes),nameof(OutcomesCount),nameof(Participants),nameof(PrismaWorkflow),nameof(PrismaWorkflowId),nameof(Projects),nameof(ProjectsCount),nameof(ShowEtw),nameof(ShowPublicationType),nameof(StudyDesigns),nameof(StudyDesignsCount),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<DataSet>("DataSet",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(Characteristics), nameof(CharacteristicsCount), nameof(CharacteristicsIds), nameof(Comparators), nameof(ComparatorsCount), nameof(ComparatorsIds), nameof(Imports), nameof(ImportsCount), nameof(ImportsIds), nameof(Interventions), nameof(InterventionsCount), nameof(InterventionsIds), nameof(Outcomes), nameof(OutcomesCount), nameof(OutcomesIds), nameof(Projects), nameof(ProjectsCount), nameof(ProjectsIds), nameof(StudyDesigns), nameof(StudyDesignsCount), nameof(StudyDesignsIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<DataSet>();

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator DocumentSet(DataSet dto) => DocTransmogrify<DataSet, DocumentSet>.ToNewObject(dto);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator DataSet(DocumentSet dto) => DocTransmogrify<DocumentSet, DataSet>.ToNewObject(dto);

    }
    

    [Route("/dataset/{Id}/copy", "POST")]
    public partial class DataSetCopy : DataSet {}

    public partial class DataSetSearchBase : Search<DataSet>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public List<int> ClientsIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Confidential { get; set; }
        public List<int> DivisionsIds { get; set; }
        public List<int> DocumentsIds { get; set; }
        public List<int> DocumentSetsIds { get; set; }
        public List<int> HistoriesIds { get; set; }
        public int? LegacyDocumentSetId { get; set; }
        public string Name { get; set; }
        public List<string> Names { get; set; }
        public Reference Owner { get; set; }
        public List<int> OwnerIds { get; set; }
        public Reference ProjectTeam { get; set; }
        public List<int> ProjectTeamIds { get; set; }
        public List<int> ScopesIds { get; set; }
        public string Settings { get; set; }
        public List<string> Settingss { get; set; }
        public List<int> StatsIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Data Set",@"Disease State",@"Global",@"Library",@"SERVE Portal",@"Therapeutic Area"})]
        public DocumentSetTypeEnm? Type { get; set; }
        public List<DocumentSetTypeEnm> Types { get; set; }
        public List<int> UsersIds { get; set; }
        public string AdditionalCriteria { get; set; }
        public List<string> AdditionalCriterias { get; set; }
        public List<int> CharacteristicsIds { get; set; }
        public List<int> ComparatorsIds { get; set; }
        public string DataCollection { get; set; }
        public List<string> DataCollections { get; set; }
        public int? EvidencePortalId { get; set; }
        public string ExtractionProtocol { get; set; }
        public List<string> ExtractionProtocols { get; set; }
        public int? FqId { get; set; }
        public int? FramedQuestionId { get; set; }
        public string GeneralScope { get; set; }
        public List<string> GeneralScopes { get; set; }
        public List<int> ImportsIds { get; set; }
        public string Indications { get; set; }
        public List<string> Indicationss { get; set; }
        public List<int> InterventionsIds { get; set; }
        public string Notes { get; set; }
        public List<string> Notess { get; set; }
        public string OriginalComparators { get; set; }
        public List<string> OriginalComparatorss { get; set; }
        public string OriginalDatabase { get; set; }
        public List<string> OriginalDatabases { get; set; }
        public string OriginalDesigns { get; set; }
        public List<string> OriginalDesignss { get; set; }
        public string OriginalInterventions { get; set; }
        public List<string> OriginalInterventionss { get; set; }
        public string OriginalOutcomes { get; set; }
        public List<string> OriginalOutcomess { get; set; }
        public List<int> OutcomesIds { get; set; }
        public string Participants { get; set; }
        public List<string> Participantss { get; set; }
        public Reference PrismaWorkflow { get; set; }
        public List<int> PrismaWorkflowIds { get; set; }
        public List<int> ProjectsIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> ShowEtw { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> ShowPublicationType { get; set; }
        public List<int> StudyDesignsIds { get; set; }
    }


    [Route("/dataset", "GET")]
    [Route("/dataset/version", "GET, POST")]
    [Route("/dataset/search", "GET, POST, DELETE")]

    public partial class DataSetSearch : DataSetSearchBase
    {
    }

    public class DataSetFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSetFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private DataSetSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSetFullTextSearch(DataSetSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.Updated))); }

        public bool doAdditionalCriteria { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.AdditionalCriteria))); }
        public bool doCharacteristics { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.Characteristics))); }
        public bool doComparators { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.Comparators))); }
        public bool doDataCollection { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.DataCollection))); }
        public bool doEvidencePortalId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.EvidencePortalId))); }
        public bool doExtractionProtocol { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.ExtractionProtocol))); }
        public bool doFqId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.FqId))); }
        public bool doFramedQuestionId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.FramedQuestionId))); }
        public bool doGeneralScope { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.GeneralScope))); }
        public bool doImports { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.Imports))); }
        public bool doIndications { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.Indications))); }
        public bool doInterventions { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.Interventions))); }
        public bool doNotes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.Notes))); }
        public bool doOriginalComparators { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.OriginalComparators))); }
        public bool doOriginalDatabase { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.OriginalDatabase))); }
        public bool doOriginalDesigns { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.OriginalDesigns))); }
        public bool doOriginalInterventions { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.OriginalInterventions))); }
        public bool doOriginalOutcomes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.OriginalOutcomes))); }
        public bool doOutcomes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.Outcomes))); }
        public bool doParticipants { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.Participants))); }
        public bool doPrismaWorkflow { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.PrismaWorkflow))); }
        public bool doProjects { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.Projects))); }
        public bool doShowEtw { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.ShowEtw))); }
        public bool doShowPublicationType { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.ShowPublicationType))); }
        public bool doStudyDesigns { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DataSet.StudyDesigns))); }
    }


    [Route("/dataset/batch", "DELETE, PATCH, POST, PUT")]

    public partial class DataSetBatch : List<DataSet> { }


    [Route("/dataset/{Id}/{Junction}/version", "GET, POST")]
    [Route("/dataset/{Id}/{Junction}", "GET, POST, DELETE")]
    public class DataSetJunction : DataSetSearchBase {}



}
