//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class TrialBase : Dto<Trial>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TrialBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TrialBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TrialBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TrialBase(int? pId, List<Reference> pDocuments, int? pDocumentsCount, string pName, Reference pParent, int? pParentId) : this(DocConvert.ToInt(pId)) 
        {
            Documents = pDocuments;
            DocumentsCount = pDocumentsCount;
            Name = pName;
            Parent = pParent;
            ParentId = pParentId;
        }

        [ApiMember(Name = nameof(Documents), Description = "Document", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Documents { get; set; }
        [ApiMember(Name = nameof(DocumentsIds), Description = "Document Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> DocumentsIds { get; set; }
        [ApiMember(Name = nameof(DocumentsCount), Description = "Document Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DocumentsCount { get; set; }


        [ApiMember(Name = nameof(Name), Description = "string", IsRequired = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Name { get; set; }


        [ApiMember(Name = nameof(Parent), Description = "Trial", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Parent { get; set; }
        [ApiMember(Name = nameof(ParentId), Description = "Primary Key of Trial", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ParentId { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out List<Reference> pDocuments, out int? pDocumentsCount, out string pName, out Reference pParent, out int? pParentId)
        {
            pDocuments = Documents;
            pDocumentsCount = DocumentsCount;
            pName = Name;
            pParent = Parent;
            pParentId = ParentId;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public TrialBase With(int? pId = Id, List<Reference> pDocuments = Documents, int? pDocumentsCount = DocumentsCount, string pName = Name, Reference pParent = Parent, int? pParentId = ParentId) => 
        //	new TrialBase(pId, pDocuments, pDocumentsCount, pName, pParent, pParentId);

    }


    [Route("/trial", "POST")]
    [Route("/trial/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class Trial : TrialBase, IReturn<Trial>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Trial() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Trial(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Trial(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Trial(int? pId, List<Reference> pDocuments, int? pDocumentsCount, string pName, Reference pParent, int? pParentId) :
            base(pId, pDocuments, pDocumentsCount, pName, pParent, pParentId) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<Trial>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(Documents),nameof(DocumentsCount),nameof(Gestalt),nameof(Locked),nameof(Name),nameof(Parent),nameof(ParentId),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<Trial>("Trial",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(Documents), nameof(DocumentsCount), nameof(DocumentsIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<Trial>();

    }
    

    [Route("/trial/{Id}/copy", "POST")]
    public partial class TrialCopy : Trial {}

    public partial class TrialSearchBase : Search<Trial>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public List<int> DocumentsIds { get; set; }
        public string Name { get; set; }
        public List<string> Names { get; set; }
        public Reference Parent { get; set; }
        public List<int> ParentIds { get; set; }
    }


    [Route("/trial", "GET")]
    [Route("/trial/version", "GET, POST")]
    [Route("/trial/search", "GET, POST, DELETE")]

    public partial class TrialSearch : TrialSearchBase
    {
    }

    public class TrialFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TrialFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private TrialSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TrialFullTextSearch(TrialSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Trial.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Trial.Updated))); }

        public bool doDocuments { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Trial.Documents))); }
        public bool doName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Trial.Name))); }
        public bool doParent { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Trial.Parent))); }
    }


    [Route("/trial/batch", "DELETE, PATCH, POST, PUT")]

    public partial class TrialBatch : List<Trial> { }


    [Route("/trial/{Id}/{Junction}/version", "GET, POST")]
    [Route("/trial/{Id}/{Junction}", "GET, POST, DELETE")]
    public class TrialJunction : TrialSearchBase {}



}
