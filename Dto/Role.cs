//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;

namespace Services.Dto
{
    public abstract partial class RoleBase : Dto<Role>
    {
        public RoleBase() {}

        public RoleBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        public RoleBase(int? id) : this(DocConvert.ToInt(id)) {}
    
        [ApiMember(Name = nameof(Apps), Description = "App", IsRequired = false)]
        public List<Reference> Apps { get; set; }
        public int? AppsCount { get; set; }


        [ApiMember(Name = nameof(Description), Description = "string", IsRequired = true)]
        public string Description { get; set; }


        [ApiMember(Name = nameof(Email), Description = "string", IsRequired = false)]
        public string Email { get; set; }


        [ApiMember(Name = nameof(FeatureSets), Description = "FeatureSet", IsRequired = false)]
        public List<Reference> FeatureSets { get; set; }
        public int? FeatureSetsCount { get; set; }


        [ApiMember(Name = nameof(IsInternal), Description = "bool", IsRequired = false)]
        public bool IsInternal { get; set; }


        [ApiMember(Name = nameof(IsSuperAdmin), Description = "bool", IsRequired = false)]
        public bool IsSuperAdmin { get; private set; }


        [ApiMember(Name = nameof(Name), Description = "string", IsRequired = true)]
        public string Name { get; set; }


        [ApiMember(Name = nameof(Pages), Description = "Page", IsRequired = false)]
        public List<Reference> Pages { get; set; }
        public int? PagesCount { get; set; }


        [ApiMember(Name = nameof(Permissions), Description = "Permissions", IsRequired = false)]
        public Permissions Permissions { get; set; }


        [ApiMember(Name = nameof(Slack), Description = "string", IsRequired = false)]
        public string Slack { get; set; }


        [ApiMember(Name = nameof(Users), Description = "User", IsRequired = false)]
        public List<Reference> Users { get; set; }
        public int? UsersCount { get; set; }


    }

    [Route("/role", "POST")]
    [Route("/profile/role", "POST")]
    [Route("/role/{Id}", "GET, PATCH, PUT, DELETE")]
    [Route("/profile/role/{Id}", "GET, PATCH, PUT, DELETE")]
    public partial class Role : RoleBase, IReturn<Role>, IDto
    {
        public Role()
        {
            _Constructor();
        }

        public Role(int? id) : base(DocConvert.ToInt(id)) {}
        public Role(int id) : base(id) {}
        
        #region Fields
        
        public bool? ShouldSerialize(string field)
        {
            if (DocTools.AreEqual(nameof(VisibleFields), field)) return false;
            if (DocTools.AreEqual(nameof(Fields), field)) return false;
            if (DocTools.AreEqual(nameof(AssignFields), field)) return false;
            if (DocTools.AreEqual(nameof(IgnoreCache), field)) return false;
            if (DocTools.AreEqual(nameof(Id), field)) return true;
            return true == VisibleFields?.Matches(field, true);
        }

        private static List<string> _fields;
        public static List<string> Fields => _fields ?? (_fields = DocTools.Fields<Role>());

        private List<string> _VisibleFields;
        [ApiMember(Name = "VisibleFields", Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Apps),nameof(AppsCount),nameof(Created),nameof(CreatorId),nameof(Description),nameof(Email),nameof(FeatureSets),nameof(FeatureSetsCount),nameof(Gestalt),nameof(IsInternal),nameof(IsSuperAdmin),nameof(Locked),nameof(Name),nameof(Pages),nameof(PagesCount),nameof(Permissions),nameof(Slack),nameof(Updated),nameof(Users),nameof(UsersCount),nameof(VersionNo)})]
        public new List<string> VisibleFields
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _VisibleFields)
                {
                    _VisibleFields = DocWebSession.GetTypeVisibleFields(this);
                }
                return _VisibleFields;
            }
            set
            {
                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _VisibleFields = DocPermissionFactory.SetVisibleFields<Role>("Role",exists);
            }
        }

        #endregion Fields
        private List<string> _collections = new List<string>
        {
            nameof(Apps), nameof(AppsCount), nameof(FeatureSets), nameof(FeatureSetsCount), nameof(Pages), nameof(PagesCount), nameof(Users), nameof(UsersCount)
        };
        private List<string> collections { get { return _collections; } }
    }
    
    [Route("/Role/{Id}/copy", "POST")]
    [Route("/profile/Role/{Id}/copy", "POST")]
    public partial class RoleCopy : Role {}
    [Route("/role", "GET")]
    [Route("/profile/role", "GET")]
    [Route("/role/search", "GET, POST, DELETE")]
    [Route("/profile/role/search", "GET, POST, DELETE")]
    public partial class RoleSearch : Search<Role>
    {
        public List<int> AppsIds { get; set; }
        public string Description { get; set; }
        public string Email { get; set; }
        public List<int> FeatureSetsIds { get; set; }
        public bool? IsInternal { get; set; }
        public bool? IsSuperAdmin { get; private set; }
        public string Name { get; set; }
        public List<int> PagesIds { get; set; }
        public string Permissions { get; set; }
        public string Slack { get; set; }
        public List<int> UsersIds { get; set; }
    }
    
    public class RoleFullTextSearch
    {
        private RoleSearch _request;
        public RoleFullTextSearch(RoleSearch request) => _request = request;
        
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        public bool doCreated { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.Created))); }
        public bool doUpdated { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.Updated))); }
        
        public bool doApps { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.Apps))); }
        public bool doDescription { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.Description))); }
        public bool doEmail { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.Email))); }
        public bool doFeatureSets { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.FeatureSets))); }
        public bool doIsInternal { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.IsInternal))); }
        public bool doIsSuperAdmin { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.IsSuperAdmin))); }
        public bool doName { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.Name))); }
        public bool doPages { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.Pages))); }
        public bool doPermissions { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.Permissions))); }
        public bool doSlack { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.Slack))); }
        public bool doUsers { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Role.Users))); }
    }

    [Route("/role/version", "GET, POST")]
    public partial class RoleVersion : RoleSearch {}

    [Route("/role/batch", "DELETE, PATCH, POST, PUT")]
    [Route("/profile/role/batch", "DELETE, PATCH, POST, PUT")]
    public partial class RoleBatch : List<Role> { }

    [Route("/role/{Id}/app", "GET, POST, DELETE")]
    [Route("/profile/role/{Id}/app", "GET, POST, DELETE")]
    [Route("/role/{Id}/featureset", "GET, POST, DELETE")]
    [Route("/profile/role/{Id}/featureset", "GET, POST, DELETE")]
    [Route("/role/{Id}/page", "GET, POST, DELETE")]
    [Route("/profile/role/{Id}/page", "GET, POST, DELETE")]
    [Route("/role/{Id}/user", "GET, POST, DELETE")]
    [Route("/profile/role/{Id}/user", "GET, POST, DELETE")]
    public class RoleJunction : Search<Role>
    {
        public int? Id { get; set; }
        public List<int> Ids { get; set; }
        public List<string> VisibleFields { get; set; }
        public bool ShouldSerializeVisibleFields()
        {
            { return false; }
        }


        public RoleJunction(int id, List<int> ids)
        {
            this.Id = id;
            this.Ids = ids;
        }
    }


    [Route("/role/{Id}/app/version", "GET")]
    [Route("/profile/role/{Id}/app/version", "GET")]
    [Route("/role/{Id}/featureset/version", "GET")]
    [Route("/profile/role/{Id}/featureset/version", "GET")]
    [Route("/role/{Id}/page/version", "GET")]
    [Route("/profile/role/{Id}/page/version", "GET")]
    [Route("/role/{Id}/user/version", "GET")]
    [Route("/profile/role/{Id}/user/version", "GET")]
    public class RoleJunctionVersion : IReturn<Version>
    {
        public int? Id { get; set; }
        public List<int> Ids { get; set; }
        public List<string> VisibleFields { get; set; }
        public bool ShouldSerializeVisibleFields()
        {
            { return false; }
        }
    }
}