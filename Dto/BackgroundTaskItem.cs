//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;
namespace Services.Dto
{
    public abstract partial class BackgroundTaskItemBase : Dto<BackgroundTaskItem>
    {
        public BackgroundTaskItemBase() {}

        public BackgroundTaskItemBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        public BackgroundTaskItemBase(int? id) : this(DocConvert.ToInt(id)) {}

        public BackgroundTaskItemBase(int? pId, int? pAttempts, Reference pAuditRecord, int? pAuditRecordId, JsonObject pData, string pDescription, DateTime? pEnded, int? pEntityId, string pExecutionTime, DateTime? pStarted, string pStatus, bool pSucceeded, Reference pTask, int? pTaskId, List<Reference> pTaskHistory, int? pTaskHistoryCount) : this(DocConvert.ToInt(pId)) 
        {
            Attempts = pAttempts;
            AuditRecord = pAuditRecord;
            AuditRecordId = pAuditRecordId;
            Data = pData;
            Description = pDescription;
            Ended = pEnded;
            EntityId = pEntityId;
            ExecutionTime = pExecutionTime;
            Started = pStarted;
            Status = pStatus;
            Succeeded = pSucceeded;
            Task = pTask;
            TaskId = pTaskId;
            TaskHistory = pTaskHistory;
            TaskHistoryCount = pTaskHistoryCount;
        }

        [ApiMember(Name = nameof(Attempts), Description = "int?", IsRequired = false)]
        public int? Attempts { get; set; }


        [ApiMember(Name = nameof(AuditRecord), Description = "AuditRecord", IsRequired = false)]
        public Reference AuditRecord { get; set; }
        [ApiMember(Name = nameof(AuditRecordId), Description = "Primary Key of AuditRecord", IsRequired = false)]
        public int? AuditRecordId { get; set; }


        [ApiMember(Name = nameof(Data), Description = "JsonObject", IsRequired = false)]
        public JsonObject Data { get; set; }


        [ApiMember(Name = nameof(Description), Description = "string", IsRequired = false)]
        public string Description { get; set; }


        [ApiMember(Name = nameof(Ended), Description = "DateTime?", IsRequired = false)]
        public DateTime? Ended { get; set; }


        [ApiMember(Name = nameof(EntityId), Description = "int?", IsRequired = false)]
        public int? EntityId { get; set; }


        [ApiMember(Name = nameof(ExecutionTime), Description = "string", IsRequired = false)]
        public string ExecutionTime { get; set; }


        [ApiMember(Name = nameof(Started), Description = "DateTime?", IsRequired = false)]
        public DateTime? Started { get; set; }


        [ApiMember(Name = nameof(Status), Description = "string", IsRequired = false)]
        public string Status { get; set; }


        [ApiMember(Name = nameof(Succeeded), Description = "bool", IsRequired = false)]
        public bool Succeeded { get; set; }


        [ApiMember(Name = nameof(Task), Description = "BackgroundTask", IsRequired = true)]
        public Reference Task { get; set; }
        [ApiMember(Name = nameof(TaskId), Description = "Primary Key of BackgroundTask", IsRequired = false)]
        public int? TaskId { get; set; }


        [ApiMember(Name = nameof(TaskHistory), Description = "BackgroundTaskHistory", IsRequired = false)]
        public List<Reference> TaskHistory { get; set; }
        public List<int> TaskHistoryIds { get; set; }
        public int? TaskHistoryCount { get; set; }



        public void Deconstruct(out int? pAttempts, out Reference pAuditRecord, out int? pAuditRecordId, out JsonObject pData, out string pDescription, out DateTime? pEnded, out int? pEntityId, out string pExecutionTime, out DateTime? pStarted, out string pStatus, out bool pSucceeded, out Reference pTask, out int? pTaskId, out List<Reference> pTaskHistory, out int? pTaskHistoryCount)
        {
            pAttempts = Attempts;
            pAuditRecord = AuditRecord;
            pAuditRecordId = AuditRecordId;
            pData = Data;
            pDescription = Description;
            pEnded = Ended;
            pEntityId = EntityId;
            pExecutionTime = ExecutionTime;
            pStarted = Started;
            pStatus = Status;
            pSucceeded = Succeeded;
            pTask = Task;
            pTaskId = TaskId;
            pTaskHistory = TaskHistory;
            pTaskHistoryCount = TaskHistoryCount;
        }

        //Not ready until C# v8.?
        //public BackgroundTaskItemBase With(int? pId = Id, int? pAttempts = Attempts, Reference pAuditRecord = AuditRecord, int? pAuditRecordId = AuditRecordId, JsonObject pData = Data, string pDescription = Description, DateTime? pEnded = Ended, int? pEntityId = EntityId, string pExecutionTime = ExecutionTime, DateTime? pStarted = Started, string pStatus = Status, bool pSucceeded = Succeeded, Reference pTask = Task, int? pTaskId = TaskId, List<Reference> pTaskHistory = TaskHistory, int? pTaskHistoryCount = TaskHistoryCount) => 
        //	new BackgroundTaskItemBase(pId, pAttempts, pAuditRecord, pAuditRecordId, pData, pDescription, pEnded, pEntityId, pExecutionTime, pStarted, pStatus, pSucceeded, pTask, pTaskId, pTaskHistory, pTaskHistoryCount);

    }

    [Route("/backgroundtaskitem/{Id}", "GET")]
    public partial class BackgroundTaskItem : BackgroundTaskItemBase, IReturn<BackgroundTaskItem>, IDto, ICloneable
    {
        public BackgroundTaskItem()
        {
            _Constructor();
        }

        public BackgroundTaskItem(int? id) : base(DocConvert.ToInt(id)) {}
        public BackgroundTaskItem(int id) : base(id) {}
        public BackgroundTaskItem(int? pId, int? pAttempts, Reference pAuditRecord, int? pAuditRecordId, JsonObject pData, string pDescription, DateTime? pEnded, int? pEntityId, string pExecutionTime, DateTime? pStarted, string pStatus, bool pSucceeded, Reference pTask, int? pTaskId, List<Reference> pTaskHistory, int? pTaskHistoryCount) : 
            base(pId, pAttempts, pAuditRecord, pAuditRecordId, pData, pDescription, pEnded, pEntityId, pExecutionTime, pStarted, pStatus, pSucceeded, pTask, pTaskId, pTaskHistory, pTaskHistoryCount) { }
        #region Fields

        public new bool? ShouldSerialize(string field)
        {
            //Allow individual classes to specify their own logic
            var manualOverride = _ShouldSerialize(field);
            if(null != manualOverride) return manualOverride;

            if (IgnoredSelect.Matches(field, true)) return false;
            var ret = MandatorySelect.Matches(field, true) || true == Select?.Matches(field, true);
            return ret;
        }

        public static List<string> Fields => DocTools.Fields<BackgroundTaskItem>();

        private List<string> _Select;
        [ApiMember(Name = "Select", Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Attempts),nameof(AuditRecord),nameof(AuditRecordId),nameof(Created),nameof(CreatorId),nameof(Data),nameof(Description),nameof(Ended),nameof(EntityId),nameof(ExecutionTime),nameof(Gestalt),nameof(Locked),nameof(Started),nameof(Status),nameof(Succeeded),nameof(Task),nameof(TaskHistory),nameof(TaskHistoryCount),nameof(TaskId),nameof(Updated),nameof(VersionNo)})]
        public new List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {
                    _Select = DocWebSession.GetTypeSelect(this);
                }
                return _Select;
            }
            set
            {
                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<BackgroundTaskItem>("BackgroundTaskItem",exists);
            }
        }

        #endregion Fields
        private List<string> _collections = new List<string>
        {
            nameof(TaskHistory), nameof(TaskHistoryCount)
        };
        private List<string> collections { get { return _collections; } }

        public object Clone() => this.Copy<BackgroundTaskItem>();
    }
    
    public partial class BackgroundTaskItemSearchBase : Search<BackgroundTaskItem>
    {
        public int? Id { get; set; }
        public int? Attempts { get; set; }
        public Reference AuditRecord { get; set; }
        public List<int> AuditRecordIds { get; set; }
        public string Data { get; set; }
        public string Description { get; set; }
        public DateTime? Ended { get; set; }
        public DateTime? EndedAfter { get; set; }
        public DateTime? EndedBefore { get; set; }
        public int? EntityId { get; set; }
        public string ExecutionTime { get; set; }
        public DateTime? Started { get; set; }
        public DateTime? StartedAfter { get; set; }
        public DateTime? StartedBefore { get; set; }
        public string Status { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Succeeded { get; set; }
        public Reference Task { get; set; }
        public List<int> TaskIds { get; set; }
        public List<int> TaskHistoryIds { get; set; }
    }

    [Route("/backgroundtaskitem", "GET")]
    [Route("/backgroundtaskitem/version", "GET, POST")]
    [Route("/backgroundtaskitem/search", "GET, POST, DELETE")]
    public partial class BackgroundTaskItemSearch : BackgroundTaskItemSearchBase
    {
    }

    public class BackgroundTaskItemFullTextSearch
    {
        public BackgroundTaskItemFullTextSearch() {}
        private BackgroundTaskItemSearch _request;
        public BackgroundTaskItemFullTextSearch(BackgroundTaskItemSearch request) => _request = request;

        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.Created))); }
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.Updated))); }

        public bool doAttempts { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.Attempts))); }
        public bool doAuditRecord { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.AuditRecord))); }
        public bool doData { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.Data))); }
        public bool doDescription { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.Description))); }
        public bool doEnded { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.Ended))); }
        public bool doEntityId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.EntityId))); }
        public bool doExecutionTime { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.ExecutionTime))); }
        public bool doStarted { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.Started))); }
        public bool doStatus { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.Status))); }
        public bool doSucceeded { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.Succeeded))); }
        public bool doTask { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.Task))); }
        public bool doTaskHistory { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTaskItem.TaskHistory))); }
    }

    public partial class BackgroundTaskItemBatch : List<BackgroundTaskItem> { }

    [Route("/backgroundtaskitem/{Id}/{Junction}/version", "GET, POST")]
    [Route("/backgroundtaskitem/{Id}/{Junction}", "GET, POST, DELETE")]
    public class BackgroundTaskItemJunction : BackgroundTaskItemSearchBase {}


}
