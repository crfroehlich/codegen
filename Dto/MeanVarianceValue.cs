//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class MeanVarianceValueBase : Dto<MeanVarianceValue>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public MeanVarianceValueBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public MeanVarianceValueBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public MeanVarianceValueBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public MeanVarianceValueBase(int? pId, TypeUnits pMeanVariance, TypeUnitsRange pMeanVarianceRange, Reference pMeanVarianceType, int? pMeanVarianceTypeId, int? pOrder, List<MeanVariances> pOwners, int? pOwnersCount) : this(DocConvert.ToInt(pId)) 
        {
            MeanVariance = pMeanVariance;
            MeanVarianceRange = pMeanVarianceRange;
            MeanVarianceType = pMeanVarianceType;
            MeanVarianceTypeId = pMeanVarianceTypeId;
            Order = pOrder;
            Owners = pOwners;
            OwnersCount = pOwnersCount;
        }

        [ApiMember(Name = nameof(MeanVariance), Description = "Units", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TypeUnits MeanVariance { get; set; }


        [ApiMember(Name = nameof(MeanVarianceRange), Description = "UnitsRange", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TypeUnitsRange MeanVarianceRange { get; set; }


        [ApiAllowableValues("Includes", Values = new string[] {@"CV",@"IQR Difference",@"SD",@"SE",@"Semi IQR",@"Unknown"})]
        [ApiMember(Name = nameof(MeanVarianceType), Description = "LookupTable", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference MeanVarianceType { get; set; }
        [ApiMember(Name = nameof(MeanVarianceTypeId), Description = "Primary Key of LookupTable", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? MeanVarianceTypeId { get; set; }


        [ApiMember(Name = nameof(Order), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Order { get; set; }
        [ApiMember(Name = nameof(OrderIds), Description = "Order Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> OrderIds { get; set; }
        [ApiMember(Name = nameof(OrderCount), Description = "Order Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? OrderCount { get; set; }


        [ApiMember(Name = nameof(Owners), Description = "MeanVariances", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<MeanVariances> Owners { get; set; }
        [ApiMember(Name = nameof(OwnersIds), Description = "MeanVariances Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> OwnersIds { get; set; }
        [ApiMember(Name = nameof(OwnersCount), Description = "MeanVariances Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? OwnersCount { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out TypeUnits pMeanVariance, out TypeUnitsRange pMeanVarianceRange, out Reference pMeanVarianceType, out int? pMeanVarianceTypeId, out int? pOrder, out List<MeanVariances> pOwners, out int? pOwnersCount)
        {
            pMeanVariance = MeanVariance;
            pMeanVarianceRange = MeanVarianceRange;
            pMeanVarianceType = MeanVarianceType;
            pMeanVarianceTypeId = MeanVarianceTypeId;
            pOrder = Order;
            pOwners = Owners;
            pOwnersCount = OwnersCount;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public MeanVarianceValueBase With(int? pId = Id, TypeUnits pMeanVariance = MeanVariance, TypeUnitsRange pMeanVarianceRange = MeanVarianceRange, Reference pMeanVarianceType = MeanVarianceType, int? pMeanVarianceTypeId = MeanVarianceTypeId, int? pOrder = Order, List<MeanVariances> pOwners = Owners, int? pOwnersCount = OwnersCount) => 
        //	new MeanVarianceValueBase(pId, pMeanVariance, pMeanVarianceRange, pMeanVarianceType, pMeanVarianceTypeId, pOrder, pOwners, pOwnersCount);

    }


    public partial class MeanVarianceValue : MeanVarianceValueBase, IReturn<MeanVarianceValue>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public MeanVarianceValue() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public MeanVarianceValue(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public MeanVarianceValue(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public MeanVarianceValue(int? pId, TypeUnits pMeanVariance, TypeUnitsRange pMeanVarianceRange, Reference pMeanVarianceType, int? pMeanVarianceTypeId, int? pOrder, List<MeanVariances> pOwners, int? pOwnersCount) :
            base(pId, pMeanVariance, pMeanVarianceRange, pMeanVarianceType, pMeanVarianceTypeId, pOrder, pOwners, pOwnersCount) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<MeanVarianceValue>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(Gestalt),nameof(Locked),nameof(MeanVariance),nameof(MeanVarianceRange),nameof(MeanVarianceType),nameof(MeanVarianceTypeId),nameof(Order),nameof(Owners),nameof(OwnersCount),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocPermissionFactory.RemoveNonEssentialFields(Fields);

                }
                return _Select;
            }
            set
            {

                _Select = Fields;

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(Owners), nameof(OwnersCount), nameof(OwnersIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<MeanVarianceValue>();

    }
    

    public partial class MeanVarianceValueSearchBase : Search<MeanVarianceValue>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public TypeUnits MeanVariance { get; set; }
        public TypeUnitsRange MeanVarianceRange { get; set; }
        public Reference MeanVarianceType { get; set; }
        public List<int> MeanVarianceTypeIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"CV",@"IQR Difference",@"SD",@"SE",@"Semi IQR",@"Unknown"})]
        public List<string> MeanVarianceTypeNames { get; set; }
        public int? Order { get; set; }
        public List<int> OwnersIds { get; set; }
    }


    public partial class MeanVarianceValueSearch : MeanVarianceValueSearchBase
    {
    }

    public class MeanVarianceValueFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public MeanVarianceValueFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private MeanVarianceValueSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public MeanVarianceValueFullTextSearch(MeanVarianceValueSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(MeanVarianceValue.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(MeanVarianceValue.Updated))); }

        public bool doMeanVariance { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(MeanVarianceValue.MeanVariance))); }
        public bool doMeanVarianceRange { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(MeanVarianceValue.MeanVarianceRange))); }
        public bool doMeanVarianceType { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(MeanVarianceValue.MeanVarianceType))); }
        public bool doOrder { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(MeanVarianceValue.Order))); }
        public bool doOwners { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(MeanVarianceValue.Owners))); }
    }


    public partial class MeanVarianceValueBatch : List<MeanVarianceValue> { }


    [Route("/meanvariancevalue/{Id}/{Junction}/version", "GET, POST")]
    [Route("/meanvariancevalue/{Id}/{Junction}", "GET, POST, DELETE")]
    public class MeanVarianceValueJunction : MeanVarianceValueSearchBase {}



}
