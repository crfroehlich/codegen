//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Security;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;

namespace Services.Dto
{
    public abstract partial class ForeignKeyBase : Dto<ForeignKey>
    {
        public ForeignKeyBase() {}

        public ForeignKeyBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        public ForeignKeyBase(int? id) : this(DocConvert.ToInt(id)) {}
    
        [ApiMember(Name = nameof(IntegrationName), Description = "LookupTable", IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {@"Salesforce"})]
        public Reference IntegrationName { get; set; }
        [ApiMember(Name = nameof(IntegrationNameId), Description = "Primary Key of LookupTable", IsRequired = false)]
        public int? IntegrationNameId { get; set; }


        [ApiMember(Name = nameof(IntegrationPropertyName), Description = "LookupTable", IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {@"Opportunity",@"Account",@"Project"})]
        public Reference IntegrationPropertyName { get; set; }
        [ApiMember(Name = nameof(IntegrationPropertyNameId), Description = "Primary Key of LookupTable", IsRequired = false)]
        public int? IntegrationPropertyNameId { get; set; }


        [ApiMember(Name = nameof(KeyId), Description = "string", IsRequired = true)]
        public string KeyId { get; set; }


        [ApiMember(Name = nameof(KeyName), Description = "string", IsRequired = true)]
        public string KeyName { get; set; }


    }

    [Route("/foreignkey", "POST")]
    [Route("/profile/foreignkey", "POST")]
    [Route("/foreignkey/{Id}", "GET, PATCH, PUT, DELETE")]
    [Route("/profile/foreignkey/{Id}", "GET, PATCH, PUT, DELETE")]
    public partial class ForeignKey : ForeignKeyBase, IReturn<ForeignKey>, IDto
    {
        public ForeignKey()
        {
            _Constructor();
        }

        public ForeignKey(int? id) : base(DocConvert.ToInt(id)) {}
        public ForeignKey(int id) : base(id) {}
        
        #region Fields
        
        public bool? ShouldSerialize(string field)
        {
            if (IgnoredVisibleFields.Matches(field, true)) return false;
            var ret = MandatoryVisibleFields.Matches(field, true) || true == VisibleFields?.Matches(field, true);
            return ret;
        }

        public static List<string> Fields => DocTools.Fields<ForeignKey>();

        private List<string> _VisibleFields;
        [ApiMember(Name = "VisibleFields", Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(Gestalt),nameof(IntegrationName),nameof(IntegrationNameId),nameof(IntegrationPropertyName),nameof(IntegrationPropertyNameId),nameof(KeyId),nameof(KeyName),nameof(Locked),nameof(Updated),nameof(VersionNo)})]
        public new List<string> VisibleFields
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _VisibleFields)
                {
                    _VisibleFields = DocWebSession.GetTypeVisibleFields(this);
                }
                return _VisibleFields;
            }
            set
            {
                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _VisibleFields = DocPermissionFactory.SetVisibleFields<ForeignKey>("ForeignKey",exists);
            }
        }

        #endregion Fields
    }
    
    [Route("/ForeignKey/{Id}/copy", "POST")]
    [Route("/profile/ForeignKey/{Id}/copy", "POST")]
    public partial class ForeignKeyCopy : ForeignKey {}
    [Route("/foreignkey", "GET")]
    [Route("/profile/foreignkey", "GET")]
    [Route("/foreignkey/search", "GET, POST, DELETE")]
    [Route("/profile/foreignkey/search", "GET, POST, DELETE")]
    public partial class ForeignKeySearch : Search<ForeignKey>
    {
        public Reference IntegrationName { get; set; }
        public List<int> IntegrationNameIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Salesforce"})]
        public List<string> IntegrationNameNames { get; set; }
        public Reference IntegrationPropertyName { get; set; }
        public List<int> IntegrationPropertyNameIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Opportunity",@"Account",@"Project"})]
        public List<string> IntegrationPropertyNameNames { get; set; }
        public string KeyId { get; set; }
        public string KeyName { get; set; }
    }
    
    public class ForeignKeyFullTextSearch
    {
        private ForeignKeySearch _request;
        public ForeignKeyFullTextSearch(ForeignKeySearch request) => _request = request;
        
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        public bool doCreated { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(ForeignKey.Created))); }
        public bool doUpdated { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(ForeignKey.Updated))); }
        
        public bool doIntegrationName { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(ForeignKey.IntegrationName))); }
        public bool doIntegrationPropertyName { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(ForeignKey.IntegrationPropertyName))); }
        public bool doKeyId { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(ForeignKey.KeyId))); }
        public bool doKeyName { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(ForeignKey.KeyName))); }
    }

    [Route("/foreignkey/version", "GET, POST")]
    public partial class ForeignKeyVersion : ForeignKeySearch {}

    [Route("/foreignkey/batch", "DELETE, PATCH, POST, PUT")]
    [Route("/profile/foreignkey/batch", "DELETE, PATCH, POST, PUT")]
    public partial class ForeignKeyBatch : List<ForeignKey> { }

    [Route("/admin/foreignkey/ids", "GET, POST")]
    public class ForeignKeyIds
    {
        public bool All { get; set; }
    }
}