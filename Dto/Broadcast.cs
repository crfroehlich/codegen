//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class BroadcastBase : Dto<Broadcast>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BroadcastBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BroadcastBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BroadcastBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BroadcastBase(int? pId, Reference pApp, int? pAppId, string pConfluenceId, string pName, bool pReprocess, DateTime? pReprocessed, List<Reference> pScopes, int? pScopesCount, Reference pStatus, int? pStatusId, Reference pType, int? pType_Id) : this(DocConvert.ToInt(pId)) 
        {
            App = pApp;
            AppId = pAppId;
            ConfluenceId = pConfluenceId;
            Name = pName;
            Reprocess = pReprocess;
            Reprocessed = pReprocessed;
            Scopes = pScopes;
            ScopesCount = pScopesCount;
            Status = pStatus;
            StatusId = pStatusId;
            Type = pType;
            Type_Id = pType_Id;
        }

        [ApiMember(Name = nameof(App), Description = "App", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference App { get; set; }
        [ApiMember(Name = nameof(AppId), Description = "Primary Key of App", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? AppId { get; set; }


        [ApiMember(Name = nameof(ConfluenceId), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string ConfluenceId { get; set; }
        [ApiMember(Name = nameof(ConfluenceIdIds), Description = "ConfluenceId Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ConfluenceIdIds { get; set; }
        [ApiMember(Name = nameof(ConfluenceIdCount), Description = "ConfluenceId Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ConfluenceIdCount { get; set; }


        [ApiMember(Name = nameof(Name), Description = "string", IsRequired = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Name { get; set; }
        [ApiMember(Name = nameof(NameIds), Description = "Name Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> NameIds { get; set; }
        [ApiMember(Name = nameof(NameCount), Description = "Name Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? NameCount { get; set; }


        [ApiMember(Name = nameof(Reprocess), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Reprocess { get; set; }
        [ApiMember(Name = nameof(ReprocessIds), Description = "Reprocess Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ReprocessIds { get; set; }
        [ApiMember(Name = nameof(ReprocessCount), Description = "Reprocess Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ReprocessCount { get; set; }


        [ApiMember(Name = nameof(Reprocessed), Description = "DateTime?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime? Reprocessed { get; set; }
        [ApiMember(Name = nameof(ReprocessedIds), Description = "Reprocessed Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ReprocessedIds { get; set; }
        [ApiMember(Name = nameof(ReprocessedCount), Description = "Reprocessed Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ReprocessedCount { get; set; }


        [ApiMember(Name = nameof(Scopes), Description = "Scope", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Scopes { get; set; }
        [ApiMember(Name = nameof(ScopesIds), Description = "Scope Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ScopesIds { get; set; }
        [ApiMember(Name = nameof(ScopesCount), Description = "Scope Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ScopesCount { get; set; }


        [ApiAllowableValues("Includes", Values = new string[] {@"Draft",@"Release"})]
        [ApiMember(Name = nameof(Status), Description = "LookupTable", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Status { get; set; }
        [ApiMember(Name = nameof(StatusId), Description = "Primary Key of LookupTable", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? StatusId { get; set; }


        [ApiAllowableValues("Includes", Values = new string[] {@"Change Log",@"Scope Specific",@"System Alert",@"Terms of Service"})]
        [ApiMember(Name = nameof(Type), Description = "LookupTable", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Type { get; set; }
        [ApiMember(Name = nameof(Type_Id), Description = "Primary Key of LookupTable", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Type_Id { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out Reference pApp, out int? pAppId, out string pConfluenceId, out string pName, out bool pReprocess, out DateTime? pReprocessed, out List<Reference> pScopes, out int? pScopesCount, out Reference pStatus, out int? pStatusId, out Reference pType, out int? pType_Id)
        {
            pApp = App;
            pAppId = AppId;
            pConfluenceId = ConfluenceId;
            pName = Name;
            pReprocess = Reprocess;
            pReprocessed = Reprocessed;
            pScopes = Scopes;
            pScopesCount = ScopesCount;
            pStatus = Status;
            pStatusId = StatusId;
            pType = Type;
            pType_Id = Type_Id;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public BroadcastBase With(int? pId = Id, Reference pApp = App, int? pAppId = AppId, string pConfluenceId = ConfluenceId, string pName = Name, bool pReprocess = Reprocess, DateTime? pReprocessed = Reprocessed, List<Reference> pScopes = Scopes, int? pScopesCount = ScopesCount, Reference pStatus = Status, int? pStatusId = StatusId, Reference pType = Type, int? pType_Id = Type_Id) => 
        //	new BroadcastBase(pId, pApp, pAppId, pConfluenceId, pName, pReprocess, pReprocessed, pScopes, pScopesCount, pStatus, pStatusId, pType, pType_Id);

    }


    [Route("/broadcast", "POST")]
    [Route("/broadcast/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class Broadcast : BroadcastBase, IReturn<Broadcast>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Broadcast() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Broadcast(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Broadcast(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Broadcast(int? pId, Reference pApp, int? pAppId, string pConfluenceId, string pName, bool pReprocess, DateTime? pReprocessed, List<Reference> pScopes, int? pScopesCount, Reference pStatus, int? pStatusId, Reference pType, int? pType_Id) :
            base(pId, pApp, pAppId, pConfluenceId, pName, pReprocess, pReprocessed, pScopes, pScopesCount, pStatus, pStatusId, pType, pType_Id) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<Broadcast>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(App),nameof(AppId),nameof(ConfluenceId),nameof(Created),nameof(CreatorId),nameof(Gestalt),nameof(Locked),nameof(Name),nameof(Reprocess),nameof(Reprocessed),nameof(Scopes),nameof(ScopesCount),nameof(Status),nameof(StatusId),nameof(Type),nameof(Type_Id),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<Broadcast>("Broadcast",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(Scopes), nameof(ScopesCount), nameof(ScopesIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<Broadcast>();

    }
    

    [Route("/broadcast/{Id}/copy", "POST")]
    public partial class BroadcastCopy : Broadcast {}

    public partial class BroadcastSearchBase : Search<Broadcast>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public Reference App { get; set; }
        public List<int> AppIds { get; set; }
        public string ConfluenceId { get; set; }
        public List<string> ConfluenceIds { get; set; }
        public string Name { get; set; }
        public List<string> Names { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Reprocess { get; set; }
        public DateTime? Reprocessed { get; set; }
        public DateTime? ReprocessedAfter { get; set; }
        public DateTime? ReprocessedBefore { get; set; }
        public List<int> ScopesIds { get; set; }
        public Reference Status { get; set; }
        public List<int> StatusIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Draft",@"Release"})]
        public List<string> StatusNames { get; set; }
        public Reference Type { get; set; }
        public List<int> TypeIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Change Log",@"Scope Specific",@"System Alert",@"Terms of Service"})]
        public List<string> TypeNames { get; set; }
    }


    [Route("/broadcast", "GET")]
    [Route("/broadcast/version", "GET, POST")]
    [Route("/broadcast/search", "GET, POST, DELETE")]

    public partial class BroadcastSearch : BroadcastSearchBase
    {
    }

    public class BroadcastFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BroadcastFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private BroadcastSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BroadcastFullTextSearch(BroadcastSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Broadcast.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Broadcast.Updated))); }

        public bool doApp { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Broadcast.App))); }
        public bool doConfluenceId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Broadcast.ConfluenceId))); }
        public bool doName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Broadcast.Name))); }
        public bool doReprocess { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Broadcast.Reprocess))); }
        public bool doReprocessed { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Broadcast.Reprocessed))); }
        public bool doScopes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Broadcast.Scopes))); }
        public bool doStatus { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Broadcast.Status))); }
        public bool doType { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Broadcast.Type))); }
    }


    [Route("/broadcast/batch", "DELETE, PATCH, POST, PUT")]

    public partial class BroadcastBatch : List<Broadcast> { }


    [Route("/broadcast/{Id}/{Junction}/version", "GET, POST")]
    [Route("/broadcast/{Id}/{Junction}", "GET, POST, DELETE")]
    public class BroadcastJunction : BroadcastSearchBase {}



}
