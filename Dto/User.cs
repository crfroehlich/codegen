//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class UserBase : Dto<User>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UserBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UserBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UserBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UserBase(int? pId, string pClientDepartment, Reference pDivision, int? pDivisionId, List<Reference> pDocumentSets, int? pDocumentSetsCount, string pEmail, DateTime? pExpireDate, int? pFailedLoginCount, string pFirstName, string pGravatar, List<Reference> pHistory, int? pHistoryCount, List<Reference> pImpersonated, int? pImpersonatedCount, List<Reference> pImpersonating, int? pImpersonatingCount, bool? pIsSystemUser, string pJobTitle, DateTime? pLastLogin, string pLastName, string pLegacyUsername, Reference pLocale, int? pLocaleId, int? pLoginCount, string pName, List<Role> pRoles, int? pRolesCount, List<Reference> pScopes, int? pScopesCount, List<Reference> pSessions, int? pSessionsCount, JsonObject pSettings, string pSlack, DateTime? pStartDate, StatusEnm? pStatus, List<Reference> pTeams, int? pTeamsCount, List<Reference> pTimeCards, int? pTimeCardsCount, List<Reference> pUpdates, int? pUpdatesCount, Reference pUserType, int? pUserTypeId, List<Reference> pWorkflows, int? pWorkflowsCount) : this(DocConvert.ToInt(pId)) 
        {
            ClientDepartment = pClientDepartment;
            Division = pDivision;
            DivisionId = pDivisionId;
            DocumentSets = pDocumentSets;
            DocumentSetsCount = pDocumentSetsCount;
            Email = pEmail;
            ExpireDate = pExpireDate;
            FailedLoginCount = pFailedLoginCount;
            FirstName = pFirstName;
            Gravatar = pGravatar;
            History = pHistory;
            HistoryCount = pHistoryCount;
            Impersonated = pImpersonated;
            ImpersonatedCount = pImpersonatedCount;
            Impersonating = pImpersonating;
            ImpersonatingCount = pImpersonatingCount;
            IsSystemUser = pIsSystemUser;
            JobTitle = pJobTitle;
            LastLogin = pLastLogin;
            LastName = pLastName;
            LegacyUsername = pLegacyUsername;
            Locale = pLocale;
            LocaleId = pLocaleId;
            LoginCount = pLoginCount;
            Name = pName;
            Roles = pRoles;
            RolesCount = pRolesCount;
            Scopes = pScopes;
            ScopesCount = pScopesCount;
            Sessions = pSessions;
            SessionsCount = pSessionsCount;
            Settings = pSettings;
            Slack = pSlack;
            StartDate = pStartDate;
            Status = pStatus;
            Teams = pTeams;
            TeamsCount = pTeamsCount;
            TimeCards = pTimeCards;
            TimeCardsCount = pTimeCardsCount;
            Updates = pUpdates;
            UpdatesCount = pUpdatesCount;
            UserType = pUserType;
            UserTypeId = pUserTypeId;
            Workflows = pWorkflows;
            WorkflowsCount = pWorkflowsCount;
        }

        [ApiMember(Name = nameof(ClientDepartment), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string ClientDepartment { get; set; }
        [ApiMember(Name = nameof(ClientDepartmentIds), Description = "ClientDepartment Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ClientDepartmentIds { get; set; }
        [ApiMember(Name = nameof(ClientDepartmentCount), Description = "ClientDepartment Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ClientDepartmentCount { get; set; }

        [ApiMember(Name = nameof(Division), Description = "Division", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Division { get; set; }
        [ApiMember(Name = nameof(DivisionId), Description = "Primary Key of Division", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DivisionId { get; set; }

        [ApiMember(Name = nameof(DocumentSets), Description = "DocumentSet", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> DocumentSets { get; set; }
        [ApiMember(Name = nameof(DocumentSetsIds), Description = "DocumentSet Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> DocumentSetsIds { get; set; }
        [ApiMember(Name = nameof(DocumentSetsCount), Description = "DocumentSet Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DocumentSetsCount { get; set; }

        [ApiMember(Name = nameof(Email), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Email { get; set; }
        [ApiMember(Name = nameof(EmailIds), Description = "Email Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> EmailIds { get; set; }
        [ApiMember(Name = nameof(EmailCount), Description = "Email Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? EmailCount { get; set; }

        [ApiMember(Name = nameof(ExpireDate), Description = "DateTime?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime? ExpireDate { get; set; }
        [ApiMember(Name = nameof(ExpireDateIds), Description = "ExpireDate Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ExpireDateIds { get; set; }
        [ApiMember(Name = nameof(ExpireDateCount), Description = "ExpireDate Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ExpireDateCount { get; set; }

        [ApiMember(Name = nameof(FailedLoginCount), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? FailedLoginCount { get; set; }
        [ApiMember(Name = nameof(FailedLoginCountIds), Description = "FailedLoginCount Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> FailedLoginCountIds { get; set; }
        [ApiMember(Name = nameof(FailedLoginCountCount), Description = "FailedLoginCount Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? FailedLoginCountCount { get; set; }

        [ApiMember(Name = nameof(FirstName), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string FirstName { get; set; }
        [ApiMember(Name = nameof(FirstNameIds), Description = "FirstName Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> FirstNameIds { get; set; }
        [ApiMember(Name = nameof(FirstNameCount), Description = "FirstName Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? FirstNameCount { get; set; }

        [ApiMember(Name = nameof(Gravatar), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Gravatar { get; set; }
        [ApiMember(Name = nameof(GravatarIds), Description = "Gravatar Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> GravatarIds { get; set; }
        [ApiMember(Name = nameof(GravatarCount), Description = "Gravatar Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? GravatarCount { get; set; }

        [ApiMember(Name = nameof(History), Description = "History", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> History { get; set; }
        [ApiMember(Name = nameof(HistoryIds), Description = "History Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> HistoryIds { get; set; }
        [ApiMember(Name = nameof(HistoryCount), Description = "History Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? HistoryCount { get; set; }

        [ApiMember(Name = nameof(Impersonated), Description = "Impersonation", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Impersonated { get; set; }
        [ApiMember(Name = nameof(ImpersonatedIds), Description = "Impersonation Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ImpersonatedIds { get; set; }
        [ApiMember(Name = nameof(ImpersonatedCount), Description = "Impersonation Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ImpersonatedCount { get; set; }

        [ApiMember(Name = nameof(Impersonating), Description = "Impersonation", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Impersonating { get; set; }
        [ApiMember(Name = nameof(ImpersonatingIds), Description = "Impersonation Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ImpersonatingIds { get; set; }
        [ApiMember(Name = nameof(ImpersonatingCount), Description = "Impersonation Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ImpersonatingCount { get; set; }

        [ApiMember(Name = nameof(IsSystemUser), Description = "bool?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool? IsSystemUser { get; private set; }
        [ApiMember(Name = nameof(IsSystemUserIds), Description = "IsSystemUser Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> IsSystemUserIds { get; set; }
        [ApiMember(Name = nameof(IsSystemUserCount), Description = "IsSystemUser Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? IsSystemUserCount { get; set; }

        [ApiMember(Name = nameof(JobTitle), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string JobTitle { get; set; }
        [ApiMember(Name = nameof(JobTitleIds), Description = "JobTitle Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> JobTitleIds { get; set; }
        [ApiMember(Name = nameof(JobTitleCount), Description = "JobTitle Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? JobTitleCount { get; set; }

        [ApiMember(Name = nameof(LastLogin), Description = "DateTime?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime? LastLogin { get; set; }
        [ApiMember(Name = nameof(LastLoginIds), Description = "LastLogin Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> LastLoginIds { get; set; }
        [ApiMember(Name = nameof(LastLoginCount), Description = "LastLogin Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? LastLoginCount { get; set; }

        [ApiMember(Name = nameof(LastName), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string LastName { get; set; }
        [ApiMember(Name = nameof(LastNameIds), Description = "LastName Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> LastNameIds { get; set; }
        [ApiMember(Name = nameof(LastNameCount), Description = "LastName Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? LastNameCount { get; set; }

        [ApiMember(Name = nameof(LegacyUsername), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string LegacyUsername { get; set; }
        [ApiMember(Name = nameof(LegacyUsernameIds), Description = "LegacyUsername Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> LegacyUsernameIds { get; set; }
        [ApiMember(Name = nameof(LegacyUsernameCount), Description = "LegacyUsername Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? LegacyUsernameCount { get; set; }

        [ApiMember(Name = nameof(Locale), Description = "Locale", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Locale { get; set; }
        [ApiMember(Name = nameof(LocaleId), Description = "Primary Key of Locale", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? LocaleId { get; set; }

        [ApiMember(Name = nameof(LoginCount), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? LoginCount { get; set; }
        [ApiMember(Name = nameof(LoginCountIds), Description = "LoginCount Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> LoginCountIds { get; set; }
        [ApiMember(Name = nameof(LoginCountCount), Description = "LoginCount Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? LoginCountCount { get; set; }

        [ApiMember(Name = nameof(Name), Description = "string", IsRequired = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Name { get; set; }
        [ApiMember(Name = nameof(NameIds), Description = "Name Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> NameIds { get; set; }
        [ApiMember(Name = nameof(NameCount), Description = "Name Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? NameCount { get; set; }

        [ApiMember(Name = nameof(Roles), Description = "Role", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Role> Roles { get; set; }
        [ApiMember(Name = nameof(RolesIds), Description = "Role Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> RolesIds { get; set; }
        [ApiMember(Name = nameof(RolesCount), Description = "Role Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? RolesCount { get; set; }

        [ApiMember(Name = nameof(Scopes), Description = "Scope", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Scopes { get; set; }
        [ApiMember(Name = nameof(ScopesIds), Description = "Scope Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ScopesIds { get; set; }
        [ApiMember(Name = nameof(ScopesCount), Description = "Scope Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ScopesCount { get; set; }

        [ApiMember(Name = nameof(Sessions), Description = "UserSession", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Sessions { get; set; }
        [ApiMember(Name = nameof(SessionsIds), Description = "UserSession Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> SessionsIds { get; set; }
        [ApiMember(Name = nameof(SessionsCount), Description = "UserSession Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? SessionsCount { get; set; }

        [ApiMember(Name = nameof(Settings), Description = "JsonObject", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public JsonObject Settings { get; set; }
        [ApiMember(Name = nameof(SettingsIds), Description = "Settings Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> SettingsIds { get; set; }
        [ApiMember(Name = nameof(SettingsCount), Description = "Settings Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? SettingsCount { get; set; }

        [ApiMember(Name = nameof(Slack), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Slack { get; set; }
        [ApiMember(Name = nameof(SlackIds), Description = "Slack Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> SlackIds { get; set; }
        [ApiMember(Name = nameof(SlackCount), Description = "Slack Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? SlackCount { get; set; }

        [ApiMember(Name = nameof(StartDate), Description = "DateTime?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime? StartDate { get; set; }
        [ApiMember(Name = nameof(StartDateIds), Description = "StartDate Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> StartDateIds { get; set; }
        [ApiMember(Name = nameof(StartDateCount), Description = "StartDate Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? StartDateCount { get; set; }

        [ApiAllowableValues("Includes", Values = new string[] {@"Active",@"Archived",@"Disabled",@"Inactive"})]
        [ApiMember(Name = nameof(Status), Description = "StatusEnm?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public StatusEnm? Status { get; set; }
        [ApiMember(Name = nameof(StatusIds), Description = "Status Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> StatusIds { get; set; }
        [ApiMember(Name = nameof(StatusCount), Description = "Status Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? StatusCount { get; set; }

        [ApiMember(Name = nameof(Teams), Description = "Team", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Teams { get; set; }
        [ApiMember(Name = nameof(TeamsIds), Description = "Team Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> TeamsIds { get; set; }
        [ApiMember(Name = nameof(TeamsCount), Description = "Team Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? TeamsCount { get; set; }

        [ApiMember(Name = nameof(TimeCards), Description = "TimeCard", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> TimeCards { get; set; }
        [ApiMember(Name = nameof(TimeCardsIds), Description = "TimeCard Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> TimeCardsIds { get; set; }
        [ApiMember(Name = nameof(TimeCardsCount), Description = "TimeCard Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? TimeCardsCount { get; set; }

        [ApiMember(Name = nameof(Updates), Description = "Update", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Updates { get; set; }
        [ApiMember(Name = nameof(UpdatesIds), Description = "Update Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> UpdatesIds { get; set; }
        [ApiMember(Name = nameof(UpdatesCount), Description = "Update Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? UpdatesCount { get; set; }

        [ApiMember(Name = nameof(UserType), Description = "UserType", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference UserType { get; set; }
        [ApiMember(Name = nameof(UserTypeId), Description = "Primary Key of UserType", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? UserTypeId { get; set; }

        [ApiMember(Name = nameof(Workflows), Description = "Workflow", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Workflows { get; set; }
        [ApiMember(Name = nameof(WorkflowsIds), Description = "Workflow Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> WorkflowsIds { get; set; }
        [ApiMember(Name = nameof(WorkflowsCount), Description = "Workflow Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? WorkflowsCount { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out string pClientDepartment, out Reference pDivision, out int? pDivisionId, out List<Reference> pDocumentSets, out int? pDocumentSetsCount, out string pEmail, out DateTime? pExpireDate, out int? pFailedLoginCount, out string pFirstName, out string pGravatar, out List<Reference> pHistory, out int? pHistoryCount, out List<Reference> pImpersonated, out int? pImpersonatedCount, out List<Reference> pImpersonating, out int? pImpersonatingCount, out bool? pIsSystemUser, out string pJobTitle, out DateTime? pLastLogin, out string pLastName, out string pLegacyUsername, out Reference pLocale, out int? pLocaleId, out int? pLoginCount, out string pName, out List<Role> pRoles, out int? pRolesCount, out List<Reference> pScopes, out int? pScopesCount, out List<Reference> pSessions, out int? pSessionsCount, out JsonObject pSettings, out string pSlack, out DateTime? pStartDate, out StatusEnm? pStatus, out List<Reference> pTeams, out int? pTeamsCount, out List<Reference> pTimeCards, out int? pTimeCardsCount, out List<Reference> pUpdates, out int? pUpdatesCount, out Reference pUserType, out int? pUserTypeId, out List<Reference> pWorkflows, out int? pWorkflowsCount)
        {
            pClientDepartment = ClientDepartment;
            pDivision = Division;
            pDivisionId = DivisionId;
            pDocumentSets = DocumentSets;
            pDocumentSetsCount = DocumentSetsCount;
            pEmail = Email;
            pExpireDate = ExpireDate;
            pFailedLoginCount = FailedLoginCount;
            pFirstName = FirstName;
            pGravatar = Gravatar;
            pHistory = History;
            pHistoryCount = HistoryCount;
            pImpersonated = Impersonated;
            pImpersonatedCount = ImpersonatedCount;
            pImpersonating = Impersonating;
            pImpersonatingCount = ImpersonatingCount;
            pIsSystemUser = IsSystemUser;
            pJobTitle = JobTitle;
            pLastLogin = LastLogin;
            pLastName = LastName;
            pLegacyUsername = LegacyUsername;
            pLocale = Locale;
            pLocaleId = LocaleId;
            pLoginCount = LoginCount;
            pName = Name;
            pRoles = Roles;
            pRolesCount = RolesCount;
            pScopes = Scopes;
            pScopesCount = ScopesCount;
            pSessions = Sessions;
            pSessionsCount = SessionsCount;
            pSettings = Settings;
            pSlack = Slack;
            pStartDate = StartDate;
            pStatus = Status;
            pTeams = Teams;
            pTeamsCount = TeamsCount;
            pTimeCards = TimeCards;
            pTimeCardsCount = TimeCardsCount;
            pUpdates = Updates;
            pUpdatesCount = UpdatesCount;
            pUserType = UserType;
            pUserTypeId = UserTypeId;
            pWorkflows = Workflows;
            pWorkflowsCount = WorkflowsCount;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public UserBase With(int? pId = Id, string pClientDepartment = ClientDepartment, Reference pDivision = Division, int? pDivisionId = DivisionId, List<Reference> pDocumentSets = DocumentSets, int? pDocumentSetsCount = DocumentSetsCount, string pEmail = Email, DateTime? pExpireDate = ExpireDate, int? pFailedLoginCount = FailedLoginCount, string pFirstName = FirstName, string pGravatar = Gravatar, List<Reference> pHistory = History, int? pHistoryCount = HistoryCount, List<Reference> pImpersonated = Impersonated, int? pImpersonatedCount = ImpersonatedCount, List<Reference> pImpersonating = Impersonating, int? pImpersonatingCount = ImpersonatingCount, bool? pIsSystemUser = IsSystemUser, string pJobTitle = JobTitle, DateTime? pLastLogin = LastLogin, string pLastName = LastName, string pLegacyUsername = LegacyUsername, Reference pLocale = Locale, int? pLocaleId = LocaleId, int? pLoginCount = LoginCount, string pName = Name, List<Role> pRoles = Roles, int? pRolesCount = RolesCount, List<Reference> pScopes = Scopes, int? pScopesCount = ScopesCount, List<Reference> pSessions = Sessions, int? pSessionsCount = SessionsCount, JsonObject pSettings = Settings, string pSlack = Slack, DateTime? pStartDate = StartDate, StatusEnm? pStatus = Status, List<Reference> pTeams = Teams, int? pTeamsCount = TeamsCount, List<Reference> pTimeCards = TimeCards, int? pTimeCardsCount = TimeCardsCount, List<Reference> pUpdates = Updates, int? pUpdatesCount = UpdatesCount, Reference pUserType = UserType, int? pUserTypeId = UserTypeId, List<Reference> pWorkflows = Workflows, int? pWorkflowsCount = WorkflowsCount) => 
        //	new UserBase(pId, pClientDepartment, pDivision, pDivisionId, pDocumentSets, pDocumentSetsCount, pEmail, pExpireDate, pFailedLoginCount, pFirstName, pGravatar, pHistory, pHistoryCount, pImpersonated, pImpersonatedCount, pImpersonating, pImpersonatingCount, pIsSystemUser, pJobTitle, pLastLogin, pLastName, pLegacyUsername, pLocale, pLocaleId, pLoginCount, pName, pRoles, pRolesCount, pScopes, pScopesCount, pSessions, pSessionsCount, pSettings, pSlack, pStartDate, pStatus, pTeams, pTeamsCount, pTimeCards, pTimeCardsCount, pUpdates, pUpdatesCount, pUserType, pUserTypeId, pWorkflows, pWorkflowsCount);

    }


    [Route("/user", "POST")]
    [Route("/user/{Id}", "GET, PATCH, PUT")]

    public partial class User : UserBase, IReturn<User>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public User() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public User(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public User(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public User(int? pId, string pClientDepartment, Reference pDivision, int? pDivisionId, List<Reference> pDocumentSets, int? pDocumentSetsCount, string pEmail, DateTime? pExpireDate, int? pFailedLoginCount, string pFirstName, string pGravatar, List<Reference> pHistory, int? pHistoryCount, List<Reference> pImpersonated, int? pImpersonatedCount, List<Reference> pImpersonating, int? pImpersonatingCount, bool? pIsSystemUser, string pJobTitle, DateTime? pLastLogin, string pLastName, string pLegacyUsername, Reference pLocale, int? pLocaleId, int? pLoginCount, string pName, List<Role> pRoles, int? pRolesCount, List<Reference> pScopes, int? pScopesCount, List<Reference> pSessions, int? pSessionsCount, JsonObject pSettings, string pSlack, DateTime? pStartDate, StatusEnm? pStatus, List<Reference> pTeams, int? pTeamsCount, List<Reference> pTimeCards, int? pTimeCardsCount, List<Reference> pUpdates, int? pUpdatesCount, Reference pUserType, int? pUserTypeId, List<Reference> pWorkflows, int? pWorkflowsCount) :
            base(pId, pClientDepartment, pDivision, pDivisionId, pDocumentSets, pDocumentSetsCount, pEmail, pExpireDate, pFailedLoginCount, pFirstName, pGravatar, pHistory, pHistoryCount, pImpersonated, pImpersonatedCount, pImpersonating, pImpersonatingCount, pIsSystemUser, pJobTitle, pLastLogin, pLastName, pLegacyUsername, pLocale, pLocaleId, pLoginCount, pName, pRoles, pRolesCount, pScopes, pScopesCount, pSessions, pSessionsCount, pSettings, pSlack, pStartDate, pStatus, pTeams, pTeamsCount, pTimeCards, pTimeCardsCount, pUpdates, pUpdatesCount, pUserType, pUserTypeId, pWorkflows, pWorkflowsCount) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<User>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(ClientDepartment),nameof(Created),nameof(CreatorId),nameof(Division),nameof(DivisionId),nameof(DocumentSets),nameof(DocumentSetsCount),nameof(Email),nameof(ExpireDate),nameof(FailedLoginCount),nameof(FirstName),nameof(Gestalt),nameof(Gravatar),nameof(History),nameof(HistoryCount),nameof(Impersonated),nameof(ImpersonatedCount),nameof(Impersonating),nameof(ImpersonatingCount),nameof(IsSystemUser),nameof(JobTitle),nameof(LastLogin),nameof(LastName),nameof(LegacyUsername),nameof(Locale),nameof(LocaleId),nameof(Locked),nameof(LoginCount),nameof(Name),nameof(Roles),nameof(RolesCount),nameof(Scopes),nameof(ScopesCount),nameof(Sessions),nameof(SessionsCount),nameof(Settings),nameof(Slack),nameof(StartDate),nameof(Status),nameof(Teams),nameof(TeamsCount),nameof(TimeCards),nameof(TimeCardsCount),nameof(Updated),nameof(Updates),nameof(UpdatesCount),nameof(UserType),nameof(UserTypeId),nameof(VersionNo),nameof(Workflows),nameof(WorkflowsCount)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<User>("User",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(DocumentSets), nameof(DocumentSetsCount), nameof(DocumentSetsIds), nameof(History), nameof(HistoryCount), nameof(HistoryIds), nameof(Impersonated), nameof(ImpersonatedCount), nameof(ImpersonatedIds), nameof(Impersonating), nameof(ImpersonatingCount), nameof(ImpersonatingIds), nameof(Roles), nameof(RolesCount), nameof(RolesIds), nameof(Scopes), nameof(ScopesCount), nameof(ScopesIds), nameof(Sessions), nameof(SessionsCount), nameof(SessionsIds), nameof(Teams), nameof(TeamsCount), nameof(TeamsIds), nameof(TimeCards), nameof(TimeCardsCount), nameof(TimeCardsIds), nameof(Updates), nameof(UpdatesCount), nameof(UpdatesIds), nameof(Workflows), nameof(WorkflowsCount), nameof(WorkflowsIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<User>();

    }
    

    [Route("/user/{Id}/copy", "POST")]
    public partial class UserCopy : User {}

    public partial class UserSearchBase : Search<User>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public string ClientDepartment { get; set; }
        public List<string> ClientDepartments { get; set; }
        public Reference Division { get; set; }
        public List<int> DivisionIds { get; set; }
        public List<int> DocumentSetsIds { get; set; }
        public string Email { get; set; }
        public List<string> Emails { get; set; }
        public DateTime? ExpireDate { get; set; }
        public DateTime? ExpireDateAfter { get; set; }
        public DateTime? ExpireDateBefore { get; set; }
        public int? FailedLoginCount { get; set; }
        public string FirstName { get; set; }
        public List<string> FirstNames { get; set; }
        public string Gravatar { get; set; }
        public List<string> Gravatars { get; set; }
        public List<int> HistoryIds { get; set; }
        public List<int> ImpersonatedIds { get; set; }
        public List<int> ImpersonatingIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false", "null"})]
        public List<bool?> IsSystemUser { get; set; }
        public string JobTitle { get; set; }
        public List<string> JobTitles { get; set; }
        public DateTime? LastLogin { get; set; }
        public DateTime? LastLoginAfter { get; set; }
        public DateTime? LastLoginBefore { get; set; }
        public string LastName { get; set; }
        public List<string> LastNames { get; set; }
        public string LegacyUsername { get; set; }
        public List<string> LegacyUsernames { get; set; }
        public Reference Locale { get; set; }
        public List<int> LocaleIds { get; set; }
        public int? LoginCount { get; set; }
        public string Name { get; set; }
        public List<string> Names { get; set; }
        public List<int> RolesIds { get; set; }
        public List<int> ScopesIds { get; set; }
        public List<int> SessionsIds { get; set; }
        public string Settings { get; set; }
        public List<string> Settingss { get; set; }
        public string Slack { get; set; }
        public List<string> Slacks { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? StartDateAfter { get; set; }
        public DateTime? StartDateBefore { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Active",@"Archived",@"Disabled",@"Inactive"})]
        public StatusEnm? Status { get; set; }
        public List<StatusEnm> Statuss { get; set; }
        public List<int> TeamsIds { get; set; }
        public List<int> TimeCardsIds { get; set; }
        public List<int> UpdatesIds { get; set; }
        public Reference UserType { get; set; }
        public List<int> UserTypeIds { get; set; }
        public List<int> WorkflowsIds { get; set; }
    }


    [Route("/user", "GET")]
    [Route("/user/version", "GET, POST")]
    [Route("/user/search", "GET, POST, DELETE")]

    public partial class UserSearch : UserSearchBase
    {
    }

    public class UserFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UserFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private UserSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UserFullTextSearch(UserSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Updated))); }

        public bool doClientDepartment { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.ClientDepartment))); }
        public bool doDivision { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Division))); }
        public bool doDocumentSets { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.DocumentSets))); }
        public bool doEmail { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Email))); }
        public bool doExpireDate { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.ExpireDate))); }
        public bool doFailedLoginCount { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.FailedLoginCount))); }
        public bool doFirstName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.FirstName))); }
        public bool doGravatar { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Gravatar))); }
        public bool doHistory { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.History))); }
        public bool doImpersonated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Impersonated))); }
        public bool doImpersonating { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Impersonating))); }
        public bool doIsSystemUser { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.IsSystemUser))); }
        public bool doJobTitle { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.JobTitle))); }
        public bool doLastLogin { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.LastLogin))); }
        public bool doLastName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.LastName))); }
        public bool doLegacyUsername { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.LegacyUsername))); }
        public bool doLocale { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Locale))); }
        public bool doLoginCount { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.LoginCount))); }
        public bool doName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Name))); }
        public bool doRoles { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Roles))); }
        public bool doScopes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Scopes))); }
        public bool doSessions { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Sessions))); }
        public bool doSettings { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Settings))); }
        public bool doSlack { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Slack))); }
        public bool doStartDate { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.StartDate))); }
        public bool doStatus { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Status))); }
        public bool doTeams { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Teams))); }
        public bool doTimeCards { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.TimeCards))); }
        public bool doUpdates { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Updates))); }
        public bool doUserType { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.UserType))); }
        public bool doWorkflows { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(User.Workflows))); }
    }


    [Route("/user/batch", "DELETE, PATCH, POST, PUT")]

    public partial class UserBatch : List<User> { }


    [Route("/user/{Id}/{Junction}/version", "GET, POST")]
    [Route("/user/{Id}/{Junction}", "GET, POST, DELETE")]
    public class UserJunction : UserSearchBase {}



}
