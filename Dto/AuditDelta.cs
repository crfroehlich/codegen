//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class AuditDeltaBase : Dto<AuditDelta>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditDeltaBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditDeltaBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditDeltaBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditDeltaBase(int? pId, Reference pAudit, int? pAuditId, string pDelta) : this(DocConvert.ToInt(pId)) 
        {
            Audit = pAudit;
            AuditId = pAuditId;
            Delta = pDelta;
        }

        [ApiMember(Name = nameof(Audit), Description = "AuditRecord", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Audit { get; set; }
        [ApiMember(Name = nameof(AuditId), Description = "Primary Key of AuditRecord", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? AuditId { get; set; }


        [ApiMember(Name = nameof(Delta), Description = "string", IsRequired = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Delta { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out Reference pAudit, out int? pAuditId, out string pDelta)
        {
            pAudit = Audit;
            pAuditId = AuditId;
            pDelta = Delta;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public AuditDeltaBase With(int? pId = Id, Reference pAudit = Audit, int? pAuditId = AuditId, string pDelta = Delta) => 
        //	new AuditDeltaBase(pId, pAudit, pAuditId, pDelta);

    }


    [Route("/auditdelta", "POST")]
    [Route("/auditdelta/{Id}", "GET")]

    public partial class AuditDelta : AuditDeltaBase, IReturn<AuditDelta>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditDelta() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditDelta(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditDelta(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditDelta(int? pId, Reference pAudit, int? pAuditId, string pDelta) :
            base(pId, pAudit, pAuditId, pDelta) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<AuditDelta>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Audit),nameof(AuditId),nameof(Created),nameof(CreatorId),nameof(Delta),nameof(Gestalt),nameof(Locked),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<AuditDelta>("AuditDelta",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<AuditDelta>();

    }
    

    [Route("/auditdelta/{Id}/copy", "POST")]
    public partial class AuditDeltaCopy : AuditDelta {}

    public partial class AuditDeltaSearchBase : Search<AuditDelta>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public Reference Audit { get; set; }
        public List<int> AuditIds { get; set; }
        public string Delta { get; set; }
        public List<string> Deltas { get; set; }
    }


    [Route("/auditdelta", "GET")]
    [Route("/auditdelta/version", "GET, POST")]
    [Route("/auditdelta/search", "GET, POST, DELETE")]

    public partial class AuditDeltaSearch : AuditDeltaSearchBase
    {
    }

    public class AuditDeltaFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditDeltaFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private AuditDeltaSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditDeltaFullTextSearch(AuditDeltaSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditDelta.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditDelta.Updated))); }

        public bool doAudit { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditDelta.Audit))); }
        public bool doDelta { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditDelta.Delta))); }
    }


    [Route("/auditdelta/batch", "DELETE, PATCH, POST, PUT")]

    public partial class AuditDeltaBatch : List<AuditDelta> { }


}
