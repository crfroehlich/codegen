//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class WorkflowBase : Dto<Workflow>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public WorkflowBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public WorkflowBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public WorkflowBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public WorkflowBase(int? pId, List<Reference> pBindings, int? pBindingsCount, string pData, string pDescription, List<Reference> pDocuments, int? pDocumentsCount, Reference pDocumentSet, int? pDocumentSetId, string pName, Reference pOwner, int? pOwnerId, List<Reference> pScopes, int? pScopesCount, WorkflowStatusEnm? pStatus, List<Reference> pTasks, int? pTasksCount, WorkflowEnm? pType, Reference pUser, int? pUserId, List<Reference> pVariables, int? pVariablesCount, List<Reference> pWorkflows, int? pWorkflowsCount) : this(DocConvert.ToInt(pId)) 
        {
            Bindings = pBindings;
            BindingsCount = pBindingsCount;
            Data = pData;
            Description = pDescription;
            Documents = pDocuments;
            DocumentsCount = pDocumentsCount;
            DocumentSet = pDocumentSet;
            DocumentSetId = pDocumentSetId;
            Name = pName;
            Owner = pOwner;
            OwnerId = pOwnerId;
            Scopes = pScopes;
            ScopesCount = pScopesCount;
            Status = pStatus;
            Tasks = pTasks;
            TasksCount = pTasksCount;
            Type = pType;
            User = pUser;
            UserId = pUserId;
            Variables = pVariables;
            VariablesCount = pVariablesCount;
            Workflows = pWorkflows;
            WorkflowsCount = pWorkflowsCount;
        }

        [ApiMember(Name = nameof(Bindings), Description = "LookupTableBinding", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Bindings { get; set; }
        [ApiMember(Name = nameof(BindingsIds), Description = "LookupTableBinding Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> BindingsIds { get; set; }
        [ApiMember(Name = nameof(BindingsCount), Description = "LookupTableBinding Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? BindingsCount { get; set; }


        [ApiMember(Name = nameof(Data), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Data { get; set; }


        [ApiMember(Name = nameof(Description), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Description { get; set; }


        [ApiMember(Name = nameof(Documents), Description = "Document", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Documents { get; set; }
        [ApiMember(Name = nameof(DocumentsIds), Description = "Document Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> DocumentsIds { get; set; }
        [ApiMember(Name = nameof(DocumentsCount), Description = "Document Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DocumentsCount { get; set; }


        [ApiMember(Name = nameof(DocumentSet), Description = "DocumentSet", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference DocumentSet { get; set; }
        [ApiMember(Name = nameof(DocumentSetId), Description = "Primary Key of DocumentSet", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DocumentSetId { get; set; }


        [ApiMember(Name = nameof(Name), Description = "string", IsRequired = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Name { get; set; }


        [ApiMember(Name = nameof(Owner), Description = "Workflow", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Owner { get; set; }
        [ApiMember(Name = nameof(OwnerId), Description = "Primary Key of Workflow", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? OwnerId { get; set; }


        [ApiMember(Name = nameof(Scopes), Description = "Scope", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Scopes { get; set; }
        [ApiMember(Name = nameof(ScopesIds), Description = "Scope Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ScopesIds { get; set; }
        [ApiMember(Name = nameof(ScopesCount), Description = "Scope Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ScopesCount { get; set; }


        [ApiAllowableValues("Includes", Values = new string[] {@"Accepted",@"Collected",@"Processing",@"Ready",@"Rejected",@"Requested",@"Unavailable"})]
        [ApiMember(Name = nameof(Status), Description = "WorkflowStatusEnm?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public WorkflowStatusEnm? Status { get; set; }


        [ApiMember(Name = nameof(Tasks), Description = "Task", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Tasks { get; set; }
        [ApiMember(Name = nameof(TasksIds), Description = "Task Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> TasksIds { get; set; }
        [ApiMember(Name = nameof(TasksCount), Description = "Task Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? TasksCount { get; set; }


        [ApiAllowableValues("Includes", Values = new string[] {@"Audit Error",@"Bayesian NMA",@"Cohort Analysis",@"Custom Report",@"Data Export",@"Default Filter",@"Default Nameset",@"DIA Report",@"Evidence on Demand",@"Evidence Statements",@"Evidence Table",@"FAQ",@"Filter",@"Framed Question Data Set",@"Framed Question Library",@"Frequentist NMA",@"HTA",@"Library Ratings",@"Direct Meta Analysis",@"Nameset",@"PICO Rating",@"R Snippet",@"Rapid Review",@"Reconciliation",@"Response Letter",@"Risk of Bias",@"RMD Snippet",@"Systematic Review",@"View"})]
        [ApiMember(Name = nameof(Type), Description = "WorkflowEnm?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public WorkflowEnm? Type { get; set; }


        [ApiMember(Name = nameof(User), Description = "User", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference User { get; set; }
        [ApiMember(Name = nameof(UserId), Description = "Primary Key of User", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? UserId { get; set; }


        [ApiMember(Name = nameof(Variables), Description = "VariableInstance", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Variables { get; set; }
        [ApiMember(Name = nameof(VariablesIds), Description = "VariableInstance Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> VariablesIds { get; set; }
        [ApiMember(Name = nameof(VariablesCount), Description = "VariableInstance Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? VariablesCount { get; set; }


        [ApiMember(Name = nameof(Workflows), Description = "Workflow", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Workflows { get; set; }
        [ApiMember(Name = nameof(WorkflowsIds), Description = "Workflow Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> WorkflowsIds { get; set; }
        [ApiMember(Name = nameof(WorkflowsCount), Description = "Workflow Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? WorkflowsCount { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out List<Reference> pBindings, out int? pBindingsCount, out string pData, out string pDescription, out List<Reference> pDocuments, out int? pDocumentsCount, out Reference pDocumentSet, out int? pDocumentSetId, out string pName, out Reference pOwner, out int? pOwnerId, out List<Reference> pScopes, out int? pScopesCount, out WorkflowStatusEnm? pStatus, out List<Reference> pTasks, out int? pTasksCount, out WorkflowEnm? pType, out Reference pUser, out int? pUserId, out List<Reference> pVariables, out int? pVariablesCount, out List<Reference> pWorkflows, out int? pWorkflowsCount)
        {
            pBindings = Bindings;
            pBindingsCount = BindingsCount;
            pData = Data;
            pDescription = Description;
            pDocuments = Documents;
            pDocumentsCount = DocumentsCount;
            pDocumentSet = DocumentSet;
            pDocumentSetId = DocumentSetId;
            pName = Name;
            pOwner = Owner;
            pOwnerId = OwnerId;
            pScopes = Scopes;
            pScopesCount = ScopesCount;
            pStatus = Status;
            pTasks = Tasks;
            pTasksCount = TasksCount;
            pType = Type;
            pUser = User;
            pUserId = UserId;
            pVariables = Variables;
            pVariablesCount = VariablesCount;
            pWorkflows = Workflows;
            pWorkflowsCount = WorkflowsCount;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public WorkflowBase With(int? pId = Id, List<Reference> pBindings = Bindings, int? pBindingsCount = BindingsCount, string pData = Data, string pDescription = Description, List<Reference> pDocuments = Documents, int? pDocumentsCount = DocumentsCount, Reference pDocumentSet = DocumentSet, int? pDocumentSetId = DocumentSetId, string pName = Name, Reference pOwner = Owner, int? pOwnerId = OwnerId, List<Reference> pScopes = Scopes, int? pScopesCount = ScopesCount, WorkflowStatusEnm? pStatus = Status, List<Reference> pTasks = Tasks, int? pTasksCount = TasksCount, WorkflowEnm? pType = Type, Reference pUser = User, int? pUserId = UserId, List<Reference> pVariables = Variables, int? pVariablesCount = VariablesCount, List<Reference> pWorkflows = Workflows, int? pWorkflowsCount = WorkflowsCount) => 
        //	new WorkflowBase(pId, pBindings, pBindingsCount, pData, pDescription, pDocuments, pDocumentsCount, pDocumentSet, pDocumentSetId, pName, pOwner, pOwnerId, pScopes, pScopesCount, pStatus, pTasks, pTasksCount, pType, pUser, pUserId, pVariables, pVariablesCount, pWorkflows, pWorkflowsCount);

    }


    [Route("/workflow", "POST")]
    [Route("/workflow/{Id}", "GET, PATCH, PUT")]

    public partial class Workflow : WorkflowBase, IReturn<Workflow>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Workflow() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Workflow(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Workflow(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Workflow(int? pId, List<Reference> pBindings, int? pBindingsCount, string pData, string pDescription, List<Reference> pDocuments, int? pDocumentsCount, Reference pDocumentSet, int? pDocumentSetId, string pName, Reference pOwner, int? pOwnerId, List<Reference> pScopes, int? pScopesCount, WorkflowStatusEnm? pStatus, List<Reference> pTasks, int? pTasksCount, WorkflowEnm? pType, Reference pUser, int? pUserId, List<Reference> pVariables, int? pVariablesCount, List<Reference> pWorkflows, int? pWorkflowsCount) :
            base(pId, pBindings, pBindingsCount, pData, pDescription, pDocuments, pDocumentsCount, pDocumentSet, pDocumentSetId, pName, pOwner, pOwnerId, pScopes, pScopesCount, pStatus, pTasks, pTasksCount, pType, pUser, pUserId, pVariables, pVariablesCount, pWorkflows, pWorkflowsCount) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<Workflow>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Bindings),nameof(BindingsCount),nameof(Created),nameof(CreatorId),nameof(Data),nameof(Description),nameof(Documents),nameof(DocumentsCount),nameof(DocumentSet),nameof(DocumentSetId),nameof(Gestalt),nameof(Locked),nameof(Name),nameof(Owner),nameof(OwnerId),nameof(Scopes),nameof(ScopesCount),nameof(Status),nameof(Tasks),nameof(TasksCount),nameof(Type),nameof(Updated),nameof(User),nameof(UserId),nameof(Variables),nameof(VariablesCount),nameof(VersionNo),nameof(Workflows),nameof(WorkflowsCount)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<Workflow>("Workflow",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(Bindings), nameof(BindingsCount), nameof(BindingsIds), nameof(Documents), nameof(DocumentsCount), nameof(DocumentsIds), nameof(Scopes), nameof(ScopesCount), nameof(ScopesIds), nameof(Tasks), nameof(TasksCount), nameof(TasksIds), nameof(Variables), nameof(VariablesCount), nameof(VariablesIds), nameof(Workflows), nameof(WorkflowsCount), nameof(WorkflowsIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<Workflow>();

    }
    

    [Route("/workflow/{Id}/copy", "POST")]
    public partial class WorkflowCopy : Workflow {}

    public partial class WorkflowSearchBase : Search<Workflow>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public List<int> BindingsIds { get; set; }
        public string Data { get; set; }
        public List<string> Datas { get; set; }
        public string Description { get; set; }
        public List<string> Descriptions { get; set; }
        public List<int> DocumentsIds { get; set; }
        public Reference DocumentSet { get; set; }
        public List<int> DocumentSetIds { get; set; }
        public string Name { get; set; }
        public List<string> Names { get; set; }
        public Reference Owner { get; set; }
        public List<int> OwnerIds { get; set; }
        public List<int> ScopesIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Accepted",@"Collected",@"Processing",@"Ready",@"Rejected",@"Requested",@"Unavailable"})]
        public WorkflowStatusEnm? Status { get; set; }
        public List<WorkflowStatusEnm?> Statuss { get; set; }
        public List<int> TasksIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Audit Error",@"Bayesian NMA",@"Cohort Analysis",@"Custom Report",@"Data Export",@"Default Filter",@"Default Nameset",@"DIA Report",@"Evidence on Demand",@"Evidence Statements",@"Evidence Table",@"FAQ",@"Filter",@"Framed Question Data Set",@"Framed Question Library",@"Frequentist NMA",@"HTA",@"Library Ratings",@"Direct Meta Analysis",@"Nameset",@"PICO Rating",@"R Snippet",@"Rapid Review",@"Reconciliation",@"Response Letter",@"Risk of Bias",@"RMD Snippet",@"Systematic Review",@"View"})]
        public WorkflowEnm? Type { get; set; }
        public List<WorkflowEnm> Types { get; set; }
        public Reference User { get; set; }
        public List<int> UserIds { get; set; }
        public List<int> VariablesIds { get; set; }
        public List<int> WorkflowsIds { get; set; }
    }


    [Route("/workflow", "GET")]
    [Route("/workflow/version", "GET, POST")]
    [Route("/workflow/search", "GET, POST, DELETE")]

    public partial class WorkflowSearch : WorkflowSearchBase
    {
    }

    public class WorkflowFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public WorkflowFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private WorkflowSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public WorkflowFullTextSearch(WorkflowSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Updated))); }

        public bool doBindings { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Bindings))); }
        public bool doData { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Data))); }
        public bool doDescription { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Description))); }
        public bool doDocuments { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Documents))); }
        public bool doDocumentSet { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.DocumentSet))); }
        public bool doName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Name))); }
        public bool doOwner { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Owner))); }
        public bool doScopes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Scopes))); }
        public bool doStatus { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Status))); }
        public bool doTasks { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Tasks))); }
        public bool doType { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Type))); }
        public bool doUser { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.User))); }
        public bool doVariables { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Variables))); }
        public bool doWorkflows { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Workflow.Workflows))); }
    }


    [Route("/workflow/batch", "DELETE, PATCH, POST, PUT")]

    public partial class WorkflowBatch : List<Workflow> { }


    [Route("/workflow/{Id}/{Junction}/version", "GET, POST")]
    [Route("/workflow/{Id}/{Junction}", "GET, POST, DELETE")]
    public class WorkflowJunction : WorkflowSearchBase {}



}
