//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class DivisionBase : Dto<Division>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DivisionBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DivisionBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DivisionBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DivisionBase(int? pId, Reference pClient, int? pClientId, Reference pDefaultLocale, int? pDefaultLocaleId, List<Reference> pDocumentSets, int? pDocumentSetsCount, string pName, Reference pRole, int? pRoleId, DivisionSettings pSettings, List<Reference> pUsers, int? pUsersCount) : this(DocConvert.ToInt(pId)) 
        {
            Client = pClient;
            ClientId = pClientId;
            DefaultLocale = pDefaultLocale;
            DefaultLocaleId = pDefaultLocaleId;
            DocumentSets = pDocumentSets;
            DocumentSetsCount = pDocumentSetsCount;
            Name = pName;
            Role = pRole;
            RoleId = pRoleId;
            Settings = pSettings;
            Users = pUsers;
            UsersCount = pUsersCount;
        }

        [ApiMember(Name = nameof(Client), Description = "Client", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Client { get; set; }
        [ApiMember(Name = nameof(ClientId), Description = "Primary Key of Client", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ClientId { get; set; }


        [ApiMember(Name = nameof(DefaultLocale), Description = "Locale", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference DefaultLocale { get; set; }
        [ApiMember(Name = nameof(DefaultLocaleId), Description = "Primary Key of Locale", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DefaultLocaleId { get; set; }


        [ApiMember(Name = nameof(DocumentSets), Description = "DocumentSet", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> DocumentSets { get; set; }
        [ApiMember(Name = nameof(DocumentSetsIds), Description = "DocumentSet Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> DocumentSetsIds { get; set; }
        [ApiMember(Name = nameof(DocumentSetsCount), Description = "DocumentSet Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DocumentSetsCount { get; set; }


        [ApiMember(Name = nameof(Name), Description = "string", IsRequired = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Name { get; set; }
        [ApiMember(Name = nameof(NameIds), Description = "Name Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> NameIds { get; set; }
        [ApiMember(Name = nameof(NameCount), Description = "Name Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? NameCount { get; set; }


        [ApiMember(Name = nameof(Role), Description = "Role", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Role { get; set; }
        [ApiMember(Name = nameof(RoleId), Description = "Primary Key of Role", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? RoleId { get; set; }


        [ApiMember(Name = nameof(Settings), Description = "DivisionSettings", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DivisionSettings Settings { get; set; }
        [ApiMember(Name = nameof(SettingsIds), Description = "Settings Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> SettingsIds { get; set; }
        [ApiMember(Name = nameof(SettingsCount), Description = "Settings Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? SettingsCount { get; set; }


        [ApiMember(Name = nameof(Users), Description = "User", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Users { get; set; }
        [ApiMember(Name = nameof(UsersIds), Description = "User Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> UsersIds { get; set; }
        [ApiMember(Name = nameof(UsersCount), Description = "User Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? UsersCount { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out Reference pClient, out int? pClientId, out Reference pDefaultLocale, out int? pDefaultLocaleId, out List<Reference> pDocumentSets, out int? pDocumentSetsCount, out string pName, out Reference pRole, out int? pRoleId, out DivisionSettings pSettings, out List<Reference> pUsers, out int? pUsersCount)
        {
            pClient = Client;
            pClientId = ClientId;
            pDefaultLocale = DefaultLocale;
            pDefaultLocaleId = DefaultLocaleId;
            pDocumentSets = DocumentSets;
            pDocumentSetsCount = DocumentSetsCount;
            pName = Name;
            pRole = Role;
            pRoleId = RoleId;
            pSettings = Settings;
            pUsers = Users;
            pUsersCount = UsersCount;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public DivisionBase With(int? pId = Id, Reference pClient = Client, int? pClientId = ClientId, Reference pDefaultLocale = DefaultLocale, int? pDefaultLocaleId = DefaultLocaleId, List<Reference> pDocumentSets = DocumentSets, int? pDocumentSetsCount = DocumentSetsCount, string pName = Name, Reference pRole = Role, int? pRoleId = RoleId, DivisionSettings pSettings = Settings, List<Reference> pUsers = Users, int? pUsersCount = UsersCount) => 
        //	new DivisionBase(pId, pClient, pClientId, pDefaultLocale, pDefaultLocaleId, pDocumentSets, pDocumentSetsCount, pName, pRole, pRoleId, pSettings, pUsers, pUsersCount);

    }


    [Route("/division", "POST")]
    [Route("/division/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class Division : DivisionBase, IReturn<Division>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Division() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Division(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Division(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Division(int? pId, Reference pClient, int? pClientId, Reference pDefaultLocale, int? pDefaultLocaleId, List<Reference> pDocumentSets, int? pDocumentSetsCount, string pName, Reference pRole, int? pRoleId, DivisionSettings pSettings, List<Reference> pUsers, int? pUsersCount) :
            base(pId, pClient, pClientId, pDefaultLocale, pDefaultLocaleId, pDocumentSets, pDocumentSetsCount, pName, pRole, pRoleId, pSettings, pUsers, pUsersCount) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<Division>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Client),nameof(ClientId),nameof(Created),nameof(CreatorId),nameof(DefaultLocale),nameof(DefaultLocaleId),nameof(DocumentSets),nameof(DocumentSetsCount),nameof(Gestalt),nameof(Locked),nameof(Name),nameof(Role),nameof(RoleId),nameof(Settings),nameof(Updated),nameof(Users),nameof(UsersCount),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<Division>("Division",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(DocumentSets), nameof(DocumentSetsCount), nameof(DocumentSetsIds), nameof(Users), nameof(UsersCount), nameof(UsersIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<Division>();

    }
    

    [Route("/division/{Id}/copy", "POST")]
    public partial class DivisionCopy : Division {}

    public partial class DivisionSearchBase : Search<Division>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public Reference Client { get; set; }
        public List<int> ClientIds { get; set; }
        public Reference DefaultLocale { get; set; }
        public List<int> DefaultLocaleIds { get; set; }
        public List<int> DocumentSetsIds { get; set; }
        public string Name { get; set; }
        public List<string> Names { get; set; }
        public Reference Role { get; set; }
        public List<int> RoleIds { get; set; }
        public string Settings { get; set; }
        public List<string> Settingss { get; set; }
        public List<int> UsersIds { get; set; }
    }


    [Route("/division", "GET")]
    [Route("/division/version", "GET, POST")]
    [Route("/division/search", "GET, POST, DELETE")]

    public partial class DivisionSearch : DivisionSearchBase
    {
    }

    public class DivisionFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DivisionFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private DivisionSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DivisionFullTextSearch(DivisionSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Division.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Division.Updated))); }

        public bool doClient { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Division.Client))); }
        public bool doDefaultLocale { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Division.DefaultLocale))); }
        public bool doDocumentSets { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Division.DocumentSets))); }
        public bool doName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Division.Name))); }
        public bool doRole { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Division.Role))); }
        public bool doSettings { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Division.Settings))); }
        public bool doUsers { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Division.Users))); }
    }


    [Route("/division/batch", "DELETE, PATCH, POST, PUT")]

    public partial class DivisionBatch : List<Division> { }


    [Route("/division/{Id}/{Junction}/version", "GET, POST")]
    [Route("/division/{Id}/{Junction}", "GET, POST, DELETE")]
    public class DivisionJunction : DivisionSearchBase {}



}
