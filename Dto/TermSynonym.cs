//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class TermSynonymBase : Dto<TermSynonym>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TermSynonymBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TermSynonymBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TermSynonymBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TermSynonymBase(int? pId, bool pApproved, List<Reference> pBindings, int? pBindingsCount, Reference pMaster, int? pMasterId, bool pPreferred, Reference pScope, int? pScopeId, string pSynonym) : this(DocConvert.ToInt(pId)) 
        {
            Approved = pApproved;
            Bindings = pBindings;
            BindingsCount = pBindingsCount;
            Master = pMaster;
            MasterId = pMasterId;
            Preferred = pPreferred;
            Scope = pScope;
            ScopeId = pScopeId;
            Synonym = pSynonym;
        }

        [ApiMember(Name = nameof(Approved), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Approved { get; set; }
        [ApiMember(Name = nameof(ApprovedIds), Description = "Approved Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ApprovedIds { get; set; }
        [ApiMember(Name = nameof(ApprovedCount), Description = "Approved Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ApprovedCount { get; set; }


        [ApiMember(Name = nameof(Bindings), Description = "LookupTableBinding", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Bindings { get; set; }
        [ApiMember(Name = nameof(BindingsIds), Description = "LookupTableBinding Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> BindingsIds { get; set; }
        [ApiMember(Name = nameof(BindingsCount), Description = "LookupTableBinding Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? BindingsCount { get; set; }


        [ApiMember(Name = nameof(Master), Description = "TermMaster", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Master { get; set; }
        [ApiMember(Name = nameof(MasterId), Description = "Primary Key of TermMaster", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? MasterId { get; set; }


        [ApiMember(Name = nameof(Preferred), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Preferred { get; set; }
        [ApiMember(Name = nameof(PreferredIds), Description = "Preferred Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> PreferredIds { get; set; }
        [ApiMember(Name = nameof(PreferredCount), Description = "Preferred Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? PreferredCount { get; set; }


        [ApiMember(Name = nameof(Scope), Description = "Scope", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Scope { get; set; }
        [ApiMember(Name = nameof(ScopeId), Description = "Primary Key of Scope", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ScopeId { get; set; }


        [ApiMember(Name = nameof(Synonym), Description = "string", IsRequired = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Synonym { get; set; }
        [ApiMember(Name = nameof(SynonymIds), Description = "Synonym Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> SynonymIds { get; set; }
        [ApiMember(Name = nameof(SynonymCount), Description = "Synonym Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? SynonymCount { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out bool pApproved, out List<Reference> pBindings, out int? pBindingsCount, out Reference pMaster, out int? pMasterId, out bool pPreferred, out Reference pScope, out int? pScopeId, out string pSynonym)
        {
            pApproved = Approved;
            pBindings = Bindings;
            pBindingsCount = BindingsCount;
            pMaster = Master;
            pMasterId = MasterId;
            pPreferred = Preferred;
            pScope = Scope;
            pScopeId = ScopeId;
            pSynonym = Synonym;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public TermSynonymBase With(int? pId = Id, bool pApproved = Approved, List<Reference> pBindings = Bindings, int? pBindingsCount = BindingsCount, Reference pMaster = Master, int? pMasterId = MasterId, bool pPreferred = Preferred, Reference pScope = Scope, int? pScopeId = ScopeId, string pSynonym = Synonym) => 
        //	new TermSynonymBase(pId, pApproved, pBindings, pBindingsCount, pMaster, pMasterId, pPreferred, pScope, pScopeId, pSynonym);

    }


    [Route("/termsynonym", "POST")]
    [Route("/termsynonym/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class TermSynonym : TermSynonymBase, IReturn<TermSynonym>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TermSynonym() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TermSynonym(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TermSynonym(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TermSynonym(int? pId, bool pApproved, List<Reference> pBindings, int? pBindingsCount, Reference pMaster, int? pMasterId, bool pPreferred, Reference pScope, int? pScopeId, string pSynonym) :
            base(pId, pApproved, pBindings, pBindingsCount, pMaster, pMasterId, pPreferred, pScope, pScopeId, pSynonym) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<TermSynonym>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Approved),nameof(Bindings),nameof(BindingsCount),nameof(Created),nameof(CreatorId),nameof(Gestalt),nameof(Locked),nameof(Master),nameof(MasterId),nameof(Preferred),nameof(Scope),nameof(ScopeId),nameof(Synonym),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<TermSynonym>("TermSynonym",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(Bindings), nameof(BindingsCount), nameof(BindingsIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<TermSynonym>();

    }
    

    [Route("/termsynonym/{Id}/copy", "POST")]
    public partial class TermSynonymCopy : TermSynonym {}

    public partial class TermSynonymSearchBase : Search<TermSynonym>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Approved { get; set; }
        public List<int> BindingsIds { get; set; }
        public Reference Master { get; set; }
        public List<int> MasterIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Preferred { get; set; }
        public Reference Scope { get; set; }
        public List<int> ScopeIds { get; set; }
        public string Synonym { get; set; }
        public List<string> Synonyms { get; set; }
    }


    [Route("/termsynonym", "GET")]
    [Route("/termsynonym/version", "GET, POST")]
    [Route("/termsynonym/search", "GET, POST, DELETE")]

    public partial class TermSynonymSearch : TermSynonymSearchBase
    {
    }

    public class TermSynonymFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TermSynonymFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private TermSynonymSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TermSynonymFullTextSearch(TermSynonymSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermSynonym.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermSynonym.Updated))); }

        public bool doApproved { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermSynonym.Approved))); }
        public bool doBindings { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermSynonym.Bindings))); }
        public bool doMaster { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermSynonym.Master))); }
        public bool doPreferred { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermSynonym.Preferred))); }
        public bool doScope { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermSynonym.Scope))); }
        public bool doSynonym { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermSynonym.Synonym))); }
    }


    [Route("/termsynonym/batch", "DELETE, PATCH, POST, PUT")]

    public partial class TermSynonymBatch : List<TermSynonym> { }


    [Route("/termsynonym/{Id}/{Junction}/version", "GET, POST")]
    [Route("/termsynonym/{Id}/{Junction}", "GET, POST, DELETE")]
    public class TermSynonymJunction : TermSynonymSearchBase {}



}
