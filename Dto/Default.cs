
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class DefaultBase : Dto<Default>
    {
        public DefaultBase() {}

        public DefaultBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        public DefaultBase(int? id) : this(DocConvert.ToInt(id)) {}

        public DefaultBase(int? pId, Reference pDiseaseState, int? pDiseaseStateId, Reference pRole, int? pRoleId, Reference pScope, int? pScopeId, Reference pTherapeuticArea, int? pTherapeuticAreaId) : this(DocConvert.ToInt(pId)) 
        {
            DiseaseState = pDiseaseState;
            DiseaseStateId = pDiseaseStateId;
            Role = pRole;
            RoleId = pRoleId;
            Scope = pScope;
            ScopeId = pScopeId;
            TherapeuticArea = pTherapeuticArea;
            TherapeuticAreaId = pTherapeuticAreaId;
        }

        [ApiMember(Name = nameof(DiseaseState), Description = "DiseaseStateSet", IsRequired = true)]
        public Reference DiseaseState { get; set; }
        [ApiMember(Name = nameof(DiseaseStateId), Description = "Primary Key of DiseaseStateSet", IsRequired = false)]
        public int? DiseaseStateId { get; set; }


        [ApiMember(Name = nameof(Role), Description = "Role", IsRequired = false)]
        public Reference Role { get; set; }
        [ApiMember(Name = nameof(RoleId), Description = "Primary Key of Role", IsRequired = false)]
        public int? RoleId { get; set; }


        [ApiMember(Name = nameof(Scope), Description = "Scope", IsRequired = true)]
        public Reference Scope { get; set; }
        [ApiMember(Name = nameof(ScopeId), Description = "Primary Key of Scope", IsRequired = false)]
        public int? ScopeId { get; set; }


        [ApiMember(Name = nameof(TherapeuticArea), Description = "TherapeuticAreaSet", IsRequired = true)]
        public Reference TherapeuticArea { get; set; }
        [ApiMember(Name = nameof(TherapeuticAreaId), Description = "Primary Key of TherapeuticAreaSet", IsRequired = false)]
        public int? TherapeuticAreaId { get; set; }



        public void Deconstruct(out Reference pDiseaseState, out int? pDiseaseStateId, out Reference pRole, out int? pRoleId, out Reference pScope, out int? pScopeId, out Reference pTherapeuticArea, out int? pTherapeuticAreaId)
        {
            pDiseaseState = DiseaseState;
            pDiseaseStateId = DiseaseStateId;
            pRole = Role;
            pRoleId = RoleId;
            pScope = Scope;
            pScopeId = ScopeId;
            pTherapeuticArea = TherapeuticArea;
            pTherapeuticAreaId = TherapeuticAreaId;
        }

        //Not ready until C# v8.?
        //public DefaultBase With(int? pId = Id, Reference pDiseaseState = DiseaseState, int? pDiseaseStateId = DiseaseStateId, Reference pRole = Role, int? pRoleId = RoleId, Reference pScope = Scope, int? pScopeId = ScopeId, Reference pTherapeuticArea = TherapeuticArea, int? pTherapeuticAreaId = TherapeuticAreaId) => 
        //	new DefaultBase(pId, pDiseaseState, pDiseaseStateId, pRole, pRoleId, pScope, pScopeId, pTherapeuticArea, pTherapeuticAreaId);

    }


    [Route("/default", "POST")]
    [Route("/default/{Id}", "GET, PATCH, PUT")]

    public partial class Default : DefaultBase, IReturn<Default>, IDto, ICloneable
    {
        public Default() => _Constructor();

        public Default(int? id) : base(DocConvert.ToInt(id)) {}
        public Default(int id) : base(id) {}
        public Default(int? pId, Reference pDiseaseState, int? pDiseaseStateId, Reference pRole, int? pRoleId, Reference pScope, int? pScopeId, Reference pTherapeuticArea, int? pTherapeuticAreaId) :
            base(pId, pDiseaseState, pDiseaseStateId, pRole, pRoleId, pScope, pScopeId, pTherapeuticArea, pTherapeuticAreaId) { }

        public static List<string> Fields => DocTools.Fields<Default>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(DiseaseState),nameof(DiseaseStateId),nameof(Gestalt),nameof(Locked),nameof(Role),nameof(RoleId),nameof(Scope),nameof(ScopeId),nameof(TherapeuticArea),nameof(TherapeuticAreaId),nameof(Updated),nameof(VersionNo)})]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {


                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {


                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<Default>("Default",exists);

            }
        }

        [Obsolete, ApiMember(Name = nameof(VisibleFields), Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        public override List<string> VisibleFields { get => Select; set => Select = value; }



        public object Clone() => this.Copy<Default>();

    }
    

    [Route("/default/{Id}/copy", "POST")]
    public partial class DefaultCopy : Default {}

    public partial class DefaultSearchBase : Search<Default>
    {
        public int? Id { get; set; }
        public Reference DiseaseState { get; set; }
        public List<int> DiseaseStateIds { get; set; }
        public Reference Role { get; set; }
        public List<int> RoleIds { get; set; }
        public Reference Scope { get; set; }
        public List<int> ScopeIds { get; set; }
        public Reference TherapeuticArea { get; set; }
        public List<int> TherapeuticAreaIds { get; set; }
    }


    [Route("/default", "GET")]
    [Route("/default/version", "GET, POST")]
    [Route("/default/search", "GET, POST, DELETE")]

    public partial class DefaultSearch : DefaultSearchBase
    {
    }

    public class DefaultFullTextSearch
    {
        public DefaultFullTextSearch() {}
        private DefaultSearch _request;
        public DefaultFullTextSearch(DefaultSearch request) => _request = request;

        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Default.Created))); }
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Default.Updated))); }

        public bool doDiseaseState { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Default.DiseaseState))); }
        public bool doRole { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Default.Role))); }
        public bool doScope { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Default.Scope))); }
        public bool doTherapeuticArea { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Default.TherapeuticArea))); }
    }


    [Route("/default/batch", "DELETE, PATCH, POST, PUT")]

    public partial class DefaultBatch : List<Default> { }


}
