//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class BackgroundTaskBase : Dto<BackgroundTask>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BackgroundTaskBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BackgroundTaskBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BackgroundTaskBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BackgroundTaskBase(int? pId, Reference pApp, int? pAppId, Reference pChannel, int? pChannelId, string pDescription, bool pEnabled, int? pFrequency, int? pHistoryRetention, List<Reference> pItems, int? pItemsCount, bool pKeepHistory, string pLastRunVersion, bool pLogError, bool pLogInfo, string pName, int? pRowsToProcessPerIteration, bool pRunNow, string pStartAt, List<Reference> pTaskHistory, int? pTaskHistoryCount) : this(DocConvert.ToInt(pId)) 
        {
            App = pApp;
            AppId = pAppId;
            Channel = pChannel;
            ChannelId = pChannelId;
            Description = pDescription;
            Enabled = pEnabled;
            Frequency = pFrequency;
            HistoryRetention = pHistoryRetention;
            Items = pItems;
            ItemsCount = pItemsCount;
            KeepHistory = pKeepHistory;
            LastRunVersion = pLastRunVersion;
            LogError = pLogError;
            LogInfo = pLogInfo;
            Name = pName;
            RowsToProcessPerIteration = pRowsToProcessPerIteration;
            RunNow = pRunNow;
            StartAt = pStartAt;
            TaskHistory = pTaskHistory;
            TaskHistoryCount = pTaskHistoryCount;
        }

        [ApiMember(Name = nameof(App), Description = "App", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference App { get; set; }
        [ApiMember(Name = nameof(AppId), Description = "Primary Key of App", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? AppId { get; set; }


        [ApiMember(Name = nameof(Channel), Description = "QueueChannel", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Channel { get; set; }
        [ApiMember(Name = nameof(ChannelId), Description = "Primary Key of QueueChannel", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ChannelId { get; set; }


        [ApiMember(Name = nameof(Description), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Description { get; set; }
        [ApiMember(Name = nameof(DescriptionIds), Description = "Description Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> DescriptionIds { get; set; }
        [ApiMember(Name = nameof(DescriptionCount), Description = "Description Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DescriptionCount { get; set; }


        [ApiMember(Name = nameof(Enabled), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Enabled { get; set; }
        [ApiMember(Name = nameof(EnabledIds), Description = "Enabled Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> EnabledIds { get; set; }
        [ApiMember(Name = nameof(EnabledCount), Description = "Enabled Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? EnabledCount { get; set; }


        [ApiMember(Name = nameof(Frequency), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Frequency { get; set; }
        [ApiMember(Name = nameof(FrequencyIds), Description = "Frequency Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> FrequencyIds { get; set; }
        [ApiMember(Name = nameof(FrequencyCount), Description = "Frequency Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? FrequencyCount { get; set; }


        [ApiMember(Name = nameof(HistoryRetention), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? HistoryRetention { get; set; }
        [ApiMember(Name = nameof(HistoryRetentionIds), Description = "HistoryRetention Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> HistoryRetentionIds { get; set; }
        [ApiMember(Name = nameof(HistoryRetentionCount), Description = "HistoryRetention Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? HistoryRetentionCount { get; set; }


        [ApiMember(Name = nameof(Items), Description = "BackgroundTaskItem", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Items { get; set; }
        [ApiMember(Name = nameof(ItemsIds), Description = "BackgroundTaskItem Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ItemsIds { get; set; }
        [ApiMember(Name = nameof(ItemsCount), Description = "BackgroundTaskItem Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ItemsCount { get; set; }


        [ApiMember(Name = nameof(KeepHistory), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool KeepHistory { get; set; }
        [ApiMember(Name = nameof(KeepHistoryIds), Description = "KeepHistory Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> KeepHistoryIds { get; set; }
        [ApiMember(Name = nameof(KeepHistoryCount), Description = "KeepHistory Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? KeepHistoryCount { get; set; }


        [ApiMember(Name = nameof(LastRunVersion), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string LastRunVersion { get; set; }
        [ApiMember(Name = nameof(LastRunVersionIds), Description = "LastRunVersion Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> LastRunVersionIds { get; set; }
        [ApiMember(Name = nameof(LastRunVersionCount), Description = "LastRunVersion Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? LastRunVersionCount { get; set; }


        [ApiMember(Name = nameof(LogError), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool LogError { get; set; }
        [ApiMember(Name = nameof(LogErrorIds), Description = "LogError Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> LogErrorIds { get; set; }
        [ApiMember(Name = nameof(LogErrorCount), Description = "LogError Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? LogErrorCount { get; set; }


        [ApiMember(Name = nameof(LogInfo), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool LogInfo { get; set; }
        [ApiMember(Name = nameof(LogInfoIds), Description = "LogInfo Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> LogInfoIds { get; set; }
        [ApiMember(Name = nameof(LogInfoCount), Description = "LogInfo Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? LogInfoCount { get; set; }


        [ApiMember(Name = nameof(Name), Description = "string", IsRequired = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Name { get; set; }
        [ApiMember(Name = nameof(NameIds), Description = "Name Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> NameIds { get; set; }
        [ApiMember(Name = nameof(NameCount), Description = "Name Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? NameCount { get; set; }


        [ApiMember(Name = nameof(RowsToProcessPerIteration), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? RowsToProcessPerIteration { get; set; }
        [ApiMember(Name = nameof(RowsToProcessPerIterationIds), Description = "RowsToProcessPerIteration Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> RowsToProcessPerIterationIds { get; set; }
        [ApiMember(Name = nameof(RowsToProcessPerIterationCount), Description = "RowsToProcessPerIteration Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? RowsToProcessPerIterationCount { get; set; }


        [ApiMember(Name = nameof(RunNow), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool RunNow { get; set; }
        [ApiMember(Name = nameof(RunNowIds), Description = "RunNow Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> RunNowIds { get; set; }
        [ApiMember(Name = nameof(RunNowCount), Description = "RunNow Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? RunNowCount { get; set; }


        [ApiMember(Name = nameof(StartAt), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string StartAt { get; set; }
        [ApiMember(Name = nameof(StartAtIds), Description = "StartAt Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> StartAtIds { get; set; }
        [ApiMember(Name = nameof(StartAtCount), Description = "StartAt Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? StartAtCount { get; set; }


        [ApiMember(Name = nameof(TaskHistory), Description = "BackgroundTaskHistory", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> TaskHistory { get; set; }
        [ApiMember(Name = nameof(TaskHistoryIds), Description = "BackgroundTaskHistory Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> TaskHistoryIds { get; set; }
        [ApiMember(Name = nameof(TaskHistoryCount), Description = "BackgroundTaskHistory Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? TaskHistoryCount { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out Reference pApp, out int? pAppId, out Reference pChannel, out int? pChannelId, out string pDescription, out bool pEnabled, out int? pFrequency, out int? pHistoryRetention, out List<Reference> pItems, out int? pItemsCount, out bool pKeepHistory, out string pLastRunVersion, out bool pLogError, out bool pLogInfo, out string pName, out int? pRowsToProcessPerIteration, out bool pRunNow, out string pStartAt, out List<Reference> pTaskHistory, out int? pTaskHistoryCount)
        {
            pApp = App;
            pAppId = AppId;
            pChannel = Channel;
            pChannelId = ChannelId;
            pDescription = Description;
            pEnabled = Enabled;
            pFrequency = Frequency;
            pHistoryRetention = HistoryRetention;
            pItems = Items;
            pItemsCount = ItemsCount;
            pKeepHistory = KeepHistory;
            pLastRunVersion = LastRunVersion;
            pLogError = LogError;
            pLogInfo = LogInfo;
            pName = Name;
            pRowsToProcessPerIteration = RowsToProcessPerIteration;
            pRunNow = RunNow;
            pStartAt = StartAt;
            pTaskHistory = TaskHistory;
            pTaskHistoryCount = TaskHistoryCount;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public BackgroundTaskBase With(int? pId = Id, Reference pApp = App, int? pAppId = AppId, Reference pChannel = Channel, int? pChannelId = ChannelId, string pDescription = Description, bool pEnabled = Enabled, int? pFrequency = Frequency, int? pHistoryRetention = HistoryRetention, List<Reference> pItems = Items, int? pItemsCount = ItemsCount, bool pKeepHistory = KeepHistory, string pLastRunVersion = LastRunVersion, bool pLogError = LogError, bool pLogInfo = LogInfo, string pName = Name, int? pRowsToProcessPerIteration = RowsToProcessPerIteration, bool pRunNow = RunNow, string pStartAt = StartAt, List<Reference> pTaskHistory = TaskHistory, int? pTaskHistoryCount = TaskHistoryCount) => 
        //	new BackgroundTaskBase(pId, pApp, pAppId, pChannel, pChannelId, pDescription, pEnabled, pFrequency, pHistoryRetention, pItems, pItemsCount, pKeepHistory, pLastRunVersion, pLogError, pLogInfo, pName, pRowsToProcessPerIteration, pRunNow, pStartAt, pTaskHistory, pTaskHistoryCount);

    }


    [Route("/backgroundtask/{Id}", "GET, PATCH, PUT")]

    public partial class BackgroundTask : BackgroundTaskBase, IReturn<BackgroundTask>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BackgroundTask() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BackgroundTask(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BackgroundTask(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BackgroundTask(int? pId, Reference pApp, int? pAppId, Reference pChannel, int? pChannelId, string pDescription, bool pEnabled, int? pFrequency, int? pHistoryRetention, List<Reference> pItems, int? pItemsCount, bool pKeepHistory, string pLastRunVersion, bool pLogError, bool pLogInfo, string pName, int? pRowsToProcessPerIteration, bool pRunNow, string pStartAt, List<Reference> pTaskHistory, int? pTaskHistoryCount) :
            base(pId, pApp, pAppId, pChannel, pChannelId, pDescription, pEnabled, pFrequency, pHistoryRetention, pItems, pItemsCount, pKeepHistory, pLastRunVersion, pLogError, pLogInfo, pName, pRowsToProcessPerIteration, pRunNow, pStartAt, pTaskHistory, pTaskHistoryCount) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<BackgroundTask>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(App),nameof(AppId),nameof(Channel),nameof(ChannelId),nameof(Created),nameof(CreatorId),nameof(Description),nameof(Enabled),nameof(Frequency),nameof(Gestalt),nameof(HistoryRetention),nameof(Items),nameof(ItemsCount),nameof(KeepHistory),nameof(LastRunVersion),nameof(Locked),nameof(LogError),nameof(LogInfo),nameof(Name),nameof(RowsToProcessPerIteration),nameof(RunNow),nameof(StartAt),nameof(TaskHistory),nameof(TaskHistoryCount),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<BackgroundTask>("BackgroundTask",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(Items), nameof(ItemsCount), nameof(ItemsIds), nameof(TaskHistory), nameof(TaskHistoryCount), nameof(TaskHistoryIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<BackgroundTask>();

    }
    

    public partial class BackgroundTaskSearchBase : Search<BackgroundTask>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public Reference App { get; set; }
        public List<int> AppIds { get; set; }
        public Reference Channel { get; set; }
        public List<int> ChannelIds { get; set; }
        public string Description { get; set; }
        public List<string> Descriptions { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Enabled { get; set; }
        public int? Frequency { get; set; }
        public int? HistoryRetention { get; set; }
        public List<int> ItemsIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> KeepHistory { get; set; }
        public string LastRunVersion { get; set; }
        public List<string> LastRunVersions { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> LogError { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> LogInfo { get; set; }
        public string Name { get; set; }
        public List<string> Names { get; set; }
        public int? RowsToProcessPerIteration { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> RunNow { get; set; }
        public string StartAt { get; set; }
        public List<string> StartAts { get; set; }
        public List<int> TaskHistoryIds { get; set; }
    }


    [Route("/backgroundtask", "GET")]
    [Route("/backgroundtask/version", "GET, POST")]
    [Route("/backgroundtask/search", "GET, POST, DELETE")]

    public partial class BackgroundTaskSearch : BackgroundTaskSearchBase
    {
    }

    public class BackgroundTaskFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BackgroundTaskFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private BackgroundTaskSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public BackgroundTaskFullTextSearch(BackgroundTaskSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.Updated))); }

        public bool doApp { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.App))); }
        public bool doChannel { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.Channel))); }
        public bool doDescription { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.Description))); }
        public bool doEnabled { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.Enabled))); }
        public bool doFrequency { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.Frequency))); }
        public bool doHistoryRetention { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.HistoryRetention))); }
        public bool doItems { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.Items))); }
        public bool doKeepHistory { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.KeepHistory))); }
        public bool doLastRunVersion { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.LastRunVersion))); }
        public bool doLogError { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.LogError))); }
        public bool doLogInfo { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.LogInfo))); }
        public bool doName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.Name))); }
        public bool doRowsToProcessPerIteration { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.RowsToProcessPerIteration))); }
        public bool doRunNow { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.RunNow))); }
        public bool doStartAt { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.StartAt))); }
        public bool doTaskHistory { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(BackgroundTask.TaskHistory))); }
    }


    [Route("/backgroundtask/batch", "DELETE, PATCH, POST, PUT")]

    public partial class BackgroundTaskBatch : List<BackgroundTask> { }


    [Route("/backgroundtask/{Id}/{Junction}/version", "GET, POST")]
    [Route("/backgroundtask/{Id}/{Junction}", "GET, POST, DELETE")]
    public class BackgroundTaskJunction : BackgroundTaskSearchBase {}



}
