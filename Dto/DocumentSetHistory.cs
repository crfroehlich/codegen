//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class DocumentSetHistoryBase : Dto<DocumentSetHistory>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DocumentSetHistoryBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DocumentSetHistoryBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DocumentSetHistoryBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DocumentSetHistoryBase(int? pId, Reference pDocumentSet, int? pDocumentSetId, int? pEvidencePortalID, int? pFqId, int? pStudyCount, int? pStudyCountFQ) : this(DocConvert.ToInt(pId)) 
        {
            DocumentSet = pDocumentSet;
            DocumentSetId = pDocumentSetId;
            EvidencePortalID = pEvidencePortalID;
            FqId = pFqId;
            StudyCount = pStudyCount;
            StudyCountFQ = pStudyCountFQ;
        }

        [ApiMember(Name = nameof(DocumentSet), Description = "DocumentSet", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference DocumentSet { get; set; }
        [ApiMember(Name = nameof(DocumentSetId), Description = "Primary Key of DocumentSet", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DocumentSetId { get; set; }

        [ApiMember(Name = nameof(EvidencePortalID), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? EvidencePortalID { get; set; }
        [ApiMember(Name = nameof(EvidencePortalIDIds), Description = "EvidencePortalID Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> EvidencePortalIDIds { get; set; }
        [ApiMember(Name = nameof(EvidencePortalIDCount), Description = "EvidencePortalID Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? EvidencePortalIDCount { get; set; }

        [ApiMember(Name = nameof(FqId), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? FqId { get; set; }
        [ApiMember(Name = nameof(FqIdIds), Description = "FqId Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> FqIdIds { get; set; }
        [ApiMember(Name = nameof(FqIdCount), Description = "FqId Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? FqIdCount { get; set; }

        [ApiMember(Name = nameof(StudyCount), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? StudyCount { get; set; }
        [ApiMember(Name = nameof(StudyCountIds), Description = "StudyCount Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> StudyCountIds { get; set; }
        [ApiMember(Name = nameof(StudyCountCount), Description = "StudyCount Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? StudyCountCount { get; set; }

        [ApiMember(Name = nameof(StudyCountFQ), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? StudyCountFQ { get; set; }
        [ApiMember(Name = nameof(StudyCountFQIds), Description = "StudyCountFQ Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> StudyCountFQIds { get; set; }
        [ApiMember(Name = nameof(StudyCountFQCount), Description = "StudyCountFQ Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? StudyCountFQCount { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out Reference pDocumentSet, out int? pDocumentSetId, out int? pEvidencePortalID, out int? pFqId, out int? pStudyCount, out int? pStudyCountFQ)
        {
            pDocumentSet = DocumentSet;
            pDocumentSetId = DocumentSetId;
            pEvidencePortalID = EvidencePortalID;
            pFqId = FqId;
            pStudyCount = StudyCount;
            pStudyCountFQ = StudyCountFQ;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public DocumentSetHistoryBase With(int? pId = Id, Reference pDocumentSet = DocumentSet, int? pDocumentSetId = DocumentSetId, int? pEvidencePortalID = EvidencePortalID, int? pFqId = FqId, int? pStudyCount = StudyCount, int? pStudyCountFQ = StudyCountFQ) => 
        //	new DocumentSetHistoryBase(pId, pDocumentSet, pDocumentSetId, pEvidencePortalID, pFqId, pStudyCount, pStudyCountFQ);

    }


    [Route("/documentsethistory/{Id}", "GET")]

    public partial class DocumentSetHistory : DocumentSetHistoryBase, IReturn<DocumentSetHistory>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DocumentSetHistory() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DocumentSetHistory(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DocumentSetHistory(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DocumentSetHistory(int? pId, Reference pDocumentSet, int? pDocumentSetId, int? pEvidencePortalID, int? pFqId, int? pStudyCount, int? pStudyCountFQ) :
            base(pId, pDocumentSet, pDocumentSetId, pEvidencePortalID, pFqId, pStudyCount, pStudyCountFQ) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<DocumentSetHistory>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(DocumentSet),nameof(DocumentSetId),nameof(EvidencePortalID),nameof(FqId),nameof(Gestalt),nameof(Locked),nameof(StudyCount),nameof(StudyCountFQ),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<DocumentSetHistory>("DocumentSetHistory",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<DocumentSetHistory>();

    }
    

    public partial class DocumentSetHistorySearchBase : Search<DocumentSetHistory>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public Reference DocumentSet { get; set; }
        public List<int> DocumentSetIds { get; set; }
        public int? EvidencePortalID { get; set; }
        public int? FqId { get; set; }
        public int? StudyCount { get; set; }
        public int? StudyCountFQ { get; set; }
    }


    [Route("/documentsethistory", "GET")]
    [Route("/documentsethistory/version", "GET, POST")]
    [Route("/documentsethistory/search", "GET, POST, DELETE")]

    public partial class DocumentSetHistorySearch : DocumentSetHistorySearchBase
    {
    }

    public class DocumentSetHistoryFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DocumentSetHistoryFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private DocumentSetHistorySearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DocumentSetHistoryFullTextSearch(DocumentSetHistorySearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSetHistory.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSetHistory.Updated))); }

        public bool doDocumentSet { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSetHistory.DocumentSet))); }
        public bool doEvidencePortalID { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSetHistory.EvidencePortalID))); }
        public bool doFqId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSetHistory.FqId))); }
        public bool doStudyCount { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSetHistory.StudyCount))); }
        public bool doStudyCountFQ { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSetHistory.StudyCountFQ))); }
    }


    public partial class DocumentSetHistoryBatch : List<DocumentSetHistory> { }


}
