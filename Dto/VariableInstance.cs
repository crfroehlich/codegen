//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class VariableInstanceBase : Dto<VariableInstance>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public VariableInstanceBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public VariableInstanceBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public VariableInstanceBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public VariableInstanceBase(int? pId, string pData, Reference pDocument, int? pDocumentId, Reference pRule, int? pRuleId, List<Reference> pWorkflows, int? pWorkflowsCount) : this(DocConvert.ToInt(pId)) 
        {
            Data = pData;
            Document = pDocument;
            DocumentId = pDocumentId;
            Rule = pRule;
            RuleId = pRuleId;
            Workflows = pWorkflows;
            WorkflowsCount = pWorkflowsCount;
        }

        [ApiMember(Name = nameof(Data), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Data { get; set; }
        [ApiMember(Name = nameof(DataIds), Description = "Data Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> DataIds { get; set; }
        [ApiMember(Name = nameof(DataCount), Description = "Data Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DataCount { get; set; }


        [ApiMember(Name = nameof(Document), Description = "Document", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Document { get; set; }
        [ApiMember(Name = nameof(DocumentId), Description = "Primary Key of Document", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DocumentId { get; set; }


        [ApiMember(Name = nameof(Rule), Description = "VariableRule", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Rule { get; set; }
        [ApiMember(Name = nameof(RuleId), Description = "Primary Key of VariableRule", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? RuleId { get; set; }


        [ApiMember(Name = nameof(Workflows), Description = "Workflow", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Workflows { get; set; }
        [ApiMember(Name = nameof(WorkflowsIds), Description = "Workflow Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> WorkflowsIds { get; set; }
        [ApiMember(Name = nameof(WorkflowsCount), Description = "Workflow Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? WorkflowsCount { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out string pData, out Reference pDocument, out int? pDocumentId, out Reference pRule, out int? pRuleId, out List<Reference> pWorkflows, out int? pWorkflowsCount)
        {
            pData = Data;
            pDocument = Document;
            pDocumentId = DocumentId;
            pRule = Rule;
            pRuleId = RuleId;
            pWorkflows = Workflows;
            pWorkflowsCount = WorkflowsCount;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public VariableInstanceBase With(int? pId = Id, string pData = Data, Reference pDocument = Document, int? pDocumentId = DocumentId, Reference pRule = Rule, int? pRuleId = RuleId, List<Reference> pWorkflows = Workflows, int? pWorkflowsCount = WorkflowsCount) => 
        //	new VariableInstanceBase(pId, pData, pDocument, pDocumentId, pRule, pRuleId, pWorkflows, pWorkflowsCount);

    }


    [Route("/variableinstance", "POST")]
    [Route("/variableinstance/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class VariableInstance : VariableInstanceBase, IReturn<VariableInstance>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public VariableInstance() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public VariableInstance(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public VariableInstance(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public VariableInstance(int? pId, string pData, Reference pDocument, int? pDocumentId, Reference pRule, int? pRuleId, List<Reference> pWorkflows, int? pWorkflowsCount) :
            base(pId, pData, pDocument, pDocumentId, pRule, pRuleId, pWorkflows, pWorkflowsCount) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<VariableInstance>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(Data),nameof(Document),nameof(DocumentId),nameof(Gestalt),nameof(Locked),nameof(Rule),nameof(RuleId),nameof(Updated),nameof(VersionNo),nameof(Workflows),nameof(WorkflowsCount)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<VariableInstance>("VariableInstance",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(Workflows), nameof(WorkflowsCount), nameof(WorkflowsIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<VariableInstance>();

    }
    

    [Route("/variableinstance/{Id}/copy", "POST")]
    public partial class VariableInstanceCopy : VariableInstance {}

    public partial class VariableInstanceSearchBase : Search<VariableInstance>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public string Data { get; set; }
        public List<string> Datas { get; set; }
        public Reference Document { get; set; }
        public List<int> DocumentIds { get; set; }
        public Reference Rule { get; set; }
        public List<int> RuleIds { get; set; }
        public List<int> WorkflowsIds { get; set; }
    }


    [Route("/variableinstance", "GET")]
    [Route("/variableinstance/version", "GET, POST")]
    [Route("/variableinstance/search", "GET, POST, DELETE")]

    public partial class VariableInstanceSearch : VariableInstanceSearchBase
    {
    }

    public class VariableInstanceFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public VariableInstanceFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private VariableInstanceSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public VariableInstanceFullTextSearch(VariableInstanceSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(VariableInstance.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(VariableInstance.Updated))); }

        public bool doData { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(VariableInstance.Data))); }
        public bool doDocument { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(VariableInstance.Document))); }
        public bool doRule { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(VariableInstance.Rule))); }
        public bool doWorkflows { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(VariableInstance.Workflows))); }
    }


    [Route("/variableinstance/batch", "DELETE, PATCH, POST, PUT")]

    public partial class VariableInstanceBatch : List<VariableInstance> { }


    [Route("/variableinstance/{Id}/{Junction}/version", "GET, POST")]
    [Route("/variableinstance/{Id}/{Junction}", "GET, POST, DELETE")]
    public class VariableInstanceJunction : VariableInstanceSearchBase {}



}
