//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Security;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;

namespace Services.Dto
{
    public abstract partial class AttributeBase : ValueWrapper
    {
        public AttributeBase() {}

        public AttributeBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        public AttributeBase(int? id) : this(DocConvert.ToInt(id)) {}
    
        [ApiMember(Name = nameof(AttributeName), Description = "LookupTable", IsRequired = true)]
        public Reference AttributeName { get; set; }
        [ApiMember(Name = nameof(AttributeNameId), Description = "Primary Key of LookupTable", IsRequired = false)]
        public int? AttributeNameId { get; set; }


        [ApiMember(Name = nameof(AttributeType), Description = "LookupTable", IsRequired = false)]
        [ApiAllowableValues("Includes", Values = new string[] {@"Standard",@"Change",@"% Change",@"Time Since",@"Time To",@"Duration",@"Not In Study"})]
        public Reference AttributeType { get; set; }
        [ApiMember(Name = nameof(AttributeTypeId), Description = "Primary Key of LookupTable", IsRequired = false)]
        public int? AttributeTypeId { get; set; }


        [ApiMember(Name = nameof(Interval), Description = "AttributeInterval", IsRequired = true)]
        public AttributeInterval Interval { get; set; }
        [ApiMember(Name = nameof(IntervalId), Description = "Primary Key of AttributeInterval", IsRequired = false)]
        public int? IntervalId { get; set; }


        [ApiMember(Name = nameof(IsCharacteristic), Description = "bool", IsRequired = false)]
        public bool IsCharacteristic { get; set; }


        [ApiMember(Name = nameof(IsOutcome), Description = "bool", IsRequired = false)]
        public bool IsOutcome { get; set; }


        [ApiMember(Name = nameof(IsPositive), Description = "bool?", IsRequired = false)]
        public bool? IsPositive { get; set; }


        [ApiMember(Name = nameof(UniqueKey), Description = "string", IsRequired = false)]
        public string UniqueKey { get; set; }


    }

    [Route("/attribute", "POST")]
    [Route("/profile/attribute", "POST")]
    [Route("/attribute/{Id}", "GET, PATCH, PUT, DELETE")]
    [Route("/profile/attribute/{Id}", "GET, PATCH, PUT, DELETE")]
    public partial class Attribute : AttributeBase, IReturn<Attribute>, IDto
    {
        public Attribute()
        {
            _Constructor();
        }

        public Attribute(int? id) : base(DocConvert.ToInt(id)) {}
        public Attribute(int id) : base(id) {}
        
        #region Fields
        
        public bool? ShouldSerialize(string field)
        {
            if (DocTools.AreEqual(nameof(VisibleFields), field)) return false;
            if (DocTools.AreEqual(nameof(Fields), field)) return false;
            if (DocTools.AreEqual(nameof(AssignFields), field)) return false;
            if (DocTools.AreEqual(nameof(IgnoreCache), field)) return false;
            if (DocTools.AreEqual(nameof(Id), field)) return true;
            return true == VisibleFields?.Matches(field, true);
        }

        public static List<string> Fields => DocTools.Fields<Attribute>();

        private List<string> _VisibleFields;
        [ApiMember(Name = "VisibleFields", Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(AttributeName),nameof(AttributeNameId),nameof(AttributeType),nameof(AttributeTypeId),nameof(Created),nameof(CreatorId),nameof(Gestalt),nameof(Interval),nameof(IntervalId),nameof(IsCharacteristic),nameof(IsOutcome),nameof(IsPositive),nameof(Locked),nameof(UniqueKey),nameof(Updated),nameof(VersionNo)})]
        public new List<string> VisibleFields
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _VisibleFields)
                {
                    _VisibleFields = DocPermissionFactory.RemoveNonEssentialFields(Fields);
                }
                return _VisibleFields;
            }
            set
            {
                _VisibleFields = Fields;
            }
        }

        #endregion Fields
    }
    
    [Route("/Attribute/{Id}/copy", "POST")]
    [Route("/profile/Attribute/{Id}/copy", "POST")]
    public partial class AttributeCopy : Attribute {}
    [Route("/attribute", "GET")]
    [Route("/profile/attribute", "GET")]
    [Route("/attribute/search", "GET, POST, DELETE")]
    [Route("/profile/attribute/search", "GET, POST, DELETE")]
    public partial class AttributeSearch : Search<Attribute>
    {
        public Reference AttributeName { get; set; }
        public List<int> AttributeNameIds { get; set; }
        public List<string> AttributeNameNames { get; set; }
        public Reference AttributeType { get; set; }
        public List<int> AttributeTypeIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Standard",@"Change",@"% Change",@"Time Since",@"Time To",@"Duration",@"Not In Study"})]
        public List<string> AttributeTypeNames { get; set; }
        public Reference Interval { get; set; }
        public List<int> IntervalIds { get; set; }
        public bool? IsCharacteristic { get; set; }
        public bool? IsOutcome { get; set; }
        public bool? IsPositive { get; set; }
        public string UniqueKey { get; set; }
    }
    
    public class AttributeFullTextSearch
    {
        private AttributeSearch _request;
        public AttributeFullTextSearch(AttributeSearch request) => _request = request;
        
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        public bool doCreated { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Attribute.Created))); }
        public bool doUpdated { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Attribute.Updated))); }
        
        public bool doAttributeName { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Attribute.AttributeName))); }
        public bool doAttributeType { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Attribute.AttributeType))); }
        public bool doInterval { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Attribute.Interval))); }
        public bool doIsCharacteristic { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Attribute.IsCharacteristic))); }
        public bool doIsOutcome { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Attribute.IsOutcome))); }
        public bool doIsPositive { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Attribute.IsPositive))); }
        public bool doUniqueKey { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Attribute.UniqueKey))); }
        public bool doValueType { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Attribute.ValueType))); }
    }

    [Route("/attribute/version", "GET, POST")]
    public partial class AttributeVersion : AttributeSearch {}

    [Route("/attribute/batch", "DELETE, PATCH, POST, PUT")]
    [Route("/profile/attribute/batch", "DELETE, PATCH, POST, PUT")]
    public partial class AttributeBatch : List<Attribute> { }

    [Route("/admin/attribute/ids", "GET, POST")]
    public class AttributeIds
    {
        public bool All { get; set; }
    }
}