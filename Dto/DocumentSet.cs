//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.Dto
{
    public abstract partial class DocumentSetBase : Dto<DocumentSet>
    {
        public DocumentSetBase() {}

        public DocumentSetBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        public DocumentSetBase(int? id) : this(DocConvert.ToInt(id)) {}

        public DocumentSetBase(int? pId, string pAdditionalCriteria, List<Reference> pCharacteristics, int? pCharacteristicsCount, List<Reference> pClients, int? pClientsCount, List<Reference> pComparators, int? pComparatorsCount, bool pConfidential, string pDataCollection, List<Reference> pDivisions, int? pDivisionsCount, List<Reference> pDocuments, int? pDocumentsCount, List<Reference> pDocumentSets, int? pDocumentSetsCount, int? pEvidencePortalId, string pExtractionProtocol, int? pFqId, int? pFramedQuestionId, string pGeneralScope, List<Reference> pHistories, int? pHistoriesCount, int? pImportPriority, List<Reference> pImports, int? pImportsCount, string pIndications, List<Reference> pInterventions, int? pInterventionsCount, int? pLibraryPackageId, string pName, string pNotes, string pOriginalComparators, string pOriginalDatabase, string pOriginalDesigns, string pOriginalInterventions, string pOriginalOutcomes, string pOriginalSearch, List<Reference> pOutcomes, int? pOutcomesCount, Reference pOwner, int? pOwnerId, string pParticipants, string pPRISMA, List<Reference> pProjects, int? pProjectsCount, Reference pProjectTeam, int? pProjectTeamId, int? pProtocolReferenceId, string pQUOROM, List<Reference> pScopes, int? pScopesCount, DateTime? pSearchEnd, DateTime? pSearchStart, string pSearchStrategy, DateTime? pSearchUpdated, string pSelectionCriteria, string pSettings, bool pShowEtw, List<Reference> pStats, int? pStatsCount, List<Reference> pStudyDesigns, int? pStudyDesignsCount, Reference pType, int? pTypeId, int? pUpdateFrequency, List<Reference> pUsers, int? pUsersCount) : this(DocConvert.ToInt(pId)) 
        {
            AdditionalCriteria = pAdditionalCriteria;
            Characteristics = pCharacteristics;
            CharacteristicsCount = pCharacteristicsCount;
            Clients = pClients;
            ClientsCount = pClientsCount;
            Comparators = pComparators;
            ComparatorsCount = pComparatorsCount;
            Confidential = pConfidential;
            DataCollection = pDataCollection;
            Divisions = pDivisions;
            DivisionsCount = pDivisionsCount;
            Documents = pDocuments;
            DocumentsCount = pDocumentsCount;
            DocumentSets = pDocumentSets;
            DocumentSetsCount = pDocumentSetsCount;
            EvidencePortalId = pEvidencePortalId;
            ExtractionProtocol = pExtractionProtocol;
            FqId = pFqId;
            FramedQuestionId = pFramedQuestionId;
            GeneralScope = pGeneralScope;
            Histories = pHistories;
            HistoriesCount = pHistoriesCount;
            ImportPriority = pImportPriority;
            Imports = pImports;
            ImportsCount = pImportsCount;
            Indications = pIndications;
            Interventions = pInterventions;
            InterventionsCount = pInterventionsCount;
            LibraryPackageId = pLibraryPackageId;
            Name = pName;
            Notes = pNotes;
            OriginalComparators = pOriginalComparators;
            OriginalDatabase = pOriginalDatabase;
            OriginalDesigns = pOriginalDesigns;
            OriginalInterventions = pOriginalInterventions;
            OriginalOutcomes = pOriginalOutcomes;
            OriginalSearch = pOriginalSearch;
            Outcomes = pOutcomes;
            OutcomesCount = pOutcomesCount;
            Owner = pOwner;
            OwnerId = pOwnerId;
            Participants = pParticipants;
            PRISMA = pPRISMA;
            Projects = pProjects;
            ProjectsCount = pProjectsCount;
            ProjectTeam = pProjectTeam;
            ProjectTeamId = pProjectTeamId;
            ProtocolReferenceId = pProtocolReferenceId;
            QUOROM = pQUOROM;
            Scopes = pScopes;
            ScopesCount = pScopesCount;
            SearchEnd = pSearchEnd;
            SearchStart = pSearchStart;
            SearchStrategy = pSearchStrategy;
            SearchUpdated = pSearchUpdated;
            SelectionCriteria = pSelectionCriteria;
            Settings = pSettings;
            ShowEtw = pShowEtw;
            Stats = pStats;
            StatsCount = pStatsCount;
            StudyDesigns = pStudyDesigns;
            StudyDesignsCount = pStudyDesignsCount;
            Type = pType;
            TypeId = pTypeId;
            UpdateFrequency = pUpdateFrequency;
            Users = pUsers;
            UsersCount = pUsersCount;
        }

        [ApiMember(Name = nameof(AdditionalCriteria), Description = "string", IsRequired = false)]
        public string AdditionalCriteria { get; set; }


        [ApiMember(Name = nameof(Characteristics), Description = "Characteristic", IsRequired = false)]
        public List<Reference> Characteristics { get; set; }
        public int? CharacteristicsCount { get; set; }


        [ApiMember(Name = nameof(Clients), Description = "Client", IsRequired = false)]
        public List<Reference> Clients { get; set; }
        public int? ClientsCount { get; set; }


        [ApiMember(Name = nameof(Comparators), Description = "Comparator", IsRequired = false)]
        public List<Reference> Comparators { get; set; }
        public int? ComparatorsCount { get; set; }


        [ApiMember(Name = nameof(Confidential), Description = "bool", IsRequired = false)]
        public bool Confidential { get; set; }


        [ApiMember(Name = nameof(DataCollection), Description = "string", IsRequired = false)]
        public string DataCollection { get; set; }


        [ApiMember(Name = nameof(Divisions), Description = "Division", IsRequired = false)]
        public List<Reference> Divisions { get; set; }
        public int? DivisionsCount { get; set; }


        [ApiMember(Name = nameof(Documents), Description = "Document", IsRequired = false)]
        public List<Reference> Documents { get; set; }
        public int? DocumentsCount { get; set; }


        [ApiMember(Name = nameof(DocumentSets), Description = "DocumentSet", IsRequired = false)]
        public List<Reference> DocumentSets { get; set; }
        public int? DocumentSetsCount { get; set; }


        [ApiMember(Name = nameof(EvidencePortalId), Description = "int?", IsRequired = false)]
        public int? EvidencePortalId { get; set; }


        [ApiMember(Name = nameof(ExtractionProtocol), Description = "string", IsRequired = false)]
        public string ExtractionProtocol { get; set; }


        [ApiMember(Name = nameof(FqId), Description = "int?", IsRequired = false)]
        public int? FqId { get; set; }


        [ApiMember(Name = nameof(FramedQuestionId), Description = "int?", IsRequired = false)]
        public int? FramedQuestionId { get; set; }


        [ApiMember(Name = nameof(GeneralScope), Description = "string", IsRequired = false)]
        public string GeneralScope { get; set; }


        [ApiMember(Name = nameof(Histories), Description = "DocumentSetHistory", IsRequired = false)]
        public List<Reference> Histories { get; set; }
        public int? HistoriesCount { get; set; }


        [ApiMember(Name = nameof(ImportPriority), Description = "int?", IsRequired = false)]
        public int? ImportPriority { get; set; }


        [ApiMember(Name = nameof(Imports), Description = "ImportData", IsRequired = false)]
        public List<Reference> Imports { get; set; }
        public int? ImportsCount { get; set; }


        [ApiMember(Name = nameof(Indications), Description = "string", IsRequired = false)]
        public string Indications { get; set; }


        [ApiMember(Name = nameof(Interventions), Description = "Intervention", IsRequired = false)]
        public List<Reference> Interventions { get; set; }
        public int? InterventionsCount { get; set; }


        [ApiMember(Name = nameof(LibraryPackageId), Description = "int?", IsRequired = false)]
        public int? LibraryPackageId { get; set; }


        [ApiMember(Name = nameof(Name), Description = "string", IsRequired = true)]
        public string Name { get; set; }


        [ApiMember(Name = nameof(Notes), Description = "string", IsRequired = false)]
        public string Notes { get; set; }


        [ApiMember(Name = nameof(OriginalComparators), Description = "string", IsRequired = false)]
        public string OriginalComparators { get; set; }


        [ApiMember(Name = nameof(OriginalDatabase), Description = "string", IsRequired = false)]
        public string OriginalDatabase { get; set; }


        [ApiMember(Name = nameof(OriginalDesigns), Description = "string", IsRequired = false)]
        public string OriginalDesigns { get; set; }


        [ApiMember(Name = nameof(OriginalInterventions), Description = "string", IsRequired = false)]
        public string OriginalInterventions { get; set; }


        [ApiMember(Name = nameof(OriginalOutcomes), Description = "string", IsRequired = false)]
        public string OriginalOutcomes { get; set; }


        [ApiMember(Name = nameof(OriginalSearch), Description = "string", IsRequired = false)]
        public string OriginalSearch { get; set; }


        [ApiMember(Name = nameof(Outcomes), Description = "Outcome", IsRequired = false)]
        public List<Reference> Outcomes { get; set; }
        public int? OutcomesCount { get; set; }


        [ApiMember(Name = nameof(Owner), Description = "DocumentSet", IsRequired = false)]
        public Reference Owner { get; set; }
        [ApiMember(Name = nameof(OwnerId), Description = "Primary Key of DocumentSet", IsRequired = false)]
        public int? OwnerId { get; set; }


        [ApiMember(Name = nameof(Participants), Description = "string", IsRequired = false)]
        public string Participants { get; set; }


        [ApiMember(Name = nameof(PRISMA), Description = "string", IsRequired = false)]
        public string PRISMA { get; set; }


        [ApiMember(Name = nameof(Projects), Description = "Project", IsRequired = false)]
        public List<Reference> Projects { get; set; }
        public int? ProjectsCount { get; set; }


        [ApiMember(Name = nameof(ProjectTeam), Description = "Team", IsRequired = false)]
        public Reference ProjectTeam { get; set; }
        [ApiMember(Name = nameof(ProjectTeamId), Description = "Primary Key of Team", IsRequired = false)]
        public int? ProjectTeamId { get; set; }


        [ApiMember(Name = nameof(ProtocolReferenceId), Description = "int?", IsRequired = false)]
        public int? ProtocolReferenceId { get; set; }


        [ApiMember(Name = nameof(QUOROM), Description = "string", IsRequired = false)]
        public string QUOROM { get; set; }


        [ApiMember(Name = nameof(Scopes), Description = "Scope", IsRequired = false)]
        public List<Reference> Scopes { get; set; }
        public int? ScopesCount { get; set; }


        [ApiMember(Name = nameof(SearchEnd), Description = "DateTime?", IsRequired = false)]
        public DateTime? SearchEnd { get; set; }


        [ApiMember(Name = nameof(SearchStart), Description = "DateTime?", IsRequired = false)]
        public DateTime? SearchStart { get; set; }


        [ApiMember(Name = nameof(SearchStrategy), Description = "string", IsRequired = false)]
        public string SearchStrategy { get; set; }


        [ApiMember(Name = nameof(SearchUpdated), Description = "DateTime?", IsRequired = false)]
        public DateTime? SearchUpdated { get; set; }


        [ApiMember(Name = nameof(SelectionCriteria), Description = "string", IsRequired = false)]
        public string SelectionCriteria { get; set; }


        [ApiMember(Name = nameof(Settings), Description = "string", IsRequired = false)]
        public string Settings { get; set; }


        [ApiMember(Name = nameof(ShowEtw), Description = "bool", IsRequired = false)]
        public bool ShowEtw { get; set; }


        [ApiMember(Name = nameof(Stats), Description = "StatsStudySet", IsRequired = false)]
        public List<Reference> Stats { get; set; }
        public int? StatsCount { get; set; }


        [ApiMember(Name = nameof(StudyDesigns), Description = "StudyDesign", IsRequired = false)]
        public List<Reference> StudyDesigns { get; set; }
        public int? StudyDesignsCount { get; set; }


        [ApiAllowableValues("Includes", Values = new string[] {@"Data Set",@"Disease State",@"Global",@"Library",@"SERVE Portal",@"Therapeutic Area"})]
        [ApiMember(Name = nameof(Type), Description = "LookupTable", IsRequired = false)]
        public Reference Type { get; set; }
        [ApiMember(Name = nameof(TypeId), Description = "Primary Key of LookupTable", IsRequired = false)]
        public int? TypeId { get; set; }


        [ApiMember(Name = nameof(UpdateFrequency), Description = "int?", IsRequired = false)]
        public int? UpdateFrequency { get; set; }


        [ApiMember(Name = nameof(Users), Description = "User", IsRequired = false)]
        public List<Reference> Users { get; set; }
        public int? UsersCount { get; set; }



        public void Deconstruct(out string pAdditionalCriteria, out List<Reference> pCharacteristics, out int? pCharacteristicsCount, out List<Reference> pClients, out int? pClientsCount, out List<Reference> pComparators, out int? pComparatorsCount, out bool pConfidential, out string pDataCollection, out List<Reference> pDivisions, out int? pDivisionsCount, out List<Reference> pDocuments, out int? pDocumentsCount, out List<Reference> pDocumentSets, out int? pDocumentSetsCount, out int? pEvidencePortalId, out string pExtractionProtocol, out int? pFqId, out int? pFramedQuestionId, out string pGeneralScope, out List<Reference> pHistories, out int? pHistoriesCount, out int? pImportPriority, out List<Reference> pImports, out int? pImportsCount, out string pIndications, out List<Reference> pInterventions, out int? pInterventionsCount, out int? pLibraryPackageId, out string pName, out string pNotes, out string pOriginalComparators, out string pOriginalDatabase, out string pOriginalDesigns, out string pOriginalInterventions, out string pOriginalOutcomes, out string pOriginalSearch, out List<Reference> pOutcomes, out int? pOutcomesCount, out Reference pOwner, out int? pOwnerId, out string pParticipants, out string pPRISMA, out List<Reference> pProjects, out int? pProjectsCount, out Reference pProjectTeam, out int? pProjectTeamId, out int? pProtocolReferenceId, out string pQUOROM, out List<Reference> pScopes, out int? pScopesCount, out DateTime? pSearchEnd, out DateTime? pSearchStart, out string pSearchStrategy, out DateTime? pSearchUpdated, out string pSelectionCriteria, out string pSettings, out bool pShowEtw, out List<Reference> pStats, out int? pStatsCount, out List<Reference> pStudyDesigns, out int? pStudyDesignsCount, out Reference pType, out int? pTypeId, out int? pUpdateFrequency, out List<Reference> pUsers, out int? pUsersCount)
        {
            pAdditionalCriteria = AdditionalCriteria;
            pCharacteristics = Characteristics;
            pCharacteristicsCount = CharacteristicsCount;
            pClients = Clients;
            pClientsCount = ClientsCount;
            pComparators = Comparators;
            pComparatorsCount = ComparatorsCount;
            pConfidential = Confidential;
            pDataCollection = DataCollection;
            pDivisions = Divisions;
            pDivisionsCount = DivisionsCount;
            pDocuments = Documents;
            pDocumentsCount = DocumentsCount;
            pDocumentSets = DocumentSets;
            pDocumentSetsCount = DocumentSetsCount;
            pEvidencePortalId = EvidencePortalId;
            pExtractionProtocol = ExtractionProtocol;
            pFqId = FqId;
            pFramedQuestionId = FramedQuestionId;
            pGeneralScope = GeneralScope;
            pHistories = Histories;
            pHistoriesCount = HistoriesCount;
            pImportPriority = ImportPriority;
            pImports = Imports;
            pImportsCount = ImportsCount;
            pIndications = Indications;
            pInterventions = Interventions;
            pInterventionsCount = InterventionsCount;
            pLibraryPackageId = LibraryPackageId;
            pName = Name;
            pNotes = Notes;
            pOriginalComparators = OriginalComparators;
            pOriginalDatabase = OriginalDatabase;
            pOriginalDesigns = OriginalDesigns;
            pOriginalInterventions = OriginalInterventions;
            pOriginalOutcomes = OriginalOutcomes;
            pOriginalSearch = OriginalSearch;
            pOutcomes = Outcomes;
            pOutcomesCount = OutcomesCount;
            pOwner = Owner;
            pOwnerId = OwnerId;
            pParticipants = Participants;
            pPRISMA = PRISMA;
            pProjects = Projects;
            pProjectsCount = ProjectsCount;
            pProjectTeam = ProjectTeam;
            pProjectTeamId = ProjectTeamId;
            pProtocolReferenceId = ProtocolReferenceId;
            pQUOROM = QUOROM;
            pScopes = Scopes;
            pScopesCount = ScopesCount;
            pSearchEnd = SearchEnd;
            pSearchStart = SearchStart;
            pSearchStrategy = SearchStrategy;
            pSearchUpdated = SearchUpdated;
            pSelectionCriteria = SelectionCriteria;
            pSettings = Settings;
            pShowEtw = ShowEtw;
            pStats = Stats;
            pStatsCount = StatsCount;
            pStudyDesigns = StudyDesigns;
            pStudyDesignsCount = StudyDesignsCount;
            pType = Type;
            pTypeId = TypeId;
            pUpdateFrequency = UpdateFrequency;
            pUsers = Users;
            pUsersCount = UsersCount;
        }

        //Not ready until C# v8.?
        //public DocumentSetBase With(int? pId = Id, string pAdditionalCriteria = AdditionalCriteria, List<Reference> pCharacteristics = Characteristics, int? pCharacteristicsCount = CharacteristicsCount, List<Reference> pClients = Clients, int? pClientsCount = ClientsCount, List<Reference> pComparators = Comparators, int? pComparatorsCount = ComparatorsCount, bool pConfidential = Confidential, string pDataCollection = DataCollection, List<Reference> pDivisions = Divisions, int? pDivisionsCount = DivisionsCount, List<Reference> pDocuments = Documents, int? pDocumentsCount = DocumentsCount, List<Reference> pDocumentSets = DocumentSets, int? pDocumentSetsCount = DocumentSetsCount, int? pEvidencePortalId = EvidencePortalId, string pExtractionProtocol = ExtractionProtocol, int? pFqId = FqId, int? pFramedQuestionId = FramedQuestionId, string pGeneralScope = GeneralScope, List<Reference> pHistories = Histories, int? pHistoriesCount = HistoriesCount, int? pImportPriority = ImportPriority, List<Reference> pImports = Imports, int? pImportsCount = ImportsCount, string pIndications = Indications, List<Reference> pInterventions = Interventions, int? pInterventionsCount = InterventionsCount, int? pLibraryPackageId = LibraryPackageId, string pName = Name, string pNotes = Notes, string pOriginalComparators = OriginalComparators, string pOriginalDatabase = OriginalDatabase, string pOriginalDesigns = OriginalDesigns, string pOriginalInterventions = OriginalInterventions, string pOriginalOutcomes = OriginalOutcomes, string pOriginalSearch = OriginalSearch, List<Reference> pOutcomes = Outcomes, int? pOutcomesCount = OutcomesCount, Reference pOwner = Owner, int? pOwnerId = OwnerId, string pParticipants = Participants, string pPRISMA = PRISMA, List<Reference> pProjects = Projects, int? pProjectsCount = ProjectsCount, Reference pProjectTeam = ProjectTeam, int? pProjectTeamId = ProjectTeamId, int? pProtocolReferenceId = ProtocolReferenceId, string pQUOROM = QUOROM, List<Reference> pScopes = Scopes, int? pScopesCount = ScopesCount, DateTime? pSearchEnd = SearchEnd, DateTime? pSearchStart = SearchStart, string pSearchStrategy = SearchStrategy, DateTime? pSearchUpdated = SearchUpdated, string pSelectionCriteria = SelectionCriteria, string pSettings = Settings, bool pShowEtw = ShowEtw, List<Reference> pStats = Stats, int? pStatsCount = StatsCount, List<Reference> pStudyDesigns = StudyDesigns, int? pStudyDesignsCount = StudyDesignsCount, Reference pType = Type, int? pTypeId = TypeId, int? pUpdateFrequency = UpdateFrequency, List<Reference> pUsers = Users, int? pUsersCount = UsersCount) => 
        //	new DocumentSetBase(pId, pAdditionalCriteria, pCharacteristics, pCharacteristicsCount, pClients, pClientsCount, pComparators, pComparatorsCount, pConfidential, pDataCollection, pDivisions, pDivisionsCount, pDocuments, pDocumentsCount, pDocumentSets, pDocumentSetsCount, pEvidencePortalId, pExtractionProtocol, pFqId, pFramedQuestionId, pGeneralScope, pHistories, pHistoriesCount, pImportPriority, pImports, pImportsCount, pIndications, pInterventions, pInterventionsCount, pLibraryPackageId, pName, pNotes, pOriginalComparators, pOriginalDatabase, pOriginalDesigns, pOriginalInterventions, pOriginalOutcomes, pOriginalSearch, pOutcomes, pOutcomesCount, pOwner, pOwnerId, pParticipants, pPRISMA, pProjects, pProjectsCount, pProjectTeam, pProjectTeamId, pProtocolReferenceId, pQUOROM, pScopes, pScopesCount, pSearchEnd, pSearchStart, pSearchStrategy, pSearchUpdated, pSelectionCriteria, pSettings, pShowEtw, pStats, pStatsCount, pStudyDesigns, pStudyDesignsCount, pType, pTypeId, pUpdateFrequency, pUsers, pUsersCount);

    }

    [Route("/documentset", "POST")]
    [Route("/documentset/{Id}", "GET, PATCH, PUT, DELETE")]
    public partial class DocumentSet : DocumentSetBase, IReturn<DocumentSet>, IDto, ICloneable
    {
        public DocumentSet()
        {
            _Constructor();
        }

        public DocumentSet(int? id) : base(DocConvert.ToInt(id)) {}
        public DocumentSet(int id) : base(id) {}
        public DocumentSet(int? pId, string pAdditionalCriteria, List<Reference> pCharacteristics, int? pCharacteristicsCount, List<Reference> pClients, int? pClientsCount, List<Reference> pComparators, int? pComparatorsCount, bool pConfidential, string pDataCollection, List<Reference> pDivisions, int? pDivisionsCount, List<Reference> pDocuments, int? pDocumentsCount, List<Reference> pDocumentSets, int? pDocumentSetsCount, int? pEvidencePortalId, string pExtractionProtocol, int? pFqId, int? pFramedQuestionId, string pGeneralScope, List<Reference> pHistories, int? pHistoriesCount, int? pImportPriority, List<Reference> pImports, int? pImportsCount, string pIndications, List<Reference> pInterventions, int? pInterventionsCount, int? pLibraryPackageId, string pName, string pNotes, string pOriginalComparators, string pOriginalDatabase, string pOriginalDesigns, string pOriginalInterventions, string pOriginalOutcomes, string pOriginalSearch, List<Reference> pOutcomes, int? pOutcomesCount, Reference pOwner, int? pOwnerId, string pParticipants, string pPRISMA, List<Reference> pProjects, int? pProjectsCount, Reference pProjectTeam, int? pProjectTeamId, int? pProtocolReferenceId, string pQUOROM, List<Reference> pScopes, int? pScopesCount, DateTime? pSearchEnd, DateTime? pSearchStart, string pSearchStrategy, DateTime? pSearchUpdated, string pSelectionCriteria, string pSettings, bool pShowEtw, List<Reference> pStats, int? pStatsCount, List<Reference> pStudyDesigns, int? pStudyDesignsCount, Reference pType, int? pTypeId, int? pUpdateFrequency, List<Reference> pUsers, int? pUsersCount) : 
            base(pId, pAdditionalCriteria, pCharacteristics, pCharacteristicsCount, pClients, pClientsCount, pComparators, pComparatorsCount, pConfidential, pDataCollection, pDivisions, pDivisionsCount, pDocuments, pDocumentsCount, pDocumentSets, pDocumentSetsCount, pEvidencePortalId, pExtractionProtocol, pFqId, pFramedQuestionId, pGeneralScope, pHistories, pHistoriesCount, pImportPriority, pImports, pImportsCount, pIndications, pInterventions, pInterventionsCount, pLibraryPackageId, pName, pNotes, pOriginalComparators, pOriginalDatabase, pOriginalDesigns, pOriginalInterventions, pOriginalOutcomes, pOriginalSearch, pOutcomes, pOutcomesCount, pOwner, pOwnerId, pParticipants, pPRISMA, pProjects, pProjectsCount, pProjectTeam, pProjectTeamId, pProtocolReferenceId, pQUOROM, pScopes, pScopesCount, pSearchEnd, pSearchStart, pSearchStrategy, pSearchUpdated, pSelectionCriteria, pSettings, pShowEtw, pStats, pStatsCount, pStudyDesigns, pStudyDesignsCount, pType, pTypeId, pUpdateFrequency, pUsers, pUsersCount) { }
        #region Fields

        public new bool? ShouldSerialize(string field)
        {
            //Allow individual classes to specify their own logic
            var manualOverride = _ShouldSerialize(field);
            if(null != manualOverride) return manualOverride;

            if (IgnoredSelect.Matches(field, true)) return false;
            var ret = MandatorySelect.Matches(field, true) || true == Select?.Matches(field, true);
            return ret;
        }

        public static List<string> Fields => DocTools.Fields<DocumentSet>();

        private List<string> _Select;
        [ApiMember(Name = "Select", Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(AdditionalCriteria),nameof(Characteristics),nameof(CharacteristicsCount),nameof(Clients),nameof(ClientsCount),nameof(Comparators),nameof(ComparatorsCount),nameof(Confidential),nameof(Created),nameof(CreatorId),nameof(DataCollection),nameof(Divisions),nameof(DivisionsCount),nameof(Documents),nameof(DocumentsCount),nameof(DocumentSets),nameof(DocumentSetsCount),nameof(EvidencePortalId),nameof(ExtractionProtocol),nameof(FqId),nameof(FramedQuestionId),nameof(GeneralScope),nameof(Gestalt),nameof(Histories),nameof(HistoriesCount),nameof(ImportPriority),nameof(Imports),nameof(ImportsCount),nameof(Indications),nameof(Interventions),nameof(InterventionsCount),nameof(LibraryPackageId),nameof(Locked),nameof(Name),nameof(Notes),nameof(OriginalComparators),nameof(OriginalDatabase),nameof(OriginalDesigns),nameof(OriginalInterventions),nameof(OriginalOutcomes),nameof(OriginalSearch),nameof(Outcomes),nameof(OutcomesCount),nameof(Owner),nameof(OwnerId),nameof(Participants),nameof(PRISMA),nameof(Projects),nameof(ProjectsCount),nameof(ProjectTeam),nameof(ProjectTeamId),nameof(ProtocolReferenceId),nameof(QUOROM),nameof(Scopes),nameof(ScopesCount),nameof(SearchEnd),nameof(SearchStart),nameof(SearchStrategy),nameof(SearchUpdated),nameof(SelectionCriteria),nameof(Settings),nameof(ShowEtw),nameof(Stats),nameof(StatsCount),nameof(StudyDesigns),nameof(StudyDesignsCount),nameof(Type),nameof(TypeId),nameof(Updated),nameof(UpdateFrequency),nameof(Users),nameof(UsersCount),nameof(VersionNo)})]
        public new List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {
                    _Select = DocWebSession.GetTypeSelect(this);
                }
                return _Select;
            }
            set
            {
                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<DocumentSet>("DocumentSet",exists);
            }
        }

        #endregion Fields
        private List<string> _collections = new List<string>
        {
            nameof(Characteristics), nameof(CharacteristicsCount), nameof(Clients), nameof(ClientsCount), nameof(Comparators), nameof(ComparatorsCount), nameof(Divisions), nameof(DivisionsCount), nameof(Documents), nameof(DocumentsCount), nameof(DocumentSets), nameof(DocumentSetsCount), nameof(Histories), nameof(HistoriesCount), nameof(Imports), nameof(ImportsCount), nameof(Interventions), nameof(InterventionsCount), nameof(Outcomes), nameof(OutcomesCount), nameof(Projects), nameof(ProjectsCount), nameof(Scopes), nameof(ScopesCount), nameof(Stats), nameof(StatsCount), nameof(StudyDesigns), nameof(StudyDesignsCount), nameof(Users), nameof(UsersCount)
        };
        private List<string> collections { get { return _collections; } }

        public object Clone() => this.Copy<DocumentSet>();
    }
    
    [Route("/documentset/{Id}/copy", "POST")]
    public partial class DocumentSetCopy : DocumentSet {}
    public partial class DocumentSetSearchBase : Search<DocumentSet>
    {
        public int? Id { get; set; }
        public string AdditionalCriteria { get; set; }
        public List<int> CharacteristicsIds { get; set; }
        public List<int> ClientsIds { get; set; }
        public List<int> ComparatorsIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Confidential { get; set; }
        public string DataCollection { get; set; }
        public List<int> DivisionsIds { get; set; }
        public List<int> DocumentsIds { get; set; }
        public List<int> DocumentSetsIds { get; set; }
        public int? EvidencePortalId { get; set; }
        public string ExtractionProtocol { get; set; }
        public int? FqId { get; set; }
        public int? FramedQuestionId { get; set; }
        public string GeneralScope { get; set; }
        public List<int> HistoriesIds { get; set; }
        public int? ImportPriority { get; set; }
        public List<int> ImportsIds { get; set; }
        public string Indications { get; set; }
        public List<int> InterventionsIds { get; set; }
        public int? LibraryPackageId { get; set; }
        public string Name { get; set; }
        public string Notes { get; set; }
        public string OriginalComparators { get; set; }
        public string OriginalDatabase { get; set; }
        public string OriginalDesigns { get; set; }
        public string OriginalInterventions { get; set; }
        public string OriginalOutcomes { get; set; }
        public string OriginalSearch { get; set; }
        public List<int> OutcomesIds { get; set; }
        public Reference Owner { get; set; }
        public List<int> OwnerIds { get; set; }
        public string Participants { get; set; }
        public string PRISMA { get; set; }
        public List<int> ProjectsIds { get; set; }
        public Reference ProjectTeam { get; set; }
        public List<int> ProjectTeamIds { get; set; }
        public int? ProtocolReferenceId { get; set; }
        public string QUOROM { get; set; }
        public List<int> ScopesIds { get; set; }
        public DateTime? SearchEnd { get; set; }
        public DateTime? SearchEndAfter { get; set; }
        public DateTime? SearchEndBefore { get; set; }
        public DateTime? SearchStart { get; set; }
        public DateTime? SearchStartAfter { get; set; }
        public DateTime? SearchStartBefore { get; set; }
        public string SearchStrategy { get; set; }
        public DateTime? SearchUpdated { get; set; }
        public DateTime? SearchUpdatedAfter { get; set; }
        public DateTime? SearchUpdatedBefore { get; set; }
        public string SelectionCriteria { get; set; }
        public string Settings { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> ShowEtw { get; set; }
        public List<int> StatsIds { get; set; }
        public List<int> StudyDesignsIds { get; set; }
        public Reference Type { get; set; }
        public List<int> TypeIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Data Set",@"Disease State",@"Global",@"Library",@"SERVE Portal",@"Therapeutic Area"})]
        public List<string> TypeNames { get; set; }
        public int? UpdateFrequency { get; set; }
        public List<int> UsersIds { get; set; }
    }

    [Route("/documentset", "GET")]
    [Route("/documentset/version", "GET, POST")]
    [Route("/documentset/search", "GET, POST, DELETE")]
    public partial class DocumentSetSearch : DocumentSetSearchBase
    {
    }

    public class DocumentSetFullTextSearch
    {
        public DocumentSetFullTextSearch() {}
        private DocumentSetSearch _request;
        public DocumentSetFullTextSearch(DocumentSetSearch request) => _request = request;

        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Created))); }
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Updated))); }

        public bool doAdditionalCriteria { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.AdditionalCriteria))); }
        public bool doCharacteristics { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Characteristics))); }
        public bool doClients { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Clients))); }
        public bool doComparators { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Comparators))); }
        public bool doConfidential { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Confidential))); }
        public bool doDataCollection { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.DataCollection))); }
        public bool doDivisions { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Divisions))); }
        public bool doDocuments { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Documents))); }
        public bool doDocumentSets { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.DocumentSets))); }
        public bool doEvidencePortalId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.EvidencePortalId))); }
        public bool doExtractionProtocol { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.ExtractionProtocol))); }
        public bool doFqId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.FqId))); }
        public bool doFramedQuestionId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.FramedQuestionId))); }
        public bool doGeneralScope { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.GeneralScope))); }
        public bool doHistories { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Histories))); }
        public bool doImportPriority { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.ImportPriority))); }
        public bool doImports { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Imports))); }
        public bool doIndications { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Indications))); }
        public bool doInterventions { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Interventions))); }
        public bool doLibraryPackageId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.LibraryPackageId))); }
        public bool doName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Name))); }
        public bool doNotes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Notes))); }
        public bool doOriginalComparators { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.OriginalComparators))); }
        public bool doOriginalDatabase { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.OriginalDatabase))); }
        public bool doOriginalDesigns { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.OriginalDesigns))); }
        public bool doOriginalInterventions { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.OriginalInterventions))); }
        public bool doOriginalOutcomes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.OriginalOutcomes))); }
        public bool doOriginalSearch { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.OriginalSearch))); }
        public bool doOutcomes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Outcomes))); }
        public bool doOwner { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Owner))); }
        public bool doParticipants { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Participants))); }
        public bool doPRISMA { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.PRISMA))); }
        public bool doProjects { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Projects))); }
        public bool doProjectTeam { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.ProjectTeam))); }
        public bool doProtocolReferenceId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.ProtocolReferenceId))); }
        public bool doQUOROM { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.QUOROM))); }
        public bool doScopes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Scopes))); }
        public bool doSearchEnd { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.SearchEnd))); }
        public bool doSearchStart { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.SearchStart))); }
        public bool doSearchStrategy { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.SearchStrategy))); }
        public bool doSearchUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.SearchUpdated))); }
        public bool doSelectionCriteria { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.SelectionCriteria))); }
        public bool doSettings { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Settings))); }
        public bool doShowEtw { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.ShowEtw))); }
        public bool doStats { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Stats))); }
        public bool doStudyDesigns { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.StudyDesigns))); }
        public bool doType { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Type))); }
        public bool doUpdateFrequency { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.UpdateFrequency))); }
        public bool doUsers { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DocumentSet.Users))); }
    }

    [Route("/documentset/batch", "DELETE, PATCH, POST, PUT")]
    public partial class DocumentSetBatch : List<DocumentSet> { }

    [Route("/documentset/{Id}/{Junction}/version", "GET, POST")]
    [Route("/documentset/{Id}/{Junction}", "GET, POST, DELETE")]
    public class DocumentSetJunction : DocumentSetSearchBase {}


}
