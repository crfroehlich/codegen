//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class ServePortalSetBase : DocumentSetBase
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ServePortalSetBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ServePortalSetBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ServePortalSetBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ServePortalSetBase(int? pId, List<Reference> pDrugClasses, int? pDrugClassesCount, List<Reference> pInterventions, int? pInterventionsCount) : this(DocConvert.ToInt(pId)) 
        {
            DrugClasses = pDrugClasses;
            DrugClassesCount = pDrugClassesCount;
            Interventions = pInterventions;
            InterventionsCount = pInterventionsCount;
        }

        [ApiMember(Name = nameof(DrugClasses), Description = "TermCategory", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> DrugClasses { get; set; }
        [ApiMember(Name = nameof(DrugClassesIds), Description = "TermCategory Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> DrugClassesIds { get; set; }
        [ApiMember(Name = nameof(DrugClassesCount), Description = "TermCategory Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DrugClassesCount { get; set; }


        [ApiMember(Name = nameof(Interventions), Description = "TermMaster", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Interventions { get; set; }
        [ApiMember(Name = nameof(InterventionsIds), Description = "TermMaster Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> InterventionsIds { get; set; }
        [ApiMember(Name = nameof(InterventionsCount), Description = "TermMaster Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? InterventionsCount { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out List<Reference> pDrugClasses, out int? pDrugClassesCount, out List<Reference> pInterventions, out int? pInterventionsCount)
        {
            pDrugClasses = DrugClasses;
            pDrugClassesCount = DrugClassesCount;
            pInterventions = Interventions;
            pInterventionsCount = InterventionsCount;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public ServePortalSetBase With(int? pId = Id, List<Reference> pDrugClasses = DrugClasses, int? pDrugClassesCount = DrugClassesCount, List<Reference> pInterventions = Interventions, int? pInterventionsCount = InterventionsCount) => 
        //	new ServePortalSetBase(pId, pDrugClasses, pDrugClassesCount, pInterventions, pInterventionsCount);

    }


    [Route("/serveportalset", "POST")]
    [Route("/serveportalset/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class ServePortalSet : ServePortalSetBase, IReturn<ServePortalSet>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ServePortalSet() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ServePortalSet(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ServePortalSet(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ServePortalSet(int? pId, List<Reference> pDrugClasses, int? pDrugClassesCount, List<Reference> pInterventions, int? pInterventionsCount) :
            base(pId, pDrugClasses, pDrugClassesCount, pInterventions, pInterventionsCount) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<ServePortalSet>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(DrugClasses),nameof(DrugClassesCount),nameof(Gestalt),nameof(Interventions),nameof(InterventionsCount),nameof(Locked),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<ServePortalSet>("ServePortalSet",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(DrugClasses), nameof(DrugClassesCount), nameof(DrugClassesIds), nameof(Interventions), nameof(InterventionsCount), nameof(InterventionsIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<ServePortalSet>();

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator DocumentSet(ServePortalSet dto) => DocTransmogrify<ServePortalSet, DocumentSet>.ToNewObject(dto);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator ServePortalSet(DocumentSet dto) => DocTransmogrify<DocumentSet, ServePortalSet>.ToNewObject(dto);

    }
    

    [Route("/serveportalset/{Id}/copy", "POST")]
    public partial class ServePortalSetCopy : ServePortalSet {}

    public partial class ServePortalSetSearchBase : Search<ServePortalSet>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public List<int> ClientsIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Confidential { get; set; }
        public List<int> DivisionsIds { get; set; }
        public List<int> DocumentsIds { get; set; }
        public List<int> DocumentSetsIds { get; set; }
        public List<int> HistoriesIds { get; set; }
        public int? LegacyDocumentSetId { get; set; }
        public string Name { get; set; }
        public List<string> Names { get; set; }
        public Reference Owner { get; set; }
        public List<int> OwnerIds { get; set; }
        public Reference ProjectTeam { get; set; }
        public List<int> ProjectTeamIds { get; set; }
        public List<int> ScopesIds { get; set; }
        public string Settings { get; set; }
        public List<string> Settingss { get; set; }
        public List<int> StatsIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Data Set",@"Disease State",@"Global",@"Library",@"SERVE Portal",@"Therapeutic Area"})]
        public DocumentSetTypeEnm? Type { get; set; }
        public List<DocumentSetTypeEnm> Types { get; set; }
        public List<int> UsersIds { get; set; }
        public List<int> DrugClassesIds { get; set; }
        public List<int> InterventionsIds { get; set; }
    }


    [Route("/serveportalset", "GET")]
    [Route("/serveportalset/version", "GET, POST")]
    [Route("/serveportalset/search", "GET, POST, DELETE")]

    public partial class ServePortalSetSearch : ServePortalSetSearchBase
    {
    }

    public class ServePortalSetFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ServePortalSetFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private ServePortalSetSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ServePortalSetFullTextSearch(ServePortalSetSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(ServePortalSet.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(ServePortalSet.Updated))); }

        public bool doDrugClasses { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(ServePortalSet.DrugClasses))); }
        public bool doInterventions { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(ServePortalSet.Interventions))); }
    }


    [Route("/serveportalset/batch", "DELETE, PATCH, POST, PUT")]

    public partial class ServePortalSetBatch : List<ServePortalSet> { }


    [Route("/serveportalset/{Id}/{Junction}/version", "GET, POST")]
    [Route("/serveportalset/{Id}/{Junction}", "GET, POST, DELETE")]
    public class ServePortalSetJunction : ServePortalSetSearchBase {}



}
