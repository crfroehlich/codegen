//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class LocaleLookupBase : Dto<LocaleLookup>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LocaleLookupBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LocaleLookupBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LocaleLookupBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LocaleLookupBase(int? pId, IpData pData, string pIpAddress, Reference pLocale, int? pLocaleId) : this(DocConvert.ToInt(pId)) 
        {
            Data = pData;
            IpAddress = pIpAddress;
            Locale = pLocale;
            LocaleId = pLocaleId;
        }

        [ApiMember(Name = nameof(Data), Description = "IpData", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public IpData Data { get; set; }
        [ApiMember(Name = nameof(DataIds), Description = "Data Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> DataIds { get; set; }
        [ApiMember(Name = nameof(DataCount), Description = "Data Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DataCount { get; set; }

        [ApiMember(Name = nameof(IpAddress), Description = "string", IsRequired = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string IpAddress { get; set; }
        [ApiMember(Name = nameof(IpAddressIds), Description = "IpAddress Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> IpAddressIds { get; set; }
        [ApiMember(Name = nameof(IpAddressCount), Description = "IpAddress Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? IpAddressCount { get; set; }

        [ApiMember(Name = nameof(Locale), Description = "Locale", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Locale { get; set; }
        [ApiMember(Name = nameof(LocaleId), Description = "Primary Key of Locale", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? LocaleId { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out IpData pData, out string pIpAddress, out Reference pLocale, out int? pLocaleId)
        {
            pData = Data;
            pIpAddress = IpAddress;
            pLocale = Locale;
            pLocaleId = LocaleId;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public LocaleLookupBase With(int? pId = Id, IpData pData = Data, string pIpAddress = IpAddress, Reference pLocale = Locale, int? pLocaleId = LocaleId) => 
        //	new LocaleLookupBase(pId, pData, pIpAddress, pLocale, pLocaleId);

    }


    [Route("/localelookup", "POST")]
    [Route("/localelookup/{Id}", "GET")]

    public partial class LocaleLookup : LocaleLookupBase, IReturn<LocaleLookup>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LocaleLookup() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LocaleLookup(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LocaleLookup(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LocaleLookup(int? pId, IpData pData, string pIpAddress, Reference pLocale, int? pLocaleId) :
            base(pId, pData, pIpAddress, pLocale, pLocaleId) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<LocaleLookup>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(Data),nameof(Gestalt),nameof(IpAddress),nameof(Locale),nameof(LocaleId),nameof(Locked),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<LocaleLookup>("LocaleLookup",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<LocaleLookup>();

    }
    

    [Route("/localelookup/{Id}/copy", "POST")]
    public partial class LocaleLookupCopy : LocaleLookup {}

    public partial class LocaleLookupSearchBase : Search<LocaleLookup>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public string Data { get; set; }
        public List<string> Datas { get; set; }
        public string IpAddress { get; set; }
        public List<string> IpAddresss { get; set; }
        public Reference Locale { get; set; }
        public List<int> LocaleIds { get; set; }
    }


    [Route("/localelookup", "GET")]
    [Route("/localelookup/version", "GET, POST")]
    [Route("/localelookup/search", "GET, POST, DELETE")]

    public partial class LocaleLookupSearch : LocaleLookupSearchBase
    {
    }

    public class LocaleLookupFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LocaleLookupFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private LocaleLookupSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LocaleLookupFullTextSearch(LocaleLookupSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LocaleLookup.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LocaleLookup.Updated))); }

        public bool doData { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LocaleLookup.Data))); }
        public bool doIpAddress { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LocaleLookup.IpAddress))); }
        public bool doLocale { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LocaleLookup.Locale))); }
    }


    [Route("/localelookup/batch", "DELETE, PATCH, POST, PUT")]

    public partial class LocaleLookupBatch : List<LocaleLookup> { }


}
