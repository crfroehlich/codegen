//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class HistoryBase : Dto<History>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public HistoryBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public HistoryBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public HistoryBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public HistoryBase(int? pId, Reference pApp, int? pAppId, Reference pDocumentSet, int? pDocumentSetId, Reference pImpersonation, int? pImpersonationId, Reference pPage, int? pPageId, string pURL, Reference pUser, int? pUserId, Reference pUserSession, int? pUserSessionId, Reference pWorkflow, int? pWorkflowId) : this(DocConvert.ToInt(pId)) 
        {
            App = pApp;
            AppId = pAppId;
            DocumentSet = pDocumentSet;
            DocumentSetId = pDocumentSetId;
            Impersonation = pImpersonation;
            ImpersonationId = pImpersonationId;
            Page = pPage;
            PageId = pPageId;
            URL = pURL;
            User = pUser;
            UserId = pUserId;
            UserSession = pUserSession;
            UserSessionId = pUserSessionId;
            Workflow = pWorkflow;
            WorkflowId = pWorkflowId;
        }

        [ApiMember(Name = nameof(App), Description = "App", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference App { get; set; }
        [ApiMember(Name = nameof(AppId), Description = "Primary Key of App", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? AppId { get; set; }


        [ApiMember(Name = nameof(DocumentSet), Description = "DocumentSet", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference DocumentSet { get; set; }
        [ApiMember(Name = nameof(DocumentSetId), Description = "Primary Key of DocumentSet", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DocumentSetId { get; set; }


        [ApiMember(Name = nameof(Impersonation), Description = "Impersonation", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Impersonation { get; set; }
        [ApiMember(Name = nameof(ImpersonationId), Description = "Primary Key of Impersonation", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ImpersonationId { get; set; }


        [ApiMember(Name = nameof(Page), Description = "Page", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Page { get; set; }
        [ApiMember(Name = nameof(PageId), Description = "Primary Key of Page", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? PageId { get; set; }


        [ApiMember(Name = nameof(URL), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string URL { get; set; }


        [ApiMember(Name = nameof(User), Description = "User", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference User { get; set; }
        [ApiMember(Name = nameof(UserId), Description = "Primary Key of User", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? UserId { get; set; }


        [ApiMember(Name = nameof(UserSession), Description = "UserSession", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference UserSession { get; set; }
        [ApiMember(Name = nameof(UserSessionId), Description = "Primary Key of UserSession", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? UserSessionId { get; set; }


        [ApiMember(Name = nameof(Workflow), Description = "Workflow", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Workflow { get; set; }
        [ApiMember(Name = nameof(WorkflowId), Description = "Primary Key of Workflow", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? WorkflowId { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out Reference pApp, out int? pAppId, out Reference pDocumentSet, out int? pDocumentSetId, out Reference pImpersonation, out int? pImpersonationId, out Reference pPage, out int? pPageId, out string pURL, out Reference pUser, out int? pUserId, out Reference pUserSession, out int? pUserSessionId, out Reference pWorkflow, out int? pWorkflowId)
        {
            pApp = App;
            pAppId = AppId;
            pDocumentSet = DocumentSet;
            pDocumentSetId = DocumentSetId;
            pImpersonation = Impersonation;
            pImpersonationId = ImpersonationId;
            pPage = Page;
            pPageId = PageId;
            pURL = URL;
            pUser = User;
            pUserId = UserId;
            pUserSession = UserSession;
            pUserSessionId = UserSessionId;
            pWorkflow = Workflow;
            pWorkflowId = WorkflowId;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public HistoryBase With(int? pId = Id, Reference pApp = App, int? pAppId = AppId, Reference pDocumentSet = DocumentSet, int? pDocumentSetId = DocumentSetId, Reference pImpersonation = Impersonation, int? pImpersonationId = ImpersonationId, Reference pPage = Page, int? pPageId = PageId, string pURL = URL, Reference pUser = User, int? pUserId = UserId, Reference pUserSession = UserSession, int? pUserSessionId = UserSessionId, Reference pWorkflow = Workflow, int? pWorkflowId = WorkflowId) => 
        //	new HistoryBase(pId, pApp, pAppId, pDocumentSet, pDocumentSetId, pImpersonation, pImpersonationId, pPage, pPageId, pURL, pUser, pUserId, pUserSession, pUserSessionId, pWorkflow, pWorkflowId);

    }


    [Route("/history", "POST")]
    [Route("/history/{Id}", "GET")]

    public partial class History : HistoryBase, IReturn<History>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public History() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public History(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public History(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public History(int? pId, Reference pApp, int? pAppId, Reference pDocumentSet, int? pDocumentSetId, Reference pImpersonation, int? pImpersonationId, Reference pPage, int? pPageId, string pURL, Reference pUser, int? pUserId, Reference pUserSession, int? pUserSessionId, Reference pWorkflow, int? pWorkflowId) :
            base(pId, pApp, pAppId, pDocumentSet, pDocumentSetId, pImpersonation, pImpersonationId, pPage, pPageId, pURL, pUser, pUserId, pUserSession, pUserSessionId, pWorkflow, pWorkflowId) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<History>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(App),nameof(AppId),nameof(Created),nameof(CreatorId),nameof(DocumentSet),nameof(DocumentSetId),nameof(Gestalt),nameof(Impersonation),nameof(ImpersonationId),nameof(Locked),nameof(Page),nameof(PageId),nameof(Updated),nameof(URL),nameof(User),nameof(UserId),nameof(UserSession),nameof(UserSessionId),nameof(VersionNo),nameof(Workflow),nameof(WorkflowId)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<History>("History",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<History>();

    }
    

    [Route("/history/{Id}/copy", "POST")]
    public partial class HistoryCopy : History {}

    public partial class HistorySearchBase : Search<History>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public Reference App { get; set; }
        public List<int> AppIds { get; set; }
        public Reference DocumentSet { get; set; }
        public List<int> DocumentSetIds { get; set; }
        public Reference Impersonation { get; set; }
        public List<int> ImpersonationIds { get; set; }
        public Reference Page { get; set; }
        public List<int> PageIds { get; set; }
        public string URL { get; set; }
        public List<string> URLs { get; set; }
        public Reference User { get; set; }
        public List<int> UserIds { get; set; }
        public Reference UserSession { get; set; }
        public List<int> UserSessionIds { get; set; }
        public Reference Workflow { get; set; }
        public List<int> WorkflowIds { get; set; }
    }


    [Route("/history", "GET")]
    [Route("/history/version", "GET, POST")]
    [Route("/history/search", "GET, POST, DELETE")]

    public partial class HistorySearch : HistorySearchBase
    {
    }

    public class HistoryFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public HistoryFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private HistorySearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public HistoryFullTextSearch(HistorySearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(History.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(History.Updated))); }

        public bool doApp { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(History.App))); }
        public bool doDocumentSet { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(History.DocumentSet))); }
        public bool doImpersonation { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(History.Impersonation))); }
        public bool doPage { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(History.Page))); }
        public bool doURL { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(History.URL))); }
        public bool doUser { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(History.User))); }
        public bool doUserSession { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(History.UserSession))); }
        public bool doWorkflow { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(History.Workflow))); }
    }


    [Route("/history/batch", "DELETE, PATCH, POST, PUT")]

    public partial class HistoryBatch : List<History> { }


}
