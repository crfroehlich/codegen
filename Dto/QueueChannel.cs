//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class QueueChannelBase : Dto<QueueChannel>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public QueueChannelBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public QueueChannelBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public QueueChannelBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public QueueChannelBase(int? pId, bool pAutoDelete, Reference pBackgroundTask, int? pBackgroundTaskId, string pDescription, bool pDurable, bool pEnabled, bool pExclusive, string pName) : this(DocConvert.ToInt(pId)) 
        {
            AutoDelete = pAutoDelete;
            BackgroundTask = pBackgroundTask;
            BackgroundTaskId = pBackgroundTaskId;
            Description = pDescription;
            Durable = pDurable;
            Enabled = pEnabled;
            Exclusive = pExclusive;
            Name = pName;
        }

        [ApiMember(Name = nameof(AutoDelete), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool AutoDelete { get; set; }
        [ApiMember(Name = nameof(AutoDeleteIds), Description = "AutoDelete Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> AutoDeleteIds { get; set; }
        [ApiMember(Name = nameof(AutoDeleteCount), Description = "AutoDelete Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? AutoDeleteCount { get; set; }

        [ApiMember(Name = nameof(BackgroundTask), Description = "BackgroundTask", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference BackgroundTask { get; set; }
        [ApiMember(Name = nameof(BackgroundTaskId), Description = "Primary Key of BackgroundTask", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? BackgroundTaskId { get; set; }

        [ApiMember(Name = nameof(Description), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Description { get; set; }
        [ApiMember(Name = nameof(DescriptionIds), Description = "Description Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> DescriptionIds { get; set; }
        [ApiMember(Name = nameof(DescriptionCount), Description = "Description Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DescriptionCount { get; set; }

        [ApiMember(Name = nameof(Durable), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Durable { get; set; }
        [ApiMember(Name = nameof(DurableIds), Description = "Durable Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> DurableIds { get; set; }
        [ApiMember(Name = nameof(DurableCount), Description = "Durable Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DurableCount { get; set; }

        [ApiMember(Name = nameof(Enabled), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Enabled { get; set; }
        [ApiMember(Name = nameof(EnabledIds), Description = "Enabled Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> EnabledIds { get; set; }
        [ApiMember(Name = nameof(EnabledCount), Description = "Enabled Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? EnabledCount { get; set; }

        [ApiMember(Name = nameof(Exclusive), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool Exclusive { get; set; }
        [ApiMember(Name = nameof(ExclusiveIds), Description = "Exclusive Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> ExclusiveIds { get; set; }
        [ApiMember(Name = nameof(ExclusiveCount), Description = "Exclusive Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ExclusiveCount { get; set; }

        [ApiMember(Name = nameof(Name), Description = "string", IsRequired = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Name { get; set; }
        [ApiMember(Name = nameof(NameIds), Description = "Name Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> NameIds { get; set; }
        [ApiMember(Name = nameof(NameCount), Description = "Name Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? NameCount { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out bool pAutoDelete, out Reference pBackgroundTask, out int? pBackgroundTaskId, out string pDescription, out bool pDurable, out bool pEnabled, out bool pExclusive, out string pName)
        {
            pAutoDelete = AutoDelete;
            pBackgroundTask = BackgroundTask;
            pBackgroundTaskId = BackgroundTaskId;
            pDescription = Description;
            pDurable = Durable;
            pEnabled = Enabled;
            pExclusive = Exclusive;
            pName = Name;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public QueueChannelBase With(int? pId = Id, bool pAutoDelete = AutoDelete, Reference pBackgroundTask = BackgroundTask, int? pBackgroundTaskId = BackgroundTaskId, string pDescription = Description, bool pDurable = Durable, bool pEnabled = Enabled, bool pExclusive = Exclusive, string pName = Name) => 
        //	new QueueChannelBase(pId, pAutoDelete, pBackgroundTask, pBackgroundTaskId, pDescription, pDurable, pEnabled, pExclusive, pName);

    }


    [Route("/queuechannel", "POST")]
    [Route("/queuechannel/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class QueueChannel : QueueChannelBase, IReturn<QueueChannel>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public QueueChannel() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public QueueChannel(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public QueueChannel(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public QueueChannel(int? pId, bool pAutoDelete, Reference pBackgroundTask, int? pBackgroundTaskId, string pDescription, bool pDurable, bool pEnabled, bool pExclusive, string pName) :
            base(pId, pAutoDelete, pBackgroundTask, pBackgroundTaskId, pDescription, pDurable, pEnabled, pExclusive, pName) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<QueueChannel>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(AutoDelete),nameof(BackgroundTask),nameof(BackgroundTaskId),nameof(Created),nameof(CreatorId),nameof(Description),nameof(Durable),nameof(Enabled),nameof(Exclusive),nameof(Gestalt),nameof(Locked),nameof(Name),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<QueueChannel>("QueueChannel",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<QueueChannel>();

    }
    

    [Route("/queuechannel/{Id}/copy", "POST")]
    public partial class QueueChannelCopy : QueueChannel {}

    public partial class QueueChannelSearchBase : Search<QueueChannel>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> AutoDelete { get; set; }
        public Reference BackgroundTask { get; set; }
        public List<int> BackgroundTaskIds { get; set; }
        public string Description { get; set; }
        public List<string> Descriptions { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Durable { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Enabled { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Exclusive { get; set; }
        public string Name { get; set; }
        public List<string> Names { get; set; }
    }


    [Route("/queuechannel", "GET")]
    [Route("/queuechannel/version", "GET, POST")]
    [Route("/queuechannel/search", "GET, POST, DELETE")]

    public partial class QueueChannelSearch : QueueChannelSearchBase
    {
    }

    public class QueueChannelFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public QueueChannelFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private QueueChannelSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public QueueChannelFullTextSearch(QueueChannelSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(QueueChannel.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(QueueChannel.Updated))); }

        public bool doAutoDelete { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(QueueChannel.AutoDelete))); }
        public bool doBackgroundTask { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(QueueChannel.BackgroundTask))); }
        public bool doDescription { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(QueueChannel.Description))); }
        public bool doDurable { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(QueueChannel.Durable))); }
        public bool doEnabled { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(QueueChannel.Enabled))); }
        public bool doExclusive { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(QueueChannel.Exclusive))); }
        public bool doName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(QueueChannel.Name))); }
    }


    [Route("/queuechannel/batch", "DELETE, PATCH, POST, PUT")]

    public partial class QueueChannelBatch : List<QueueChannel> { }


}
