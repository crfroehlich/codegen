//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.Dto
{
    public abstract partial class DiseaseStateSetBase : DocumentSetBase
    {
        public DiseaseStateSetBase() {}

        public DiseaseStateSetBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        public DiseaseStateSetBase(int? id) : this(DocConvert.ToInt(id)) {}

        public DiseaseStateSetBase(int? pId, bool isDummyParam) : this(DocConvert.ToInt(pId)) 
        {

        }



        public void Deconstruct(bool isDummyParam)
        {

        }

        //Not ready until C# v8.?
        //public DiseaseStateSetBase With(int? pId = Id, ) => 
        //	new DiseaseStateSetBase(pId, isDummyParam);

    }

    [Route("/diseasestateset", "POST")]
    [Route("/diseasestateset/{Id}", "GET, PATCH, PUT, DELETE")]
    public partial class DiseaseStateSet : DiseaseStateSetBase, IReturn<DiseaseStateSet>, IDto, ICloneable
    {
        public DiseaseStateSet()
        {
            _Constructor();
        }

        public DiseaseStateSet(int? id) : base(DocConvert.ToInt(id)) {}
        public DiseaseStateSet(int id) : base(id) {}
        public DiseaseStateSet(int? pId, bool isDummyParam) : 
            base(pId, isDummyParam) { }
        #region Fields

        public new bool? ShouldSerialize(string field)
        {
            //Allow individual classes to specify their own logic
            var manualOverride = _ShouldSerialize(field);
            if(null != manualOverride) return manualOverride;

            if (IgnoredSelect.Matches(field, true)) return false;
            var ret = MandatorySelect.Matches(field, true) || true == Select?.Matches(field, true);
            return ret;
        }

        public static List<string> Fields => DocTools.Fields<DiseaseStateSet>();

        private List<string> _Select;
        [ApiMember(Name = "Select", Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(Gestalt),nameof(Locked),nameof(Updated),nameof(VersionNo)})]
        public new List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {
                    _Select = DocWebSession.GetTypeSelect(this);
                }
                return _Select;
            }
            set
            {
                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<DiseaseStateSet>("DiseaseStateSet",exists);
            }
        }

        #endregion Fields

        public object Clone() => this.Copy<DiseaseStateSet>();
        public static explicit operator DocumentSet(DiseaseStateSet dto) => DocTransmogrify<DiseaseStateSet, DocumentSet>.ToNewObject(dto);
        public static explicit operator DiseaseStateSet(DocumentSet dto) => DocTransmogrify<DocumentSet, DiseaseStateSet>.ToNewObject(dto);
    }
    
    [Route("/diseasestateset/{Id}/copy", "POST")]
    public partial class DiseaseStateSetCopy : DiseaseStateSet {}
    public partial class DiseaseStateSetSearchBase : Search<DiseaseStateSet>
    {
        public int? Id { get; set; }
        public List<int> ClientsIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Confidential { get; set; }
        public List<int> DivisionsIds { get; set; }
        public List<int> DocumentsIds { get; set; }
        public List<int> DocumentSetsIds { get; set; }
        public List<int> HistoriesIds { get; set; }
        public string Name { get; set; }
        public Reference Owner { get; set; }
        public List<int> OwnerIds { get; set; }
        public Reference ProjectTeam { get; set; }
        public List<int> ProjectTeamIds { get; set; }
        public List<int> ScopesIds { get; set; }
        public string Settings { get; set; }
        public List<int> StatsIds { get; set; }
        public DocumentSetTypeEnm? Type { get; set; }
        public List<int> UsersIds { get; set; }
    }

    [Route("/diseasestateset", "GET")]
    [Route("/diseasestateset/version", "GET, POST")]
    [Route("/diseasestateset/search", "GET, POST, DELETE")]
    public partial class DiseaseStateSetSearch : DiseaseStateSetSearchBase
    {
    }

    public class DiseaseStateSetFullTextSearch
    {
        public DiseaseStateSetFullTextSearch() {}
        private DiseaseStateSetSearch _request;
        public DiseaseStateSetFullTextSearch(DiseaseStateSetSearch request) => _request = request;

        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DiseaseStateSet.Created))); }
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DiseaseStateSet.Updated))); }


    }

    [Route("/diseasestateset/batch", "DELETE, PATCH, POST, PUT")]
    public partial class DiseaseStateSetBatch : List<DiseaseStateSet> { }

}
