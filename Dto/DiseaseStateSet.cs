//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class DiseaseStateSetBase : DocumentSetBase
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DiseaseStateSetBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DiseaseStateSetBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DiseaseStateSetBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DiseaseStateSetBase(int? pId, bool isDummyParam) : this(DocConvert.ToInt(pId)) 
        {

        }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(bool isDummyParam)
        {

        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public DiseaseStateSetBase With(int? pId = Id, ) => 
        //	new DiseaseStateSetBase(pId, isDummyParam);

    }


    [Route("/diseasestateset", "POST")]
    [Route("/diseasestateset/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class DiseaseStateSet : DiseaseStateSetBase, IReturn<DiseaseStateSet>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DiseaseStateSet() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DiseaseStateSet(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DiseaseStateSet(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DiseaseStateSet(int? pId, bool isDummyParam) :
            base(pId, isDummyParam) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<DiseaseStateSet>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(Gestalt),nameof(Locked),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<DiseaseStateSet>("DiseaseStateSet",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<DiseaseStateSet>();

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator DocumentSet(DiseaseStateSet dto) => DocTransmogrify<DiseaseStateSet, DocumentSet>.ToNewObject(dto);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static explicit operator DiseaseStateSet(DocumentSet dto) => DocTransmogrify<DocumentSet, DiseaseStateSet>.ToNewObject(dto);

    }
    

    [Route("/diseasestateset/{Id}/copy", "POST")]
    public partial class DiseaseStateSetCopy : DiseaseStateSet {}

    public partial class DiseaseStateSetSearchBase : Search<DiseaseStateSet>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public List<int> ClientsIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Confidential { get; set; }
        public List<int> DivisionsIds { get; set; }
        public List<int> DocumentsIds { get; set; }
        public List<int> DocumentSetsIds { get; set; }
        public List<int> HistoriesIds { get; set; }
        public int? LegacyDocumentSetId { get; set; }
        public string Name { get; set; }
        public List<string> Names { get; set; }
        public Reference Owner { get; set; }
        public List<int> OwnerIds { get; set; }
        public Reference ProjectTeam { get; set; }
        public List<int> ProjectTeamIds { get; set; }
        public List<int> ScopesIds { get; set; }
        public string Settings { get; set; }
        public List<string> Settingss { get; set; }
        public List<int> StatsIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Data Set",@"Disease State",@"Global",@"Library",@"SERVE Portal",@"Therapeutic Area"})]
        public DocumentSetTypeEnm? Type { get; set; }
        public List<DocumentSetTypeEnm> Types { get; set; }
        public List<int> UsersIds { get; set; }
    }


    [Route("/diseasestateset", "GET")]
    [Route("/diseasestateset/version", "GET, POST")]
    [Route("/diseasestateset/search", "GET, POST, DELETE")]

    public partial class DiseaseStateSetSearch : DiseaseStateSetSearchBase
    {
    }

    public class DiseaseStateSetFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DiseaseStateSetFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private DiseaseStateSetSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DiseaseStateSetFullTextSearch(DiseaseStateSetSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DiseaseStateSet.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(DiseaseStateSet.Updated))); }


    }


    [Route("/diseasestateset/batch", "DELETE, PATCH, POST, PUT")]

    public partial class DiseaseStateSetBatch : List<DiseaseStateSet> { }


    [Route("/diseasestateset/{Id}/{Junction}/version", "GET, POST")]
    [Route("/diseasestateset/{Id}/{Junction}", "GET, POST, DELETE")]
    public class DiseaseStateSetJunction : DiseaseStateSetSearchBase {}



}
