//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.Dto
{
    public abstract partial class CommentBase : Dto<Comment>
    {
        public CommentBase() {}

        public CommentBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        public CommentBase(int? id) : this(DocConvert.ToInt(id)) {}

        public CommentBase(int? pId, Reference pParent, int? pParentId, List<Reference> pScopes, int? pScopesCount, string pText, Reference pUser, int? pUserId) : this(DocConvert.ToInt(pId)) 
        {
            Parent = pParent;
            ParentId = pParentId;
            Scopes = pScopes;
            ScopesCount = pScopesCount;
            Text = pText;
            User = pUser;
            UserId = pUserId;
        }

        [ApiMember(Name = nameof(Parent), Description = "Comment", IsRequired = false)]
        public Reference Parent { get; set; }
        [ApiMember(Name = nameof(ParentId), Description = "Primary Key of Comment", IsRequired = false)]
        public int? ParentId { get; set; }


        [ApiMember(Name = nameof(Scopes), Description = "Scope", IsRequired = false)]
        public List<Reference> Scopes { get; set; }
        public int? ScopesCount { get; set; }


        [ApiMember(Name = nameof(Text), Description = "string", IsRequired = false)]
        public string Text { get; set; }


        [ApiMember(Name = nameof(User), Description = "User", IsRequired = true)]
        public Reference User { get; set; }
        [ApiMember(Name = nameof(UserId), Description = "Primary Key of User", IsRequired = false)]
        public int? UserId { get; set; }



        public void Deconstruct(out Reference pParent, out int? pParentId, out List<Reference> pScopes, out int? pScopesCount, out string pText, out Reference pUser, out int? pUserId)
        {
            pParent = Parent;
            pParentId = ParentId;
            pScopes = Scopes;
            pScopesCount = ScopesCount;
            pText = Text;
            pUser = User;
            pUserId = UserId;
        }

        //Not ready until C# v8.?
        //public CommentBase With(int? pId = Id, Reference pParent = Parent, int? pParentId = ParentId, List<Reference> pScopes = Scopes, int? pScopesCount = ScopesCount, string pText = Text, Reference pUser = User, int? pUserId = UserId) => 
        //	new CommentBase(pId, pParent, pParentId, pScopes, pScopesCount, pText, pUser, pUserId);

    }

    [Route("/comment", "POST")]
    [Route("/comment/{Id}", "GET, PATCH, PUT, DELETE")]
    public partial class Comment : CommentBase, IReturn<Comment>, IDto, ICloneable
    {
        public Comment()
        {
            _Constructor();
        }

        public Comment(int? id) : base(DocConvert.ToInt(id)) {}
        public Comment(int id) : base(id) {}
        public Comment(int? pId, Reference pParent, int? pParentId, List<Reference> pScopes, int? pScopesCount, string pText, Reference pUser, int? pUserId) : 
            base(pId, pParent, pParentId, pScopes, pScopesCount, pText, pUser, pUserId) { }
        #region Fields

        public new bool? ShouldSerialize(string field)
        {
            //Allow individual classes to specify their own logic
            var manualOverride = _ShouldSerialize(field);
            if(null != manualOverride) return manualOverride;

            if (IgnoredVisibleFields.Matches(field, true)) return false;
            var ret = MandatoryVisibleFields.Matches(field, true) || true == VisibleFields?.Matches(field, true);
            return ret;
        }

        public static List<string> Fields => DocTools.Fields<Comment>();

        private List<string> _VisibleFields;
        [ApiMember(Name = "VisibleFields", Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(Gestalt),nameof(Locked),nameof(Parent),nameof(ParentId),nameof(Scopes),nameof(ScopesCount),nameof(Text),nameof(Updated),nameof(User),nameof(UserId),nameof(VersionNo)})]
        public new List<string> VisibleFields
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _VisibleFields)
                {
                    _VisibleFields = DocWebSession.GetTypeVisibleFields(this);
                }
                return _VisibleFields;
            }
            set
            {
                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _VisibleFields = DocPermissionFactory.SetVisibleFields<Comment>("Comment",exists);
            }
        }

        #endregion Fields
        private List<string> _collections = new List<string>
        {
            nameof(Scopes), nameof(ScopesCount)
        };
        private List<string> collections { get { return _collections; } }

        public object Clone() => this.Copy<Comment>();
    }
    
    [Route("/comment/{Id}/copy", "POST")]
    public partial class CommentCopy : Comment {}
    public partial class CommentSearchBase : Search<Comment>
    {
        public int? Id { get; set; }
        public Reference Parent { get; set; }
        public List<int> ParentIds { get; set; }
        public List<int> ScopesIds { get; set; }
        public string Text { get; set; }
        public Reference User { get; set; }
        public List<int> UserIds { get; set; }
    }

    [Route("/comment", "GET")]
    [Route("/comment/version", "GET, POST")]
    [Route("/comment/search", "GET, POST, DELETE")]
    public partial class CommentSearch : CommentSearchBase
    {
    }

    public class CommentFullTextSearch
    {
        public CommentFullTextSearch() {}
        private CommentSearch _request;
        public CommentFullTextSearch(CommentSearch request) => _request = request;

        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        public bool doCreated { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Comment.Created))); }
        public bool doUpdated { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Comment.Updated))); }

        public bool doParent { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Comment.Parent))); }
        public bool doScopes { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Comment.Scopes))); }
        public bool doText { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Comment.Text))); }
        public bool doUser { get => true == _request.VisibleFields?.Any(v => DocTools.AreEqual(v, nameof(Comment.User))); }
    }

    [Route("/comment/batch", "DELETE, PATCH, POST, PUT")]
    public partial class CommentBatch : List<Comment> { }

    [Route("/comment/{Id}/{Junction}/version", "GET, POST")]
    [Route("/comment/{Id}/{Junction}", "GET, POST, DELETE")]
    public class CommentJunction : CommentSearchBase {}


}
