//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class IntervalBase : Dto<Interval>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public IntervalBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public IntervalBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public IntervalBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public IntervalBase(int? pId, DateTimeDto pCalendarDateEnd, int? pCalendarDateEndId, DateTimeDto pCalendarDateStart, int? pCalendarDateStartId, string pCalendarType, TimePoint pFollowUp, int? pFollowUpId, TimePoint pTimeOfDay, int? pTimeOfDayId) : this(DocConvert.ToInt(pId)) 
        {
            CalendarDateEnd = pCalendarDateEnd;
            CalendarDateEndId = pCalendarDateEndId;
            CalendarDateStart = pCalendarDateStart;
            CalendarDateStartId = pCalendarDateStartId;
            CalendarType = pCalendarType;
            FollowUp = pFollowUp;
            FollowUpId = pFollowUpId;
            TimeOfDay = pTimeOfDay;
            TimeOfDayId = pTimeOfDayId;
        }

        [ApiMember(Name = nameof(CalendarDateEnd), Description = "DateTime", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTimeDto CalendarDateEnd { get; set; }
        [ApiMember(Name = nameof(CalendarDateEndId), Description = "Primary Key of DateTime", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? CalendarDateEndId { get; set; }


        [ApiMember(Name = nameof(CalendarDateStart), Description = "DateTime", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTimeDto CalendarDateStart { get; set; }
        [ApiMember(Name = nameof(CalendarDateStartId), Description = "Primary Key of DateTime", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? CalendarDateStartId { get; set; }


        [ApiMember(Name = nameof(CalendarType), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string CalendarType { get; set; }


        [ApiMember(Name = nameof(FollowUp), Description = "TimePoint", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TimePoint FollowUp { get; set; }
        [ApiMember(Name = nameof(FollowUpId), Description = "Primary Key of TimePoint", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? FollowUpId { get; set; }


        [ApiMember(Name = nameof(TimeOfDay), Description = "TimePoint", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public TimePoint TimeOfDay { get; set; }
        [ApiMember(Name = nameof(TimeOfDayId), Description = "Primary Key of TimePoint", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? TimeOfDayId { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out DateTimeDto pCalendarDateEnd, out int? pCalendarDateEndId, out DateTimeDto pCalendarDateStart, out int? pCalendarDateStartId, out string pCalendarType, out TimePoint pFollowUp, out int? pFollowUpId, out TimePoint pTimeOfDay, out int? pTimeOfDayId)
        {
            pCalendarDateEnd = CalendarDateEnd;
            pCalendarDateEndId = CalendarDateEndId;
            pCalendarDateStart = CalendarDateStart;
            pCalendarDateStartId = CalendarDateStartId;
            pCalendarType = CalendarType;
            pFollowUp = FollowUp;
            pFollowUpId = FollowUpId;
            pTimeOfDay = TimeOfDay;
            pTimeOfDayId = TimeOfDayId;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public IntervalBase With(int? pId = Id, DateTimeDto pCalendarDateEnd = CalendarDateEnd, int? pCalendarDateEndId = CalendarDateEndId, DateTimeDto pCalendarDateStart = CalendarDateStart, int? pCalendarDateStartId = CalendarDateStartId, string pCalendarType = CalendarType, TimePoint pFollowUp = FollowUp, int? pFollowUpId = FollowUpId, TimePoint pTimeOfDay = TimeOfDay, int? pTimeOfDayId = TimeOfDayId) => 
        //	new IntervalBase(pId, pCalendarDateEnd, pCalendarDateEndId, pCalendarDateStart, pCalendarDateStartId, pCalendarType, pFollowUp, pFollowUpId, pTimeOfDay, pTimeOfDayId);

    }


    [Route("/interval", "POST")]
    [Route("/interval/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class Interval : IntervalBase, IReturn<Interval>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Interval() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Interval(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Interval(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Interval(int? pId, DateTimeDto pCalendarDateEnd, int? pCalendarDateEndId, DateTimeDto pCalendarDateStart, int? pCalendarDateStartId, string pCalendarType, TimePoint pFollowUp, int? pFollowUpId, TimePoint pTimeOfDay, int? pTimeOfDayId) :
            base(pId, pCalendarDateEnd, pCalendarDateEndId, pCalendarDateStart, pCalendarDateStartId, pCalendarType, pFollowUp, pFollowUpId, pTimeOfDay, pTimeOfDayId) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<Interval>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(CalendarDateEnd),nameof(CalendarDateEndId),nameof(CalendarDateStart),nameof(CalendarDateStartId),nameof(CalendarType),nameof(Created),nameof(CreatorId),nameof(FollowUp),nameof(FollowUpId),nameof(Gestalt),nameof(Locked),nameof(TimeOfDay),nameof(TimeOfDayId),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocPermissionFactory.RemoveNonEssentialFields(Fields);

                }
                return _Select;
            }
            set
            {

                _Select = Fields;

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<Interval>();

    }
    

    [Route("/interval/{Id}/copy", "POST")]
    public partial class IntervalCopy : Interval {}

    public partial class IntervalSearchBase : Search<Interval>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public Reference CalendarDateEnd { get; set; }
        public List<int> CalendarDateEndIds { get; set; }
        public Reference CalendarDateStart { get; set; }
        public List<int> CalendarDateStartIds { get; set; }
        public string CalendarType { get; set; }
        public List<string> CalendarTypes { get; set; }
        public Reference FollowUp { get; set; }
        public List<int> FollowUpIds { get; set; }
        public Reference TimeOfDay { get; set; }
        public List<int> TimeOfDayIds { get; set; }
    }


    [Route("/interval", "GET")]
    [Route("/interval/version", "GET, POST")]
    [Route("/interval/search", "GET, POST, DELETE")]

    public partial class IntervalSearch : IntervalSearchBase
    {
    }

    public class IntervalFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public IntervalFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private IntervalSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public IntervalFullTextSearch(IntervalSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Interval.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Interval.Updated))); }

        public bool doCalendarDateEnd { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Interval.CalendarDateEnd))); }
        public bool doCalendarDateStart { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Interval.CalendarDateStart))); }
        public bool doCalendarType { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Interval.CalendarType))); }
        public bool doFollowUp { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Interval.FollowUp))); }
        public bool doTimeOfDay { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(Interval.TimeOfDay))); }
    }


    [Route("/interval/batch", "DELETE, PATCH, POST, PUT")]

    public partial class IntervalBatch : List<Interval> { }


}
