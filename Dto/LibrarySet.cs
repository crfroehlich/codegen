
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class LibrarySetBase : DocumentSetBase
    {
        public LibrarySetBase() {}

        public LibrarySetBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        public LibrarySetBase(int? id) : this(DocConvert.ToInt(id)) {}

        public LibrarySetBase(int? pId, string pAdditionalCriteria, List<Reference> pCharacteristics, int? pCharacteristicsCount, List<Reference> pComparators, int? pComparatorsCount, string pGeneralScope, string pIndications, List<Reference> pInterventions, int? pInterventionsCount, int? pLibraryPackageId, string pNotes, string pOriginalComparators, string pOriginalDesigns, string pOriginalInterventions, string pOriginalOutcomes, string pOriginalSearch, List<Reference> pOutcomes, int? pOutcomesCount, string pParticipants, List<Reference> pProjects, int? pProjectsCount, DateTime? pSearchEnd, DateTime? pSearchStart, string pSearchStrategy, DateTime? pSearchUpdated, string pSelectionCriteria, List<Reference> pStudyDesigns, int? pStudyDesignsCount, int? pUpdateFrequency) : this(DocConvert.ToInt(pId)) 
        {
            AdditionalCriteria = pAdditionalCriteria;
            Characteristics = pCharacteristics;
            CharacteristicsCount = pCharacteristicsCount;
            Comparators = pComparators;
            ComparatorsCount = pComparatorsCount;
            GeneralScope = pGeneralScope;
            Indications = pIndications;
            Interventions = pInterventions;
            InterventionsCount = pInterventionsCount;
            LibraryPackageId = pLibraryPackageId;
            Notes = pNotes;
            OriginalComparators = pOriginalComparators;
            OriginalDesigns = pOriginalDesigns;
            OriginalInterventions = pOriginalInterventions;
            OriginalOutcomes = pOriginalOutcomes;
            OriginalSearch = pOriginalSearch;
            Outcomes = pOutcomes;
            OutcomesCount = pOutcomesCount;
            Participants = pParticipants;
            Projects = pProjects;
            ProjectsCount = pProjectsCount;
            SearchEnd = pSearchEnd;
            SearchStart = pSearchStart;
            SearchStrategy = pSearchStrategy;
            SearchUpdated = pSearchUpdated;
            SelectionCriteria = pSelectionCriteria;
            StudyDesigns = pStudyDesigns;
            StudyDesignsCount = pStudyDesignsCount;
            UpdateFrequency = pUpdateFrequency;
        }

        [ApiMember(Name = nameof(AdditionalCriteria), Description = "string", IsRequired = false)]
        public string AdditionalCriteria { get; set; }
        public List<int> AdditionalCriteriaIds { get; set; }
        public int? AdditionalCriteriaCount { get; set; }


        [ApiMember(Name = nameof(Characteristics), Description = "Tag", IsRequired = false)]
        public List<Reference> Characteristics { get; set; }
        public List<int> CharacteristicsIds { get; set; }
        public int? CharacteristicsCount { get; set; }


        [ApiMember(Name = nameof(Comparators), Description = "Tag", IsRequired = false)]
        public List<Reference> Comparators { get; set; }
        public List<int> ComparatorsIds { get; set; }
        public int? ComparatorsCount { get; set; }


        [ApiMember(Name = nameof(GeneralScope), Description = "string", IsRequired = false)]
        public string GeneralScope { get; set; }
        public List<int> GeneralScopeIds { get; set; }
        public int? GeneralScopeCount { get; set; }


        [ApiMember(Name = nameof(Indications), Description = "string", IsRequired = false)]
        public string Indications { get; set; }
        public List<int> IndicationsIds { get; set; }
        public int? IndicationsCount { get; set; }


        [ApiMember(Name = nameof(Interventions), Description = "Tag", IsRequired = false)]
        public List<Reference> Interventions { get; set; }
        public List<int> InterventionsIds { get; set; }
        public int? InterventionsCount { get; set; }


        [ApiMember(Name = nameof(LibraryPackageId), Description = "int?", IsRequired = false)]
        public int? LibraryPackageId { get; set; }
        public List<int> LibraryPackageIdIds { get; set; }
        public int? LibraryPackageIdCount { get; set; }


        [ApiMember(Name = nameof(Notes), Description = "string", IsRequired = false)]
        public string Notes { get; set; }
        public List<int> NotesIds { get; set; }
        public int? NotesCount { get; set; }


        [ApiMember(Name = nameof(OriginalComparators), Description = "string", IsRequired = false)]
        public string OriginalComparators { get; set; }
        public List<int> OriginalComparatorsIds { get; set; }
        public int? OriginalComparatorsCount { get; set; }


        [ApiMember(Name = nameof(OriginalDesigns), Description = "string", IsRequired = false)]
        public string OriginalDesigns { get; set; }
        public List<int> OriginalDesignsIds { get; set; }
        public int? OriginalDesignsCount { get; set; }


        [ApiMember(Name = nameof(OriginalInterventions), Description = "string", IsRequired = false)]
        public string OriginalInterventions { get; set; }
        public List<int> OriginalInterventionsIds { get; set; }
        public int? OriginalInterventionsCount { get; set; }


        [ApiMember(Name = nameof(OriginalOutcomes), Description = "string", IsRequired = false)]
        public string OriginalOutcomes { get; set; }
        public List<int> OriginalOutcomesIds { get; set; }
        public int? OriginalOutcomesCount { get; set; }


        [ApiMember(Name = nameof(OriginalSearch), Description = "string", IsRequired = false)]
        public string OriginalSearch { get; set; }
        public List<int> OriginalSearchIds { get; set; }
        public int? OriginalSearchCount { get; set; }


        [ApiMember(Name = nameof(Outcomes), Description = "Tag", IsRequired = false)]
        public List<Reference> Outcomes { get; set; }
        public List<int> OutcomesIds { get; set; }
        public int? OutcomesCount { get; set; }


        [ApiMember(Name = nameof(Participants), Description = "string", IsRequired = false)]
        public string Participants { get; set; }
        public List<int> ParticipantsIds { get; set; }
        public int? ParticipantsCount { get; set; }


        [ApiMember(Name = nameof(Projects), Description = "Project", IsRequired = false)]
        public List<Reference> Projects { get; set; }
        public List<int> ProjectsIds { get; set; }
        public int? ProjectsCount { get; set; }


        [ApiMember(Name = nameof(SearchEnd), Description = "DateTime?", IsRequired = false)]
        public DateTime? SearchEnd { get; set; }
        public List<int> SearchEndIds { get; set; }
        public int? SearchEndCount { get; set; }


        [ApiMember(Name = nameof(SearchStart), Description = "DateTime?", IsRequired = false)]
        public DateTime? SearchStart { get; set; }
        public List<int> SearchStartIds { get; set; }
        public int? SearchStartCount { get; set; }


        [ApiMember(Name = nameof(SearchStrategy), Description = "string", IsRequired = false)]
        public string SearchStrategy { get; set; }
        public List<int> SearchStrategyIds { get; set; }
        public int? SearchStrategyCount { get; set; }


        [ApiMember(Name = nameof(SearchUpdated), Description = "DateTime?", IsRequired = false)]
        public DateTime? SearchUpdated { get; set; }
        public List<int> SearchUpdatedIds { get; set; }
        public int? SearchUpdatedCount { get; set; }


        [ApiMember(Name = nameof(SelectionCriteria), Description = "string", IsRequired = false)]
        public string SelectionCriteria { get; set; }
        public List<int> SelectionCriteriaIds { get; set; }
        public int? SelectionCriteriaCount { get; set; }


        [ApiMember(Name = nameof(StudyDesigns), Description = "StudyDesign", IsRequired = false)]
        public List<Reference> StudyDesigns { get; set; }
        public List<int> StudyDesignsIds { get; set; }
        public int? StudyDesignsCount { get; set; }


        [ApiMember(Name = nameof(UpdateFrequency), Description = "int?", IsRequired = false)]
        public int? UpdateFrequency { get; set; }
        public List<int> UpdateFrequencyIds { get; set; }
        public int? UpdateFrequencyCount { get; set; }



        public void Deconstruct(out string pAdditionalCriteria, out List<Reference> pCharacteristics, out int? pCharacteristicsCount, out List<Reference> pComparators, out int? pComparatorsCount, out string pGeneralScope, out string pIndications, out List<Reference> pInterventions, out int? pInterventionsCount, out int? pLibraryPackageId, out string pNotes, out string pOriginalComparators, out string pOriginalDesigns, out string pOriginalInterventions, out string pOriginalOutcomes, out string pOriginalSearch, out List<Reference> pOutcomes, out int? pOutcomesCount, out string pParticipants, out List<Reference> pProjects, out int? pProjectsCount, out DateTime? pSearchEnd, out DateTime? pSearchStart, out string pSearchStrategy, out DateTime? pSearchUpdated, out string pSelectionCriteria, out List<Reference> pStudyDesigns, out int? pStudyDesignsCount, out int? pUpdateFrequency)
        {
            pAdditionalCriteria = AdditionalCriteria;
            pCharacteristics = Characteristics;
            pCharacteristicsCount = CharacteristicsCount;
            pComparators = Comparators;
            pComparatorsCount = ComparatorsCount;
            pGeneralScope = GeneralScope;
            pIndications = Indications;
            pInterventions = Interventions;
            pInterventionsCount = InterventionsCount;
            pLibraryPackageId = LibraryPackageId;
            pNotes = Notes;
            pOriginalComparators = OriginalComparators;
            pOriginalDesigns = OriginalDesigns;
            pOriginalInterventions = OriginalInterventions;
            pOriginalOutcomes = OriginalOutcomes;
            pOriginalSearch = OriginalSearch;
            pOutcomes = Outcomes;
            pOutcomesCount = OutcomesCount;
            pParticipants = Participants;
            pProjects = Projects;
            pProjectsCount = ProjectsCount;
            pSearchEnd = SearchEnd;
            pSearchStart = SearchStart;
            pSearchStrategy = SearchStrategy;
            pSearchUpdated = SearchUpdated;
            pSelectionCriteria = SelectionCriteria;
            pStudyDesigns = StudyDesigns;
            pStudyDesignsCount = StudyDesignsCount;
            pUpdateFrequency = UpdateFrequency;
        }

        //Not ready until C# v8.?
        //public LibrarySetBase With(int? pId = Id, string pAdditionalCriteria = AdditionalCriteria, List<Reference> pCharacteristics = Characteristics, int? pCharacteristicsCount = CharacteristicsCount, List<Reference> pComparators = Comparators, int? pComparatorsCount = ComparatorsCount, string pGeneralScope = GeneralScope, string pIndications = Indications, List<Reference> pInterventions = Interventions, int? pInterventionsCount = InterventionsCount, int? pLibraryPackageId = LibraryPackageId, string pNotes = Notes, string pOriginalComparators = OriginalComparators, string pOriginalDesigns = OriginalDesigns, string pOriginalInterventions = OriginalInterventions, string pOriginalOutcomes = OriginalOutcomes, string pOriginalSearch = OriginalSearch, List<Reference> pOutcomes = Outcomes, int? pOutcomesCount = OutcomesCount, string pParticipants = Participants, List<Reference> pProjects = Projects, int? pProjectsCount = ProjectsCount, DateTime? pSearchEnd = SearchEnd, DateTime? pSearchStart = SearchStart, string pSearchStrategy = SearchStrategy, DateTime? pSearchUpdated = SearchUpdated, string pSelectionCriteria = SelectionCriteria, List<Reference> pStudyDesigns = StudyDesigns, int? pStudyDesignsCount = StudyDesignsCount, int? pUpdateFrequency = UpdateFrequency) => 
        //	new LibrarySetBase(pId, pAdditionalCriteria, pCharacteristics, pCharacteristicsCount, pComparators, pComparatorsCount, pGeneralScope, pIndications, pInterventions, pInterventionsCount, pLibraryPackageId, pNotes, pOriginalComparators, pOriginalDesigns, pOriginalInterventions, pOriginalOutcomes, pOriginalSearch, pOutcomes, pOutcomesCount, pParticipants, pProjects, pProjectsCount, pSearchEnd, pSearchStart, pSearchStrategy, pSearchUpdated, pSelectionCriteria, pStudyDesigns, pStudyDesignsCount, pUpdateFrequency);

    }


    [Route("/libraryset", "POST")]
    [Route("/libraryset/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class LibrarySet : LibrarySetBase, IReturn<LibrarySet>, IDto, ICloneable
    {
        public LibrarySet() => _Constructor();

        public LibrarySet(int? id) : base(DocConvert.ToInt(id)) {}
        public LibrarySet(int id) : base(id) {}
        public LibrarySet(int? pId, string pAdditionalCriteria, List<Reference> pCharacteristics, int? pCharacteristicsCount, List<Reference> pComparators, int? pComparatorsCount, string pGeneralScope, string pIndications, List<Reference> pInterventions, int? pInterventionsCount, int? pLibraryPackageId, string pNotes, string pOriginalComparators, string pOriginalDesigns, string pOriginalInterventions, string pOriginalOutcomes, string pOriginalSearch, List<Reference> pOutcomes, int? pOutcomesCount, string pParticipants, List<Reference> pProjects, int? pProjectsCount, DateTime? pSearchEnd, DateTime? pSearchStart, string pSearchStrategy, DateTime? pSearchUpdated, string pSelectionCriteria, List<Reference> pStudyDesigns, int? pStudyDesignsCount, int? pUpdateFrequency) :
            base(pId, pAdditionalCriteria, pCharacteristics, pCharacteristicsCount, pComparators, pComparatorsCount, pGeneralScope, pIndications, pInterventions, pInterventionsCount, pLibraryPackageId, pNotes, pOriginalComparators, pOriginalDesigns, pOriginalInterventions, pOriginalOutcomes, pOriginalSearch, pOutcomes, pOutcomesCount, pParticipants, pProjects, pProjectsCount, pSearchEnd, pSearchStart, pSearchStrategy, pSearchUpdated, pSelectionCriteria, pStudyDesigns, pStudyDesignsCount, pUpdateFrequency) { }

        public static List<string> Fields => DocTools.Fields<LibrarySet>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(AdditionalCriteria),nameof(Characteristics),nameof(CharacteristicsCount),nameof(Comparators),nameof(ComparatorsCount),nameof(Created),nameof(CreatorId),nameof(GeneralScope),nameof(Gestalt),nameof(Indications),nameof(Interventions),nameof(InterventionsCount),nameof(LibraryPackageId),nameof(Locked),nameof(Notes),nameof(OriginalComparators),nameof(OriginalDesigns),nameof(OriginalInterventions),nameof(OriginalOutcomes),nameof(OriginalSearch),nameof(Outcomes),nameof(OutcomesCount),nameof(Participants),nameof(Projects),nameof(ProjectsCount),nameof(SearchEnd),nameof(SearchStart),nameof(SearchStrategy),nameof(SearchUpdated),nameof(SelectionCriteria),nameof(StudyDesigns),nameof(StudyDesignsCount),nameof(Updated),nameof(UpdateFrequency),nameof(VersionNo)})]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {


                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {


                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<LibrarySet>("LibrarySet",exists);

            }
        }

        [Obsolete, ApiMember(Name = nameof(VisibleFields), Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        private List<string> _collections = new List<string>
        {
            nameof(Characteristics), nameof(CharacteristicsCount), nameof(CharacteristicsIds), nameof(Comparators), nameof(ComparatorsCount), nameof(ComparatorsIds), nameof(Interventions), nameof(InterventionsCount), nameof(InterventionsIds), nameof(Outcomes), nameof(OutcomesCount), nameof(OutcomesIds), nameof(Projects), nameof(ProjectsCount), nameof(ProjectsIds), nameof(StudyDesigns), nameof(StudyDesignsCount), nameof(StudyDesignsIds)
        };
        private List<string> collections { get { return _collections; } }


        public object Clone() => this.Copy<LibrarySet>();

        public static explicit operator DocumentSet(LibrarySet dto) => DocTransmogrify<LibrarySet, DocumentSet>.ToNewObject(dto);
        public static explicit operator LibrarySet(DocumentSet dto) => DocTransmogrify<DocumentSet, LibrarySet>.ToNewObject(dto);

    }
    

    [Route("/libraryset/{Id}/copy", "POST")]
    public partial class LibrarySetCopy : LibrarySet {}

    public partial class LibrarySetSearchBase : Search<LibrarySet>
    {
        public int? Id { get; set; }
        public List<int> ClientsIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> Confidential { get; set; }
        public List<int> DivisionsIds { get; set; }
        public List<int> DocumentsIds { get; set; }
        public List<int> DocumentSetsIds { get; set; }
        public List<int> HistoriesIds { get; set; }
        public int? LegacyDocumentSetId { get; set; }
        public string Name { get; set; }
        public List<string> Names { get; set; }
        public Reference Owner { get; set; }
        public List<int> OwnerIds { get; set; }
        public Reference ProjectTeam { get; set; }
        public List<int> ProjectTeamIds { get; set; }
        public List<int> ScopesIds { get; set; }
        public string Settings { get; set; }
        public List<string> Settingss { get; set; }
        public List<int> StatsIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Data Set",@"Disease State",@"Global",@"Library",@"SERVE Portal",@"Therapeutic Area"})]
        public DocumentSetTypeEnm? Type { get; set; }
        public List<DocumentSetTypeEnm> Types { get; set; }
        public List<int> UsersIds { get; set; }
        public string AdditionalCriteria { get; set; }
        public List<string> AdditionalCriterias { get; set; }
        public List<int> CharacteristicsIds { get; set; }
        public List<int> ComparatorsIds { get; set; }
        public string GeneralScope { get; set; }
        public List<string> GeneralScopes { get; set; }
        public string Indications { get; set; }
        public List<string> Indicationss { get; set; }
        public List<int> InterventionsIds { get; set; }
        public int? LibraryPackageId { get; set; }
        public string Notes { get; set; }
        public List<string> Notess { get; set; }
        public string OriginalComparators { get; set; }
        public List<string> OriginalComparatorss { get; set; }
        public string OriginalDesigns { get; set; }
        public List<string> OriginalDesignss { get; set; }
        public string OriginalInterventions { get; set; }
        public List<string> OriginalInterventionss { get; set; }
        public string OriginalOutcomes { get; set; }
        public List<string> OriginalOutcomess { get; set; }
        public string OriginalSearch { get; set; }
        public List<string> OriginalSearchs { get; set; }
        public List<int> OutcomesIds { get; set; }
        public string Participants { get; set; }
        public List<string> Participantss { get; set; }
        public List<int> ProjectsIds { get; set; }
        public DateTime? SearchEnd { get; set; }
        public DateTime? SearchEndAfter { get; set; }
        public DateTime? SearchEndBefore { get; set; }
        public DateTime? SearchStart { get; set; }
        public DateTime? SearchStartAfter { get; set; }
        public DateTime? SearchStartBefore { get; set; }
        public string SearchStrategy { get; set; }
        public List<string> SearchStrategys { get; set; }
        public DateTime? SearchUpdated { get; set; }
        public DateTime? SearchUpdatedAfter { get; set; }
        public DateTime? SearchUpdatedBefore { get; set; }
        public string SelectionCriteria { get; set; }
        public List<string> SelectionCriterias { get; set; }
        public List<int> StudyDesignsIds { get; set; }
        public int? UpdateFrequency { get; set; }
    }


    [Route("/libraryset", "GET")]
    [Route("/libraryset/version", "GET, POST")]
    [Route("/libraryset/search", "GET, POST, DELETE")]

    public partial class LibrarySetSearch : LibrarySetSearchBase
    {
    }

    public class LibrarySetFullTextSearch
    {
        public LibrarySetFullTextSearch() {}
        private LibrarySetSearch _request;
        public LibrarySetFullTextSearch(LibrarySetSearch request) => _request = request;

        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.Created))); }
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.Updated))); }

        public bool doAdditionalCriteria { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.AdditionalCriteria))); }
        public bool doCharacteristics { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.Characteristics))); }
        public bool doComparators { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.Comparators))); }
        public bool doGeneralScope { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.GeneralScope))); }
        public bool doIndications { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.Indications))); }
        public bool doInterventions { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.Interventions))); }
        public bool doLibraryPackageId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.LibraryPackageId))); }
        public bool doNotes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.Notes))); }
        public bool doOriginalComparators { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.OriginalComparators))); }
        public bool doOriginalDesigns { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.OriginalDesigns))); }
        public bool doOriginalInterventions { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.OriginalInterventions))); }
        public bool doOriginalOutcomes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.OriginalOutcomes))); }
        public bool doOriginalSearch { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.OriginalSearch))); }
        public bool doOutcomes { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.Outcomes))); }
        public bool doParticipants { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.Participants))); }
        public bool doProjects { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.Projects))); }
        public bool doSearchEnd { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.SearchEnd))); }
        public bool doSearchStart { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.SearchStart))); }
        public bool doSearchStrategy { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.SearchStrategy))); }
        public bool doSearchUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.SearchUpdated))); }
        public bool doSelectionCriteria { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.SelectionCriteria))); }
        public bool doStudyDesigns { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.StudyDesigns))); }
        public bool doUpdateFrequency { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LibrarySet.UpdateFrequency))); }
    }


    [Route("/libraryset/batch", "DELETE, PATCH, POST, PUT")]

    public partial class LibrarySetBatch : List<LibrarySet> { }


    [Route("/libraryset/{Id}/{Junction}/version", "GET, POST")]
    [Route("/libraryset/{Id}/{Junction}", "GET, POST, DELETE")]
    public class LibrarySetJunction : LibrarySetSearchBase {}



}
