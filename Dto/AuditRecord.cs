//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class AuditRecordBase : Dto<AuditRecord>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditRecordBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditRecordBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditRecordBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditRecordBase(int? pId, string pAction, Reference pBackgroundTask, int? pBackgroundTaskId, DateTime? pChangedOnDate, string pData, string pDatabaseSessionId, List<Reference> pDeltas, int? pDeltasCount, int? pEntityId, string pEntityType, int? pEntityVersion, List<Reference> pEvents, int? pEventsCount, Reference pImpersonation, int? pImpersonationId, int? pTargetId, string pTargetType, int? pTargetVersion, Reference pUser, int? pUserId, Reference pUserSession, int? pUserSessionId) : this(DocConvert.ToInt(pId)) 
        {
            Action = pAction;
            BackgroundTask = pBackgroundTask;
            BackgroundTaskId = pBackgroundTaskId;
            ChangedOnDate = pChangedOnDate;
            Data = pData;
            DatabaseSessionId = pDatabaseSessionId;
            Deltas = pDeltas;
            DeltasCount = pDeltasCount;
            EntityId = pEntityId;
            EntityType = pEntityType;
            EntityVersion = pEntityVersion;
            Events = pEvents;
            EventsCount = pEventsCount;
            Impersonation = pImpersonation;
            ImpersonationId = pImpersonationId;
            TargetId = pTargetId;
            TargetType = pTargetType;
            TargetVersion = pTargetVersion;
            User = pUser;
            UserId = pUserId;
            UserSession = pUserSession;
            UserSessionId = pUserSessionId;
        }

        [ApiMember(Name = nameof(Action), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Action { get; set; }


        [ApiMember(Name = nameof(BackgroundTask), Description = "BackgroundTask", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference BackgroundTask { get; set; }
        [ApiMember(Name = nameof(BackgroundTaskId), Description = "Primary Key of BackgroundTask", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? BackgroundTaskId { get; set; }


        [ApiMember(Name = nameof(ChangedOnDate), Description = "DateTime?", IsRequired = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime? ChangedOnDate { get; set; }


        [ApiMember(Name = nameof(Data), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string Data { get; set; }


        [ApiMember(Name = nameof(DatabaseSessionId), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string DatabaseSessionId { get; set; }


        [ApiMember(Name = nameof(Deltas), Description = "AuditDelta", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Deltas { get; set; }
        [ApiMember(Name = nameof(DeltasIds), Description = "AuditDelta Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> DeltasIds { get; set; }
        [ApiMember(Name = nameof(DeltasCount), Description = "AuditDelta Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? DeltasCount { get; set; }


        [ApiMember(Name = nameof(EntityId), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? EntityId { get; set; }


        [ApiMember(Name = nameof(EntityType), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string EntityType { get; set; }


        [ApiMember(Name = nameof(EntityVersion), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? EntityVersion { get; set; }


        [ApiMember(Name = nameof(Events), Description = "Event", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Events { get; set; }
        [ApiMember(Name = nameof(EventsIds), Description = "Event Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> EventsIds { get; set; }
        [ApiMember(Name = nameof(EventsCount), Description = "Event Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? EventsCount { get; set; }


        [ApiMember(Name = nameof(Impersonation), Description = "Impersonation", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Impersonation { get; set; }
        [ApiMember(Name = nameof(ImpersonationId), Description = "Primary Key of Impersonation", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ImpersonationId { get; set; }


        [ApiMember(Name = nameof(TargetId), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? TargetId { get; set; }


        [ApiMember(Name = nameof(TargetType), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string TargetType { get; set; }


        [ApiMember(Name = nameof(TargetVersion), Description = "int?", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? TargetVersion { get; set; }


        [ApiMember(Name = nameof(User), Description = "User", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference User { get; set; }
        [ApiMember(Name = nameof(UserId), Description = "Primary Key of User", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? UserId { get; set; }


        [ApiMember(Name = nameof(UserSession), Description = "UserSession", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference UserSession { get; set; }
        [ApiMember(Name = nameof(UserSessionId), Description = "Primary Key of UserSession", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? UserSessionId { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out string pAction, out Reference pBackgroundTask, out int? pBackgroundTaskId, out DateTime? pChangedOnDate, out string pData, out string pDatabaseSessionId, out List<Reference> pDeltas, out int? pDeltasCount, out int? pEntityId, out string pEntityType, out int? pEntityVersion, out List<Reference> pEvents, out int? pEventsCount, out Reference pImpersonation, out int? pImpersonationId, out int? pTargetId, out string pTargetType, out int? pTargetVersion, out Reference pUser, out int? pUserId, out Reference pUserSession, out int? pUserSessionId)
        {
            pAction = Action;
            pBackgroundTask = BackgroundTask;
            pBackgroundTaskId = BackgroundTaskId;
            pChangedOnDate = ChangedOnDate;
            pData = Data;
            pDatabaseSessionId = DatabaseSessionId;
            pDeltas = Deltas;
            pDeltasCount = DeltasCount;
            pEntityId = EntityId;
            pEntityType = EntityType;
            pEntityVersion = EntityVersion;
            pEvents = Events;
            pEventsCount = EventsCount;
            pImpersonation = Impersonation;
            pImpersonationId = ImpersonationId;
            pTargetId = TargetId;
            pTargetType = TargetType;
            pTargetVersion = TargetVersion;
            pUser = User;
            pUserId = UserId;
            pUserSession = UserSession;
            pUserSessionId = UserSessionId;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public AuditRecordBase With(int? pId = Id, string pAction = Action, Reference pBackgroundTask = BackgroundTask, int? pBackgroundTaskId = BackgroundTaskId, DateTime? pChangedOnDate = ChangedOnDate, string pData = Data, string pDatabaseSessionId = DatabaseSessionId, List<Reference> pDeltas = Deltas, int? pDeltasCount = DeltasCount, int? pEntityId = EntityId, string pEntityType = EntityType, int? pEntityVersion = EntityVersion, List<Reference> pEvents = Events, int? pEventsCount = EventsCount, Reference pImpersonation = Impersonation, int? pImpersonationId = ImpersonationId, int? pTargetId = TargetId, string pTargetType = TargetType, int? pTargetVersion = TargetVersion, Reference pUser = User, int? pUserId = UserId, Reference pUserSession = UserSession, int? pUserSessionId = UserSessionId) => 
        //	new AuditRecordBase(pId, pAction, pBackgroundTask, pBackgroundTaskId, pChangedOnDate, pData, pDatabaseSessionId, pDeltas, pDeltasCount, pEntityId, pEntityType, pEntityVersion, pEvents, pEventsCount, pImpersonation, pImpersonationId, pTargetId, pTargetType, pTargetVersion, pUser, pUserId, pUserSession, pUserSessionId);

    }


    [Route("/auditrecord/{Id}", "GET")]

    public partial class AuditRecord : AuditRecordBase, IReturn<AuditRecord>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditRecord() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditRecord(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditRecord(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditRecord(int? pId, string pAction, Reference pBackgroundTask, int? pBackgroundTaskId, DateTime? pChangedOnDate, string pData, string pDatabaseSessionId, List<Reference> pDeltas, int? pDeltasCount, int? pEntityId, string pEntityType, int? pEntityVersion, List<Reference> pEvents, int? pEventsCount, Reference pImpersonation, int? pImpersonationId, int? pTargetId, string pTargetType, int? pTargetVersion, Reference pUser, int? pUserId, Reference pUserSession, int? pUserSessionId) :
            base(pId, pAction, pBackgroundTask, pBackgroundTaskId, pChangedOnDate, pData, pDatabaseSessionId, pDeltas, pDeltasCount, pEntityId, pEntityType, pEntityVersion, pEvents, pEventsCount, pImpersonation, pImpersonationId, pTargetId, pTargetType, pTargetVersion, pUser, pUserId, pUserSession, pUserSessionId) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<AuditRecord>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Action),nameof(BackgroundTask),nameof(BackgroundTaskId),nameof(ChangedOnDate),nameof(Created),nameof(CreatorId),nameof(Data),nameof(DatabaseSessionId),nameof(Deltas),nameof(DeltasCount),nameof(EntityId),nameof(EntityType),nameof(EntityVersion),nameof(Events),nameof(EventsCount),nameof(Gestalt),nameof(Impersonation),nameof(ImpersonationId),nameof(Locked),nameof(TargetId),nameof(TargetType),nameof(TargetVersion),nameof(Updated),nameof(User),nameof(UserId),nameof(UserSession),nameof(UserSessionId),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<AuditRecord>("AuditRecord",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(Deltas), nameof(DeltasCount), nameof(DeltasIds), nameof(Events), nameof(EventsCount), nameof(EventsIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<AuditRecord>();

    }
    

    public partial class AuditRecordSearchBase : Search<AuditRecord>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public string Action { get; set; }
        public List<string> Actions { get; set; }
        public Reference BackgroundTask { get; set; }
        public List<int> BackgroundTaskIds { get; set; }
        public DateTime? ChangedOnDate { get; set; }
        public DateTime? ChangedOnDateAfter { get; set; }
        public DateTime? ChangedOnDateBefore { get; set; }
        public string Data { get; set; }
        public List<string> Datas { get; set; }
        public string DatabaseSessionId { get; set; }
        public List<string> DatabaseSessionIds { get; set; }
        public List<int> DeltasIds { get; set; }
        public int? EntityId { get; set; }
        public string EntityType { get; set; }
        public List<string> EntityTypes { get; set; }
        public int? EntityVersion { get; set; }
        public List<int> EventsIds { get; set; }
        public Reference Impersonation { get; set; }
        public List<int> ImpersonationIds { get; set; }
        public int? TargetId { get; set; }
        public string TargetType { get; set; }
        public List<string> TargetTypes { get; set; }
        public int? TargetVersion { get; set; }
        public Reference User { get; set; }
        public List<int> UserIds { get; set; }
        public Reference UserSession { get; set; }
        public List<int> UserSessionIds { get; set; }
    }


    [Route("/auditrecord", "GET")]
    [Route("/auditrecord/version", "GET, POST")]
    [Route("/auditrecord/search", "GET, POST, DELETE")]

    public partial class AuditRecordSearch : AuditRecordSearchBase
    {
    }

    public class AuditRecordFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditRecordFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private AuditRecordSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public AuditRecordFullTextSearch(AuditRecordSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.Updated))); }

        public bool doAction { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.Action))); }
        public bool doBackgroundTask { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.BackgroundTask))); }
        public bool doChangedOnDate { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.ChangedOnDate))); }
        public bool doData { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.Data))); }
        public bool doDatabaseSessionId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.DatabaseSessionId))); }
        public bool doDeltas { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.Deltas))); }
        public bool doEntityId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.EntityId))); }
        public bool doEntityType { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.EntityType))); }
        public bool doEntityVersion { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.EntityVersion))); }
        public bool doEvents { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.Events))); }
        public bool doImpersonation { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.Impersonation))); }
        public bool doTargetId { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.TargetId))); }
        public bool doTargetType { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.TargetType))); }
        public bool doTargetVersion { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.TargetVersion))); }
        public bool doUser { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.User))); }
        public bool doUserSession { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(AuditRecord.UserSession))); }
    }


    public partial class AuditRecordBatch : List<AuditRecord> { }


    [Route("/auditrecord/{Id}/{Junction}/version", "GET, POST")]
    [Route("/auditrecord/{Id}/{Junction}", "GET, POST, DELETE")]
    public class AuditRecordJunction : AuditRecordSearchBase {}



}
