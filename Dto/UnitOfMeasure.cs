//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class UnitOfMeasureBase : Dto<UnitOfMeasure>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UnitOfMeasureBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UnitOfMeasureBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UnitOfMeasureBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UnitOfMeasureBase(int? pId, bool pIsSI, Reference pName, int? pNameId, Reference pType, int? pType_Id, Reference pUnit, int? pUnitId) : this(DocConvert.ToInt(pId)) 
        {
            IsSI = pIsSI;
            Name = pName;
            NameId = pNameId;
            Type = pType;
            Type_Id = pType_Id;
            Unit = pUnit;
            UnitId = pUnitId;
        }

        [ApiMember(Name = nameof(IsSI), Description = "bool", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool IsSI { get; set; }
        [ApiMember(Name = nameof(IsSIIds), Description = "IsSI Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> IsSIIds { get; set; }
        [ApiMember(Name = nameof(IsSICount), Description = "IsSI Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? IsSICount { get; set; }

        [ApiMember(Name = nameof(Name), Description = "LookupTable", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Name { get; set; }
        [ApiMember(Name = nameof(NameId), Description = "Primary Key of LookupTable", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? NameId { get; set; }

        [ApiAllowableValues("Includes", Values = new string[] {@"Amount",@"Area",@"Concentration",@"Concentration Molar",@"Concentration Solution",@"Label",@"Length",@"Mass",@"Moles",@"NonTime",@"NonUnit",@"Radiation",@"Time",@"Volume",@"Weight"})]
        [ApiMember(Name = nameof(Type), Description = "LookupTable", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Type { get; set; }
        [ApiMember(Name = nameof(Type_Id), Description = "Primary Key of LookupTable", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Type_Id { get; set; }

        [ApiMember(Name = nameof(Unit), Description = "LookupTable", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Unit { get; set; }
        [ApiMember(Name = nameof(UnitId), Description = "Primary Key of LookupTable", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? UnitId { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out bool pIsSI, out Reference pName, out int? pNameId, out Reference pType, out int? pType_Id, out Reference pUnit, out int? pUnitId)
        {
            pIsSI = IsSI;
            pName = Name;
            pNameId = NameId;
            pType = Type;
            pType_Id = Type_Id;
            pUnit = Unit;
            pUnitId = UnitId;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public UnitOfMeasureBase With(int? pId = Id, bool pIsSI = IsSI, Reference pName = Name, int? pNameId = NameId, Reference pType = Type, int? pType_Id = Type_Id, Reference pUnit = Unit, int? pUnitId = UnitId) => 
        //	new UnitOfMeasureBase(pId, pIsSI, pName, pNameId, pType, pType_Id, pUnit, pUnitId);

    }


    [Route("/unitofmeasure", "POST")]
    [Route("/unitofmeasure/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class UnitOfMeasure : UnitOfMeasureBase, IReturn<UnitOfMeasure>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UnitOfMeasure() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UnitOfMeasure(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UnitOfMeasure(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UnitOfMeasure(int? pId, bool pIsSI, Reference pName, int? pNameId, Reference pType, int? pType_Id, Reference pUnit, int? pUnitId) :
            base(pId, pIsSI, pName, pNameId, pType, pType_Id, pUnit, pUnitId) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<UnitOfMeasure>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(Gestalt),nameof(IsSI),nameof(Locked),nameof(Name),nameof(NameId),nameof(Type),nameof(Type_Id),nameof(Unit),nameof(UnitId),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocPermissionFactory.RemoveNonEssentialFields(Fields);

                }
                return _Select;
            }
            set
            {

                _Select = Fields;

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<UnitOfMeasure>();

    }
    

    [Route("/unitofmeasure/{Id}/copy", "POST")]
    public partial class UnitOfMeasureCopy : UnitOfMeasure {}

    public partial class UnitOfMeasureSearchBase : Search<UnitOfMeasure>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {"true", "false"})]
        public List<bool> IsSI { get; set; }
        public Reference Name { get; set; }
        public List<int> NameIds { get; set; }
        public List<string> NameNames { get; set; }
        public Reference Type { get; set; }
        public List<int> TypeIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Amount",@"Area",@"Concentration",@"Concentration Molar",@"Concentration Solution",@"Label",@"Length",@"Mass",@"Moles",@"NonTime",@"NonUnit",@"Radiation",@"Time",@"Volume",@"Weight"})]
        public List<string> TypeNames { get; set; }
        public Reference Unit { get; set; }
        public List<int> UnitIds { get; set; }
        public List<string> UnitNames { get; set; }
    }


    [Route("/unitofmeasure", "GET")]
    [Route("/unitofmeasure/version", "GET, POST")]
    [Route("/unitofmeasure/search", "GET, POST, DELETE")]

    public partial class UnitOfMeasureSearch : UnitOfMeasureSearchBase
    {
    }

    public class UnitOfMeasureFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UnitOfMeasureFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private UnitOfMeasureSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UnitOfMeasureFullTextSearch(UnitOfMeasureSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(UnitOfMeasure.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(UnitOfMeasure.Updated))); }

        public bool doIsSI { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(UnitOfMeasure.IsSI))); }
        public bool doName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(UnitOfMeasure.Name))); }
        public bool doType { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(UnitOfMeasure.Type))); }
        public bool doUnit { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(UnitOfMeasure.Unit))); }
    }


    [Route("/unitofmeasure/batch", "DELETE, PATCH, POST, PUT")]

    public partial class UnitOfMeasureBatch : List<UnitOfMeasure> { }


}
