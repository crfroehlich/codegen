//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class LookupTableBindingBase : Dto<LookupTableBinding>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LookupTableBindingBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LookupTableBindingBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LookupTableBindingBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LookupTableBindingBase(int? pId, Bindings pBinding, string pBoundName, Reference pLookupTable, int? pLookupTableId, Reference pScope, int? pScopeId, List<Reference> pSynonyms, int? pSynonymsCount, List<Reference> pWorkflows, int? pWorkflowsCount) : this(DocConvert.ToInt(pId)) 
        {
            Binding = pBinding;
            BoundName = pBoundName;
            LookupTable = pLookupTable;
            LookupTableId = pLookupTableId;
            Scope = pScope;
            ScopeId = pScopeId;
            Synonyms = pSynonyms;
            SynonymsCount = pSynonymsCount;
            Workflows = pWorkflows;
            WorkflowsCount = pWorkflowsCount;
        }

        [ApiMember(Name = nameof(Binding), Description = "Bindings", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Bindings Binding { get; set; }


        [ApiMember(Name = nameof(BoundName), Description = "string", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string BoundName { get; set; }


        [ApiMember(Name = nameof(LookupTable), Description = "LookupTable", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference LookupTable { get; set; }
        [ApiMember(Name = nameof(LookupTableId), Description = "Primary Key of LookupTable", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? LookupTableId { get; set; }


        [ApiMember(Name = nameof(Scope), Description = "Scope", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Scope { get; set; }
        [ApiMember(Name = nameof(ScopeId), Description = "Primary Key of Scope", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? ScopeId { get; set; }


        [ApiMember(Name = nameof(Synonyms), Description = "TermSynonym", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Synonyms { get; set; }
        [ApiMember(Name = nameof(SynonymsIds), Description = "TermSynonym Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> SynonymsIds { get; set; }
        [ApiMember(Name = nameof(SynonymsCount), Description = "TermSynonym Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? SynonymsCount { get; set; }


        [ApiMember(Name = nameof(Workflows), Description = "Workflow", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Reference> Workflows { get; set; }
        [ApiMember(Name = nameof(WorkflowsIds), Description = "Workflow Ids", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<int> WorkflowsIds { get; set; }
        [ApiMember(Name = nameof(WorkflowsCount), Description = "Workflow Count", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? WorkflowsCount { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out Bindings pBinding, out string pBoundName, out Reference pLookupTable, out int? pLookupTableId, out Reference pScope, out int? pScopeId, out List<Reference> pSynonyms, out int? pSynonymsCount, out List<Reference> pWorkflows, out int? pWorkflowsCount)
        {
            pBinding = Binding;
            pBoundName = BoundName;
            pLookupTable = LookupTable;
            pLookupTableId = LookupTableId;
            pScope = Scope;
            pScopeId = ScopeId;
            pSynonyms = Synonyms;
            pSynonymsCount = SynonymsCount;
            pWorkflows = Workflows;
            pWorkflowsCount = WorkflowsCount;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public LookupTableBindingBase With(int? pId = Id, Bindings pBinding = Binding, string pBoundName = BoundName, Reference pLookupTable = LookupTable, int? pLookupTableId = LookupTableId, Reference pScope = Scope, int? pScopeId = ScopeId, List<Reference> pSynonyms = Synonyms, int? pSynonymsCount = SynonymsCount, List<Reference> pWorkflows = Workflows, int? pWorkflowsCount = WorkflowsCount) => 
        //	new LookupTableBindingBase(pId, pBinding, pBoundName, pLookupTable, pLookupTableId, pScope, pScopeId, pSynonyms, pSynonymsCount, pWorkflows, pWorkflowsCount);

    }


    [Route("/lookuptablebinding", "POST")]
    [Route("/lookuptablebinding/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class LookupTableBinding : LookupTableBindingBase, IReturn<LookupTableBinding>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LookupTableBinding() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LookupTableBinding(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LookupTableBinding(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LookupTableBinding(int? pId, Bindings pBinding, string pBoundName, Reference pLookupTable, int? pLookupTableId, Reference pScope, int? pScopeId, List<Reference> pSynonyms, int? pSynonymsCount, List<Reference> pWorkflows, int? pWorkflowsCount) :
            base(pId, pBinding, pBoundName, pLookupTable, pLookupTableId, pScope, pScopeId, pSynonyms, pSynonymsCount, pWorkflows, pWorkflowsCount) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<LookupTableBinding>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Binding),nameof(BoundName),nameof(Created),nameof(CreatorId),nameof(Gestalt),nameof(Locked),nameof(LookupTable),nameof(LookupTableId),nameof(Scope),nameof(ScopeId),nameof(Synonyms),nameof(SynonymsCount),nameof(Updated),nameof(VersionNo),nameof(Workflows),nameof(WorkflowsCount)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {

                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<LookupTableBinding>("LookupTableBinding",exists);

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> _collections = new List<string>
        {
            nameof(Synonyms), nameof(SynonymsCount), nameof(SynonymsIds), nameof(Workflows), nameof(WorkflowsCount), nameof(WorkflowsIds)
        };
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private List<string> collections { get { return _collections; } }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<LookupTableBinding>();

    }
    

    [Route("/lookuptablebinding/{Id}/copy", "POST")]
    public partial class LookupTableBindingCopy : LookupTableBinding {}

    public partial class LookupTableBindingSearchBase : Search<LookupTableBinding>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public string Binding { get; set; }
        public List<string> Bindings { get; set; }
        public string BoundName { get; set; }
        public List<string> BoundNames { get; set; }
        public Reference LookupTable { get; set; }
        public List<int> LookupTableIds { get; set; }
        public List<string> LookupTableNames { get; set; }
        public Reference Scope { get; set; }
        public List<int> ScopeIds { get; set; }
        public List<int> SynonymsIds { get; set; }
        public List<int> WorkflowsIds { get; set; }
    }


    [Route("/lookuptablebinding", "GET")]
    [Route("/lookuptablebinding/version", "GET, POST")]
    [Route("/lookuptablebinding/search", "GET, POST, DELETE")]

    public partial class LookupTableBindingSearch : LookupTableBindingSearchBase
    {
    }

    public class LookupTableBindingFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LookupTableBindingFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private LookupTableBindingSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LookupTableBindingFullTextSearch(LookupTableBindingSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LookupTableBinding.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LookupTableBinding.Updated))); }

        public bool doBinding { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LookupTableBinding.Binding))); }
        public bool doBoundName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LookupTableBinding.BoundName))); }
        public bool doLookupTable { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LookupTableBinding.LookupTable))); }
        public bool doScope { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LookupTableBinding.Scope))); }
        public bool doSynonyms { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LookupTableBinding.Synonyms))); }
        public bool doWorkflows { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(LookupTableBinding.Workflows))); }
    }


    [Route("/lookuptablebinding/batch", "DELETE, PATCH, POST, PUT")]

    public partial class LookupTableBindingBatch : List<LookupTableBinding> { }


    [Route("/lookuptablebinding/{Id}/{Junction}/version", "GET, POST")]
    [Route("/lookuptablebinding/{Id}/{Junction}", "GET, POST, DELETE")]
    public class LookupTableBindingJunction : LookupTableBindingSearchBase {}



}
