//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


using ValueType = Services.Dto.ValueType;

namespace Services.Dto
{
    public abstract partial class ValueTypeBase : Dto<ValueType>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ValueTypeBase() {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ValueTypeBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ValueTypeBase(int? id) : this(DocConvert.ToInt(id)) {}

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ValueTypeBase(int? pId, Reference pFieldType, int? pFieldTypeId, Reference pName, int? pNameId) : this(DocConvert.ToInt(pId)) 
        {
            FieldType = pFieldType;
            FieldTypeId = pFieldTypeId;
            Name = pName;
            NameId = pNameId;
        }

        [ApiAllowableValues("Includes", Values = new string[] {@"Binary",@"Continuous",@"Count",@"Individual",@"Kaplan-Meier",@"Range",@"Rate",@"Yes/No/Na"})]
        [ApiMember(Name = nameof(FieldType), Description = "LookupTable", IsRequired = false)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference FieldType { get; set; }
        [ApiMember(Name = nameof(FieldTypeId), Description = "Primary Key of LookupTable", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? FieldTypeId { get; set; }


        [ApiAllowableValues("Includes", Values = new string[] {@"AssociationMeasure",@"Boolean",@"CalendarDate",@"CalendarDates",@"Contact",@"DateTime",@"DateTimeRange",@"Decimal",@"DecimalRange",@"DesignNestedStudyIdLink",@"EventCounts",@"Facility",@"FixedDoseIntervention",@"Flag",@"Funding",@"ImportError",@"ImportErrors",@"Integer",@"Interval",@"Intervals",@"Lookup",@"Memo",@"NPersons",@"Participant",@"Participants",@"PopulationAnalyzed",@"PValue",@"Rate",@"SettingLocation",@"SettingLocationTotal",@"StudyDoc",@"StudyObjective",@"StudyReference",@"SubgroupDescriptor",@"Timepoint",@"Timepoints",@"UncollectedValue",@"UnitRange",@"Units",@"UnitsRange",@"UnitValue",@"YesNoNa"})]
        [ApiMember(Name = nameof(Name), Description = "LookupTable", IsRequired = true)]
[GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Reference Name { get; set; }
        [ApiMember(Name = nameof(NameId), Description = "Primary Key of LookupTable", IsRequired = false)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? NameId { get; set; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Deconstruct(out Reference pFieldType, out int? pFieldTypeId, out Reference pName, out int? pNameId)
        {
            pFieldType = FieldType;
            pFieldTypeId = FieldTypeId;
            pName = Name;
            pNameId = NameId;
        }

        //Not ready until C# v8.?
        //[GeneratedCodeAttribute("T4", "1.0.0.0")]
        //public ValueTypeBase With(int? pId = Id, Reference pFieldType = FieldType, int? pFieldTypeId = FieldTypeId, Reference pName = Name, int? pNameId = NameId) => 
        //	new ValueTypeBase(pId, pFieldType, pFieldTypeId, pName, pNameId);

    }


    [Route("/valuetype/{Id}", "GET")]

    public partial class ValueType : ValueTypeBase, IReturn<ValueType>, IDto, ICloneable
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ValueType() => _Constructor();
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ValueType(int? id) : base(DocConvert.ToInt(id)) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ValueType(int id) : base(id) {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ValueType(int? pId, Reference pFieldType, int? pFieldTypeId, Reference pName, int? pNameId) :
            base(pId, pFieldType, pFieldTypeId, pName, pNameId) { }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public static List<string> Fields => DocTools.Fields<ValueType>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(Created),nameof(CreatorId),nameof(FieldType),nameof(FieldTypeId),nameof(Gestalt),nameof(Locked),nameof(Name),nameof(NameId),nameof(Updated),nameof(VersionNo)})]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {

                    _Select = DocPermissionFactory.RemoveNonEssentialFields(Fields);

                }
                return _Select;
            }
            set
            {

                _Select = Fields;

            }
        }

        [Obsolete, ApiMember(Name = "VisibleFields", Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public override List<string> VisibleFields { get => Select; set => Select = value; }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Clone() => this.Copy<ValueType>();

    }
    

    public partial class ValueTypeSearchBase : Search<ValueType>
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public int? Id { get; set; }
        public Reference FieldType { get; set; }
        public List<int> FieldTypeIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"Binary",@"Continuous",@"Count",@"Individual",@"Kaplan-Meier",@"Range",@"Rate",@"Yes/No/Na"})]
        public List<string> FieldTypeNames { get; set; }
        public Reference Name { get; set; }
        public List<int> NameIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"AssociationMeasure",@"Boolean",@"CalendarDate",@"CalendarDates",@"Contact",@"DateTime",@"DateTimeRange",@"Decimal",@"DecimalRange",@"DesignNestedStudyIdLink",@"EventCounts",@"Facility",@"FixedDoseIntervention",@"Flag",@"Funding",@"ImportError",@"ImportErrors",@"Integer",@"Interval",@"Intervals",@"Lookup",@"Memo",@"NPersons",@"Participant",@"Participants",@"PopulationAnalyzed",@"PValue",@"Rate",@"SettingLocation",@"SettingLocationTotal",@"StudyDoc",@"StudyObjective",@"StudyReference",@"SubgroupDescriptor",@"Timepoint",@"Timepoints",@"UncollectedValue",@"UnitRange",@"Units",@"UnitsRange",@"UnitValue",@"YesNoNa"})]
        public List<string> NameNames { get; set; }
    }


    [Route("/valuetype", "GET")]
    [Route("/valuetype/version", "GET, POST")]
    [Route("/valuetype/search", "GET, POST, DELETE")]

    public partial class ValueTypeSearch : ValueTypeSearchBase
    {
    }

    public class ValueTypeFullTextSearch
    {
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ValueTypeFullTextSearch() {}
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private ValueTypeSearch _request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public ValueTypeFullTextSearch(ValueTypeSearch request) => _request = request;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(ValueType.Created))); }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(ValueType.Updated))); }

        public bool doFieldType { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(ValueType.FieldType))); }
        public bool doName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(ValueType.Name))); }
    }


    public partial class ValueTypeBatch : List<ValueType> { }


}
