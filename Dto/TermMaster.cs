
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;

using Services.Core;
using Services.Dto.internals;
using Services.Enums;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Notifications;
using Typed.Bindings;

using Xtensive.Orm;


namespace Services.Dto
{
    public abstract partial class TermMasterBase : Dto<TermMaster>
    {
        public TermMasterBase() {}

        public TermMasterBase(int id) : this()
        {
            if(id > 0) Id = id;
        }

        public TermMasterBase(int? id) : this(DocConvert.ToInt(id)) {}

        public TermMasterBase(int? pId, string pBioPortal, List<TermCategory> pCategories, int? pCategoriesCount, string pCUI, Reference pEnum, int? pEnumId, string pMedDRA, string pName, string pRxNorm, string pSNOWMED, List<Reference> pSynonyms, int? pSynonymsCount, string pTUI, string pURI) : this(DocConvert.ToInt(pId)) 
        {
            BioPortal = pBioPortal;
            Categories = pCategories;
            CategoriesCount = pCategoriesCount;
            CUI = pCUI;
            Enum = pEnum;
            EnumId = pEnumId;
            MedDRA = pMedDRA;
            Name = pName;
            RxNorm = pRxNorm;
            SNOWMED = pSNOWMED;
            Synonyms = pSynonyms;
            SynonymsCount = pSynonymsCount;
            TUI = pTUI;
            URI = pURI;
        }

        [ApiMember(Name = nameof(BioPortal), Description = "string", IsRequired = false)]
        public string BioPortal { get; set; }


        [ApiMember(Name = nameof(Categories), Description = "TermCategory", IsRequired = false)]
        public List<TermCategory> Categories { get; set; }
        public List<int> CategoriesIds { get; set; }
        public int? CategoriesCount { get; set; }


        [ApiMember(Name = nameof(CUI), Description = "string", IsRequired = false)]
        public string CUI { get; set; }


        [ApiMember(Name = nameof(Enum), Description = "LookupTableEnum", IsRequired = true)]
        public Reference Enum { get; set; }
        [ApiMember(Name = nameof(EnumId), Description = "Primary Key of LookupTableEnum", IsRequired = false)]
        public int? EnumId { get; set; }


        [ApiMember(Name = nameof(MedDRA), Description = "string", IsRequired = false)]
        public string MedDRA { get; set; }


        [ApiMember(Name = nameof(Name), Description = "string", IsRequired = true)]
        public string Name { get; set; }


        [ApiMember(Name = nameof(RxNorm), Description = "string", IsRequired = false)]
        public string RxNorm { get; set; }


        [ApiMember(Name = nameof(SNOWMED), Description = "string", IsRequired = false)]
        public string SNOWMED { get; set; }


        [ApiMember(Name = nameof(Synonyms), Description = "TermSynonym", IsRequired = false)]
        public List<Reference> Synonyms { get; set; }
        public List<int> SynonymsIds { get; set; }
        public int? SynonymsCount { get; set; }


        [ApiMember(Name = nameof(TUI), Description = "string", IsRequired = false)]
        public string TUI { get; set; }


        [ApiMember(Name = nameof(URI), Description = "string", IsRequired = false)]
        public string URI { get; set; }



        public void Deconstruct(out string pBioPortal, out List<TermCategory> pCategories, out int? pCategoriesCount, out string pCUI, out Reference pEnum, out int? pEnumId, out string pMedDRA, out string pName, out string pRxNorm, out string pSNOWMED, out List<Reference> pSynonyms, out int? pSynonymsCount, out string pTUI, out string pURI)
        {
            pBioPortal = BioPortal;
            pCategories = Categories;
            pCategoriesCount = CategoriesCount;
            pCUI = CUI;
            pEnum = Enum;
            pEnumId = EnumId;
            pMedDRA = MedDRA;
            pName = Name;
            pRxNorm = RxNorm;
            pSNOWMED = SNOWMED;
            pSynonyms = Synonyms;
            pSynonymsCount = SynonymsCount;
            pTUI = TUI;
            pURI = URI;
        }

        //Not ready until C# v8.?
        //public TermMasterBase With(int? pId = Id, string pBioPortal = BioPortal, List<TermCategory> pCategories = Categories, int? pCategoriesCount = CategoriesCount, string pCUI = CUI, Reference pEnum = Enum, int? pEnumId = EnumId, string pMedDRA = MedDRA, string pName = Name, string pRxNorm = RxNorm, string pSNOWMED = SNOWMED, List<Reference> pSynonyms = Synonyms, int? pSynonymsCount = SynonymsCount, string pTUI = TUI, string pURI = URI) => 
        //	new TermMasterBase(pId, pBioPortal, pCategories, pCategoriesCount, pCUI, pEnum, pEnumId, pMedDRA, pName, pRxNorm, pSNOWMED, pSynonyms, pSynonymsCount, pTUI, pURI);

    }


    [Route("/termmaster", "POST")]
    [Route("/termmaster/{Id}", "GET, PATCH, PUT, DELETE")]

    public partial class TermMaster : TermMasterBase, IReturn<TermMaster>, IDto, ICloneable
    {
        public TermMaster()
        {
            _Constructor();
        }

        public TermMaster(int? id) : base(DocConvert.ToInt(id)) {}
        public TermMaster(int id) : base(id) {}
        public TermMaster(int? pId, string pBioPortal, List<TermCategory> pCategories, int? pCategoriesCount, string pCUI, Reference pEnum, int? pEnumId, string pMedDRA, string pName, string pRxNorm, string pSNOWMED, List<Reference> pSynonyms, int? pSynonymsCount, string pTUI, string pURI) : 
            base(pId, pBioPortal, pCategories, pCategoriesCount, pCUI, pEnum, pEnumId, pMedDRA, pName, pRxNorm, pSNOWMED, pSynonyms, pSynonymsCount, pTUI, pURI) { }

        public new bool? ShouldSerialize(string field)
        {
            //Allow individual classes to specify their own logic
            var manualOverride = _ShouldSerialize(field);
            if(null != manualOverride) return manualOverride;

            if (IgnoredSelect.Matches(field, true)) return false;
            var ret = MandatorySelect.Matches(field, true) || true == Select?.Matches(field, true);
            return ret;
        }

        public static List<string> Fields => DocTools.Fields<TermMaster>();

        private List<string> _Select;
        [ApiMember(Name = nameof(Select), Description = "The list of fields to include in the response", AllowMultiple = true, IsRequired = true)]
        [ApiAllowableValues("Includes", Values = new string[] {nameof(BioPortal),nameof(Categories),nameof(CategoriesCount),nameof(Created),nameof(CreatorId),nameof(CUI),nameof(Enum),nameof(EnumId),nameof(Gestalt),nameof(Locked),nameof(MedDRA),nameof(Name),nameof(RxNorm),nameof(SNOWMED),nameof(Synonyms),nameof(SynonymsCount),nameof(TUI),nameof(Updated),nameof(URI),nameof(VersionNo)})]
        public override List<string> Select
        {
            get
            {
                if(null == this) return new List<string>();
                if(null == _Select)
                {


                    _Select = DocWebSession.GetTypeSelect(this);

                }
                return _Select;
            }
            set
            {


                var requested = value ?? new List<string>();
                var exists = requested.Where( r => Fields.Any( f => DocTools.AreEqual(r, f) ) ).ToList();
                _Select = DocPermissionFactory.SetSelect<TermMaster>("TermMaster",exists);

            }
        }

        [Obsolete, ApiMember(Name = nameof(VisibleFields), Description = "Deprecated. Use Select instead.", AllowMultiple = true)]
        public override List<string> VisibleFields { get => Select; set => Select = value; }


        private List<string> _collections = new List<string>
        {
            nameof(Categories), nameof(CategoriesCount), nameof(Synonyms), nameof(SynonymsCount)
        };
        private List<string> collections { get { return _collections; } }


        public object Clone() => this.Copy<TermMaster>();

    }
    

    [Route("/termmaster/{Id}/copy", "POST")]
    public partial class TermMasterCopy : TermMaster {}

    public partial class TermMasterSearchBase : Search<TermMaster>
    {
        public int? Id { get; set; }
        public string BioPortal { get; set; }
        public List<int> CategoriesIds { get; set; }
        public string CUI { get; set; }
        public Reference Enum { get; set; }
        public List<int> EnumIds { get; set; }
        [ApiAllowableValues("Includes", Values = new string[] {@"AmPersonCount",@"App",@"ArmPopulationAge",@"ArmPopulationN",@"AssociationMeasure",@"AttributeCategory",@"AttributeType",@"BroadcastStatus",@"BroadcastType",@"ConfidenceInterval",@"Conjunction",@"DatabaseType",@"DataHubSearchCategory",@"DataHubSource",@"DefaultTimeUnit",@"DefaultUnitType",@"Directionality",@"DocumentSetType",@"DocumentType",@"DosageProtocol",@"DosageType",@"EoDStatus",@"EqualityOperator",@"ErrorMessage",@"ExternalKey",@"Feature",@"FieldType",@"FileRights",@"FileSource",@"FileType",@"ForeignKeyStatus",@"FqReferenceStatus",@"Help",@"ImportStatus",@"IncidenceRateType",@"InstitutionType",@"IntegrationName",@"IntegrationPropertyName",@"InterventionLineOfTreatment",@"InterventionMedium",@"InterventionProvider",@"InterventionRoute",@"InterventionSchedule",@"InterventionStageSetting",@"InterventionType",@"Job",@"JunctionType",@"LookupTable",@"LookupType",@"ManualizedTreatment",@"MeanCalculationType",@"MeanRangeType",@"MeanVariableType",@"MeanVarianceType",@"MethodOfAnalysis",@"ModelName",@"OutcomeCategory",@"OutcomeType",@"Permission",@"PopulationType",@"PrevalenceType",@"ProtocolFilterOwner",@"ProtocolFilterType",@"ProtocolType",@"PublicationPoolStudies",@"PubType",@"Question",@"QuestionCategory",@"QuestionType",@"QueueChannel",@"Randomization",@"RangeType",@"Rating",@"ReasonRejected",@"ReconciliationStatus",@"RecruitmentMethod",@"RepresentativeSample",@"ResponsesCollectedBy",@"ResultsCategory",@"RiskOfBiasAssessment",@"Scope",@"SettingType",@"StatisticalSignificance",@"StatisticalTest",@"StatsRecordName",@"Status",@"StratificationType",@"StudyAllocattionMethod",@"StudyBias",@"StudyBlindingMethod",@"StudyCompliance",@"StudyDesign",@"StudyDocumentType",@"StudyFunding",@"StudyGroupType",@"StudyImportLocation",@"StudyImportType",@"StudyNGA",@"StudyObjective",@"StudyPhaseNames",@"StudyPurpose",@"StudyRandomizationMethod",@"StudyType",@"StudyTypeHarmEtiology",@"StudyTypeTherapy",@"StudyYears",@"TaskType",@"TermClassification",@"TermSection",@"TimeCardStatus",@"TimepointType",@"UnitsOfMeasure",@"UnitType",@"UserEmployeeType",@"UserPayrollStatus",@"UserPayrollType",@"UserType",@"ValueStatus",@"ValueType",@"VariableRule",@"VariableType",@"Workflow",@"WorkflowStatus",@"YesNoNa"})]
        public List<string> EnumNames { get; set; }
        public string MedDRA { get; set; }
        public string Name { get; set; }
        public string RxNorm { get; set; }
        public string SNOWMED { get; set; }
        public List<int> SynonymsIds { get; set; }
        public string TUI { get; set; }
        public string URI { get; set; }
    }


    [Route("/termmaster", "GET")]
    [Route("/termmaster/version", "GET, POST")]
    [Route("/termmaster/search", "GET, POST, DELETE")]

    public partial class TermMasterSearch : TermMasterSearchBase
    {
    }

    public class TermMasterFullTextSearch
    {
        public TermMasterFullTextSearch() {}
        private TermMasterSearch _request;
        public TermMasterFullTextSearch(TermMasterSearch request) => _request = request;

        public string fts { get => _request.FullTextSearch?.TrimAndPruneSpaces(); }
        public bool isBool { get => (fts == "1" || fts == "0" || fts.ToLower() == "true" || fts.ToLower() == "false"); }
        public bool ftsBool { get => DocConvert.ToBool(fts); }
        public DateTime ftsDate { get => DocConvert.ToDateTime(fts); }
        public bool isDate { get => ftsDate != DateTime.MinValue; }
        public bool doCreated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.Created))); }
        public bool doUpdated { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.Updated))); }

        public bool doBioPortal { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.BioPortal))); }
        public bool doCategories { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.Categories))); }
        public bool doCUI { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.CUI))); }
        public bool doEnum { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.Enum))); }
        public bool doMedDRA { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.MedDRA))); }
        public bool doName { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.Name))); }
        public bool doRxNorm { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.RxNorm))); }
        public bool doSNOWMED { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.SNOWMED))); }
        public bool doSynonyms { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.Synonyms))); }
        public bool doTUI { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.TUI))); }
        public bool doURI { get => true == _request.Select?.Any(v => DocTools.AreEqual(v, nameof(TermMaster.URI))); }
    }


    [Route("/termmaster/batch", "DELETE, PATCH, POST, PUT")]

    public partial class TermMasterBatch : List<TermMaster> { }


    [Route("/termmaster/{Id}/{Junction}/version", "GET, POST")]
    [Route("/termmaster/{Id}/{Junction}", "GET, POST, DELETE")]
    public class TermMasterJunction : TermMasterSearchBase {}



}
