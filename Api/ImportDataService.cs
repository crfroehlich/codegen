//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class ImportDataService : DocServiceBase
    {
        private IQueryable<DocEntityImportData> _ExecSearch(ImportDataSearch request)
        {
            request = InitSearch(request);
            
            IQueryable<DocEntityImportData> entities = null;
            
            DocPermissionFactory.SetVisibleFields<ImportData>(currentUser, "ImportData", request.VisibleFields);

            Execute.Run( session => 
            {
                entities = Execute.SelectAll<DocEntityImportData>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new ImportDataFullTextSearch(request);
                    entities = GetFullTextSearch(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                if(!DocTools.IsNullOrEmpty(request.CompletedOn))
                    entities = entities.Where(en => null != en.CompletedOn && request.CompletedOn.Value.Date == en.CompletedOn.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.CompletedOnBefore))
                    entities = entities.Where(en => en.CompletedOn <= request.CompletedOnBefore);
                if(!DocTools.IsNullOrEmpty(request.CompletedOnAfter))
                    entities = entities.Where(en => en.CompletedOn >= request.CompletedOnAfter);
                if(!DocTools.IsNullOrEmpty(request.Document) && !DocTools.IsNullOrEmpty(request.Document.Id))
                {
                    entities = entities.Where(en => en.Document.Id == request.Document.Id );
                }
                if(true == request.DocumentIds?.Any())
                {
                    entities = entities.Where(en => en.Document.Id.In(request.DocumentIds));
                }
                        if(true == request.DocumentSetsIds?.Any())
                        {
                            entities = entities.Where(en => en.DocumentSets.Any(r => r.Id.In(request.DocumentSetsIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.ErrorData))
                    entities = entities.Where(en => en.ErrorData.Contains(request.ErrorData));
                if(!DocTools.IsNullOrEmpty(request.ExtractUrl))
                    entities = entities.Where(en => en.ExtractUrl.Contains(request.ExtractUrl));
                if(request.HighPriority.HasValue)
                    entities = entities.Where(en => request.HighPriority.Value == en.HighPriority);
                if(request.ImportFr.HasValue)
                    entities = entities.Where(en => request.ImportFr.Value == en.ImportFr);
                if(request.ImportNewName.HasValue)
                    entities = entities.Where(en => request.ImportNewName.Value == en.ImportNewName);
                if(request.ImportTable.HasValue)
                    entities = entities.Where(en => request.ImportTable.Value == en.ImportTable);
                if(request.ImportText.HasValue)
                    entities = entities.Where(en => request.ImportText.Value == en.ImportText);
                if(!DocTools.IsNullOrEmpty(request.ImportType) && !DocTools.IsNullOrEmpty(request.ImportType.Id))
                {
                    entities = entities.Where(en => en.ImportType.Id == request.ImportType.Id );
                }
                if(true == request.ImportTypeIds?.Any())
                {
                    entities = entities.Where(en => en.ImportType.Id.In(request.ImportTypeIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.ImportType) && !DocTools.IsNullOrEmpty(request.ImportType.Name))
                {
                    entities = entities.Where(en => en.ImportType.Name == request.ImportType.Name );
                }
                if(true == request.ImportTypeNames?.Any())
                {
                    entities = entities.Where(en => en.ImportType.Name.In(request.ImportTypeNames));
                }
                if(request.IsLegacy.HasValue)
                    entities = entities.Where(en => request.IsLegacy.Value == en.IsLegacy);
                if(request.Order.HasValue)
                    entities = entities.Where(en => request.Order.Value == en.Order);
                if(request.ReferenceId.HasValue)
                    entities = entities.Where(en => request.ReferenceId.Value == en.ReferenceId);
                if(!DocTools.IsNullOrEmpty(request.RequestedBy) && !DocTools.IsNullOrEmpty(request.RequestedBy.Id))
                {
                    entities = entities.Where(en => en.RequestedBy.Id == request.RequestedBy.Id );
                }
                if(true == request.RequestedByIds?.Any())
                {
                    entities = entities.Where(en => en.RequestedBy.Id.In(request.RequestedByIds));
                }
                if(!DocTools.IsNullOrEmpty(request.RequestedOn))
                    entities = entities.Where(en => null != en.RequestedOn && request.RequestedOn.Value.Date == en.RequestedOn.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.RequestedOnBefore))
                    entities = entities.Where(en => en.RequestedOn <= request.RequestedOnBefore);
                if(!DocTools.IsNullOrEmpty(request.RequestedOnAfter))
                    entities = entities.Where(en => en.RequestedOn >= request.RequestedOnAfter);
                if(!DocTools.IsNullOrEmpty(request.StartedOn))
                    entities = entities.Where(en => null != en.StartedOn && request.StartedOn.Value.Date == en.StartedOn.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.StartedOnBefore))
                    entities = entities.Where(en => en.StartedOn <= request.StartedOnBefore);
                if(!DocTools.IsNullOrEmpty(request.StartedOnAfter))
                    entities = entities.Where(en => en.StartedOn >= request.StartedOnAfter);
                if(!DocTools.IsNullOrEmpty(request.Status) && !DocTools.IsNullOrEmpty(request.Status.Id))
                {
                    entities = entities.Where(en => en.Status.Id == request.Status.Id );
                }
                if(true == request.StatusIds?.Any())
                {
                    entities = entities.Where(en => en.Status.Id.In(request.StatusIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.Status) && !DocTools.IsNullOrEmpty(request.Status.Name))
                {
                    entities = entities.Where(en => en.Status.Name == request.Status.Name );
                }
                if(true == request.StatusNames?.Any())
                {
                    entities = entities.Where(en => en.Status.Name.In(request.StatusNames));
                }

                entities = ApplyFilters(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            
            return entities;
        }

        public List<ImportData> Post(ImportDataSearch request) => Get(request);

        public List<ImportData> Get(ImportDataSearch request) => GetSearchResult<ImportData,DocEntityImportData,ImportDataSearch>(DocConstantModelName.IMPORTDATA, request, _ExecSearch);

        public object Post(ImportDataVersion request) => Get(request);

        public object Get(ImportDataVersion request) 
        {
            List<Version> ret = null;
            Execute.Run(s=>
            {
                ret = _ExecSearch(request).Select(e => new Version(e.Id, e.VersionNo)).ToList();
            });
            return ret;
        }

        public ImportData Get(ImportData request) => GetEntity<ImportData>(DocConstantModelName.IMPORTDATA, request, GetImportData);
        private ImportData _AssignValues(ImportData request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "ImportData"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            ImportData ret = null;
            request = _InitAssignValues(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<ImportData>(DocConstantModelName.IMPORTDATA, nameof(ImportData), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pCompletedOn = request.CompletedOn;
            var pDocument = (request.Document?.Id > 0) ? DocEntityDocument.GetDocument(request.Document.Id) : null;
            var pDocumentSets = request.DocumentSets?.ToList();
            var pErrorData = request.ErrorData;
            var pExtractUrl = request.ExtractUrl;
            var pHighPriority = request.HighPriority;
            var pImportFr = request.ImportFr;
            var pImportNewName = request.ImportNewName;
            var pImportTable = request.ImportTable;
            var pImportText = request.ImportText;
            DocEntityLookupTable pImportType = GetLookup(DocConstantLookupTable.STUDYIMPORTTYPE, request.ImportType?.Name, request.ImportType?.Id);
            var pIsLegacy = request.IsLegacy;
            var pOrder = request.Order;
            var pReferenceId = request.ReferenceId;
            var pRequestedBy = (request.RequestedBy?.Id > 0) ? DocEntityUser.GetUser(request.RequestedBy.Id) : null;
            var pRequestedOn = request.RequestedOn;
            var pStartedOn = request.StartedOn;
            DocEntityLookupTable pStatus = GetLookup(DocConstantLookupTable.IMPORTSTATUS, request.Status?.Name, request.Status?.Id);

            DocEntityImportData entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityImportData(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityImportData.GetImportData(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, request, pCompletedOn, permission, DocConstantModelName.IMPORTDATA, nameof(request.CompletedOn)))
            {
                if(DocPermissionFactory.IsRequested(request, pCompletedOn, entity.CompletedOn, nameof(request.CompletedOn)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.CompletedOn)} cannot be modified once set.");
                    entity.CompletedOn = pCompletedOn;
                if(DocPermissionFactory.IsRequested<DateTime?>(request, pCompletedOn, nameof(request.CompletedOn)) && !request.VisibleFields.Matches(nameof(request.CompletedOn), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.CompletedOn));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityDocument>(currentUser, request, pDocument, permission, DocConstantModelName.IMPORTDATA, nameof(request.Document)))
            {
                if(DocPermissionFactory.IsRequested(request, pDocument, entity.Document, nameof(request.Document)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Document)} cannot be modified once set.");
                    entity.Document = pDocument;
                if(DocPermissionFactory.IsRequested<DocEntityDocument>(request, pDocument, nameof(request.Document)) && !request.VisibleFields.Matches(nameof(request.Document), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Document));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pErrorData, permission, DocConstantModelName.IMPORTDATA, nameof(request.ErrorData)))
            {
                if(DocPermissionFactory.IsRequested(request, pErrorData, entity.ErrorData, nameof(request.ErrorData)))
                    entity.ErrorData = pErrorData;
                if(DocPermissionFactory.IsRequested<string>(request, pErrorData, nameof(request.ErrorData)) && !request.VisibleFields.Matches(nameof(request.ErrorData), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ErrorData));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pExtractUrl, permission, DocConstantModelName.IMPORTDATA, nameof(request.ExtractUrl)))
            {
                if(DocPermissionFactory.IsRequested(request, pExtractUrl, entity.ExtractUrl, nameof(request.ExtractUrl)))
                    entity.ExtractUrl = pExtractUrl;
                if(DocPermissionFactory.IsRequested<string>(request, pExtractUrl, nameof(request.ExtractUrl)) && !request.VisibleFields.Matches(nameof(request.ExtractUrl), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ExtractUrl));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pHighPriority, permission, DocConstantModelName.IMPORTDATA, nameof(request.HighPriority)))
            {
                if(DocPermissionFactory.IsRequested(request, pHighPriority, entity.HighPriority, nameof(request.HighPriority)))
                    entity.HighPriority = pHighPriority;
                if(DocPermissionFactory.IsRequested<bool>(request, pHighPriority, nameof(request.HighPriority)) && !request.VisibleFields.Matches(nameof(request.HighPriority), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.HighPriority));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pImportFr, permission, DocConstantModelName.IMPORTDATA, nameof(request.ImportFr)))
            {
                if(DocPermissionFactory.IsRequested(request, pImportFr, entity.ImportFr, nameof(request.ImportFr)))
                    entity.ImportFr = pImportFr;
                if(DocPermissionFactory.IsRequested<bool>(request, pImportFr, nameof(request.ImportFr)) && !request.VisibleFields.Matches(nameof(request.ImportFr), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ImportFr));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pImportNewName, permission, DocConstantModelName.IMPORTDATA, nameof(request.ImportNewName)))
            {
                if(DocPermissionFactory.IsRequested(request, pImportNewName, entity.ImportNewName, nameof(request.ImportNewName)))
                    entity.ImportNewName = pImportNewName;
                if(DocPermissionFactory.IsRequested<bool>(request, pImportNewName, nameof(request.ImportNewName)) && !request.VisibleFields.Matches(nameof(request.ImportNewName), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ImportNewName));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pImportTable, permission, DocConstantModelName.IMPORTDATA, nameof(request.ImportTable)))
            {
                if(DocPermissionFactory.IsRequested(request, pImportTable, entity.ImportTable, nameof(request.ImportTable)))
                    entity.ImportTable = pImportTable;
                if(DocPermissionFactory.IsRequested<bool>(request, pImportTable, nameof(request.ImportTable)) && !request.VisibleFields.Matches(nameof(request.ImportTable), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ImportTable));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pImportText, permission, DocConstantModelName.IMPORTDATA, nameof(request.ImportText)))
            {
                if(DocPermissionFactory.IsRequested(request, pImportText, entity.ImportText, nameof(request.ImportText)))
                    entity.ImportText = pImportText;
                if(DocPermissionFactory.IsRequested<bool>(request, pImportText, nameof(request.ImportText)) && !request.VisibleFields.Matches(nameof(request.ImportText), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ImportText));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, request, pImportType, permission, DocConstantModelName.IMPORTDATA, nameof(request.ImportType)))
            {
                if(DocPermissionFactory.IsRequested(request, pImportType, entity.ImportType, nameof(request.ImportType)))
                    entity.ImportType = pImportType;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(request, pImportType, nameof(request.ImportType)) && !request.VisibleFields.Matches(nameof(request.ImportType), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ImportType));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsLegacy, permission, DocConstantModelName.IMPORTDATA, nameof(request.IsLegacy)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsLegacy, entity.IsLegacy, nameof(request.IsLegacy)))
                    entity.IsLegacy = pIsLegacy;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsLegacy, nameof(request.IsLegacy)) && !request.VisibleFields.Matches(nameof(request.IsLegacy), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsLegacy));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pOrder, permission, DocConstantModelName.IMPORTDATA, nameof(request.Order)))
            {
                if(DocPermissionFactory.IsRequested(request, pOrder, entity.Order, nameof(request.Order)))
                    entity.Order = pOrder;
                if(DocPermissionFactory.IsRequested<int?>(request, pOrder, nameof(request.Order)) && !request.VisibleFields.Matches(nameof(request.Order), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Order));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pReferenceId, permission, DocConstantModelName.IMPORTDATA, nameof(request.ReferenceId)))
            {
                if(DocPermissionFactory.IsRequested(request, pReferenceId, entity.ReferenceId, nameof(request.ReferenceId)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ReferenceId)} cannot be modified once set.");
                    if(null != pReferenceId)
                        entity.ReferenceId = (int) pReferenceId;
                if(DocPermissionFactory.IsRequested<int?>(request, pReferenceId, nameof(request.ReferenceId)) && !request.VisibleFields.Matches(nameof(request.ReferenceId), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ReferenceId));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityUser>(currentUser, request, pRequestedBy, permission, DocConstantModelName.IMPORTDATA, nameof(request.RequestedBy)))
            {
                if(DocPermissionFactory.IsRequested(request, pRequestedBy, entity.RequestedBy, nameof(request.RequestedBy)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.RequestedBy)} cannot be modified once set.");
                    entity.RequestedBy = pRequestedBy;
                if(DocPermissionFactory.IsRequested<DocEntityUser>(request, pRequestedBy, nameof(request.RequestedBy)) && !request.VisibleFields.Matches(nameof(request.RequestedBy), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.RequestedBy));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, request, pRequestedOn, permission, DocConstantModelName.IMPORTDATA, nameof(request.RequestedOn)))
            {
                if(DocPermissionFactory.IsRequested(request, pRequestedOn, entity.RequestedOn, nameof(request.RequestedOn)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.RequestedOn)} cannot be modified once set.");
                    entity.RequestedOn = pRequestedOn;
                if(DocPermissionFactory.IsRequested<DateTime?>(request, pRequestedOn, nameof(request.RequestedOn)) && !request.VisibleFields.Matches(nameof(request.RequestedOn), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.RequestedOn));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, request, pStartedOn, permission, DocConstantModelName.IMPORTDATA, nameof(request.StartedOn)))
            {
                if(DocPermissionFactory.IsRequested(request, pStartedOn, entity.StartedOn, nameof(request.StartedOn)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.StartedOn)} cannot be modified once set.");
                    entity.StartedOn = pStartedOn;
                if(DocPermissionFactory.IsRequested<DateTime?>(request, pStartedOn, nameof(request.StartedOn)) && !request.VisibleFields.Matches(nameof(request.StartedOn), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.StartedOn));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, request, pStatus, permission, DocConstantModelName.IMPORTDATA, nameof(request.Status)))
            {
                if(DocPermissionFactory.IsRequested(request, pStatus, entity.Status, nameof(request.Status)))
                    entity.Status = pStatus;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(request, pStatus, nameof(request.Status)) && !request.VisibleFields.Matches(nameof(request.Status), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Status));
                }
            }
            
            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);
            
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pDocumentSets, permission, DocConstantModelName.IMPORTDATA, nameof(request.DocumentSets)))
            {
                if (true == pDocumentSets?.Any() )
                {
                    var requestedDocumentSets = pDocumentSets.Select(p => p.Id).Distinct().ToList();
                    var existsDocumentSets = Execute.SelectAll<DocEntityDocumentSet>().Where(e => e.Id.In(requestedDocumentSets)).Select( e => e.Id ).ToList();
                    if (existsDocumentSets.Count != requestedDocumentSets.Count)
                    {
                        var nonExists = requestedDocumentSets.Where(id => existsDocumentSets.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection DocumentSets with objects that do not exist. No matching DocumentSets(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedDocumentSets.Where(id => entity.DocumentSets.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(ImportData), columnName: nameof(request.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.DocumentSets)} to {nameof(ImportData)}");
                        entity.DocumentSets.Add(target);
                    });
                    var toRemove = entity.DocumentSets.Where(e => requestedDocumentSets.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(ImportData), columnName: nameof(request.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.DocumentSets)} from {nameof(ImportData)}");
                        entity.DocumentSets.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.DocumentSets.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(ImportData), columnName: nameof(request.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.DocumentSets)} from {nameof(ImportData)}");
                        entity.DocumentSets.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pDocumentSets, nameof(request.DocumentSets)) && !request.VisibleFields.Matches(nameof(request.DocumentSets), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.DocumentSets));
                }
            }
            DocPermissionFactory.SetVisibleFields<ImportData>(currentUser, nameof(ImportData), request.VisibleFields);
            ret = entity.ToDto();

            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.IMPORTDATA);

            return ret;
        }
        public ImportData Post(ImportData request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            ImportData ret = null;

            Execute.Run(ssn =>
            {
                if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "ImportData")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
            });

            return ret;
        }
   
        public List<ImportData> Post(ImportDataBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<ImportData>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as ImportData;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public ImportData Post(ImportDataCopy request)
        {
            ImportData ret = null;
            Execute.Run(ssn =>
            {
                var entity = DocEntityImportData.GetImportData(request?.Id);
                if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");
                
                    var pCompletedOn = entity.CompletedOn;
                    var pDocument = entity.Document;
                    var pDocumentSets = entity.DocumentSets.ToList();
                    var pErrorData = entity.ErrorData;
                    var pExtractUrl = entity.ExtractUrl;
                    if(!DocTools.IsNullOrEmpty(pExtractUrl))
                        pExtractUrl += " (Copy)";
                    var pHighPriority = entity.HighPriority;
                    var pImportFr = entity.ImportFr;
                    var pImportNewName = entity.ImportNewName;
                    var pImportTable = entity.ImportTable;
                    var pImportText = entity.ImportText;
                    var pImportType = entity.ImportType;
                    var pIsLegacy = entity.IsLegacy;
                    var pOrder = entity.Order;
                    var pReferenceId = entity.ReferenceId;
                    var pRequestedBy = entity.RequestedBy;
                    var pRequestedOn = entity.RequestedOn;
                    var pStartedOn = entity.StartedOn;
                    var pStatus = entity.Status;
                #region Custom Before copyImportData
                #endregion Custom Before copyImportData
                var copy = new DocEntityImportData(ssn)
                {
                    Hash = Guid.NewGuid()
                                , CompletedOn = pCompletedOn
                                , Document = pDocument
                                , ErrorData = pErrorData
                                , ExtractUrl = pExtractUrl
                                , HighPriority = pHighPriority
                                , ImportFr = pImportFr
                                , ImportNewName = pImportNewName
                                , ImportTable = pImportTable
                                , ImportText = pImportText
                                , ImportType = pImportType
                                , IsLegacy = pIsLegacy
                                , Order = pOrder
                                , ReferenceId = pReferenceId
                                , RequestedBy = pRequestedBy
                                , RequestedOn = pRequestedOn
                                , StartedOn = pStartedOn
                                , Status = pStatus
                };
                            foreach(var item in pDocumentSets)
                            {
                                entity.DocumentSets.Add(item);
                            }

                #region Custom After copyImportData
                #endregion Custom After copyImportData
                copy.SaveChanges(DocConstantPermission.ADD);
                ret = copy.ToDto();
            });
            return ret;
        }


        public List<ImportData> Put(ImportDataBatch request)
        {
            return Patch(request);
        }

        public ImportData Put(ImportData request)
        {
            return Patch(request);
        }

        public List<ImportData> Patch(ImportDataBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<ImportData>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as ImportData;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public ImportData Patch(ImportData request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the ImportData to patch.");
            
            request.VisibleFields = request.VisibleFields ?? new List<string>();
            
            ImportData ret = null;
            Execute.Run(ssn =>
            {
                ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
            });
            return ret;
        }

        public void Delete(ImportDataBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(ImportData request)
        {
            Execute.Run(ssn =>
            {
                if(!(request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, $"No Id provided for delete.");

                DocCacheClient.RemoveSearch(DocConstantModelName.IMPORTDATA);
                DocCacheClient.RemoveById(request.Id);
                var en = DocEntityImportData.GetImportData(request?.Id);

                if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No ImportData could be found for Id {request?.Id}.");
                if(en.IsRemoved) return;
                
                if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                en.Remove();
            });
        }

        public void Delete(ImportDataSearch request)
        {
            var matches = Get(request) as List<ImportData>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");

            Execute.Run(ssn =>
            {
                matches.ForEach(match =>
                {
                    Delete(match);
                });
            });
        }
        public object Get(ImportDataJunction request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            object ret = null;
            var skip = (request.Skip > 0) ? request.Skip.Value : 0;
            var take = (request.Take > 0) ? request.Take.Value : int.MaxValue;
                        
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-1]?.ToLower().Trim();
            Execute.Run( s => 
            {
                switch(method)
                {
                case "documentset":
                    ret = _GetImportDataDocumentSet(request, skip, take);
                    break;
                }
            });
            return ret;
        }
        
        public object Get(ImportDataJunctionVersion request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
            
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-2]?.ToLower().Trim();
            Execute.Run( ssn =>
            {
                switch(method)
                {
                case "documentset":
                    ret = GetImportDataDocumentSetVersion(request);
                    break;
                }
            });
            return ret;
        }
        

        private object _GetImportDataDocumentSet(ImportDataJunction request, int skip, int take)
        {
             request.VisibleFields = InitVisibleFields<DocumentSet>(Dto.DocumentSet.Fields, request.VisibleFields);
             var en = DocEntityImportData.GetImportData(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.IMPORTDATA, columnName: "DocumentSets", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between ImportData and DocumentSet");
             return en?.DocumentSets.Take(take).Skip(skip).ConvertFromEntityList<DocEntityDocumentSet,DocumentSet>(new List<DocumentSet>());
        }

        private List<Version> GetImportDataDocumentSetVersion(ImportDataJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityImportData.GetImportData(request.Id);
                ret = en?.DocumentSets.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }
        
        public object Post(ImportDataJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                case "documentset":
                    ret = _PostImportDataDocumentSet(request);
                    break;
                }
            });
            return ret;
        }


        private object _PostImportDataDocumentSet(ImportDataJunction request)
        {
            var entity = DocEntityImportData.GetImportData(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No ImportData found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to ImportData");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityDocumentSet.GetDocumentSet(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.DOCUMENTSET, columnName: "DocumentSets")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the DocumentSets property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of ImportData with objects that do not exist. No matching DocumentSet could be found for {id}.");
                entity.DocumentSets.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        public object Delete(ImportDataJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                case "documentset":
                    ret = _DeleteImportDataDocumentSet(request);
                    break;
                }
            });
            return ret;
        }


        private object _DeleteImportDataDocumentSet(ImportDataJunction request)
        {
            var entity = DocEntityImportData.GetImportData(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No ImportData found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to ImportData");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityDocumentSet.GetDocumentSet(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.DOCUMENTSET, columnName: "DocumentSets"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between ImportData and DocumentSet");
                if(null != relationship && false == relationship.IsRemoved) entity.DocumentSets.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private ImportData GetImportData(ImportData request)
        {
            var id = request?.Id;
            ImportData ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<ImportData>(currentUser, "ImportData", request.VisibleFields);

            DocEntityImportData entity = null;
            if(id.HasValue)
            {
                entity = DocEntityImportData.GetImportData(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No ImportData found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

        public List<int> Any(ImportDataIds request)
        {
            List<int> ret = null;
            if (currentUser.IsSuperAdmin)
            {
                Execute.Run(s => { ret = Execute.SelectAll<DocEntityImportData>().Select(d => d.Id).ToList(); });
            }
            else
            {
                throw new HttpError(HttpStatusCode.Forbidden);
            }

            return ret;
        }
    }
}