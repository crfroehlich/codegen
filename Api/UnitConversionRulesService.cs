
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;

using Xtensive.Orm;


namespace Services.API
{
    public partial class UnitConversionRulesService : DocServiceBase
    {

        private IQueryable<DocEntityUnitConversionRules> _ExecSearch(UnitConversionRulesSearch request, DocQuery query)
        {
            request = InitSearch<UnitConversionRules, UnitConversionRulesSearch>(request);
            IQueryable<DocEntityUnitConversionRules> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityUnitConversionRules>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new UnitConversionRulesFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityUnitConversionRules,UnitConversionRulesFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.UNITCONVERSIONRULES, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }
                if(!DocTools.IsNullOrEmpty(request.DestinationUnit) && !DocTools.IsNullOrEmpty(request.DestinationUnit.Id))
                {
                    entities = entities.Where(en => en.DestinationUnit.Id == request.DestinationUnit.Id );
                }
                if(true == request.DestinationUnitIds?.Any())
                {
                    entities = entities.Where(en => en.DestinationUnit.Id.In(request.DestinationUnitIds));
                }
                if(true == request.IsDefault?.Any())
                {
                    if(request.IsDefault.Any(v => v == null)) entities = entities.Where(en => en.IsDefault.In(request.IsDefault) || en.IsDefault == null);
                    else entities = entities.Where(en => en.IsDefault.In(request.IsDefault));
                }
                if(true == request.IsDestinationSi?.Any())
                {
                    if(request.IsDestinationSi.Any(v => v == null)) entities = entities.Where(en => en.IsDestinationSi.In(request.IsDestinationSi) || en.IsDestinationSi == null);
                    else entities = entities.Where(en => en.IsDestinationSi.In(request.IsDestinationSi));
                }
                if(!DocTools.IsNullOrEmpty(request.ModifierTerm) && !DocTools.IsNullOrEmpty(request.ModifierTerm.Id))
                {
                    entities = entities.Where(en => en.ModifierTerm.Id == request.ModifierTerm.Id );
                }
                if(true == request.ModifierTermIds?.Any())
                {
                    entities = entities.Where(en => en.ModifierTerm.Id.In(request.ModifierTermIds));
                }
                if(request.Multiplier.HasValue)
                    entities = entities.Where(en => request.Multiplier.Value == en.Multiplier);
                if(!DocTools.IsNullOrEmpty(request.Parent) && !DocTools.IsNullOrEmpty(request.Parent.Id))
                {
                    entities = entities.Where(en => en.Parent.Id == request.Parent.Id );
                }
                if(true == request.ParentIds?.Any())
                {
                    entities = entities.Where(en => en.Parent.Id.In(request.ParentIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.Parent) && !DocTools.IsNullOrEmpty(request.Parent.Name))
                {
                    entities = entities.Where(en => en.Parent.Name == request.Parent.Name );
                }
                if(true == request.ParentNames?.Any())
                {
                    entities = entities.Where(en => en.Parent.Name.In(request.ParentNames));
                }
                if(!DocTools.IsNullOrEmpty(request.RootTerm) && !DocTools.IsNullOrEmpty(request.RootTerm.Id))
                {
                    entities = entities.Where(en => en.RootTerm.Id == request.RootTerm.Id );
                }
                if(true == request.RootTermIds?.Any())
                {
                    entities = entities.Where(en => en.RootTerm.Id.In(request.RootTermIds));
                }
                if(!DocTools.IsNullOrEmpty(request.SourceUnit) && !DocTools.IsNullOrEmpty(request.SourceUnit.Id))
                {
                    entities = entities.Where(en => en.SourceUnit.Id == request.SourceUnit.Id );
                }
                if(true == request.SourceUnitIds?.Any())
                {
                    entities = entities.Where(en => en.SourceUnit.Id.In(request.SourceUnitIds));
                }

                entities = ApplyFilters<DocEntityUnitConversionRules,UnitConversionRulesSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(UnitConversionRulesSearch request) => Get(request);

        public object Get(UnitConversionRulesSearch request) => GetSearchResultWithCache<UnitConversionRules,DocEntityUnitConversionRules,UnitConversionRulesSearch>(DocConstantModelName.UNITCONVERSIONRULES, request, _ExecSearch);

        public object Get(UnitConversionRules request) => GetEntityWithCache<UnitConversionRules>(DocConstantModelName.UNITCONVERSIONRULES, request, GetUnitConversionRules);



        private UnitConversionRules _AssignValues(UnitConversionRules request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "UnitConversionRules"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.Select = request.Select ?? new List<string>();

            UnitConversionRules ret = null;
            request = _InitAssignValues<UnitConversionRules>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<UnitConversionRules>(DocConstantModelName.UNITCONVERSIONRULES, nameof(UnitConversionRules), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pDestinationUnit = (request.DestinationUnit?.Id > 0) ? DocEntityUnitOfMeasure.Get(request.DestinationUnit.Id) : null;
            var pIsDefault = request.IsDefault;
            var pIsDestinationSi = request.IsDestinationSi;
            var pModifierTerm = (request.ModifierTerm?.Id > 0) ? DocEntityTermMaster.Get(request.ModifierTerm.Id) : null;
            var pMultiplier = request.Multiplier;
            DocEntityLookupTable pParent = GetLookup(DocConstantLookupTable.UNITCONVERSIONRULEPARENT, request.Parent?.Name, request.Parent?.Id);
            var pRootTerm = (request.RootTerm?.Id > 0) ? DocEntityTermMaster.Get(request.RootTerm.Id) : null;
            var pSourceUnit = (request.SourceUnit?.Id > 0) ? DocEntityUnitOfMeasure.Get(request.SourceUnit.Id) : null;

            DocEntityUnitConversionRules entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityUnitConversionRules(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityUnitConversionRules.Get(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            //Special case for Archived
            var pArchived = true == request.Archived;
            if (PatchValue<UnitConversionRules, bool>(request, DocConstantModelName.UNITCONVERSIONRULES, pArchived, entity.Archived, permission, nameof(request.Archived), pArchived != entity.Archived))
            {
                entity.Archived = pArchived;
            }
            if (PatchValue<UnitConversionRules, DocEntityUnitOfMeasure>(request, DocConstantModelName.UNITCONVERSIONRULES, pDestinationUnit, entity.DestinationUnit, permission, nameof(request.DestinationUnit), pDestinationUnit != entity.DestinationUnit))
            {
                entity.DestinationUnit = pDestinationUnit;
            }
            if (PatchValue<UnitConversionRules, bool>(request, DocConstantModelName.UNITCONVERSIONRULES, pIsDefault, entity.IsDefault, permission, nameof(request.IsDefault), pIsDefault != entity.IsDefault))
            {
                entity.IsDefault = pIsDefault;
            }
            if (PatchValue<UnitConversionRules, bool>(request, DocConstantModelName.UNITCONVERSIONRULES, pIsDestinationSi, entity.IsDestinationSi, permission, nameof(request.IsDestinationSi), pIsDestinationSi != entity.IsDestinationSi))
            {
                entity.IsDestinationSi = pIsDestinationSi;
            }
            if (PatchValue<UnitConversionRules, DocEntityTermMaster>(request, DocConstantModelName.UNITCONVERSIONRULES, pModifierTerm, entity.ModifierTerm, permission, nameof(request.ModifierTerm), pModifierTerm != entity.ModifierTerm))
            {
                entity.ModifierTerm = pModifierTerm;
            }
            if (PatchValue<UnitConversionRules, decimal>(request, DocConstantModelName.UNITCONVERSIONRULES, pMultiplier, entity.Multiplier, permission, nameof(request.Multiplier), pMultiplier != entity.Multiplier))
            {
                entity.Multiplier = pMultiplier;
            }
            if (PatchValue<UnitConversionRules, DocEntityLookupTable>(request, DocConstantModelName.UNITCONVERSIONRULES, pParent, entity.Parent, permission, nameof(request.Parent), pParent != entity.Parent))
            {
                entity.Parent = pParent;
            }
            if (PatchValue<UnitConversionRules, DocEntityTermMaster>(request, DocConstantModelName.UNITCONVERSIONRULES, pRootTerm, entity.RootTerm, permission, nameof(request.RootTerm), pRootTerm != entity.RootTerm))
            {
                entity.RootTerm = pRootTerm;
            }
            if (PatchValue<UnitConversionRules, DocEntityUnitOfMeasure>(request, DocConstantModelName.UNITCONVERSIONRULES, pSourceUnit, entity.SourceUnit, permission, nameof(request.SourceUnit), pSourceUnit != entity.SourceUnit))
            {
                entity.SourceUnit = pSourceUnit;
            }

            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);

            var idsToInvalidate = new List<int>();

            if (idsToInvalidate.Any())
            {
                idsToInvalidate.Add(entity.Id);
                DocCacheClient.RemoveByEntityIds(idsToInvalidate);
                DocCacheClient.RemoveSearch(DocConstantModelName.UNITCONVERSIONRULES);
            }

            DocPermissionFactory.SetSelect<UnitConversionRules>(currentUser, nameof(UnitConversionRules), request.Select);
            ret = entity.ToDto();

            var cacheExpires = DocResources.Metadata.GetCacheExpiration(DocConstantModelName.UNITCONVERSIONRULES);
            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.UNITCONVERSIONRULES, cacheExpires);

            return ret;
        }


        public UnitConversionRules Post(UnitConversionRules request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.Select = request.Select ?? new List<string>();

            UnitConversionRules ret = null;

            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "UnitConversionRules")) 
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
                });
            }
            return ret;
        }
   
        public List<UnitConversionRules> Post(UnitConversionRulesBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<UnitConversionRules>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as UnitConversionRules;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public UnitConversionRules Post(UnitConversionRulesCopy request)
        {
            UnitConversionRules ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    var entity = DocEntityUnitConversionRules.Get(request?.Id);
                    if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                    if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    var pDestinationUnit = entity.DestinationUnit;
                    var pIsDefault = entity.IsDefault;
                    var pIsDestinationSi = entity.IsDestinationSi;
                    var pModifierTerm = entity.ModifierTerm;
                    var pMultiplier = entity.Multiplier;
                    var pParent = entity.Parent;
                    var pRootTerm = entity.RootTerm;
                    var pSourceUnit = entity.SourceUnit;
                    var copy = new DocEntityUnitConversionRules(ssn)
                    {
                        Hash = Guid.NewGuid()
                                , DestinationUnit = pDestinationUnit
                                , IsDefault = pIsDefault
                                , IsDestinationSi = pIsDestinationSi
                                , ModifierTerm = pModifierTerm
                                , Multiplier = pMultiplier
                                , Parent = pParent
                                , RootTerm = pRootTerm
                                , SourceUnit = pSourceUnit
                    };

                    copy.SaveChanges(DocConstantPermission.ADD);
                    ret = copy.ToDto();
                });
            }
            return ret;
        }



        public List<UnitConversionRules> Put(UnitConversionRulesBatch request)
        {
            return Patch(request);
        }

        public UnitConversionRules Put(UnitConversionRules request)
        {
            return Patch(request);
        }


        public List<UnitConversionRules> Patch(UnitConversionRulesBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<UnitConversionRules>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as UnitConversionRules;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public UnitConversionRules Patch(UnitConversionRules request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the UnitConversionRules to patch.");
            
            request.Select = request.Select ?? new List<string>();
            
            UnitConversionRules ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
                });
            }
            return ret;
        }


        public void Delete(UnitConversionRulesBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(UnitConversionRules request)
        {
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!(request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, $"No Id provided for delete.");

                    var en = DocEntityUnitConversionRules.Get(request?.Id);
                    if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No UnitConversionRules could be found for Id {request?.Id}.");
                    if(en.IsRemoved) return;
                
                    if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                    en.Remove();

                    DocCacheClient.RemoveSearch(DocConstantModelName.UNITCONVERSIONRULES);
                    DocCacheClient.RemoveById(request.Id);
                });
            }
        }

        public void Delete(UnitConversionRulesSearch request)
        {
            var matches = Get(request) as List<UnitConversionRules>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");
            matches.ForEach(match =>
            {
                Delete(match);
            });
        }




        private UnitConversionRules GetUnitConversionRules(UnitConversionRules request)
        {
            var id = request?.Id;
            UnitConversionRules ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetSelect<UnitConversionRules>(currentUser, "UnitConversionRules", request.Select);

            DocEntityUnitConversionRules entity = null;
            if(id.HasValue)
            {
                entity = DocEntityUnitConversionRules.Get(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No UnitConversionRules found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

    }
}
