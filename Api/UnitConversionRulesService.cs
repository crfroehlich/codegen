//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Security;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class UnitConversionRulesService : DocServiceBase
    {
        public const string CACHE_KEY_PREFIX = DocEntityUnitConversionRules.CACHE_KEY_PREFIX;
        private object _GetIdCache(UnitConversionRules request)
        {
            object ret = null;

            if (true != request.IgnoreCache)
            {
                var key = currentUser.GetApiCacheKey(DocConstantModelName.UNITCONVERSIONRULES);
                var cacheKey = $"UnitConversionRules_{key}_{request.Id}_{UrnId.Create<UnitConversionRules>(request.GetMD5Hash())}";
                ret = Request.ToOptimizedResultUsingCache(Cache, cacheKey, new TimeSpan(0, DocResources.Settings.SessionTimeout, 0), () =>
                {
                    object cachedRet = null;
                    cachedRet = GetUnitConversionRules(request);
                    return cachedRet;
                });
            }
            ret = ret ?? GetUnitConversionRules(request);
            return ret;
        }

        private object _GetSearchCache(UnitConversionRulesSearch request, DocRequestCancellation requestCancel)
        {
            object tryRet = null;
            var ret = new List<UnitConversionRules>();

            //Keys need to be customized to factor in permissions/scoping. Often, including the current user's Role Id is sufficient in the key
            var key = currentUser.GetApiCacheKey(DocConstantModelName.UNITCONVERSIONRULES);
            var cacheKey = $"{CACHE_KEY_PREFIX}_{key}_{UrnId.Create<UnitConversionRulesSearch>(request.GetMD5Hash())}";
            tryRet = Request.ToOptimizedResultUsingCache(Cache, cacheKey, new TimeSpan(0, DocResources.Settings.SessionTimeout, 0), () =>
            {
                _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityUnitConversionRules,UnitConversionRules>(ret, Execute, requestCancel));
                return ret;
            });

            if(tryRet == null)
            {
                ret = new List<UnitConversionRules>();
                _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityUnitConversionRules,UnitConversionRules>(ret, Execute, requestCancel));
                return ret;
            }
            else
            {
                return tryRet;
            }
        }
        private void _ExecSearch(UnitConversionRulesSearch request, Action<IQueryable<DocEntityUnitConversionRules>> callBack)
        {
            request = InitSearch(request);
            
            DocPermissionFactory.SetVisibleFields<UnitConversionRules>(currentUser, "UnitConversionRules", request.VisibleFields);

            var entities = Execute.SelectAll<DocEntityUnitConversionRules>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new UnitConversionRulesFullTextSearch(request);
                    entities = GetFullTextSearch(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                if(!DocTools.IsNullOrEmpty(request.DestinationUnit) && !DocTools.IsNullOrEmpty(request.DestinationUnit.Id))
                {
                    entities = entities.Where(en => en.DestinationUnit.Id == request.DestinationUnit.Id );
                }
                if(true == request.DestinationUnitIds?.Any())
                {
                    entities = entities.Where(en => en.DestinationUnit.Id.In(request.DestinationUnitIds));
                }
                if(request.IsDefault.HasValue)
                    entities = entities.Where(en => request.IsDefault.Value == en.IsDefault);
                if(request.IsDestinationSi.HasValue)
                    entities = entities.Where(en => request.IsDestinationSi.Value == en.IsDestinationSi);
                if(!DocTools.IsNullOrEmpty(request.ModifierTerm) && !DocTools.IsNullOrEmpty(request.ModifierTerm.Id))
                {
                    entities = entities.Where(en => en.ModifierTerm.Id == request.ModifierTerm.Id );
                }
                if(true == request.ModifierTermIds?.Any())
                {
                    entities = entities.Where(en => en.ModifierTerm.Id.In(request.ModifierTermIds));
                }
                if(request.Multiplier.HasValue)
                    entities = entities.Where(en => request.Multiplier.Value == en.Multiplier);
                if(!DocTools.IsNullOrEmpty(request.Parent) && !DocTools.IsNullOrEmpty(request.Parent.Id))
                {
                    entities = entities.Where(en => en.Parent.Id == request.Parent.Id );
                }
                if(true == request.ParentIds?.Any())
                {
                    entities = entities.Where(en => en.Parent.Id.In(request.ParentIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.Parent) && !DocTools.IsNullOrEmpty(request.Parent.Name))
                {
                    entities = entities.Where(en => en.Parent.Name == request.Parent.Name );
                }
                if(true == request.ParentNames?.Any())
                {
                    entities = entities.Where(en => en.Parent.Name.In(request.ParentNames));
                }
                if(!DocTools.IsNullOrEmpty(request.RootTerm) && !DocTools.IsNullOrEmpty(request.RootTerm.Id))
                {
                    entities = entities.Where(en => en.RootTerm.Id == request.RootTerm.Id );
                }
                if(true == request.RootTermIds?.Any())
                {
                    entities = entities.Where(en => en.RootTerm.Id.In(request.RootTermIds));
                }
                if(!DocTools.IsNullOrEmpty(request.SourceUnit) && !DocTools.IsNullOrEmpty(request.SourceUnit.Id))
                {
                    entities = entities.Where(en => en.SourceUnit.Id == request.SourceUnit.Id );
                }
                if(true == request.SourceUnitIds?.Any())
                {
                    entities = entities.Where(en => en.SourceUnit.Id.In(request.SourceUnitIds));
                }

                entities = ApplyFilters(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            callBack?.Invoke(entities);
        }
        
        public object Post(UnitConversionRulesSearch request)
        {
            object tryRet = null;
            Execute.Run(s =>
            {
                using (var cancellableRequest = base.Request.CreateCancellableRequest())
                {
                    var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                    try 
                    {
                        var ret = new List<UnitConversionRules>();
                        var settings = DocResources.Settings;
                        if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "unitconversionrules")) 
                        {
                            tryRet = _GetSearchCache(request, requestCancel);
                        }
                        if (tryRet == null)
                        {
                            _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityUnitConversionRules,UnitConversionRules>(ret, Execute, requestCancel));
                            tryRet = ret;
                        }
                    }
                    catch(Exception) { throw; }
                    finally
                    {
                        requestCancel?.CloseRequest();
                    }
                }
            });
            return tryRet;
        }

        public object Get(UnitConversionRulesSearch request)
        {
            object tryRet = null;
            Execute.Run(s =>
            {
                using (var cancellableRequest = base.Request.CreateCancellableRequest())
                {
                    var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                    try 
                    {
                        var ret = new List<UnitConversionRules>();
                        var settings = DocResources.Settings;
                        if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "unitconversionrules")) 
                        {
                            tryRet = _GetSearchCache(request, requestCancel);
                        }
                        if (tryRet == null)
                        {
                            _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityUnitConversionRules,UnitConversionRules>(ret, Execute, requestCancel));
                            tryRet = ret;
                        }
                    }
                    catch(Exception) { throw; }
                    finally
                    {
                        requestCancel?.CloseRequest();
                    }
                }
            });
            return tryRet;
        }

        public object Post(UnitConversionRulesVersion request) 
        {
            return Get(request);
        }

        public object Get(UnitConversionRulesVersion request) 
        {
            var ret = new List<Version>();
            Execute.Run(s =>
            {
                _ExecSearch(request, (entities) => 
                {
                    ret = entities.Select(e => new Version(e.Id, e.VersionNo)).ToList();
                });
            });
            return ret;
        }

        public object Get(UnitConversionRules request)
        {
            object ret = null;
            
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");

            Execute.Run(s =>
            {
                DocPermissionFactory.SetVisibleFields<UnitConversionRules>(currentUser, "UnitConversionRules", request.VisibleFields);
                var settings = DocResources.Settings;
                if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "unitconversionrules")) 
                {
                    ret = _GetIdCache(request);
                }
                else 
                {
                    ret = GetUnitConversionRules(request);
                }
            });
            return ret;
        }

        private UnitConversionRules _AssignValues(UnitConversionRules dtoSource, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (dtoSource == null || dtoSource.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "UnitConversionRules"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();

            UnitConversionRules ret = null;
            dtoSource = _InitAssignValues(dtoSource, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && dtoSource.Id > 0) return dtoSource;
            
            //First, assign all the variables, do database lookups and conversions
            var pDestinationUnit = (dtoSource.DestinationUnit?.Id > 0) ? DocEntityUnitOfMeasure.GetUnitOfMeasure(dtoSource.DestinationUnit.Id) : null;
            var pIsDefault = dtoSource.IsDefault;
            var pIsDestinationSi = dtoSource.IsDestinationSi;
            var pModifierTerm = (dtoSource.ModifierTerm?.Id > 0) ? DocEntityTermMaster.GetTermMaster(dtoSource.ModifierTerm.Id) : null;
            var pMultiplier = dtoSource.Multiplier;
            DocEntityLookupTable pParent = GetLookup(DocConstantLookupTable.UNITCONVERSIONRULEPARENT, dtoSource.Parent?.Name, dtoSource.Parent?.Id);
            var pRootTerm = (dtoSource.RootTerm?.Id > 0) ? DocEntityTermMaster.GetTermMaster(dtoSource.RootTerm.Id) : null;
            var pSourceUnit = (dtoSource.SourceUnit?.Id > 0) ? DocEntityUnitOfMeasure.GetUnitOfMeasure(dtoSource.SourceUnit.Id) : null;

            DocEntityUnitConversionRules entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityUnitConversionRules(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityUnitConversionRules.GetUnitConversionRules(dtoSource.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityUnitOfMeasure>(currentUser, dtoSource, pDestinationUnit, permission, DocConstantModelName.UNITCONVERSIONRULES, nameof(dtoSource.DestinationUnit)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pDestinationUnit, entity.DestinationUnit, nameof(dtoSource.DestinationUnit)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(dtoSource.DestinationUnit)} cannot be modified once set.");
                    entity.DestinationUnit = pDestinationUnit;
                if(DocPermissionFactory.IsRequested<DocEntityUnitOfMeasure>(dtoSource, pDestinationUnit, nameof(dtoSource.DestinationUnit)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.DestinationUnit), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.DestinationUnit));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, dtoSource, pIsDefault, permission, DocConstantModelName.UNITCONVERSIONRULES, nameof(dtoSource.IsDefault)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pIsDefault, entity.IsDefault, nameof(dtoSource.IsDefault)))
                    entity.IsDefault = pIsDefault;
                if(DocPermissionFactory.IsRequested<bool>(dtoSource, pIsDefault, nameof(dtoSource.IsDefault)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.IsDefault), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.IsDefault));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, dtoSource, pIsDestinationSi, permission, DocConstantModelName.UNITCONVERSIONRULES, nameof(dtoSource.IsDestinationSi)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pIsDestinationSi, entity.IsDestinationSi, nameof(dtoSource.IsDestinationSi)))
                    entity.IsDestinationSi = pIsDestinationSi;
                if(DocPermissionFactory.IsRequested<bool>(dtoSource, pIsDestinationSi, nameof(dtoSource.IsDestinationSi)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.IsDestinationSi), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.IsDestinationSi));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityTermMaster>(currentUser, dtoSource, pModifierTerm, permission, DocConstantModelName.UNITCONVERSIONRULES, nameof(dtoSource.ModifierTerm)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pModifierTerm, entity.ModifierTerm, nameof(dtoSource.ModifierTerm)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(dtoSource.ModifierTerm)} cannot be modified once set.");
                    entity.ModifierTerm = pModifierTerm;
                if(DocPermissionFactory.IsRequested<DocEntityTermMaster>(dtoSource, pModifierTerm, nameof(dtoSource.ModifierTerm)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.ModifierTerm), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.ModifierTerm));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<decimal>(currentUser, dtoSource, pMultiplier, permission, DocConstantModelName.UNITCONVERSIONRULES, nameof(dtoSource.Multiplier)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pMultiplier, entity.Multiplier, nameof(dtoSource.Multiplier)))
                    entity.Multiplier = pMultiplier;
                if(DocPermissionFactory.IsRequested<decimal>(dtoSource, pMultiplier, nameof(dtoSource.Multiplier)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Multiplier), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Multiplier));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, dtoSource, pParent, permission, DocConstantModelName.UNITCONVERSIONRULES, nameof(dtoSource.Parent)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pParent, entity.Parent, nameof(dtoSource.Parent)))
                    entity.Parent = pParent;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(dtoSource, pParent, nameof(dtoSource.Parent)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Parent), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Parent));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityTermMaster>(currentUser, dtoSource, pRootTerm, permission, DocConstantModelName.UNITCONVERSIONRULES, nameof(dtoSource.RootTerm)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pRootTerm, entity.RootTerm, nameof(dtoSource.RootTerm)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(dtoSource.RootTerm)} cannot be modified once set.");
                    entity.RootTerm = pRootTerm;
                if(DocPermissionFactory.IsRequested<DocEntityTermMaster>(dtoSource, pRootTerm, nameof(dtoSource.RootTerm)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.RootTerm), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.RootTerm));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityUnitOfMeasure>(currentUser, dtoSource, pSourceUnit, permission, DocConstantModelName.UNITCONVERSIONRULES, nameof(dtoSource.SourceUnit)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pSourceUnit, entity.SourceUnit, nameof(dtoSource.SourceUnit)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(dtoSource.SourceUnit)} cannot be modified once set.");
                    entity.SourceUnit = pSourceUnit;
                if(DocPermissionFactory.IsRequested<DocEntityUnitOfMeasure>(dtoSource, pSourceUnit, nameof(dtoSource.SourceUnit)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.SourceUnit), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.SourceUnit));
                }
            }
            
            if (dtoSource.Locked) entity.Locked = dtoSource.Locked;

            entity.SaveChanges(permission);
            
            DocPermissionFactory.SetVisibleFields<UnitConversionRules>(currentUser, nameof(UnitConversionRules), dtoSource.VisibleFields);
            ret = entity.ToDto();

            return ret;
        }
        public UnitConversionRules Post(UnitConversionRules dtoSource)
        {
            if(dtoSource == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();

            UnitConversionRules ret = null;

            Execute.Run(ssn =>
            {
                if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "UnitConversionRules")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                ret = _AssignValues(dtoSource, DocConstantPermission.ADD, ssn);
            });

            return ret;
        }
   
        public List<UnitConversionRules> Post(UnitConversionRulesBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<UnitConversionRules>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as UnitConversionRules;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public UnitConversionRules Post(UnitConversionRulesCopy request)
        {
            UnitConversionRules ret = null;
            Execute.Run(ssn =>
            {
                var entity = DocEntityUnitConversionRules.GetUnitConversionRules(request?.Id);
                if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");
                
                    var pDestinationUnit = entity.DestinationUnit;
                    var pIsDefault = entity.IsDefault;
                    var pIsDestinationSi = entity.IsDestinationSi;
                    var pModifierTerm = entity.ModifierTerm;
                    var pMultiplier = entity.Multiplier;
                    var pParent = entity.Parent;
                    var pRootTerm = entity.RootTerm;
                    var pSourceUnit = entity.SourceUnit;
                var copy = new DocEntityUnitConversionRules(ssn)
                {
                    Hash = Guid.NewGuid()
                                , DestinationUnit = pDestinationUnit
                                , IsDefault = pIsDefault
                                , IsDestinationSi = pIsDestinationSi
                                , ModifierTerm = pModifierTerm
                                , Multiplier = pMultiplier
                                , Parent = pParent
                                , RootTerm = pRootTerm
                                , SourceUnit = pSourceUnit
                };
                copy.SaveChanges(DocConstantPermission.ADD);
                ret = copy.ToDto();
            });
            return ret;
        }


        public List<UnitConversionRules> Put(UnitConversionRulesBatch request)
        {
            return Patch(request);
        }

        public UnitConversionRules Put(UnitConversionRules dtoSource)
        {
            return Patch(dtoSource);
        }

        public List<UnitConversionRules> Patch(UnitConversionRulesBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<UnitConversionRules>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as UnitConversionRules;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public UnitConversionRules Patch(UnitConversionRules dtoSource)
        {
            if(true != (dtoSource?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the UnitConversionRules to patch.");
            
            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();
            
            UnitConversionRules ret = null;
            Execute.Run(ssn =>
            {
                ret = _AssignValues(dtoSource, DocConstantPermission.EDIT, ssn);
            });
            return ret;
        }

        public void Delete(UnitConversionRulesBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(UnitConversionRules request)
        {
            Execute.Run(ssn =>
            {
                var en = DocEntityUnitConversionRules.GetUnitConversionRules(request?.Id);

                if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No UnitConversionRules could be found for Id {request?.Id}.");
                if(en.IsRemoved) return;
                
                if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                en.Remove();
            });
        }

        public void Delete(UnitConversionRulesSearch request)
        {
            var matches = Get(request) as List<UnitConversionRules>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");

            Execute.Run(ssn =>
            {
                matches.ForEach(match =>
                {
                    Delete(match);
                });
            });
        }

        private UnitConversionRules GetUnitConversionRules(UnitConversionRules request)
        {
            var id = request?.Id;
            UnitConversionRules ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<UnitConversionRules>(currentUser, "UnitConversionRules", request.VisibleFields);

            DocEntityUnitConversionRules entity = null;
            if(id.HasValue)
            {
                entity = DocEntityUnitConversionRules.GetUnitConversionRules(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No UnitConversionRules found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

        public List<int> Any(UnitConversionRulesIds request)
        {
            List<int> ret = null;
            if (currentUser.IsSuperAdmin)
            {
                Execute.Run(s => { ret = Execute.SelectAll<DocEntityUnitConversionRules>().Select(d => d.Id).ToList(); });
            }
            else
            {
                throw new HttpError(HttpStatusCode.Forbidden);
            }
            return ret;
        }
    }
}