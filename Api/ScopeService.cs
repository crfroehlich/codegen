//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Security;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class ScopeService : DocServiceBase
    {
        public const string CACHE_KEY_PREFIX = DocEntityScope.CACHE_KEY_PREFIX;
        private object _GetIdCache(Scope request)
        {
            object ret = null;

            if (true != request.IgnoreCache)
            {
                var key = currentUser.GetApiCacheKey(DocConstantModelName.SCOPE);
                var cacheKey = $"Scope_{key}_{request.Id}_{UrnId.Create<Scope>(request.GetMD5Hash())}";
                ret = Request.ToOptimizedResultUsingCache(Cache, cacheKey, new TimeSpan(0, DocResources.Settings.SessionTimeout, 0), () =>
                {
                    object cachedRet = null;
                    cachedRet = GetScope(request);
                    return cachedRet;
                });
            }
            ret = ret ?? GetScope(request);
            return ret;
        }

        private object _GetSearchCache(ScopeSearch request, DocRequestCancellation requestCancel)
        {
            object tryRet = null;
            var ret = new List<Scope>();

            //Keys need to be customized to factor in permissions/scoping. Often, including the current user's Role Id is sufficient in the key
            var key = currentUser.GetApiCacheKey(DocConstantModelName.SCOPE);
            var cacheKey = $"{CACHE_KEY_PREFIX}_{key}_{UrnId.Create<ScopeSearch>(request.GetMD5Hash())}";
            tryRet = Request.ToOptimizedResultUsingCache(Cache, cacheKey, new TimeSpan(0, DocResources.Settings.SessionTimeout, 0), () =>
            {
                _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityScope,Scope>(ret, Execute, requestCancel));
                return ret;
            });

            if(tryRet == null)
            {
                ret = new List<Scope>();
                _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityScope,Scope>(ret, Execute, requestCancel));
                return ret;
            }
            else
            {
                return tryRet;
            }
        }
        private void _ExecSearch(ScopeSearch request, Action<IQueryable<DocEntityScope>> callBack)
        {
            request = InitSearch(request);
            
            DocPermissionFactory.SetVisibleFields<Scope>(currentUser, "Scope", request.VisibleFields);

            var entities = Execute.SelectAll<DocEntityScope>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new ScopeFullTextSearch(request);
                    entities = GetFullTextSearch(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                if(!DocTools.IsNullOrEmpty(request.App) && !DocTools.IsNullOrEmpty(request.App.Id))
                {
                    entities = entities.Where(en => en.App.Id == request.App.Id );
                }
                if(true == request.AppIds?.Any())
                {
                    entities = entities.Where(en => en.App.Id.In(request.AppIds));
                }
                if(request.Archived.HasValue)
                    entities = entities.Where(en => request.Archived.Value == en.Archived);
                        if(true == request.BindingsIds?.Any())
                        {
                            entities = entities.Where(en => en.Bindings.Any(r => r.Id.In(request.BindingsIds)));
                        }
                        if(true == request.BroadcastsIds?.Any())
                        {
                            entities = entities.Where(en => en.Broadcasts.Any(r => r.Id.In(request.BroadcastsIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.Client) && !DocTools.IsNullOrEmpty(request.Client.Id))
                {
                    entities = entities.Where(en => en.Client.Id == request.Client.Id );
                }
                if(true == request.ClientIds?.Any())
                {
                    entities = entities.Where(en => en.Client.Id.In(request.ClientIds));
                }
                if(request.Delete.HasValue)
                    entities = entities.Where(en => request.Delete.Value == en.Delete);
                if(!DocTools.IsNullOrEmpty(request.DocumentSet) && !DocTools.IsNullOrEmpty(request.DocumentSet.Id))
                {
                    entities = entities.Where(en => en.DocumentSet.Id == request.DocumentSet.Id );
                }
                if(true == request.DocumentSetIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentSet.Id.In(request.DocumentSetIds));
                }
                if(request.Edit.HasValue)
                    entities = entities.Where(en => request.Edit.Value == en.Edit);
                        if(true == request.HelpIds?.Any())
                        {
                            entities = entities.Where(en => en.Help.Any(r => r.Id.In(request.HelpIds)));
                        }
                if(request.IsGlobal.HasValue)
                    entities = entities.Where(en => request.IsGlobal.Value == en.IsGlobal);
                        if(true == request.SynonymsIds?.Any())
                        {
                            entities = entities.Where(en => en.Synonyms.Any(r => r.Id.In(request.SynonymsIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.Team) && !DocTools.IsNullOrEmpty(request.Team.Id))
                {
                    entities = entities.Where(en => en.Team.Id == request.Team.Id );
                }
                if(true == request.TeamIds?.Any())
                {
                    entities = entities.Where(en => en.Team.Id.In(request.TeamIds));
                }
                if(!DocTools.IsNullOrEmpty(request.Type) && !DocTools.IsNullOrEmpty(request.Type.Id))
                {
                    entities = entities.Where(en => en.Type.Id == request.Type.Id );
                }
                if(true == request.TypeIds?.Any())
                {
                    entities = entities.Where(en => en.Type.Id.In(request.TypeIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.Type) && !DocTools.IsNullOrEmpty(request.Type.Name))
                {
                    entities = entities.Where(en => en.Type.Name == request.Type.Name );
                }
                if(true == request.TypeNames?.Any())
                {
                    entities = entities.Where(en => en.Type.Name.In(request.TypeNames));
                }
                if(!DocTools.IsNullOrEmpty(request.User) && !DocTools.IsNullOrEmpty(request.User.Id))
                {
                    entities = entities.Where(en => en.User.Id == request.User.Id );
                }
                if(true == request.UserIds?.Any())
                {
                    entities = entities.Where(en => en.User.Id.In(request.UserIds));
                }
                        if(true == request.VariableRulesIds?.Any())
                        {
                            entities = entities.Where(en => en.VariableRules.Any(r => r.Id.In(request.VariableRulesIds)));
                        }
                if(request.View.HasValue)
                    entities = entities.Where(en => request.View.Value == en.View);
                        if(true == request.WorkflowsIds?.Any())
                        {
                            entities = entities.Where(en => en.Workflows.Any(r => r.Id.In(request.WorkflowsIds)));
                        }

                entities = ApplyFilters(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            callBack?.Invoke(entities);
        }
        
        public object Post(ScopeSearch request)
        {
            object tryRet = null;
            Execute.Run(s =>
            {
                using (var cancellableRequest = base.Request.CreateCancellableRequest())
                {
                    var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                    try 
                    {
                        var ret = new List<Scope>();
                        var settings = DocResources.Settings;
                        if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "scope")) 
                        {
                            tryRet = _GetSearchCache(request, requestCancel);
                        }
                        if (tryRet == null)
                        {
                            _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityScope,Scope>(ret, Execute, requestCancel));
                            tryRet = ret;
                        }
                    }
                    catch(Exception) { throw; }
                    finally
                    {
                        requestCancel?.CloseRequest();
                    }
                }
            });
            return tryRet;
        }

        public object Get(ScopeSearch request)
        {
            object tryRet = null;
            Execute.Run(s =>
            {
                using (var cancellableRequest = base.Request.CreateCancellableRequest())
                {
                    var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                    try 
                    {
                        var ret = new List<Scope>();
                        var settings = DocResources.Settings;
                        if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "scope")) 
                        {
                            tryRet = _GetSearchCache(request, requestCancel);
                        }
                        if (tryRet == null)
                        {
                            _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityScope,Scope>(ret, Execute, requestCancel));
                            tryRet = ret;
                        }
                    }
                    catch(Exception) { throw; }
                    finally
                    {
                        requestCancel?.CloseRequest();
                    }
                }
            });
            return tryRet;
        }

        public object Post(ScopeVersion request) 
        {
            return Get(request);
        }

        public object Get(ScopeVersion request) 
        {
            var ret = new List<Version>();
            Execute.Run(s =>
            {
                _ExecSearch(request, (entities) => 
                {
                    ret = entities.Select(e => new Version(e.Id, e.VersionNo)).ToList();
                });
            });
            return ret;
        }

        public object Get(Scope request)
        {
            object ret = null;
            
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");

            Execute.Run(s =>
            {
                DocPermissionFactory.SetVisibleFields<Scope>(currentUser, "Scope", request.VisibleFields);
                var settings = DocResources.Settings;
                if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "scope")) 
                {
                    ret = _GetIdCache(request);
                }
                else 
                {
                    ret = GetScope(request);
                }
            });
            return ret;
        }

        private Scope _AssignValues(Scope dtoSource, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (dtoSource == null || dtoSource.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "Scope"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();

            Scope ret = null;
            dtoSource = _InitAssignValues(dtoSource, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && dtoSource.Id > 0) return dtoSource;
            
            //First, assign all the variables, do database lookups and conversions
            var pApp = (dtoSource.App?.Id > 0) ? DocEntityApp.GetApp(dtoSource.App.Id) : null;
            var pArchived = dtoSource.Archived;
            var pBindings = dtoSource.Bindings?.ToList();
            var pBroadcasts = dtoSource.Broadcasts?.ToList();
            var pClient = (dtoSource.Client?.Id > 0) ? DocEntityClient.GetClient(dtoSource.Client.Id) : null;
            var pDelete = dtoSource.Delete;
            var pDocumentSet = (dtoSource.DocumentSet?.Id > 0) ? DocEntityDocumentSet.GetDocumentSet(dtoSource.DocumentSet.Id) : null;
            var pEdit = dtoSource.Edit;
            var pHelp = dtoSource.Help?.ToList();
            var pIsGlobal = dtoSource.IsGlobal;
            var pSynonyms = dtoSource.Synonyms?.ToList();
            var pTeam = (dtoSource.Team?.Id > 0) ? DocEntityTeam.GetTeam(dtoSource.Team.Id) : null;
            DocEntityLookupTable pType = GetLookup(DocConstantLookupTable.SCOPE, dtoSource.Type?.Name, dtoSource.Type?.Id);
            var pUser = (dtoSource.User?.Id > 0) ? DocEntityUser.GetUser(dtoSource.User.Id) : null;
            var pVariableRules = dtoSource.VariableRules?.ToList();
            var pView = dtoSource.View;
            var pWorkflows = dtoSource.Workflows?.ToList();

            DocEntityScope entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityScope(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityScope.GetScope(dtoSource.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityApp>(currentUser, dtoSource, pApp, permission, DocConstantModelName.SCOPE, nameof(dtoSource.App)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pApp, entity.App, nameof(dtoSource.App)))
                    entity.App = pApp;
                if(DocPermissionFactory.IsRequested<DocEntityApp>(dtoSource, pApp, nameof(dtoSource.App)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.App), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.App));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool?>(currentUser, dtoSource, pArchived, permission, DocConstantModelName.SCOPE, nameof(dtoSource.Archived)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pArchived, entity.Archived, nameof(dtoSource.Archived)))
                    entity.Archived = pArchived;
                if(DocPermissionFactory.IsRequested<bool?>(dtoSource, pArchived, nameof(dtoSource.Archived)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Archived), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Archived));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityClient>(currentUser, dtoSource, pClient, permission, DocConstantModelName.SCOPE, nameof(dtoSource.Client)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pClient, entity.Client, nameof(dtoSource.Client)))
                    entity.Client = pClient;
                if(DocPermissionFactory.IsRequested<DocEntityClient>(dtoSource, pClient, nameof(dtoSource.Client)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Client), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Client));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool?>(currentUser, dtoSource, pDelete, permission, DocConstantModelName.SCOPE, nameof(dtoSource.Delete)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pDelete, entity.Delete, nameof(dtoSource.Delete)))
                    entity.Delete = pDelete;
                if(DocPermissionFactory.IsRequested<bool?>(dtoSource, pDelete, nameof(dtoSource.Delete)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Delete), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Delete));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityDocumentSet>(currentUser, dtoSource, pDocumentSet, permission, DocConstantModelName.SCOPE, nameof(dtoSource.DocumentSet)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pDocumentSet, entity.DocumentSet, nameof(dtoSource.DocumentSet)))
                    entity.DocumentSet = pDocumentSet;
                if(DocPermissionFactory.IsRequested<DocEntityDocumentSet>(dtoSource, pDocumentSet, nameof(dtoSource.DocumentSet)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.DocumentSet), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.DocumentSet));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool?>(currentUser, dtoSource, pEdit, permission, DocConstantModelName.SCOPE, nameof(dtoSource.Edit)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pEdit, entity.Edit, nameof(dtoSource.Edit)))
                    entity.Edit = pEdit;
                if(DocPermissionFactory.IsRequested<bool?>(dtoSource, pEdit, nameof(dtoSource.Edit)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Edit), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Edit));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool?>(currentUser, dtoSource, pIsGlobal, permission, DocConstantModelName.SCOPE, nameof(dtoSource.IsGlobal)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pIsGlobal, entity.IsGlobal, nameof(dtoSource.IsGlobal)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(dtoSource.IsGlobal)} cannot be modified once set.");
                    entity.IsGlobal = pIsGlobal;
                if(DocPermissionFactory.IsRequested<bool?>(dtoSource, pIsGlobal, nameof(dtoSource.IsGlobal)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.IsGlobal), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.IsGlobal));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityTeam>(currentUser, dtoSource, pTeam, permission, DocConstantModelName.SCOPE, nameof(dtoSource.Team)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pTeam, entity.Team, nameof(dtoSource.Team)))
                    entity.Team = pTeam;
                if(DocPermissionFactory.IsRequested<DocEntityTeam>(dtoSource, pTeam, nameof(dtoSource.Team)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Team), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Team));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, dtoSource, pType, permission, DocConstantModelName.SCOPE, nameof(dtoSource.Type)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pType, entity.Type, nameof(dtoSource.Type)))
                    entity.Type = pType;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(dtoSource, pType, nameof(dtoSource.Type)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Type), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Type));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityUser>(currentUser, dtoSource, pUser, permission, DocConstantModelName.SCOPE, nameof(dtoSource.User)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pUser, entity.User, nameof(dtoSource.User)))
                    entity.User = pUser;
                if(DocPermissionFactory.IsRequested<DocEntityUser>(dtoSource, pUser, nameof(dtoSource.User)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.User), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.User));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool?>(currentUser, dtoSource, pView, permission, DocConstantModelName.SCOPE, nameof(dtoSource.View)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pView, entity.View, nameof(dtoSource.View)))
                    entity.View = pView;
                if(DocPermissionFactory.IsRequested<bool?>(dtoSource, pView, nameof(dtoSource.View)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.View), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.View));
                }
            }
            
            if (dtoSource.Locked) entity.Locked = dtoSource.Locked;

            entity.SaveChanges(permission);
            
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pBindings, permission, DocConstantModelName.SCOPE, nameof(dtoSource.Bindings)))
            {
                if (true == pBindings?.Any() )
                {
                    var requestedBindings = pBindings.Select(p => p.Id).Distinct().ToList();
                    var existsBindings = Execute.SelectAll<DocEntityLookupTableBinding>().Where(e => e.Id.In(requestedBindings)).Select( e => e.Id ).ToList();
                    if (existsBindings.Count != requestedBindings.Count)
                    {
                        var nonExists = requestedBindings.Where(id => existsBindings.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Bindings with objects that do not exist. No matching Bindings(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedBindings.Where(id => entity.Bindings.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityLookupTableBinding.GetLookupTableBinding(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Bindings)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.Bindings)} to {nameof(Scope)}");
                        entity.Bindings.Add(target);
                    });
                    var toRemove = entity.Bindings.Where(e => requestedBindings.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityLookupTableBinding.GetLookupTableBinding(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Bindings)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Bindings)} from {nameof(Scope)}");
                        entity.Bindings.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Bindings.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityLookupTableBinding.GetLookupTableBinding(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Bindings)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Bindings)} from {nameof(Scope)}");
                        entity.Bindings.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pBindings, nameof(dtoSource.Bindings)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Bindings), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Bindings));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pBroadcasts, permission, DocConstantModelName.SCOPE, nameof(dtoSource.Broadcasts)))
            {
                if (true == pBroadcasts?.Any() )
                {
                    var requestedBroadcasts = pBroadcasts.Select(p => p.Id).Distinct().ToList();
                    var existsBroadcasts = Execute.SelectAll<DocEntityBroadcast>().Where(e => e.Id.In(requestedBroadcasts)).Select( e => e.Id ).ToList();
                    if (existsBroadcasts.Count != requestedBroadcasts.Count)
                    {
                        var nonExists = requestedBroadcasts.Where(id => existsBroadcasts.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Broadcasts with objects that do not exist. No matching Broadcasts(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedBroadcasts.Where(id => entity.Broadcasts.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityBroadcast.GetBroadcast(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Broadcasts)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.Broadcasts)} to {nameof(Scope)}");
                        entity.Broadcasts.Add(target);
                    });
                    var toRemove = entity.Broadcasts.Where(e => requestedBroadcasts.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityBroadcast.GetBroadcast(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Broadcasts)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Broadcasts)} from {nameof(Scope)}");
                        entity.Broadcasts.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Broadcasts.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityBroadcast.GetBroadcast(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Broadcasts)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Broadcasts)} from {nameof(Scope)}");
                        entity.Broadcasts.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pBroadcasts, nameof(dtoSource.Broadcasts)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Broadcasts), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Broadcasts));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pHelp, permission, DocConstantModelName.SCOPE, nameof(dtoSource.Help)))
            {
                if (true == pHelp?.Any() )
                {
                    var requestedHelp = pHelp.Select(p => p.Id).Distinct().ToList();
                    var existsHelp = Execute.SelectAll<DocEntityHelp>().Where(e => e.Id.In(requestedHelp)).Select( e => e.Id ).ToList();
                    if (existsHelp.Count != requestedHelp.Count)
                    {
                        var nonExists = requestedHelp.Where(id => existsHelp.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Help with objects that do not exist. No matching Help(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedHelp.Where(id => entity.Help.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityHelp.GetHelp(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Help)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.Help)} to {nameof(Scope)}");
                        entity.Help.Add(target);
                    });
                    var toRemove = entity.Help.Where(e => requestedHelp.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityHelp.GetHelp(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Help)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Help)} from {nameof(Scope)}");
                        entity.Help.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Help.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityHelp.GetHelp(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Help)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Help)} from {nameof(Scope)}");
                        entity.Help.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pHelp, nameof(dtoSource.Help)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Help), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Help));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pSynonyms, permission, DocConstantModelName.SCOPE, nameof(dtoSource.Synonyms)))
            {
                if (true == pSynonyms?.Any() )
                {
                    var requestedSynonyms = pSynonyms.Select(p => p.Id).Distinct().ToList();
                    var existsSynonyms = Execute.SelectAll<DocEntityTermSynonym>().Where(e => e.Id.In(requestedSynonyms)).Select( e => e.Id ).ToList();
                    if (existsSynonyms.Count != requestedSynonyms.Count)
                    {
                        var nonExists = requestedSynonyms.Where(id => existsSynonyms.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Synonyms with objects that do not exist. No matching Synonyms(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedSynonyms.Where(id => entity.Synonyms.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityTermSynonym.GetTermSynonym(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Synonyms)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.Synonyms)} to {nameof(Scope)}");
                        entity.Synonyms.Add(target);
                    });
                    var toRemove = entity.Synonyms.Where(e => requestedSynonyms.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTermSynonym.GetTermSynonym(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Synonyms)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Synonyms)} from {nameof(Scope)}");
                        entity.Synonyms.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Synonyms.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTermSynonym.GetTermSynonym(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Synonyms)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Synonyms)} from {nameof(Scope)}");
                        entity.Synonyms.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pSynonyms, nameof(dtoSource.Synonyms)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Synonyms), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Synonyms));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pVariableRules, permission, DocConstantModelName.SCOPE, nameof(dtoSource.VariableRules)))
            {
                if (true == pVariableRules?.Any() )
                {
                    var requestedVariableRules = pVariableRules.Select(p => p.Id).Distinct().ToList();
                    var existsVariableRules = Execute.SelectAll<DocEntityVariableRule>().Where(e => e.Id.In(requestedVariableRules)).Select( e => e.Id ).ToList();
                    if (existsVariableRules.Count != requestedVariableRules.Count)
                    {
                        var nonExists = requestedVariableRules.Where(id => existsVariableRules.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection VariableRules with objects that do not exist. No matching VariableRules(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedVariableRules.Where(id => entity.VariableRules.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityVariableRule.GetVariableRule(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.VariableRules)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.VariableRules)} to {nameof(Scope)}");
                        entity.VariableRules.Add(target);
                    });
                    var toRemove = entity.VariableRules.Where(e => requestedVariableRules.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityVariableRule.GetVariableRule(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.VariableRules)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.VariableRules)} from {nameof(Scope)}");
                        entity.VariableRules.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.VariableRules.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityVariableRule.GetVariableRule(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.VariableRules)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.VariableRules)} from {nameof(Scope)}");
                        entity.VariableRules.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pVariableRules, nameof(dtoSource.VariableRules)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.VariableRules), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.VariableRules));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pWorkflows, permission, DocConstantModelName.SCOPE, nameof(dtoSource.Workflows)))
            {
                if (true == pWorkflows?.Any() )
                {
                    var requestedWorkflows = pWorkflows.Select(p => p.Id).Distinct().ToList();
                    var existsWorkflows = Execute.SelectAll<DocEntityWorkflow>().Where(e => e.Id.In(requestedWorkflows)).Select( e => e.Id ).ToList();
                    if (existsWorkflows.Count != requestedWorkflows.Count)
                    {
                        var nonExists = requestedWorkflows.Where(id => existsWorkflows.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Workflows with objects that do not exist. No matching Workflows(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedWorkflows.Where(id => entity.Workflows.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityWorkflow.GetWorkflow(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Workflows)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.Workflows)} to {nameof(Scope)}");
                        entity.Workflows.Add(target);
                    });
                    var toRemove = entity.Workflows.Where(e => requestedWorkflows.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityWorkflow.GetWorkflow(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Workflows)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Workflows)} from {nameof(Scope)}");
                        entity.Workflows.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Workflows.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityWorkflow.GetWorkflow(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Scope), columnName: nameof(dtoSource.Workflows)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Workflows)} from {nameof(Scope)}");
                        entity.Workflows.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pWorkflows, nameof(dtoSource.Workflows)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Workflows), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Workflows));
                }
            }
            DocPermissionFactory.SetVisibleFields<Scope>(currentUser, nameof(Scope), dtoSource.VisibleFields);
            ret = entity.ToDto();

            return ret;
        }
        public Scope Post(Scope dtoSource)
        {
            if(dtoSource == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();

            Scope ret = null;

            Execute.Run(ssn =>
            {
                if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "Scope")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                ret = _AssignValues(dtoSource, DocConstantPermission.ADD, ssn);
            });

            return ret;
        }
   
        public List<Scope> Post(ScopeBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Scope>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as Scope;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Scope Post(ScopeCopy request)
        {
            Scope ret = null;
            Execute.Run(ssn =>
            {
                var entity = DocEntityScope.GetScope(request?.Id);
                if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");
                
                    var pApp = entity.App;
                    var pArchived = entity.Archived;
                    var pBindings = entity.Bindings.ToList();
                    var pBroadcasts = entity.Broadcasts.ToList();
                    var pClient = entity.Client;
                    var pDelete = entity.Delete;
                    var pDocumentSet = entity.DocumentSet;
                    var pEdit = entity.Edit;
                    var pHelp = entity.Help.ToList();
                    var pIsGlobal = entity.IsGlobal;
                    var pSynonyms = entity.Synonyms.ToList();
                    var pTeam = entity.Team;
                    var pType = entity.Type;
                    var pUser = entity.User;
                    var pVariableRules = entity.VariableRules.ToList();
                    var pView = entity.View;
                    var pWorkflows = entity.Workflows.ToList();
                var copy = new DocEntityScope(ssn)
                {
                    Hash = Guid.NewGuid()
                                , App = pApp
                                , Archived = pArchived
                                , Client = pClient
                                , Delete = pDelete
                                , DocumentSet = pDocumentSet
                                , Edit = pEdit
                                , IsGlobal = pIsGlobal
                                , Team = pTeam
                                , Type = pType
                                , User = pUser
                                , View = pView
                };
                            foreach(var item in pBindings)
                            {
                                entity.Bindings.Add(item);
                            }

                            foreach(var item in pBroadcasts)
                            {
                                entity.Broadcasts.Add(item);
                            }

                            foreach(var item in pHelp)
                            {
                                entity.Help.Add(item);
                            }

                            foreach(var item in pSynonyms)
                            {
                                entity.Synonyms.Add(item);
                            }

                            foreach(var item in pVariableRules)
                            {
                                entity.VariableRules.Add(item);
                            }

                            foreach(var item in pWorkflows)
                            {
                                entity.Workflows.Add(item);
                            }

                copy.SaveChanges(DocConstantPermission.ADD);
                ret = copy.ToDto();
            });
            return ret;
        }


        public List<Scope> Put(ScopeBatch request)
        {
            return Patch(request);
        }

        public Scope Put(Scope dtoSource)
        {
            return Patch(dtoSource);
        }

        public List<Scope> Patch(ScopeBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Scope>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as Scope;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Scope Patch(Scope dtoSource)
        {
            if(true != (dtoSource?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the Scope to patch.");
            
            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();
            
            Scope ret = null;
            Execute.Run(ssn =>
            {
                ret = _AssignValues(dtoSource, DocConstantPermission.EDIT, ssn);
            });
            return ret;
        }

        public void Delete(ScopeBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(Scope request)
        {
            Execute.Run(ssn =>
            {
                var en = DocEntityScope.GetScope(request?.Id);

                if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No Scope could be found for Id {request?.Id}.");
                if(en.IsRemoved) return;
                
                if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                en.Remove();
            });
        }

        public void Delete(ScopeSearch request)
        {
            var matches = Get(request) as List<Scope>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");

            Execute.Run(ssn =>
            {
                matches.ForEach(match =>
                {
                    Delete(match);
                });
            });
        }
        public object Get(ScopeJunction request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            object ret = null;
            var skip = (request.Skip > 0) ? request.Skip.Value : 0;
            var take = (request.Take > 0) ? request.Take.Value : int.MaxValue;
                        
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-1]?.ToLower().Trim();
            Execute.Run( s => 
            {
                switch(method)
                {
                case "lookuptablebinding":
                    ret = _GetScopeLookupTableBinding(request, skip, take);
                    break;
                case "broadcast":
                    ret = _GetScopeBroadcast(request, skip, take);
                    break;
                case "help":
                    ret = _GetScopeHelp(request, skip, take);
                    break;
                case "termsynonym":
                    ret = _GetScopeTermSynonym(request, skip, take);
                    break;
                case "variablerule":
                    ret = _GetScopeVariableRule(request, skip, take);
                    break;
                case "workflow":
                    ret = _GetScopeWorkflow(request, skip, take);
                    break;
                }
            });
            return ret;
        }
        
        public object Get(ScopeJunctionVersion request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
            
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-2]?.ToLower().Trim();
            Execute.Run( ssn =>
            {
                switch(method)
                {
                case "lookuptablebinding":
                    ret = GetScopeLookupTableBindingVersion(request);
                    break;
                case "broadcast":
                    ret = GetScopeBroadcastVersion(request);
                    break;
                case "help":
                    ret = GetScopeHelpVersion(request);
                    break;
                case "termsynonym":
                    ret = GetScopeTermSynonymVersion(request);
                    break;
                case "variablerule":
                    ret = GetScopeVariableRuleVersion(request);
                    break;
                case "workflow":
                    ret = GetScopeWorkflowVersion(request);
                    break;
                }
            });
            return ret;
        }
        

        private object _GetScopeLookupTableBinding(ScopeJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<LookupTableBinding>(currentUser, "LookupTableBinding", request.VisibleFields);
             var en = DocEntityScope.GetScope(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.SCOPE, columnName: "Bindings", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Scope and LookupTableBinding");
             return en?.Bindings.Take(take).Skip(skip).ConvertFromEntityList<DocEntityLookupTableBinding,LookupTableBinding>(new List<LookupTableBinding>());
        }

        private List<Version> GetScopeLookupTableBindingVersion(ScopeJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityScope.GetScope(request.Id);
                ret = en?.Bindings.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetScopeBroadcast(ScopeJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<Broadcast>(currentUser, "Broadcast", request.VisibleFields);
             var en = DocEntityScope.GetScope(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.SCOPE, columnName: "Broadcasts", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Scope and Broadcast");
             return en?.Broadcasts.Take(take).Skip(skip).ConvertFromEntityList<DocEntityBroadcast,Broadcast>(new List<Broadcast>());
        }

        private List<Version> GetScopeBroadcastVersion(ScopeJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityScope.GetScope(request.Id);
                ret = en?.Broadcasts.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetScopeHelp(ScopeJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<Help>(currentUser, "Help", request.VisibleFields);
             var en = DocEntityScope.GetScope(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.SCOPE, columnName: "Help", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Scope and Help");
             return en?.Help.Take(take).Skip(skip).ConvertFromEntityList<DocEntityHelp,Help>(new List<Help>());
        }

        private List<Version> GetScopeHelpVersion(ScopeJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityScope.GetScope(request.Id);
                ret = en?.Help.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetScopeTermSynonym(ScopeJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<TermSynonym>(currentUser, "TermSynonym", request.VisibleFields);
             var en = DocEntityScope.GetScope(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.SCOPE, columnName: "Synonyms", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Scope and TermSynonym");
             return en?.Synonyms.Take(take).Skip(skip).ConvertFromEntityList<DocEntityTermSynonym,TermSynonym>(new List<TermSynonym>());
        }

        private List<Version> GetScopeTermSynonymVersion(ScopeJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityScope.GetScope(request.Id);
                ret = en?.Synonyms.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetScopeVariableRule(ScopeJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<VariableRule>(currentUser, "VariableRule", request.VisibleFields);
             var en = DocEntityScope.GetScope(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.SCOPE, columnName: "VariableRules", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Scope and VariableRule");
             return en?.VariableRules.Take(take).Skip(skip).ConvertFromEntityList<DocEntityVariableRule,VariableRule>(new List<VariableRule>());
        }

        private List<Version> GetScopeVariableRuleVersion(ScopeJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityScope.GetScope(request.Id);
                ret = en?.VariableRules.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetScopeWorkflow(ScopeJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<Workflow>(currentUser, "Workflow", request.VisibleFields);
             var en = DocEntityScope.GetScope(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.SCOPE, columnName: "Workflows", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Scope and Workflow");
             return en?.Workflows.Take(take).Skip(skip).ConvertFromEntityList<DocEntityWorkflow,Workflow>(new List<Workflow>());
        }

        private List<Version> GetScopeWorkflowVersion(ScopeJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityScope.GetScope(request.Id);
                ret = en?.Workflows.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }
        
        public object Post(ScopeJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                case "lookuptablebinding":
                    ret = _PostScopeLookupTableBinding(request);
                    break;
                case "broadcast":
                    ret = _PostScopeBroadcast(request);
                    break;
                case "help":
                    ret = _PostScopeHelp(request);
                    break;
                case "termsynonym":
                    ret = _PostScopeTermSynonym(request);
                    break;
                case "variablerule":
                    ret = _PostScopeVariableRule(request);
                    break;
                case "workflow":
                    ret = _PostScopeWorkflow(request);
                    break;
                }
            });
            return ret;
        }


        private object _PostScopeLookupTableBinding(ScopeJunction request)
        {
            var entity = DocEntityScope.GetScope(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Scope");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityLookupTableBinding.GetLookupTableBinding(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.LOOKUPTABLEBINDING, columnName: "Bindings")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Bindings property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Scope with objects that do not exist. No matching LookupTableBinding could be found for {id}.");
                entity.Bindings.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostScopeBroadcast(ScopeJunction request)
        {
            var entity = DocEntityScope.GetScope(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Scope");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityBroadcast.GetBroadcast(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.BROADCAST, columnName: "Broadcasts")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Broadcasts property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Scope with objects that do not exist. No matching Broadcast could be found for {id}.");
                entity.Broadcasts.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostScopeHelp(ScopeJunction request)
        {
            var entity = DocEntityScope.GetScope(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Scope");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityHelp.GetHelp(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.HELP, columnName: "Help")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Help property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Scope with objects that do not exist. No matching Help could be found for {id}.");
                entity.Help.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostScopeTermSynonym(ScopeJunction request)
        {
            var entity = DocEntityScope.GetScope(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Scope");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityTermSynonym.GetTermSynonym(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.TERMSYNONYM, columnName: "Synonyms")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Synonyms property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Scope with objects that do not exist. No matching TermSynonym could be found for {id}.");
                entity.Synonyms.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostScopeVariableRule(ScopeJunction request)
        {
            var entity = DocEntityScope.GetScope(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Scope");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityVariableRule.GetVariableRule(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.VARIABLERULE, columnName: "VariableRules")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the VariableRules property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Scope with objects that do not exist. No matching VariableRule could be found for {id}.");
                entity.VariableRules.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostScopeWorkflow(ScopeJunction request)
        {
            var entity = DocEntityScope.GetScope(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Scope");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityWorkflow.GetWorkflow(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.WORKFLOW, columnName: "Workflows")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Workflows property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Scope with objects that do not exist. No matching Workflow could be found for {id}.");
                entity.Workflows.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        public object Delete(ScopeJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                case "lookuptablebinding":
                    ret = _DeleteScopeLookupTableBinding(request);
                    break;
                case "broadcast":
                    ret = _DeleteScopeBroadcast(request);
                    break;
                case "help":
                    ret = _DeleteScopeHelp(request);
                    break;
                case "termsynonym":
                    ret = _DeleteScopeTermSynonym(request);
                    break;
                case "variablerule":
                    ret = _DeleteScopeVariableRule(request);
                    break;
                case "workflow":
                    ret = _DeleteScopeWorkflow(request);
                    break;
                }
            });
            return ret;
        }


        private object _DeleteScopeLookupTableBinding(ScopeJunction request)
        {
            var entity = DocEntityScope.GetScope(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Scope");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityLookupTableBinding.GetLookupTableBinding(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.LOOKUPTABLEBINDING, columnName: "Bindings"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Scope and LookupTableBinding");
                if(null != relationship && false == relationship.IsRemoved) entity.Bindings.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteScopeBroadcast(ScopeJunction request)
        {
            var entity = DocEntityScope.GetScope(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Scope");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityBroadcast.GetBroadcast(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.BROADCAST, columnName: "Broadcasts"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Scope and Broadcast");
                if(null != relationship && false == relationship.IsRemoved) entity.Broadcasts.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteScopeHelp(ScopeJunction request)
        {
            var entity = DocEntityScope.GetScope(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Scope");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityHelp.GetHelp(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.HELP, columnName: "Help"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Scope and Help");
                if(null != relationship && false == relationship.IsRemoved) entity.Help.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteScopeTermSynonym(ScopeJunction request)
        {
            var entity = DocEntityScope.GetScope(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Scope");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityTermSynonym.GetTermSynonym(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.TERMSYNONYM, columnName: "Synonyms"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Scope and TermSynonym");
                if(null != relationship && false == relationship.IsRemoved) entity.Synonyms.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteScopeVariableRule(ScopeJunction request)
        {
            var entity = DocEntityScope.GetScope(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Scope");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityVariableRule.GetVariableRule(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.VARIABLERULE, columnName: "VariableRules"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Scope and VariableRule");
                if(null != relationship && false == relationship.IsRemoved) entity.VariableRules.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteScopeWorkflow(ScopeJunction request)
        {
            var entity = DocEntityScope.GetScope(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Scope");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityWorkflow.GetWorkflow(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.WORKFLOW, columnName: "Workflows"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Scope and Workflow");
                if(null != relationship && false == relationship.IsRemoved) entity.Workflows.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private Scope GetScope(Scope request)
        {
            var id = request?.Id;
            Scope ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<Scope>(currentUser, "Scope", request.VisibleFields);

            DocEntityScope entity = null;
            if(id.HasValue)
            {
                entity = DocEntityScope.GetScope(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Scope found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

        public List<int> Any(ScopeIds request)
        {
            List<int> ret = null;
            if (currentUser.IsSuperAdmin)
            {
                Execute.Run(s => { ret = Execute.SelectAll<DocEntityScope>().Select(d => d.Id).ToList(); });
            }
            else
            {
                throw new HttpError(HttpStatusCode.Forbidden);
            }
            return ret;
        }
    }
}