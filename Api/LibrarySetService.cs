
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;

using Xtensive.Orm;


namespace Services.API
{
    public partial class LibrarySetService : DocServiceBase
    {

        private IQueryable<DocEntityLibrarySet> _ExecSearch(LibrarySetSearch request, DocQuery query)
        {
            request = InitSearch<LibrarySet, LibrarySetSearch>(request);
            IQueryable<DocEntityLibrarySet> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityLibrarySet>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new LibrarySetFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityLibrarySet,LibrarySetFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.LIBRARYSET, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }
                if(true == request.ClientsIds?.Any())
                {
                    entities = entities.Where(en => en.Clients.Any(r => r.Id.In(request.ClientsIds)));
                }
                if(true == request.Confidential?.Any())
                {
                    if(request.Confidential.Any(v => v == null)) entities = entities.Where(en => en.Confidential.In(request.Confidential) || en.Confidential == null);
                    else entities = entities.Where(en => en.Confidential.In(request.Confidential));
                }
                if(true == request.DivisionsIds?.Any())
                {
                    entities = entities.Where(en => en.Divisions.Any(r => r.Id.In(request.DivisionsIds)));
                }
                if(true == request.DocumentsIds?.Any())
                {
                    entities = entities.Where(en => en.Documents.Any(r => r.Id.In(request.DocumentsIds)));
                }
                if(true == request.DocumentSetsIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentSets.Any(r => r.Id.In(request.DocumentSetsIds)));
                }
                if(true == request.HistoriesIds?.Any())
                {
                    entities = entities.Where(en => en.Histories.Any(r => r.Id.In(request.HistoriesIds)));
                }
                if(request.LegacyDocumentSetId.HasValue)
                    entities = entities.Where(en => request.LegacyDocumentSetId.Value == en.LegacyDocumentSetId);
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(!DocTools.IsNullOrEmpty(request.Names))
                    entities = entities.Where(en => en.Name.In(request.Names));
                if(!DocTools.IsNullOrEmpty(request.Owner) && !DocTools.IsNullOrEmpty(request.Owner.Id))
                {
                    entities = entities.Where(en => en.Owner.Id == request.Owner.Id );
                }
                if(true == request.OwnerIds?.Any())
                {
                    entities = entities.Where(en => en.Owner.Id.In(request.OwnerIds));
                }
                if(!DocTools.IsNullOrEmpty(request.ProjectTeam) && !DocTools.IsNullOrEmpty(request.ProjectTeam.Id))
                {
                    entities = entities.Where(en => en.ProjectTeam.Id == request.ProjectTeam.Id );
                }
                if(true == request.ProjectTeamIds?.Any())
                {
                    entities = entities.Where(en => en.ProjectTeam.Id.In(request.ProjectTeamIds));
                }
                if(true == request.ScopesIds?.Any())
                {
                    entities = entities.Where(en => en.Scopes.Any(r => r.Id.In(request.ScopesIds)));
                }
                if(true == request.StatsIds?.Any())
                {
                    entities = entities.Where(en => en.Stats.Any(r => r.Id.In(request.StatsIds)));
                }
                if(request.Type.HasValue)
                    entities = entities.Where(en => request.Type.Value == en.Type);
                if(!DocTools.IsNullOrEmpty(request.Types))
                    entities = entities.Where(en => en.Type.In(request.Types));
                if(true == request.UsersIds?.Any())
                {
                    entities = entities.Where(en => en.Users.Any(r => r.Id.In(request.UsersIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.AdditionalCriteria))
                    entities = entities.Where(en => en.AdditionalCriteria.Contains(request.AdditionalCriteria));
                if(!DocTools.IsNullOrEmpty(request.AdditionalCriterias))
                    entities = entities.Where(en => en.AdditionalCriteria.In(request.AdditionalCriterias));
                if(true == request.CharacteristicsIds?.Any())
                {
                    entities = entities.Where(en => en.Characteristics.Any(r => r.Id.In(request.CharacteristicsIds)));
                }
                if(true == request.ClientsIds?.Any())
                {
                    entities = entities.Where(en => en.Clients.Any(r => r.Id.In(request.ClientsIds)));
                }
                if(true == request.ComparatorsIds?.Any())
                {
                    entities = entities.Where(en => en.Comparators.Any(r => r.Id.In(request.ComparatorsIds)));
                }
                if(true == request.Confidential?.Any())
                {
                    if(request.Confidential.Any(v => v == null)) entities = entities.Where(en => en.Confidential.In(request.Confidential) || en.Confidential == null);
                    else entities = entities.Where(en => en.Confidential.In(request.Confidential));
                }
                if(true == request.DivisionsIds?.Any())
                {
                    entities = entities.Where(en => en.Divisions.Any(r => r.Id.In(request.DivisionsIds)));
                }
                if(true == request.DocumentsIds?.Any())
                {
                    entities = entities.Where(en => en.Documents.Any(r => r.Id.In(request.DocumentsIds)));
                }
                if(true == request.DocumentSetsIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentSets.Any(r => r.Id.In(request.DocumentSetsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.GeneralScope))
                    entities = entities.Where(en => en.GeneralScope.Contains(request.GeneralScope));
                if(!DocTools.IsNullOrEmpty(request.GeneralScopes))
                    entities = entities.Where(en => en.GeneralScope.In(request.GeneralScopes));
                if(true == request.HistoriesIds?.Any())
                {
                    entities = entities.Where(en => en.Histories.Any(r => r.Id.In(request.HistoriesIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Indications))
                    entities = entities.Where(en => en.Indications.Contains(request.Indications));
                if(!DocTools.IsNullOrEmpty(request.Indicationss))
                    entities = entities.Where(en => en.Indications.In(request.Indicationss));
                if(true == request.InterventionsIds?.Any())
                {
                    entities = entities.Where(en => en.Interventions.Any(r => r.Id.In(request.InterventionsIds)));
                }
                if(request.LegacyDocumentSetId.HasValue)
                    entities = entities.Where(en => request.LegacyDocumentSetId.Value == en.LegacyDocumentSetId);
                if(request.LibraryPackageId.HasValue)
                    entities = entities.Where(en => request.LibraryPackageId.Value == en.LibraryPackageId);
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(!DocTools.IsNullOrEmpty(request.Names))
                    entities = entities.Where(en => en.Name.In(request.Names));
                if(!DocTools.IsNullOrEmpty(request.Notes))
                    entities = entities.Where(en => en.Notes.Contains(request.Notes));
                if(!DocTools.IsNullOrEmpty(request.Notess))
                    entities = entities.Where(en => en.Notes.In(request.Notess));
                if(!DocTools.IsNullOrEmpty(request.OriginalComparators))
                    entities = entities.Where(en => en.OriginalComparators.Contains(request.OriginalComparators));
                if(!DocTools.IsNullOrEmpty(request.OriginalComparatorss))
                    entities = entities.Where(en => en.OriginalComparators.In(request.OriginalComparatorss));
                if(!DocTools.IsNullOrEmpty(request.OriginalDesigns))
                    entities = entities.Where(en => en.OriginalDesigns.Contains(request.OriginalDesigns));
                if(!DocTools.IsNullOrEmpty(request.OriginalDesignss))
                    entities = entities.Where(en => en.OriginalDesigns.In(request.OriginalDesignss));
                if(!DocTools.IsNullOrEmpty(request.OriginalInterventions))
                    entities = entities.Where(en => en.OriginalInterventions.Contains(request.OriginalInterventions));
                if(!DocTools.IsNullOrEmpty(request.OriginalInterventionss))
                    entities = entities.Where(en => en.OriginalInterventions.In(request.OriginalInterventionss));
                if(!DocTools.IsNullOrEmpty(request.OriginalOutcomes))
                    entities = entities.Where(en => en.OriginalOutcomes.Contains(request.OriginalOutcomes));
                if(!DocTools.IsNullOrEmpty(request.OriginalOutcomess))
                    entities = entities.Where(en => en.OriginalOutcomes.In(request.OriginalOutcomess));
                if(!DocTools.IsNullOrEmpty(request.OriginalSearch))
                    entities = entities.Where(en => en.OriginalSearch.Contains(request.OriginalSearch));
                if(!DocTools.IsNullOrEmpty(request.OriginalSearchs))
                    entities = entities.Where(en => en.OriginalSearch.In(request.OriginalSearchs));
                if(true == request.OutcomesIds?.Any())
                {
                    entities = entities.Where(en => en.Outcomes.Any(r => r.Id.In(request.OutcomesIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Owner) && !DocTools.IsNullOrEmpty(request.Owner.Id))
                {
                    entities = entities.Where(en => en.Owner.Id == request.Owner.Id );
                }
                if(true == request.OwnerIds?.Any())
                {
                    entities = entities.Where(en => en.Owner.Id.In(request.OwnerIds));
                }
                if(!DocTools.IsNullOrEmpty(request.Participants))
                    entities = entities.Where(en => en.Participants.Contains(request.Participants));
                if(!DocTools.IsNullOrEmpty(request.Participantss))
                    entities = entities.Where(en => en.Participants.In(request.Participantss));
                if(true == request.ProjectsIds?.Any())
                {
                    entities = entities.Where(en => en.Projects.Any(r => r.Id.In(request.ProjectsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.ProjectTeam) && !DocTools.IsNullOrEmpty(request.ProjectTeam.Id))
                {
                    entities = entities.Where(en => en.ProjectTeam.Id == request.ProjectTeam.Id );
                }
                if(true == request.ProjectTeamIds?.Any())
                {
                    entities = entities.Where(en => en.ProjectTeam.Id.In(request.ProjectTeamIds));
                }
                if(true == request.ScopesIds?.Any())
                {
                    entities = entities.Where(en => en.Scopes.Any(r => r.Id.In(request.ScopesIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.SearchEnd))
                    entities = entities.Where(en => null != en.SearchEnd && request.SearchEnd.Value.Date == en.SearchEnd.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.SearchEndBefore))
                    entities = entities.Where(en => en.SearchEnd <= request.SearchEndBefore);
                if(!DocTools.IsNullOrEmpty(request.SearchEndAfter))
                    entities = entities.Where(en => en.SearchEnd >= request.SearchEndAfter);
                if(!DocTools.IsNullOrEmpty(request.SearchStart))
                    entities = entities.Where(en => null != en.SearchStart && request.SearchStart.Value.Date == en.SearchStart.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.SearchStartBefore))
                    entities = entities.Where(en => en.SearchStart <= request.SearchStartBefore);
                if(!DocTools.IsNullOrEmpty(request.SearchStartAfter))
                    entities = entities.Where(en => en.SearchStart >= request.SearchStartAfter);
                if(!DocTools.IsNullOrEmpty(request.SearchStrategy))
                    entities = entities.Where(en => en.SearchStrategy.Contains(request.SearchStrategy));
                if(!DocTools.IsNullOrEmpty(request.SearchStrategys))
                    entities = entities.Where(en => en.SearchStrategy.In(request.SearchStrategys));
                if(!DocTools.IsNullOrEmpty(request.SearchUpdated))
                    entities = entities.Where(en => null != en.SearchUpdated && request.SearchUpdated.Value.Date == en.SearchUpdated.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.SearchUpdatedBefore))
                    entities = entities.Where(en => en.SearchUpdated <= request.SearchUpdatedBefore);
                if(!DocTools.IsNullOrEmpty(request.SearchUpdatedAfter))
                    entities = entities.Where(en => en.SearchUpdated >= request.SearchUpdatedAfter);
                if(!DocTools.IsNullOrEmpty(request.SelectionCriteria))
                    entities = entities.Where(en => en.SelectionCriteria.Contains(request.SelectionCriteria));
                if(!DocTools.IsNullOrEmpty(request.SelectionCriterias))
                    entities = entities.Where(en => en.SelectionCriteria.In(request.SelectionCriterias));
                if(true == request.StatsIds?.Any())
                {
                    entities = entities.Where(en => en.Stats.Any(r => r.Id.In(request.StatsIds)));
                }
                if(true == request.StudyDesignsIds?.Any())
                {
                    entities = entities.Where(en => en.StudyDesigns.Any(r => r.Id.In(request.StudyDesignsIds)));
                }
                if(request.Type.HasValue)
                    entities = entities.Where(en => request.Type.Value == en.Type);
                if(!DocTools.IsNullOrEmpty(request.Types))
                    entities = entities.Where(en => en.Type.In(request.Types));
                if(request.UpdateFrequency.HasValue)
                    entities = entities.Where(en => request.UpdateFrequency.Value == en.UpdateFrequency);
                if(true == request.UsersIds?.Any())
                {
                    entities = entities.Where(en => en.Users.Any(r => r.Id.In(request.UsersIds)));
                }

                entities = ApplyFilters<DocEntityLibrarySet,LibrarySetSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(LibrarySetSearch request) => Get(request);

        public object Get(LibrarySetSearch request) => GetSearchResultWithCache<LibrarySet,DocEntityLibrarySet,LibrarySetSearch>(DocConstantModelName.LIBRARYSET, request, _ExecSearch);

        public object Get(LibrarySet request) => GetEntityWithCache<LibrarySet>(DocConstantModelName.LIBRARYSET, request, GetLibrarySet);



        private LibrarySet _AssignValues(LibrarySet request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "LibrarySet"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.Select = request.Select ?? new List<string>();

            LibrarySet ret = null;
            request = _InitAssignValues<LibrarySet>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<LibrarySet>(DocConstantModelName.LIBRARYSET, nameof(LibrarySet), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pAdditionalCriteria = request.AdditionalCriteria;
            var pCharacteristics = GetVariable<Reference>(request, nameof(request.Characteristics), request.Characteristics?.ToList(), request.CharacteristicsIds?.ToList());
            var pClients = GetVariable<Reference>(request, nameof(request.Clients), request.Clients?.ToList(), request.ClientsIds?.ToList());
            var pComparators = GetVariable<Reference>(request, nameof(request.Comparators), request.Comparators?.ToList(), request.ComparatorsIds?.ToList());
            var pConfidential = request.Confidential;
            var pDivisions = GetVariable<Reference>(request, nameof(request.Divisions), request.Divisions?.ToList(), request.DivisionsIds?.ToList());
            var pDocuments = GetVariable<Reference>(request, nameof(request.Documents), request.Documents?.ToList(), request.DocumentsIds?.ToList());
            var pDocumentSets = GetVariable<Reference>(request, nameof(request.DocumentSets), request.DocumentSets?.ToList(), request.DocumentSetsIds?.ToList());
            var pGeneralScope = request.GeneralScope;
            var pHistories = GetVariable<Reference>(request, nameof(request.Histories), request.Histories?.ToList(), request.HistoriesIds?.ToList());
            var pIndications = request.Indications;
            var pInterventions = GetVariable<Reference>(request, nameof(request.Interventions), request.Interventions?.ToList(), request.InterventionsIds?.ToList());
            var pLegacyDocumentSetId = request.LegacyDocumentSetId;
            var pLibraryPackageId = request.LibraryPackageId;
            var pName = request.Name;
            var pNotes = request.Notes;
            var pOriginalComparators = request.OriginalComparators;
            var pOriginalDesigns = request.OriginalDesigns;
            var pOriginalInterventions = request.OriginalInterventions;
            var pOriginalOutcomes = request.OriginalOutcomes;
            var pOriginalSearch = request.OriginalSearch;
            var pOutcomes = GetVariable<Reference>(request, nameof(request.Outcomes), request.Outcomes?.ToList(), request.OutcomesIds?.ToList());
            var pOwner = (request.Owner?.Id > 0) ? DocEntityDocumentSet.Get(request.Owner.Id) : null;
            var pParticipants = request.Participants;
            var pProjects = GetVariable<Reference>(request, nameof(request.Projects), request.Projects?.ToList(), request.ProjectsIds?.ToList());
            var pProjectTeam = (request.ProjectTeam?.Id > 0) ? DocEntityTeam.Get(request.ProjectTeam.Id) : null;
            var pScopes = GetVariable<Reference>(request, nameof(request.Scopes), request.Scopes?.ToList(), request.ScopesIds?.ToList());
            var pSearchEnd = request.SearchEnd;
            var pSearchStart = request.SearchStart;
            var pSearchStrategy = request.SearchStrategy;
            var pSearchUpdated = request.SearchUpdated;
            var pSelectionCriteria = request.SelectionCriteria;
            var pSettings = request.Settings;
            var pStats = GetVariable<Reference>(request, nameof(request.Stats), request.Stats?.ToList(), request.StatsIds?.ToList());
            var pStudyDesigns = GetVariable<Reference>(request, nameof(request.StudyDesigns), request.StudyDesigns?.ToList(), request.StudyDesignsIds?.ToList());
            var pType = request.Type;
            var pUpdateFrequency = request.UpdateFrequency;
            var pUsers = GetVariable<Reference>(request, nameof(request.Users), request.Users?.ToList(), request.UsersIds?.ToList());

            DocEntityLibrarySet entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityLibrarySet(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityLibrarySet.Get(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            //Special case for Archived
            var pArchived = true == request.Archived;
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pArchived, permission, DocConstantModelName.LIBRARYSET, nameof(request.Archived)))
            {
                if(DocPermissionFactory.IsRequested(request, pArchived, entity.Archived, nameof(request.Archived)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.Archived)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Archived)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pArchived) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.Archived))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Archived)} requires a value.");
                    entity.Archived = pArchived;
                if(DocPermissionFactory.IsRequested<bool>(request, pArchived, nameof(request.Archived)) && !request.Select.Matches(nameof(request.Archived), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Archived));
                }
            }

            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pAdditionalCriteria, permission, DocConstantModelName.LIBRARYSET, nameof(request.AdditionalCriteria)))
            {
                if(DocPermissionFactory.IsRequested(request, pAdditionalCriteria, entity.AdditionalCriteria, nameof(request.AdditionalCriteria)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.AdditionalCriteria)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.AdditionalCriteria)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pAdditionalCriteria) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.AdditionalCriteria))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.AdditionalCriteria)} requires a value.");
                    entity.AdditionalCriteria = pAdditionalCriteria;
                if(DocPermissionFactory.IsRequested<string>(request, pAdditionalCriteria, nameof(request.AdditionalCriteria)) && !request.Select.Matches(nameof(request.AdditionalCriteria), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.AdditionalCriteria));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pConfidential, permission, DocConstantModelName.LIBRARYSET, nameof(request.Confidential)))
            {
                if(DocPermissionFactory.IsRequested(request, pConfidential, entity.Confidential, nameof(request.Confidential)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.Confidential)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Confidential)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pConfidential) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.Confidential))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Confidential)} requires a value.");
                    entity.Confidential = pConfidential;
                if(DocPermissionFactory.IsRequested<bool>(request, pConfidential, nameof(request.Confidential)) && !request.Select.Matches(nameof(request.Confidential), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Confidential));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pGeneralScope, permission, DocConstantModelName.LIBRARYSET, nameof(request.GeneralScope)))
            {
                if(DocPermissionFactory.IsRequested(request, pGeneralScope, entity.GeneralScope, nameof(request.GeneralScope)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.GeneralScope)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.GeneralScope)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pGeneralScope) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.GeneralScope))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.GeneralScope)} requires a value.");
                    entity.GeneralScope = pGeneralScope;
                if(DocPermissionFactory.IsRequested<string>(request, pGeneralScope, nameof(request.GeneralScope)) && !request.Select.Matches(nameof(request.GeneralScope), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.GeneralScope));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pIndications, permission, DocConstantModelName.LIBRARYSET, nameof(request.Indications)))
            {
                if(DocPermissionFactory.IsRequested(request, pIndications, entity.Indications, nameof(request.Indications)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.Indications)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Indications)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pIndications) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.Indications))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Indications)} requires a value.");
                    entity.Indications = pIndications;
                if(DocPermissionFactory.IsRequested<string>(request, pIndications, nameof(request.Indications)) && !request.Select.Matches(nameof(request.Indications), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Indications));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pLegacyDocumentSetId, permission, DocConstantModelName.LIBRARYSET, nameof(request.LegacyDocumentSetId)))
            {
                if(DocPermissionFactory.IsRequested(request, pLegacyDocumentSetId, entity.LegacyDocumentSetId, nameof(request.LegacyDocumentSetId)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.LegacyDocumentSetId)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.LegacyDocumentSetId)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pLegacyDocumentSetId) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.LegacyDocumentSetId))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.LegacyDocumentSetId)} requires a value.");
                    entity.LegacyDocumentSetId = pLegacyDocumentSetId;
                if(DocPermissionFactory.IsRequested<int?>(request, pLegacyDocumentSetId, nameof(request.LegacyDocumentSetId)) && !request.Select.Matches(nameof(request.LegacyDocumentSetId), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.LegacyDocumentSetId));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pLibraryPackageId, permission, DocConstantModelName.LIBRARYSET, nameof(request.LibraryPackageId)))
            {
                if(DocPermissionFactory.IsRequested(request, pLibraryPackageId, entity.LibraryPackageId, nameof(request.LibraryPackageId)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.LibraryPackageId)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.LibraryPackageId)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pLibraryPackageId) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.LibraryPackageId))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.LibraryPackageId)} requires a value.");
                    entity.LibraryPackageId = pLibraryPackageId;
                if(DocPermissionFactory.IsRequested<int?>(request, pLibraryPackageId, nameof(request.LibraryPackageId)) && !request.Select.Matches(nameof(request.LibraryPackageId), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.LibraryPackageId));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pName, permission, DocConstantModelName.LIBRARYSET, nameof(request.Name)))
            {
                if(DocPermissionFactory.IsRequested(request, pName, entity.Name, nameof(request.Name)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.Name)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Name)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pName) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.Name))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Name)} requires a value.");
                    entity.Name = pName;
                if(DocPermissionFactory.IsRequested<string>(request, pName, nameof(request.Name)) && !request.Select.Matches(nameof(request.Name), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Name));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pNotes, permission, DocConstantModelName.LIBRARYSET, nameof(request.Notes)))
            {
                if(DocPermissionFactory.IsRequested(request, pNotes, entity.Notes, nameof(request.Notes)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.Notes)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Notes)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pNotes) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.Notes))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Notes)} requires a value.");
                    entity.Notes = pNotes;
                if(DocPermissionFactory.IsRequested<string>(request, pNotes, nameof(request.Notes)) && !request.Select.Matches(nameof(request.Notes), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Notes));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pOriginalComparators, permission, DocConstantModelName.LIBRARYSET, nameof(request.OriginalComparators)))
            {
                if(DocPermissionFactory.IsRequested(request, pOriginalComparators, entity.OriginalComparators, nameof(request.OriginalComparators)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.OriginalComparators)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.OriginalComparators)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pOriginalComparators) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.OriginalComparators))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.OriginalComparators)} requires a value.");
                    entity.OriginalComparators = pOriginalComparators;
                if(DocPermissionFactory.IsRequested<string>(request, pOriginalComparators, nameof(request.OriginalComparators)) && !request.Select.Matches(nameof(request.OriginalComparators), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.OriginalComparators));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pOriginalDesigns, permission, DocConstantModelName.LIBRARYSET, nameof(request.OriginalDesigns)))
            {
                if(DocPermissionFactory.IsRequested(request, pOriginalDesigns, entity.OriginalDesigns, nameof(request.OriginalDesigns)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.OriginalDesigns)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.OriginalDesigns)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pOriginalDesigns) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.OriginalDesigns))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.OriginalDesigns)} requires a value.");
                    entity.OriginalDesigns = pOriginalDesigns;
                if(DocPermissionFactory.IsRequested<string>(request, pOriginalDesigns, nameof(request.OriginalDesigns)) && !request.Select.Matches(nameof(request.OriginalDesigns), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.OriginalDesigns));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pOriginalInterventions, permission, DocConstantModelName.LIBRARYSET, nameof(request.OriginalInterventions)))
            {
                if(DocPermissionFactory.IsRequested(request, pOriginalInterventions, entity.OriginalInterventions, nameof(request.OriginalInterventions)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.OriginalInterventions)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.OriginalInterventions)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pOriginalInterventions) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.OriginalInterventions))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.OriginalInterventions)} requires a value.");
                    entity.OriginalInterventions = pOriginalInterventions;
                if(DocPermissionFactory.IsRequested<string>(request, pOriginalInterventions, nameof(request.OriginalInterventions)) && !request.Select.Matches(nameof(request.OriginalInterventions), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.OriginalInterventions));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pOriginalOutcomes, permission, DocConstantModelName.LIBRARYSET, nameof(request.OriginalOutcomes)))
            {
                if(DocPermissionFactory.IsRequested(request, pOriginalOutcomes, entity.OriginalOutcomes, nameof(request.OriginalOutcomes)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.OriginalOutcomes)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.OriginalOutcomes)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pOriginalOutcomes) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.OriginalOutcomes))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.OriginalOutcomes)} requires a value.");
                    entity.OriginalOutcomes = pOriginalOutcomes;
                if(DocPermissionFactory.IsRequested<string>(request, pOriginalOutcomes, nameof(request.OriginalOutcomes)) && !request.Select.Matches(nameof(request.OriginalOutcomes), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.OriginalOutcomes));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pOriginalSearch, permission, DocConstantModelName.LIBRARYSET, nameof(request.OriginalSearch)))
            {
                if(DocPermissionFactory.IsRequested(request, pOriginalSearch, entity.OriginalSearch, nameof(request.OriginalSearch)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.OriginalSearch)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.OriginalSearch)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pOriginalSearch) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.OriginalSearch))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.OriginalSearch)} requires a value.");
                    entity.OriginalSearch = pOriginalSearch;
                if(DocPermissionFactory.IsRequested<string>(request, pOriginalSearch, nameof(request.OriginalSearch)) && !request.Select.Matches(nameof(request.OriginalSearch), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.OriginalSearch));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityDocumentSet>(currentUser, request, pOwner, permission, DocConstantModelName.LIBRARYSET, nameof(request.Owner)))
            {
                if(DocPermissionFactory.IsRequested(request, pOwner, entity.Owner, nameof(request.Owner)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.Owner)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Owner)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pOwner) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.Owner))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Owner)} requires a value.");
                    entity.Owner = pOwner;
                if(DocPermissionFactory.IsRequested<DocEntityDocumentSet>(request, pOwner, nameof(request.Owner)) && !request.Select.Matches(nameof(request.Owner), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Owner));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pParticipants, permission, DocConstantModelName.LIBRARYSET, nameof(request.Participants)))
            {
                if(DocPermissionFactory.IsRequested(request, pParticipants, entity.Participants, nameof(request.Participants)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.Participants)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Participants)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pParticipants) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.Participants))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Participants)} requires a value.");
                    entity.Participants = pParticipants;
                if(DocPermissionFactory.IsRequested<string>(request, pParticipants, nameof(request.Participants)) && !request.Select.Matches(nameof(request.Participants), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Participants));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityTeam>(currentUser, request, pProjectTeam, permission, DocConstantModelName.LIBRARYSET, nameof(request.ProjectTeam)))
            {
                if(DocPermissionFactory.IsRequested(request, pProjectTeam, entity.ProjectTeam, nameof(request.ProjectTeam)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.ProjectTeam)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ProjectTeam)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pProjectTeam) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.ProjectTeam))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ProjectTeam)} requires a value.");
                    entity.ProjectTeam = pProjectTeam;
                if(DocPermissionFactory.IsRequested<DocEntityTeam>(request, pProjectTeam, nameof(request.ProjectTeam)) && !request.Select.Matches(nameof(request.ProjectTeam), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.ProjectTeam));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, request, pSearchEnd, permission, DocConstantModelName.LIBRARYSET, nameof(request.SearchEnd)))
            {
                if(DocPermissionFactory.IsRequested(request, pSearchEnd, entity.SearchEnd, nameof(request.SearchEnd)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.SearchEnd)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.SearchEnd)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSearchEnd) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.SearchEnd))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.SearchEnd)} requires a value.");
                    entity.SearchEnd = pSearchEnd;
                if(DocPermissionFactory.IsRequested<DateTime?>(request, pSearchEnd, nameof(request.SearchEnd)) && !request.Select.Matches(nameof(request.SearchEnd), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.SearchEnd));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, request, pSearchStart, permission, DocConstantModelName.LIBRARYSET, nameof(request.SearchStart)))
            {
                if(DocPermissionFactory.IsRequested(request, pSearchStart, entity.SearchStart, nameof(request.SearchStart)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.SearchStart)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.SearchStart)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSearchStart) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.SearchStart))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.SearchStart)} requires a value.");
                    entity.SearchStart = pSearchStart;
                if(DocPermissionFactory.IsRequested<DateTime?>(request, pSearchStart, nameof(request.SearchStart)) && !request.Select.Matches(nameof(request.SearchStart), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.SearchStart));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pSearchStrategy, permission, DocConstantModelName.LIBRARYSET, nameof(request.SearchStrategy)))
            {
                if(DocPermissionFactory.IsRequested(request, pSearchStrategy, entity.SearchStrategy, nameof(request.SearchStrategy)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.SearchStrategy)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.SearchStrategy)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSearchStrategy) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.SearchStrategy))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.SearchStrategy)} requires a value.");
                    entity.SearchStrategy = pSearchStrategy;
                if(DocPermissionFactory.IsRequested<string>(request, pSearchStrategy, nameof(request.SearchStrategy)) && !request.Select.Matches(nameof(request.SearchStrategy), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.SearchStrategy));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, request, pSearchUpdated, permission, DocConstantModelName.LIBRARYSET, nameof(request.SearchUpdated)))
            {
                if(DocPermissionFactory.IsRequested(request, pSearchUpdated, entity.SearchUpdated, nameof(request.SearchUpdated)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.SearchUpdated)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.SearchUpdated)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSearchUpdated) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.SearchUpdated))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.SearchUpdated)} requires a value.");
                    entity.SearchUpdated = pSearchUpdated;
                if(DocPermissionFactory.IsRequested<DateTime?>(request, pSearchUpdated, nameof(request.SearchUpdated)) && !request.Select.Matches(nameof(request.SearchUpdated), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.SearchUpdated));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pSelectionCriteria, permission, DocConstantModelName.LIBRARYSET, nameof(request.SelectionCriteria)))
            {
                if(DocPermissionFactory.IsRequested(request, pSelectionCriteria, entity.SelectionCriteria, nameof(request.SelectionCriteria)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.SelectionCriteria)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.SelectionCriteria)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSelectionCriteria) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.SelectionCriteria))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.SelectionCriteria)} requires a value.");
                    entity.SelectionCriteria = pSelectionCriteria;
                if(DocPermissionFactory.IsRequested<string>(request, pSelectionCriteria, nameof(request.SelectionCriteria)) && !request.Select.Matches(nameof(request.SelectionCriteria), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.SelectionCriteria));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pSettings, permission, DocConstantModelName.LIBRARYSET, nameof(request.Settings)))
            {
                if(DocPermissionFactory.IsRequested(request, pSettings, entity.Settings, nameof(request.Settings)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.Settings)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Settings)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSettings) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.Settings))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Settings)} requires a value.");
                    entity.Settings = pSettings;
                if(DocPermissionFactory.IsRequested<string>(request, pSettings, nameof(request.Settings)) && !request.Select.Matches(nameof(request.Settings), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Settings));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocumentSetTypeEnm?>(currentUser, request, pType, permission, DocConstantModelName.LIBRARYSET, nameof(request.Type)))
            {
                if(DocPermissionFactory.IsRequested(request, (int?) pType, (int) entity.Type, nameof(request.Type)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.Type)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Type)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pType) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.Type))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Type)} requires a value.");
                    if(null != pType)
                        entity.Type = pType.Value;
                if(DocPermissionFactory.IsRequested<DocumentSetTypeEnm?>(request, pType, nameof(request.Type)) && !request.Select.Matches(nameof(request.Type), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Type));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pUpdateFrequency, permission, DocConstantModelName.LIBRARYSET, nameof(request.UpdateFrequency)))
            {
                if(DocPermissionFactory.IsRequested(request, pUpdateFrequency, entity.UpdateFrequency, nameof(request.UpdateFrequency)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.LIBRARYSET, nameof(request.UpdateFrequency)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.UpdateFrequency)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pUpdateFrequency) && DocResources.Metadata.IsRequired(DocConstantModelName.LIBRARYSET, nameof(request.UpdateFrequency))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.UpdateFrequency)} requires a value.");
                    entity.UpdateFrequency = pUpdateFrequency;
                if(DocPermissionFactory.IsRequested<int?>(request, pUpdateFrequency, nameof(request.UpdateFrequency)) && !request.Select.Matches(nameof(request.UpdateFrequency), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.UpdateFrequency));
                }
            }

            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);

            var idsToInvalidate = new List<int>();
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityTag>(request, entity, pCharacteristics, permission, nameof(request.Characteristics)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityClient>(request, entity, pClients, permission, nameof(request.Clients)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityTag>(request, entity, pComparators, permission, nameof(request.Comparators)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityDivision>(request, entity, pDivisions, permission, nameof(request.Divisions)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityDocument>(request, entity, pDocuments, permission, nameof(request.Documents)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityDocumentSet>(request, entity, pDocumentSets, permission, nameof(request.DocumentSets)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityDocumentSetHistory>(request, entity, pHistories, permission, nameof(request.Histories)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityTag>(request, entity, pInterventions, permission, nameof(request.Interventions)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityTag>(request, entity, pOutcomes, permission, nameof(request.Outcomes)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityProject>(request, entity, pProjects, permission, nameof(request.Projects)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityScope>(request, entity, pScopes, permission, nameof(request.Scopes)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityStatsStudySet>(request, entity, pStats, permission, nameof(request.Stats)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityStudyDesign>(request, entity, pStudyDesigns, permission, nameof(request.StudyDesigns)));
            idsToInvalidate.AddRange(PatchCollection<LibrarySet, DocEntityLibrarySet, Reference, DocEntityUser>(request, entity, pUsers, permission, nameof(request.Users)));
            if (idsToInvalidate.Any())
            {
                idsToInvalidate.Add(entity.Id);
                DocCacheClient.RemoveByEntityIds(idsToInvalidate);
                DocCacheClient.RemoveSearch(DocConstantModelName.LIBRARYSET);
            }

            DocPermissionFactory.SetSelect<LibrarySet>(currentUser, nameof(LibrarySet), request.Select);
            ret = entity.ToDto();

            var cacheExpires = DocResources.Metadata.GetCacheExpiration(DocConstantModelName.LIBRARYSET);
            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.LIBRARYSET, cacheExpires);

            return ret;
        }


        public LibrarySet Post(LibrarySet request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.Select = request.Select ?? new List<string>();

            LibrarySet ret = null;

            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "LibrarySet")) 
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
                });
            }
            return ret;
        }
   
        public List<LibrarySet> Post(LibrarySetBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<LibrarySet>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as LibrarySet;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public LibrarySet Post(LibrarySetCopy request)
        {
            LibrarySet ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    var entity = DocEntityLibrarySet.Get(request?.Id);
                    if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                    if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    var pAdditionalCriteria = entity.AdditionalCriteria;
                    var pCharacteristics = entity.Characteristics.ToList();
                    var pClients = entity.Clients.ToList();
                    var pComparators = entity.Comparators.ToList();
                    var pConfidential = entity.Confidential;
                    var pDivisions = entity.Divisions.ToList();
                    var pDocuments = entity.Documents.ToList();
                    var pDocumentSets = entity.DocumentSets.ToList();
                    var pGeneralScope = entity.GeneralScope;
                    var pHistories = entity.Histories.ToList();
                    var pIndications = entity.Indications;
                    var pInterventions = entity.Interventions.ToList();
                    var pLegacyDocumentSetId = entity.LegacyDocumentSetId;
                    var pLibraryPackageId = entity.LibraryPackageId;
                    var pName = entity.Name;
                    if(!DocTools.IsNullOrEmpty(pName))
                        pName += " (Copy)";
                    var pNotes = entity.Notes;
                    var pOriginalComparators = entity.OriginalComparators;
                    var pOriginalDesigns = entity.OriginalDesigns;
                    var pOriginalInterventions = entity.OriginalInterventions;
                    var pOriginalOutcomes = entity.OriginalOutcomes;
                    var pOriginalSearch = entity.OriginalSearch;
                    var pOutcomes = entity.Outcomes.ToList();
                    var pOwner = entity.Owner;
                    var pParticipants = entity.Participants;
                    var pProjects = entity.Projects.ToList();
                    var pProjectTeam = entity.ProjectTeam;
                    var pScopes = entity.Scopes.ToList();
                    var pSearchEnd = entity.SearchEnd;
                    var pSearchStart = entity.SearchStart;
                    var pSearchStrategy = entity.SearchStrategy;
                    var pSearchUpdated = entity.SearchUpdated;
                    var pSelectionCriteria = entity.SelectionCriteria;
                    var pSettings = entity.Settings;
                    var pStats = entity.Stats.ToList();
                    var pStudyDesigns = entity.StudyDesigns.ToList();
                    var pType = entity.Type;
                    var pUpdateFrequency = entity.UpdateFrequency;
                    var pUsers = entity.Users.ToList();
                    var copy = new DocEntityLibrarySet(ssn)
                    {
                        Hash = Guid.NewGuid()
                                , AdditionalCriteria = pAdditionalCriteria
                                , Confidential = pConfidential
                                , GeneralScope = pGeneralScope
                                , Indications = pIndications
                                , LegacyDocumentSetId = pLegacyDocumentSetId
                                , LibraryPackageId = pLibraryPackageId
                                , Name = pName
                                , Notes = pNotes
                                , OriginalComparators = pOriginalComparators
                                , OriginalDesigns = pOriginalDesigns
                                , OriginalInterventions = pOriginalInterventions
                                , OriginalOutcomes = pOriginalOutcomes
                                , OriginalSearch = pOriginalSearch
                                , Owner = pOwner
                                , Participants = pParticipants
                                , ProjectTeam = pProjectTeam
                                , SearchEnd = pSearchEnd
                                , SearchStart = pSearchStart
                                , SearchStrategy = pSearchStrategy
                                , SearchUpdated = pSearchUpdated
                                , SelectionCriteria = pSelectionCriteria
                                , Settings = pSettings
                                , Type = pType
                                , UpdateFrequency = pUpdateFrequency
                    };
                            foreach(var item in pCharacteristics)
                            {
                                entity.Characteristics.Add(item);
                            }

                            foreach(var item in pClients)
                            {
                                entity.Clients.Add(item);
                            }

                            foreach(var item in pComparators)
                            {
                                entity.Comparators.Add(item);
                            }

                            foreach(var item in pDivisions)
                            {
                                entity.Divisions.Add(item);
                            }

                            foreach(var item in pDocuments)
                            {
                                entity.Documents.Add(item);
                            }

                            foreach(var item in pDocumentSets)
                            {
                                entity.DocumentSets.Add(item);
                            }

                            foreach(var item in pHistories)
                            {
                                entity.Histories.Add(item);
                            }

                            foreach(var item in pInterventions)
                            {
                                entity.Interventions.Add(item);
                            }

                            foreach(var item in pOutcomes)
                            {
                                entity.Outcomes.Add(item);
                            }

                            foreach(var item in pProjects)
                            {
                                entity.Projects.Add(item);
                            }

                            foreach(var item in pScopes)
                            {
                                entity.Scopes.Add(item);
                            }

                            foreach(var item in pStats)
                            {
                                entity.Stats.Add(item);
                            }

                            foreach(var item in pStudyDesigns)
                            {
                                entity.StudyDesigns.Add(item);
                            }

                            foreach(var item in pUsers)
                            {
                                entity.Users.Add(item);
                            }

                    copy.SaveChanges(DocConstantPermission.ADD);
                    ret = copy.ToDto();
                });
            }
            return ret;
        }



        public List<LibrarySet> Put(LibrarySetBatch request)
        {
            return Patch(request);
        }

        public LibrarySet Put(LibrarySet request)
        {
            return Patch(request);
        }


        public List<LibrarySet> Patch(LibrarySetBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<LibrarySet>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as LibrarySet;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public LibrarySet Patch(LibrarySet request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the LibrarySet to patch.");
            
            request.Select = request.Select ?? new List<string>();
            
            LibrarySet ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
                });
            }
            return ret;
        }


        public void Delete(LibrarySetBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(LibrarySet request)
        {
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!(request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, $"No Id provided for delete.");

                    var en = DocEntityLibrarySet.Get(request?.Id);
                    if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No LibrarySet could be found for Id {request?.Id}.");
                    if(en.IsRemoved) return;
                
                    if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                    en.Remove();

                    DocCacheClient.RemoveSearch(DocConstantModelName.LIBRARYSET);
                    DocCacheClient.RemoveById(request.Id);
                });
            }
        }

        public void Delete(LibrarySetSearch request)
        {
            var matches = Get(request) as List<LibrarySet>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");
            matches.ForEach(match =>
            {
                Delete(match);
            });
        }


        public object Get(LibrarySetJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "characteristics":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Characteristics", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "client":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityClient, Client, ClientSearch>((int)request.Id, DocConstantModelName.CLIENT, "Clients", request, (ss) => HostContext.ResolveService<ClientService>(Request)?.Get(ss));
                    case "comment":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request, (ss) => HostContext.ResolveService<CommentService>(Request)?.Get(ss));
                    case "comparators":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Comparators", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "division":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityDivision, Division, DivisionSearch>((int)request.Id, DocConstantModelName.DIVISION, "Divisions", request, (ss) => HostContext.ResolveService<DivisionService>(Request)?.Get(ss));
                    case "document":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityDocument, Document, DocumentSearch>((int)request.Id, DocConstantModelName.DOCUMENT, "Documents", request, (ss) => HostContext.ResolveService<DocumentService>(Request)?.Get(ss));
                    case "documentset":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request, (ss) => HostContext.ResolveService<DocumentSetService>(Request)?.Get(ss));
                    case "favorite":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request, (ss) => HostContext.ResolveService<FavoriteService>(Request)?.Get(ss));
                    case "file":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityFile, File, FileSearch>((int)request.Id, DocConstantModelName.FILE, "Files", request, (ss) => HostContext.ResolveService<FileService>(Request)?.Get(ss));
                    case "documentsethistory":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityDocumentSetHistory, DocumentSetHistory, DocumentSetHistorySearch>((int)request.Id, DocConstantModelName.DOCUMENTSETHISTORY, "Histories", request, (ss) => HostContext.ResolveService<DocumentSetHistoryService>(Request)?.Get(ss));
                    case "interventions":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Interventions", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "outcomes":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Outcomes", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "projectlink":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityProject, Project, ProjectSearch>((int)request.Id, DocConstantModelName.PROJECT, "ProjectLinks", request, (ss) => HostContext.ResolveService<ProjectService>(Request)?.Get(ss));
                    case "project":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityProject, Project, ProjectSearch>((int)request.Id, DocConstantModelName.PROJECT, "Projects", request, (ss) => HostContext.ResolveService<ProjectService>(Request)?.Get(ss));
                    case "scope":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request, (ss) => HostContext.ResolveService<ScopeService>(Request)?.Get(ss));
                    case "statsstudyset":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityStatsStudySet, StatsStudySet, StatsStudySetSearch>((int)request.Id, DocConstantModelName.STATSSTUDYSET, "Stats", request, (ss) => HostContext.ResolveService<StatsStudySetService>(Request)?.Get(ss));
                    case "tag":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "user":
                        return GetJunctionSearchResult<LibrarySet, DocEntityLibrarySet, DocEntityUser, User, UserSearch>((int)request.Id, DocConstantModelName.USER, "Users", request, (ss) => HostContext.ResolveService<UserService>(Request)?.Get(ss));
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for libraryset/{request.Id}/{request.Junction} was not found");
            }
        }


        public object Post(LibrarySetJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "characteristics":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Characteristics", request);
                    case "client":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityClient, Client, ClientSearch>((int)request.Id, DocConstantModelName.CLIENT, "Clients", request);
                    case "comment":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "comparators":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Comparators", request);
                    case "division":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityDivision, Division, DivisionSearch>((int)request.Id, DocConstantModelName.DIVISION, "Divisions", request);
                    case "document":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityDocument, Document, DocumentSearch>((int)request.Id, DocConstantModelName.DOCUMENT, "Documents", request);
                    case "favorite":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "file":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityFile, File, FileSearch>((int)request.Id, DocConstantModelName.FILE, "Files", request);
                    case "interventions":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Interventions", request);
                    case "outcomes":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Outcomes", request);
                    case "scope":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request);
                    case "studydesign":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityStudyDesign, StudyDesign, StudyDesignSearch>((int)request.Id, DocConstantModelName.STUDYDESIGN, "StudyDesigns", request);
                    case "tag":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "user":
                        return AddJunction<LibrarySet, DocEntityLibrarySet, DocEntityUser, User, UserSearch>((int)request.Id, DocConstantModelName.USER, "Users", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for libraryset/{request.Id}/{request.Junction} was not found");
            }
        }

        public object Delete(LibrarySetJunction request)
        {    
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "characteristics":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Characteristics", request);
                    case "client":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityClient, Client, ClientSearch>((int)request.Id, DocConstantModelName.CLIENT, "Clients", request);
                    case "comment":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "comparators":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Comparators", request);
                    case "division":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityDivision, Division, DivisionSearch>((int)request.Id, DocConstantModelName.DIVISION, "Divisions", request);
                    case "document":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityDocument, Document, DocumentSearch>((int)request.Id, DocConstantModelName.DOCUMENT, "Documents", request);
                    case "favorite":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "file":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityFile, File, FileSearch>((int)request.Id, DocConstantModelName.FILE, "Files", request);
                    case "interventions":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Interventions", request);
                    case "outcomes":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Outcomes", request);
                    case "scope":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request);
                    case "studydesign":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityStudyDesign, StudyDesign, StudyDesignSearch>((int)request.Id, DocConstantModelName.STUDYDESIGN, "StudyDesigns", request);
                    case "tag":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "user":
                        return RemoveJunction<LibrarySet, DocEntityLibrarySet, DocEntityUser, User, UserSearch>((int)request.Id, DocConstantModelName.USER, "Users", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for libraryset/{request.Id}/{request.Junction} was not found");
            }
        }


        private LibrarySet GetLibrarySet(LibrarySet request)
        {
            var id = request?.Id;
            LibrarySet ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetSelect<LibrarySet>(currentUser, "LibrarySet", request.Select);

            DocEntityLibrarySet entity = null;
            if(id.HasValue)
            {
                entity = DocEntityLibrarySet.Get(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No LibrarySet found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

    }
}
