
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;

using Xtensive.Orm;


namespace Services.API
{
    public partial class DataSetService : DocServiceBase
    {

        private IQueryable<DocEntityDataSet> _ExecSearch(DataSetSearch request, DocQuery query)
        {
            request = InitSearch<DataSet, DataSetSearch>(request);
            IQueryable<DocEntityDataSet> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityDataSet>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new DataSetFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityDataSet,DataSetFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.DATASET, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }
                if(true == request.ClientsIds?.Any())
                {
                    entities = entities.Where(en => en.Clients.Any(r => r.Id.In(request.ClientsIds)));
                }
                if(true == request.Confidential?.Any())
                {
                    if(request.Confidential.Any(v => v == null)) entities = entities.Where(en => en.Confidential.In(request.Confidential) || en.Confidential == null);
                    else entities = entities.Where(en => en.Confidential.In(request.Confidential));
                }
                if(true == request.DivisionsIds?.Any())
                {
                    entities = entities.Where(en => en.Divisions.Any(r => r.Id.In(request.DivisionsIds)));
                }
                if(true == request.DocumentsIds?.Any())
                {
                    entities = entities.Where(en => en.Documents.Any(r => r.Id.In(request.DocumentsIds)));
                }
                if(true == request.DocumentSetsIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentSets.Any(r => r.Id.In(request.DocumentSetsIds)));
                }
                if(true == request.HistoriesIds?.Any())
                {
                    entities = entities.Where(en => en.Histories.Any(r => r.Id.In(request.HistoriesIds)));
                }
                if(request.LegacyDocumentSetId.HasValue)
                    entities = entities.Where(en => request.LegacyDocumentSetId.Value == en.LegacyDocumentSetId);
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(!DocTools.IsNullOrEmpty(request.Names))
                    entities = entities.Where(en => en.Name.In(request.Names));
                if(!DocTools.IsNullOrEmpty(request.Owner) && !DocTools.IsNullOrEmpty(request.Owner.Id))
                {
                    entities = entities.Where(en => en.Owner.Id == request.Owner.Id );
                }
                if(true == request.OwnerIds?.Any())
                {
                    entities = entities.Where(en => en.Owner.Id.In(request.OwnerIds));
                }
                if(!DocTools.IsNullOrEmpty(request.ProjectTeam) && !DocTools.IsNullOrEmpty(request.ProjectTeam.Id))
                {
                    entities = entities.Where(en => en.ProjectTeam.Id == request.ProjectTeam.Id );
                }
                if(true == request.ProjectTeamIds?.Any())
                {
                    entities = entities.Where(en => en.ProjectTeam.Id.In(request.ProjectTeamIds));
                }
                if(true == request.ScopesIds?.Any())
                {
                    entities = entities.Where(en => en.Scopes.Any(r => r.Id.In(request.ScopesIds)));
                }
                if(true == request.StatsIds?.Any())
                {
                    entities = entities.Where(en => en.Stats.Any(r => r.Id.In(request.StatsIds)));
                }
                if(request.Type.HasValue)
                    entities = entities.Where(en => request.Type.Value == en.Type);
                if(!DocTools.IsNullOrEmpty(request.Types))
                    entities = entities.Where(en => en.Type.In(request.Types));
                if(true == request.UsersIds?.Any())
                {
                    entities = entities.Where(en => en.Users.Any(r => r.Id.In(request.UsersIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.AdditionalCriteria))
                    entities = entities.Where(en => en.AdditionalCriteria.Contains(request.AdditionalCriteria));
                if(!DocTools.IsNullOrEmpty(request.AdditionalCriterias))
                    entities = entities.Where(en => en.AdditionalCriteria.In(request.AdditionalCriterias));
                if(true == request.CharacteristicsIds?.Any())
                {
                    entities = entities.Where(en => en.Characteristics.Any(r => r.Id.In(request.CharacteristicsIds)));
                }
                if(true == request.ClientsIds?.Any())
                {
                    entities = entities.Where(en => en.Clients.Any(r => r.Id.In(request.ClientsIds)));
                }
                if(true == request.ComparatorsIds?.Any())
                {
                    entities = entities.Where(en => en.Comparators.Any(r => r.Id.In(request.ComparatorsIds)));
                }
                if(true == request.Confidential?.Any())
                {
                    if(request.Confidential.Any(v => v == null)) entities = entities.Where(en => en.Confidential.In(request.Confidential) || en.Confidential == null);
                    else entities = entities.Where(en => en.Confidential.In(request.Confidential));
                }
                if(!DocTools.IsNullOrEmpty(request.DataCollection))
                    entities = entities.Where(en => en.DataCollection.Contains(request.DataCollection));
                if(!DocTools.IsNullOrEmpty(request.DataCollections))
                    entities = entities.Where(en => en.DataCollection.In(request.DataCollections));
                if(true == request.DivisionsIds?.Any())
                {
                    entities = entities.Where(en => en.Divisions.Any(r => r.Id.In(request.DivisionsIds)));
                }
                if(true == request.DocumentsIds?.Any())
                {
                    entities = entities.Where(en => en.Documents.Any(r => r.Id.In(request.DocumentsIds)));
                }
                if(true == request.DocumentSetsIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentSets.Any(r => r.Id.In(request.DocumentSetsIds)));
                }
                if(request.EvidencePortalId.HasValue)
                    entities = entities.Where(en => request.EvidencePortalId.Value == en.EvidencePortalId);
                if(request.FqId.HasValue)
                    entities = entities.Where(en => request.FqId.Value == en.FqId);
                if(request.FramedQuestionId.HasValue)
                    entities = entities.Where(en => request.FramedQuestionId.Value == en.FramedQuestionId);
                if(!DocTools.IsNullOrEmpty(request.GeneralScope))
                    entities = entities.Where(en => en.GeneralScope.Contains(request.GeneralScope));
                if(!DocTools.IsNullOrEmpty(request.GeneralScopes))
                    entities = entities.Where(en => en.GeneralScope.In(request.GeneralScopes));
                if(true == request.HistoriesIds?.Any())
                {
                    entities = entities.Where(en => en.Histories.Any(r => r.Id.In(request.HistoriesIds)));
                }
                if(true == request.ImportsIds?.Any())
                {
                    entities = entities.Where(en => en.Imports.Any(r => r.Id.In(request.ImportsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Indications))
                    entities = entities.Where(en => en.Indications.Contains(request.Indications));
                if(!DocTools.IsNullOrEmpty(request.Indicationss))
                    entities = entities.Where(en => en.Indications.In(request.Indicationss));
                if(true == request.InterventionsIds?.Any())
                {
                    entities = entities.Where(en => en.Interventions.Any(r => r.Id.In(request.InterventionsIds)));
                }
                if(request.LegacyDocumentSetId.HasValue)
                    entities = entities.Where(en => request.LegacyDocumentSetId.Value == en.LegacyDocumentSetId);
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(!DocTools.IsNullOrEmpty(request.Names))
                    entities = entities.Where(en => en.Name.In(request.Names));
                if(!DocTools.IsNullOrEmpty(request.Notes))
                    entities = entities.Where(en => en.Notes.Contains(request.Notes));
                if(!DocTools.IsNullOrEmpty(request.Notess))
                    entities = entities.Where(en => en.Notes.In(request.Notess));
                if(!DocTools.IsNullOrEmpty(request.OriginalComparators))
                    entities = entities.Where(en => en.OriginalComparators.Contains(request.OriginalComparators));
                if(!DocTools.IsNullOrEmpty(request.OriginalComparatorss))
                    entities = entities.Where(en => en.OriginalComparators.In(request.OriginalComparatorss));
                if(!DocTools.IsNullOrEmpty(request.OriginalDatabase))
                    entities = entities.Where(en => en.OriginalDatabase.Contains(request.OriginalDatabase));
                if(!DocTools.IsNullOrEmpty(request.OriginalDatabases))
                    entities = entities.Where(en => en.OriginalDatabase.In(request.OriginalDatabases));
                if(!DocTools.IsNullOrEmpty(request.OriginalDesigns))
                    entities = entities.Where(en => en.OriginalDesigns.Contains(request.OriginalDesigns));
                if(!DocTools.IsNullOrEmpty(request.OriginalDesignss))
                    entities = entities.Where(en => en.OriginalDesigns.In(request.OriginalDesignss));
                if(!DocTools.IsNullOrEmpty(request.OriginalInterventions))
                    entities = entities.Where(en => en.OriginalInterventions.Contains(request.OriginalInterventions));
                if(!DocTools.IsNullOrEmpty(request.OriginalInterventionss))
                    entities = entities.Where(en => en.OriginalInterventions.In(request.OriginalInterventionss));
                if(!DocTools.IsNullOrEmpty(request.OriginalOutcomes))
                    entities = entities.Where(en => en.OriginalOutcomes.Contains(request.OriginalOutcomes));
                if(!DocTools.IsNullOrEmpty(request.OriginalOutcomess))
                    entities = entities.Where(en => en.OriginalOutcomes.In(request.OriginalOutcomess));
                if(true == request.OutcomesIds?.Any())
                {
                    entities = entities.Where(en => en.Outcomes.Any(r => r.Id.In(request.OutcomesIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Owner) && !DocTools.IsNullOrEmpty(request.Owner.Id))
                {
                    entities = entities.Where(en => en.Owner.Id == request.Owner.Id );
                }
                if(true == request.OwnerIds?.Any())
                {
                    entities = entities.Where(en => en.Owner.Id.In(request.OwnerIds));
                }
                if(!DocTools.IsNullOrEmpty(request.Participants))
                    entities = entities.Where(en => en.Participants.Contains(request.Participants));
                if(!DocTools.IsNullOrEmpty(request.Participantss))
                    entities = entities.Where(en => en.Participants.In(request.Participantss));
                if(!DocTools.IsNullOrEmpty(request.PrismaWorkflow) && !DocTools.IsNullOrEmpty(request.PrismaWorkflow.Id))
                {
                    entities = entities.Where(en => en.PrismaWorkflow.Id == request.PrismaWorkflow.Id );
                }
                if(true == request.PrismaWorkflowIds?.Any())
                {
                    entities = entities.Where(en => en.PrismaWorkflow.Id.In(request.PrismaWorkflowIds));
                }
                if(true == request.ProjectsIds?.Any())
                {
                    entities = entities.Where(en => en.Projects.Any(r => r.Id.In(request.ProjectsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.ProjectTeam) && !DocTools.IsNullOrEmpty(request.ProjectTeam.Id))
                {
                    entities = entities.Where(en => en.ProjectTeam.Id == request.ProjectTeam.Id );
                }
                if(true == request.ProjectTeamIds?.Any())
                {
                    entities = entities.Where(en => en.ProjectTeam.Id.In(request.ProjectTeamIds));
                }
                if(true == request.ScopesIds?.Any())
                {
                    entities = entities.Where(en => en.Scopes.Any(r => r.Id.In(request.ScopesIds)));
                }
                if(true == request.ShowEtw?.Any())
                {
                    if(request.ShowEtw.Any(v => v == null)) entities = entities.Where(en => en.ShowEtw.In(request.ShowEtw) || en.ShowEtw == null);
                    else entities = entities.Where(en => en.ShowEtw.In(request.ShowEtw));
                }
                if(true == request.ShowPublicationType?.Any())
                {
                    if(request.ShowPublicationType.Any(v => v == null)) entities = entities.Where(en => en.ShowPublicationType.In(request.ShowPublicationType) || en.ShowPublicationType == null);
                    else entities = entities.Where(en => en.ShowPublicationType.In(request.ShowPublicationType));
                }
                if(true == request.StatsIds?.Any())
                {
                    entities = entities.Where(en => en.Stats.Any(r => r.Id.In(request.StatsIds)));
                }
                if(true == request.StudyDesignsIds?.Any())
                {
                    entities = entities.Where(en => en.StudyDesigns.Any(r => r.Id.In(request.StudyDesignsIds)));
                }
                if(request.Type.HasValue)
                    entities = entities.Where(en => request.Type.Value == en.Type);
                if(!DocTools.IsNullOrEmpty(request.Types))
                    entities = entities.Where(en => en.Type.In(request.Types));
                if(true == request.UsersIds?.Any())
                {
                    entities = entities.Where(en => en.Users.Any(r => r.Id.In(request.UsersIds)));
                }

                entities = ApplyFilters<DocEntityDataSet,DataSetSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(DataSetSearch request) => Get(request);

        public object Get(DataSetSearch request) => GetSearchResultWithCache<DataSet,DocEntityDataSet,DataSetSearch>(DocConstantModelName.DATASET, request, _ExecSearch);

        public object Get(DataSet request) => GetEntityWithCache<DataSet>(DocConstantModelName.DATASET, request, GetDataSet);



        private DataSet _AssignValues(DataSet request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "DataSet"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.Select = request.Select ?? new List<string>();

            DataSet ret = null;
            request = _InitAssignValues<DataSet>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<DataSet>(DocConstantModelName.DATASET, nameof(DataSet), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pAdditionalCriteria = request.AdditionalCriteria;
            var pCharacteristics = GetVariable<Reference>(request, nameof(request.Characteristics), request.Characteristics?.ToList(), request.CharacteristicsIds?.ToList());
            var pClients = GetVariable<Reference>(request, nameof(request.Clients), request.Clients?.ToList(), request.ClientsIds?.ToList());
            var pComparators = GetVariable<Reference>(request, nameof(request.Comparators), request.Comparators?.ToList(), request.ComparatorsIds?.ToList());
            var pConfidential = request.Confidential;
            var pDataCollection = request.DataCollection;
            var pDivisions = GetVariable<Reference>(request, nameof(request.Divisions), request.Divisions?.ToList(), request.DivisionsIds?.ToList());
            var pDocuments = GetVariable<Reference>(request, nameof(request.Documents), request.Documents?.ToList(), request.DocumentsIds?.ToList());
            var pDocumentSets = GetVariable<Reference>(request, nameof(request.DocumentSets), request.DocumentSets?.ToList(), request.DocumentSetsIds?.ToList());
            var pEvidencePortalId = request.EvidencePortalId;
            var pExtractionProtocol = request.ExtractionProtocol;
            var pFqId = request.FqId;
            var pFramedQuestionId = request.FramedQuestionId;
            var pGeneralScope = request.GeneralScope;
            var pHistories = GetVariable<Reference>(request, nameof(request.Histories), request.Histories?.ToList(), request.HistoriesIds?.ToList());
            var pImports = GetVariable<Reference>(request, nameof(request.Imports), request.Imports?.ToList(), request.ImportsIds?.ToList());
            var pIndications = request.Indications;
            var pInterventions = GetVariable<Reference>(request, nameof(request.Interventions), request.Interventions?.ToList(), request.InterventionsIds?.ToList());
            var pLegacyDocumentSetId = request.LegacyDocumentSetId;
            var pName = request.Name;
            var pNotes = request.Notes;
            var pOriginalComparators = request.OriginalComparators;
            var pOriginalDatabase = request.OriginalDatabase;
            var pOriginalDesigns = request.OriginalDesigns;
            var pOriginalInterventions = request.OriginalInterventions;
            var pOriginalOutcomes = request.OriginalOutcomes;
            var pOutcomes = GetVariable<Reference>(request, nameof(request.Outcomes), request.Outcomes?.ToList(), request.OutcomesIds?.ToList());
            var pOwner = (request.Owner?.Id > 0) ? DocEntityDocumentSet.Get(request.Owner.Id) : null;
            var pParticipants = request.Participants;
            var pPrismaWorkflow = (request.PrismaWorkflow?.Id > 0) ? DocEntityWorkflow.Get(request.PrismaWorkflow.Id) : null;
            var pProjects = GetVariable<Reference>(request, nameof(request.Projects), request.Projects?.ToList(), request.ProjectsIds?.ToList());
            var pProjectTeam = (request.ProjectTeam?.Id > 0) ? DocEntityTeam.Get(request.ProjectTeam.Id) : null;
            var pScopes = GetVariable<Reference>(request, nameof(request.Scopes), request.Scopes?.ToList(), request.ScopesIds?.ToList());
            var pSettings = request.Settings;
            var pShowEtw = request.ShowEtw;
            var pShowPublicationType = request.ShowPublicationType;
            var pStats = GetVariable<Reference>(request, nameof(request.Stats), request.Stats?.ToList(), request.StatsIds?.ToList());
            var pStudyDesigns = GetVariable<Reference>(request, nameof(request.StudyDesigns), request.StudyDesigns?.ToList(), request.StudyDesignsIds?.ToList());
            var pType = request.Type;
            var pUsers = GetVariable<Reference>(request, nameof(request.Users), request.Users?.ToList(), request.UsersIds?.ToList());

            DocEntityDataSet entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityDataSet(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityDataSet.Get(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            //Special case for Archived
            var pArchived = true == request.Archived;
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pArchived, permission, DocConstantModelName.DATASET, nameof(request.Archived)))
            {
                if(DocPermissionFactory.IsRequested(request, pArchived, entity.Archived, nameof(request.Archived)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.Archived)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Archived)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pArchived) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.Archived))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Archived)} requires a value.");
                    entity.Archived = pArchived;
                if(DocPermissionFactory.IsRequested<bool>(request, pArchived, nameof(request.Archived)) && !request.Select.Matches(nameof(request.Archived), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Archived));
                }
            }

            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pAdditionalCriteria, permission, DocConstantModelName.DATASET, nameof(request.AdditionalCriteria)))
            {
                if(DocPermissionFactory.IsRequested(request, pAdditionalCriteria, entity.AdditionalCriteria, nameof(request.AdditionalCriteria)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.AdditionalCriteria)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.AdditionalCriteria)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pAdditionalCriteria) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.AdditionalCriteria))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.AdditionalCriteria)} requires a value.");
                    entity.AdditionalCriteria = pAdditionalCriteria;
                if(DocPermissionFactory.IsRequested<string>(request, pAdditionalCriteria, nameof(request.AdditionalCriteria)) && !request.Select.Matches(nameof(request.AdditionalCriteria), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.AdditionalCriteria));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pConfidential, permission, DocConstantModelName.DATASET, nameof(request.Confidential)))
            {
                if(DocPermissionFactory.IsRequested(request, pConfidential, entity.Confidential, nameof(request.Confidential)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.Confidential)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Confidential)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pConfidential) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.Confidential))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Confidential)} requires a value.");
                    entity.Confidential = pConfidential;
                if(DocPermissionFactory.IsRequested<bool>(request, pConfidential, nameof(request.Confidential)) && !request.Select.Matches(nameof(request.Confidential), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Confidential));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pDataCollection, permission, DocConstantModelName.DATASET, nameof(request.DataCollection)))
            {
                if(DocPermissionFactory.IsRequested(request, pDataCollection, entity.DataCollection, nameof(request.DataCollection)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.DataCollection)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.DataCollection)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pDataCollection) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.DataCollection))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.DataCollection)} requires a value.");
                    entity.DataCollection = pDataCollection;
                if(DocPermissionFactory.IsRequested<string>(request, pDataCollection, nameof(request.DataCollection)) && !request.Select.Matches(nameof(request.DataCollection), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.DataCollection));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pEvidencePortalId, permission, DocConstantModelName.DATASET, nameof(request.EvidencePortalId)))
            {
                if(DocPermissionFactory.IsRequested(request, pEvidencePortalId, entity.EvidencePortalId, nameof(request.EvidencePortalId)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.EvidencePortalId)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.EvidencePortalId)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pEvidencePortalId) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.EvidencePortalId))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.EvidencePortalId)} requires a value.");
                    entity.EvidencePortalId = pEvidencePortalId;
                if(DocPermissionFactory.IsRequested<int?>(request, pEvidencePortalId, nameof(request.EvidencePortalId)) && !request.Select.Matches(nameof(request.EvidencePortalId), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.EvidencePortalId));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pExtractionProtocol, permission, DocConstantModelName.DATASET, nameof(request.ExtractionProtocol)))
            {
                if(DocPermissionFactory.IsRequested(request, pExtractionProtocol, entity.ExtractionProtocol, nameof(request.ExtractionProtocol)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.ExtractionProtocol)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ExtractionProtocol)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pExtractionProtocol) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.ExtractionProtocol))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ExtractionProtocol)} requires a value.");
                    entity.ExtractionProtocol = pExtractionProtocol;
                if(DocPermissionFactory.IsRequested<string>(request, pExtractionProtocol, nameof(request.ExtractionProtocol)) && !request.Select.Matches(nameof(request.ExtractionProtocol), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.ExtractionProtocol));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pFqId, permission, DocConstantModelName.DATASET, nameof(request.FqId)))
            {
                if(DocPermissionFactory.IsRequested(request, pFqId, entity.FqId, nameof(request.FqId)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.FqId)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.FqId)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pFqId) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.FqId))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.FqId)} requires a value.");
                    entity.FqId = pFqId;
                if(DocPermissionFactory.IsRequested<int?>(request, pFqId, nameof(request.FqId)) && !request.Select.Matches(nameof(request.FqId), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.FqId));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pFramedQuestionId, permission, DocConstantModelName.DATASET, nameof(request.FramedQuestionId)))
            {
                if(DocPermissionFactory.IsRequested(request, pFramedQuestionId, entity.FramedQuestionId, nameof(request.FramedQuestionId)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.FramedQuestionId)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.FramedQuestionId)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pFramedQuestionId) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.FramedQuestionId))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.FramedQuestionId)} requires a value.");
                    entity.FramedQuestionId = pFramedQuestionId;
                if(DocPermissionFactory.IsRequested<int?>(request, pFramedQuestionId, nameof(request.FramedQuestionId)) && !request.Select.Matches(nameof(request.FramedQuestionId), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.FramedQuestionId));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pGeneralScope, permission, DocConstantModelName.DATASET, nameof(request.GeneralScope)))
            {
                if(DocPermissionFactory.IsRequested(request, pGeneralScope, entity.GeneralScope, nameof(request.GeneralScope)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.GeneralScope)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.GeneralScope)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pGeneralScope) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.GeneralScope))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.GeneralScope)} requires a value.");
                    entity.GeneralScope = pGeneralScope;
                if(DocPermissionFactory.IsRequested<string>(request, pGeneralScope, nameof(request.GeneralScope)) && !request.Select.Matches(nameof(request.GeneralScope), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.GeneralScope));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pIndications, permission, DocConstantModelName.DATASET, nameof(request.Indications)))
            {
                if(DocPermissionFactory.IsRequested(request, pIndications, entity.Indications, nameof(request.Indications)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.Indications)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Indications)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pIndications) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.Indications))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Indications)} requires a value.");
                    entity.Indications = pIndications;
                if(DocPermissionFactory.IsRequested<string>(request, pIndications, nameof(request.Indications)) && !request.Select.Matches(nameof(request.Indications), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Indications));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pLegacyDocumentSetId, permission, DocConstantModelName.DATASET, nameof(request.LegacyDocumentSetId)))
            {
                if(DocPermissionFactory.IsRequested(request, pLegacyDocumentSetId, entity.LegacyDocumentSetId, nameof(request.LegacyDocumentSetId)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.LegacyDocumentSetId)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.LegacyDocumentSetId)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pLegacyDocumentSetId) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.LegacyDocumentSetId))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.LegacyDocumentSetId)} requires a value.");
                    entity.LegacyDocumentSetId = pLegacyDocumentSetId;
                if(DocPermissionFactory.IsRequested<int?>(request, pLegacyDocumentSetId, nameof(request.LegacyDocumentSetId)) && !request.Select.Matches(nameof(request.LegacyDocumentSetId), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.LegacyDocumentSetId));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pName, permission, DocConstantModelName.DATASET, nameof(request.Name)))
            {
                if(DocPermissionFactory.IsRequested(request, pName, entity.Name, nameof(request.Name)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.Name)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Name)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pName) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.Name))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Name)} requires a value.");
                    entity.Name = pName;
                if(DocPermissionFactory.IsRequested<string>(request, pName, nameof(request.Name)) && !request.Select.Matches(nameof(request.Name), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Name));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pNotes, permission, DocConstantModelName.DATASET, nameof(request.Notes)))
            {
                if(DocPermissionFactory.IsRequested(request, pNotes, entity.Notes, nameof(request.Notes)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.Notes)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Notes)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pNotes) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.Notes))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Notes)} requires a value.");
                    entity.Notes = pNotes;
                if(DocPermissionFactory.IsRequested<string>(request, pNotes, nameof(request.Notes)) && !request.Select.Matches(nameof(request.Notes), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Notes));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pOriginalComparators, permission, DocConstantModelName.DATASET, nameof(request.OriginalComparators)))
            {
                if(DocPermissionFactory.IsRequested(request, pOriginalComparators, entity.OriginalComparators, nameof(request.OriginalComparators)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.OriginalComparators)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.OriginalComparators)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pOriginalComparators) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.OriginalComparators))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.OriginalComparators)} requires a value.");
                    entity.OriginalComparators = pOriginalComparators;
                if(DocPermissionFactory.IsRequested<string>(request, pOriginalComparators, nameof(request.OriginalComparators)) && !request.Select.Matches(nameof(request.OriginalComparators), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.OriginalComparators));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pOriginalDatabase, permission, DocConstantModelName.DATASET, nameof(request.OriginalDatabase)))
            {
                if(DocPermissionFactory.IsRequested(request, pOriginalDatabase, entity.OriginalDatabase, nameof(request.OriginalDatabase)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.OriginalDatabase)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.OriginalDatabase)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pOriginalDatabase) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.OriginalDatabase))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.OriginalDatabase)} requires a value.");
                    entity.OriginalDatabase = pOriginalDatabase;
                if(DocPermissionFactory.IsRequested<string>(request, pOriginalDatabase, nameof(request.OriginalDatabase)) && !request.Select.Matches(nameof(request.OriginalDatabase), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.OriginalDatabase));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pOriginalDesigns, permission, DocConstantModelName.DATASET, nameof(request.OriginalDesigns)))
            {
                if(DocPermissionFactory.IsRequested(request, pOriginalDesigns, entity.OriginalDesigns, nameof(request.OriginalDesigns)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.OriginalDesigns)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.OriginalDesigns)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pOriginalDesigns) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.OriginalDesigns))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.OriginalDesigns)} requires a value.");
                    entity.OriginalDesigns = pOriginalDesigns;
                if(DocPermissionFactory.IsRequested<string>(request, pOriginalDesigns, nameof(request.OriginalDesigns)) && !request.Select.Matches(nameof(request.OriginalDesigns), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.OriginalDesigns));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pOriginalInterventions, permission, DocConstantModelName.DATASET, nameof(request.OriginalInterventions)))
            {
                if(DocPermissionFactory.IsRequested(request, pOriginalInterventions, entity.OriginalInterventions, nameof(request.OriginalInterventions)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.OriginalInterventions)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.OriginalInterventions)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pOriginalInterventions) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.OriginalInterventions))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.OriginalInterventions)} requires a value.");
                    entity.OriginalInterventions = pOriginalInterventions;
                if(DocPermissionFactory.IsRequested<string>(request, pOriginalInterventions, nameof(request.OriginalInterventions)) && !request.Select.Matches(nameof(request.OriginalInterventions), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.OriginalInterventions));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pOriginalOutcomes, permission, DocConstantModelName.DATASET, nameof(request.OriginalOutcomes)))
            {
                if(DocPermissionFactory.IsRequested(request, pOriginalOutcomes, entity.OriginalOutcomes, nameof(request.OriginalOutcomes)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.OriginalOutcomes)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.OriginalOutcomes)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pOriginalOutcomes) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.OriginalOutcomes))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.OriginalOutcomes)} requires a value.");
                    entity.OriginalOutcomes = pOriginalOutcomes;
                if(DocPermissionFactory.IsRequested<string>(request, pOriginalOutcomes, nameof(request.OriginalOutcomes)) && !request.Select.Matches(nameof(request.OriginalOutcomes), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.OriginalOutcomes));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityDocumentSet>(currentUser, request, pOwner, permission, DocConstantModelName.DATASET, nameof(request.Owner)))
            {
                if(DocPermissionFactory.IsRequested(request, pOwner, entity.Owner, nameof(request.Owner)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.Owner)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Owner)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pOwner) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.Owner))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Owner)} requires a value.");
                    entity.Owner = pOwner;
                if(DocPermissionFactory.IsRequested<DocEntityDocumentSet>(request, pOwner, nameof(request.Owner)) && !request.Select.Matches(nameof(request.Owner), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Owner));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pParticipants, permission, DocConstantModelName.DATASET, nameof(request.Participants)))
            {
                if(DocPermissionFactory.IsRequested(request, pParticipants, entity.Participants, nameof(request.Participants)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.Participants)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Participants)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pParticipants) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.Participants))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Participants)} requires a value.");
                    entity.Participants = pParticipants;
                if(DocPermissionFactory.IsRequested<string>(request, pParticipants, nameof(request.Participants)) && !request.Select.Matches(nameof(request.Participants), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Participants));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityWorkflow>(currentUser, request, pPrismaWorkflow, permission, DocConstantModelName.DATASET, nameof(request.PrismaWorkflow)))
            {
                if(DocPermissionFactory.IsRequested(request, pPrismaWorkflow, entity.PrismaWorkflow, nameof(request.PrismaWorkflow)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.PrismaWorkflow)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.PrismaWorkflow)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pPrismaWorkflow) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.PrismaWorkflow))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.PrismaWorkflow)} requires a value.");
                    entity.PrismaWorkflow = pPrismaWorkflow;
                if(DocPermissionFactory.IsRequested<DocEntityWorkflow>(request, pPrismaWorkflow, nameof(request.PrismaWorkflow)) && !request.Select.Matches(nameof(request.PrismaWorkflow), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.PrismaWorkflow));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityTeam>(currentUser, request, pProjectTeam, permission, DocConstantModelName.DATASET, nameof(request.ProjectTeam)))
            {
                if(DocPermissionFactory.IsRequested(request, pProjectTeam, entity.ProjectTeam, nameof(request.ProjectTeam)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.ProjectTeam)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ProjectTeam)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pProjectTeam) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.ProjectTeam))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ProjectTeam)} requires a value.");
                    entity.ProjectTeam = pProjectTeam;
                if(DocPermissionFactory.IsRequested<DocEntityTeam>(request, pProjectTeam, nameof(request.ProjectTeam)) && !request.Select.Matches(nameof(request.ProjectTeam), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.ProjectTeam));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pSettings, permission, DocConstantModelName.DATASET, nameof(request.Settings)))
            {
                if(DocPermissionFactory.IsRequested(request, pSettings, entity.Settings, nameof(request.Settings)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.Settings)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Settings)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSettings) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.Settings))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Settings)} requires a value.");
                    entity.Settings = pSettings;
                if(DocPermissionFactory.IsRequested<string>(request, pSettings, nameof(request.Settings)) && !request.Select.Matches(nameof(request.Settings), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Settings));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pShowEtw, permission, DocConstantModelName.DATASET, nameof(request.ShowEtw)))
            {
                if(DocPermissionFactory.IsRequested(request, pShowEtw, entity.ShowEtw, nameof(request.ShowEtw)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.ShowEtw)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ShowEtw)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pShowEtw) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.ShowEtw))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ShowEtw)} requires a value.");
                    entity.ShowEtw = pShowEtw;
                if(DocPermissionFactory.IsRequested<bool>(request, pShowEtw, nameof(request.ShowEtw)) && !request.Select.Matches(nameof(request.ShowEtw), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.ShowEtw));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pShowPublicationType, permission, DocConstantModelName.DATASET, nameof(request.ShowPublicationType)))
            {
                if(DocPermissionFactory.IsRequested(request, pShowPublicationType, entity.ShowPublicationType, nameof(request.ShowPublicationType)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.ShowPublicationType)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ShowPublicationType)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pShowPublicationType) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.ShowPublicationType))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ShowPublicationType)} requires a value.");
                    entity.ShowPublicationType = pShowPublicationType;
                if(DocPermissionFactory.IsRequested<bool>(request, pShowPublicationType, nameof(request.ShowPublicationType)) && !request.Select.Matches(nameof(request.ShowPublicationType), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.ShowPublicationType));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocumentSetTypeEnm?>(currentUser, request, pType, permission, DocConstantModelName.DATASET, nameof(request.Type)))
            {
                if(DocPermissionFactory.IsRequested(request, (int?) pType, (int) entity.Type, nameof(request.Type)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DATASET, nameof(request.Type)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Type)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pType) && DocResources.Metadata.IsRequired(DocConstantModelName.DATASET, nameof(request.Type))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Type)} requires a value.");
                    if(null != pType)
                        entity.Type = pType.Value;
                if(DocPermissionFactory.IsRequested<DocumentSetTypeEnm?>(request, pType, nameof(request.Type)) && !request.Select.Matches(nameof(request.Type), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Type));
                }
            }

            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);

            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pCharacteristics, permission, DocConstantModelName.DATASET, nameof(request.Characteristics)))
            {
                if (true == pCharacteristics?.Any() )
                {
                    var requestedCharacteristics = pCharacteristics.Select(p => p.Id).Distinct().ToList();
                    var existsCharacteristics = Execute.SelectAll<DocEntityTag>().Where(e => e.Id.In(requestedCharacteristics)).Select( e => e.Id ).ToList();
                    if (existsCharacteristics.Count != requestedCharacteristics.Count)
                    {
                        var nonExists = requestedCharacteristics.Where(id => existsCharacteristics.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Characteristics with objects that do not exist. No matching Characteristics(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedCharacteristics.Where(id => entity.Characteristics.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityTag.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Characteristics)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Characteristics)} to {nameof(DataSet)}");
                        entity.Characteristics.Add(target);
                    });
                    var toRemove = entity.Characteristics.Where(e => requestedCharacteristics.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTag.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Characteristics)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Characteristics)} from {nameof(DataSet)}");
                        entity.Characteristics.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Characteristics.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTag.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Characteristics)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Characteristics)} from {nameof(DataSet)}");
                        entity.Characteristics.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pCharacteristics, nameof(request.Characteristics)) && !request.Select.Matches(nameof(request.Characteristics), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Characteristics));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pClients, permission, DocConstantModelName.DATASET, nameof(request.Clients)))
            {
                if (true == pClients?.Any() )
                {
                    var requestedClients = pClients.Select(p => p.Id).Distinct().ToList();
                    var existsClients = Execute.SelectAll<DocEntityClient>().Where(e => e.Id.In(requestedClients)).Select( e => e.Id ).ToList();
                    if (existsClients.Count != requestedClients.Count)
                    {
                        var nonExists = requestedClients.Where(id => existsClients.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Clients with objects that do not exist. No matching Clients(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedClients.Where(id => entity.Clients.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityClient.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Clients)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Clients)} to {nameof(DataSet)}");
                        entity.Clients.Add(target);
                    });
                    var toRemove = entity.Clients.Where(e => requestedClients.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityClient.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Clients)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Clients)} from {nameof(DataSet)}");
                        entity.Clients.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Clients.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityClient.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Clients)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Clients)} from {nameof(DataSet)}");
                        entity.Clients.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pClients, nameof(request.Clients)) && !request.Select.Matches(nameof(request.Clients), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Clients));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pComparators, permission, DocConstantModelName.DATASET, nameof(request.Comparators)))
            {
                if (true == pComparators?.Any() )
                {
                    var requestedComparators = pComparators.Select(p => p.Id).Distinct().ToList();
                    var existsComparators = Execute.SelectAll<DocEntityTag>().Where(e => e.Id.In(requestedComparators)).Select( e => e.Id ).ToList();
                    if (existsComparators.Count != requestedComparators.Count)
                    {
                        var nonExists = requestedComparators.Where(id => existsComparators.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Comparators with objects that do not exist. No matching Comparators(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedComparators.Where(id => entity.Comparators.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityTag.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Comparators)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Comparators)} to {nameof(DataSet)}");
                        entity.Comparators.Add(target);
                    });
                    var toRemove = entity.Comparators.Where(e => requestedComparators.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTag.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Comparators)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Comparators)} from {nameof(DataSet)}");
                        entity.Comparators.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Comparators.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTag.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Comparators)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Comparators)} from {nameof(DataSet)}");
                        entity.Comparators.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pComparators, nameof(request.Comparators)) && !request.Select.Matches(nameof(request.Comparators), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Comparators));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pDivisions, permission, DocConstantModelName.DATASET, nameof(request.Divisions)))
            {
                if (true == pDivisions?.Any() )
                {
                    var requestedDivisions = pDivisions.Select(p => p.Id).Distinct().ToList();
                    var existsDivisions = Execute.SelectAll<DocEntityDivision>().Where(e => e.Id.In(requestedDivisions)).Select( e => e.Id ).ToList();
                    if (existsDivisions.Count != requestedDivisions.Count)
                    {
                        var nonExists = requestedDivisions.Where(id => existsDivisions.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Divisions with objects that do not exist. No matching Divisions(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedDivisions.Where(id => entity.Divisions.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityDivision.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Divisions)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Divisions)} to {nameof(DataSet)}");
                        entity.Divisions.Add(target);
                    });
                    var toRemove = entity.Divisions.Where(e => requestedDivisions.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDivision.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Divisions)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Divisions)} from {nameof(DataSet)}");
                        entity.Divisions.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Divisions.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDivision.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Divisions)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Divisions)} from {nameof(DataSet)}");
                        entity.Divisions.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pDivisions, nameof(request.Divisions)) && !request.Select.Matches(nameof(request.Divisions), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Divisions));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pDocuments, permission, DocConstantModelName.DATASET, nameof(request.Documents)))
            {
                if (true == pDocuments?.Any() )
                {
                    var requestedDocuments = pDocuments.Select(p => p.Id).Distinct().ToList();
                    var existsDocuments = Execute.SelectAll<DocEntityDocument>().Where(e => e.Id.In(requestedDocuments)).Select( e => e.Id ).ToList();
                    if (existsDocuments.Count != requestedDocuments.Count)
                    {
                        var nonExists = requestedDocuments.Where(id => existsDocuments.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Documents with objects that do not exist. No matching Documents(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedDocuments.Where(id => entity.Documents.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityDocument.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Documents)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Documents)} to {nameof(DataSet)}");
                        entity.Documents.Add(target);
                    });
                    var toRemove = entity.Documents.Where(e => requestedDocuments.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocument.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Documents)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Documents)} from {nameof(DataSet)}");
                        entity.Documents.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Documents.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocument.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Documents)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Documents)} from {nameof(DataSet)}");
                        entity.Documents.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pDocuments, nameof(request.Documents)) && !request.Select.Matches(nameof(request.Documents), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Documents));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pDocumentSets, permission, DocConstantModelName.DATASET, nameof(request.DocumentSets)))
            {
                if (true == pDocumentSets?.Any() )
                {
                    var requestedDocumentSets = pDocumentSets.Select(p => p.Id).Distinct().ToList();
                    var existsDocumentSets = Execute.SelectAll<DocEntityDocumentSet>().Where(e => e.Id.In(requestedDocumentSets)).Select( e => e.Id ).ToList();
                    if (existsDocumentSets.Count != requestedDocumentSets.Count)
                    {
                        var nonExists = requestedDocumentSets.Where(id => existsDocumentSets.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection DocumentSets with objects that do not exist. No matching DocumentSets(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedDocumentSets.Where(id => entity.DocumentSets.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.DocumentSets)} to {nameof(DataSet)}");
                        entity.DocumentSets.Add(target);
                    });
                    var toRemove = entity.DocumentSets.Where(e => requestedDocumentSets.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.DocumentSets)} from {nameof(DataSet)}");
                        entity.DocumentSets.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.DocumentSets.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.DocumentSets)} from {nameof(DataSet)}");
                        entity.DocumentSets.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pDocumentSets, nameof(request.DocumentSets)) && !request.Select.Matches(nameof(request.DocumentSets), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.DocumentSets));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pHistories, permission, DocConstantModelName.DATASET, nameof(request.Histories)))
            {
                if (true == pHistories?.Any() )
                {
                    var requestedHistories = pHistories.Select(p => p.Id).Distinct().ToList();
                    var existsHistories = Execute.SelectAll<DocEntityDocumentSetHistory>().Where(e => e.Id.In(requestedHistories)).Select( e => e.Id ).ToList();
                    if (existsHistories.Count != requestedHistories.Count)
                    {
                        var nonExists = requestedHistories.Where(id => existsHistories.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Histories with objects that do not exist. No matching Histories(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedHistories.Where(id => entity.Histories.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityDocumentSetHistory.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Histories)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Histories)} to {nameof(DataSet)}");
                        entity.Histories.Add(target);
                    });
                    var toRemove = entity.Histories.Where(e => requestedHistories.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSetHistory.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Histories)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Histories)} from {nameof(DataSet)}");
                        entity.Histories.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Histories.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSetHistory.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Histories)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Histories)} from {nameof(DataSet)}");
                        entity.Histories.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pHistories, nameof(request.Histories)) && !request.Select.Matches(nameof(request.Histories), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Histories));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pImports, permission, DocConstantModelName.DATASET, nameof(request.Imports)))
            {
                if (true == pImports?.Any() )
                {
                    var requestedImports = pImports.Select(p => p.Id).Distinct().ToList();
                    var existsImports = Execute.SelectAll<DocEntityImportData>().Where(e => e.Id.In(requestedImports)).Select( e => e.Id ).ToList();
                    if (existsImports.Count != requestedImports.Count)
                    {
                        var nonExists = requestedImports.Where(id => existsImports.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Imports with objects that do not exist. No matching Imports(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedImports.Where(id => entity.Imports.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityImportData.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Imports)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Imports)} to {nameof(DataSet)}");
                        entity.Imports.Add(target);
                    });
                    var toRemove = entity.Imports.Where(e => requestedImports.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityImportData.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Imports)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Imports)} from {nameof(DataSet)}");
                        entity.Imports.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Imports.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityImportData.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Imports)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Imports)} from {nameof(DataSet)}");
                        entity.Imports.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pImports, nameof(request.Imports)) && !request.Select.Matches(nameof(request.Imports), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Imports));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pInterventions, permission, DocConstantModelName.DATASET, nameof(request.Interventions)))
            {
                if (true == pInterventions?.Any() )
                {
                    var requestedInterventions = pInterventions.Select(p => p.Id).Distinct().ToList();
                    var existsInterventions = Execute.SelectAll<DocEntityTag>().Where(e => e.Id.In(requestedInterventions)).Select( e => e.Id ).ToList();
                    if (existsInterventions.Count != requestedInterventions.Count)
                    {
                        var nonExists = requestedInterventions.Where(id => existsInterventions.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Interventions with objects that do not exist. No matching Interventions(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedInterventions.Where(id => entity.Interventions.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityTag.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Interventions)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Interventions)} to {nameof(DataSet)}");
                        entity.Interventions.Add(target);
                    });
                    var toRemove = entity.Interventions.Where(e => requestedInterventions.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTag.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Interventions)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Interventions)} from {nameof(DataSet)}");
                        entity.Interventions.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Interventions.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTag.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Interventions)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Interventions)} from {nameof(DataSet)}");
                        entity.Interventions.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pInterventions, nameof(request.Interventions)) && !request.Select.Matches(nameof(request.Interventions), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Interventions));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pOutcomes, permission, DocConstantModelName.DATASET, nameof(request.Outcomes)))
            {
                if (true == pOutcomes?.Any() )
                {
                    var requestedOutcomes = pOutcomes.Select(p => p.Id).Distinct().ToList();
                    var existsOutcomes = Execute.SelectAll<DocEntityTag>().Where(e => e.Id.In(requestedOutcomes)).Select( e => e.Id ).ToList();
                    if (existsOutcomes.Count != requestedOutcomes.Count)
                    {
                        var nonExists = requestedOutcomes.Where(id => existsOutcomes.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Outcomes with objects that do not exist. No matching Outcomes(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedOutcomes.Where(id => entity.Outcomes.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityTag.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Outcomes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Outcomes)} to {nameof(DataSet)}");
                        entity.Outcomes.Add(target);
                    });
                    var toRemove = entity.Outcomes.Where(e => requestedOutcomes.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTag.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Outcomes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Outcomes)} from {nameof(DataSet)}");
                        entity.Outcomes.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Outcomes.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTag.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Outcomes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Outcomes)} from {nameof(DataSet)}");
                        entity.Outcomes.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pOutcomes, nameof(request.Outcomes)) && !request.Select.Matches(nameof(request.Outcomes), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Outcomes));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pProjects, permission, DocConstantModelName.DATASET, nameof(request.Projects)))
            {
                if (true == pProjects?.Any() )
                {
                    var requestedProjects = pProjects.Select(p => p.Id).Distinct().ToList();
                    var existsProjects = Execute.SelectAll<DocEntityProject>().Where(e => e.Id.In(requestedProjects)).Select( e => e.Id ).ToList();
                    if (existsProjects.Count != requestedProjects.Count)
                    {
                        var nonExists = requestedProjects.Where(id => existsProjects.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Projects with objects that do not exist. No matching Projects(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedProjects.Where(id => entity.Projects.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityProject.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Projects)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Projects)} to {nameof(DataSet)}");
                        entity.Projects.Add(target);
                    });
                    var toRemove = entity.Projects.Where(e => requestedProjects.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityProject.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Projects)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Projects)} from {nameof(DataSet)}");
                        entity.Projects.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Projects.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityProject.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Projects)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Projects)} from {nameof(DataSet)}");
                        entity.Projects.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pProjects, nameof(request.Projects)) && !request.Select.Matches(nameof(request.Projects), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Projects));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pScopes, permission, DocConstantModelName.DATASET, nameof(request.Scopes)))
            {
                if (true == pScopes?.Any() )
                {
                    var requestedScopes = pScopes.Select(p => p.Id).Distinct().ToList();
                    var existsScopes = Execute.SelectAll<DocEntityScope>().Where(e => e.Id.In(requestedScopes)).Select( e => e.Id ).ToList();
                    if (existsScopes.Count != requestedScopes.Count)
                    {
                        var nonExists = requestedScopes.Where(id => existsScopes.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Scopes with objects that do not exist. No matching Scopes(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedScopes.Where(id => entity.Scopes.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityScope.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Scopes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Scopes)} to {nameof(DataSet)}");
                        entity.Scopes.Add(target);
                    });
                    var toRemove = entity.Scopes.Where(e => requestedScopes.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityScope.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Scopes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Scopes)} from {nameof(DataSet)}");
                        entity.Scopes.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Scopes.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityScope.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Scopes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Scopes)} from {nameof(DataSet)}");
                        entity.Scopes.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pScopes, nameof(request.Scopes)) && !request.Select.Matches(nameof(request.Scopes), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Scopes));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pStats, permission, DocConstantModelName.DATASET, nameof(request.Stats)))
            {
                if (true == pStats?.Any() )
                {
                    var requestedStats = pStats.Select(p => p.Id).Distinct().ToList();
                    var existsStats = Execute.SelectAll<DocEntityStatsStudySet>().Where(e => e.Id.In(requestedStats)).Select( e => e.Id ).ToList();
                    if (existsStats.Count != requestedStats.Count)
                    {
                        var nonExists = requestedStats.Where(id => existsStats.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Stats with objects that do not exist. No matching Stats(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedStats.Where(id => entity.Stats.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityStatsStudySet.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Stats)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Stats)} to {nameof(DataSet)}");
                        entity.Stats.Add(target);
                    });
                    var toRemove = entity.Stats.Where(e => requestedStats.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityStatsStudySet.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Stats)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Stats)} from {nameof(DataSet)}");
                        entity.Stats.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Stats.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityStatsStudySet.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Stats)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Stats)} from {nameof(DataSet)}");
                        entity.Stats.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pStats, nameof(request.Stats)) && !request.Select.Matches(nameof(request.Stats), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Stats));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pStudyDesigns, permission, DocConstantModelName.DATASET, nameof(request.StudyDesigns)))
            {
                if (true == pStudyDesigns?.Any() )
                {
                    var requestedStudyDesigns = pStudyDesigns.Select(p => p.Id).Distinct().ToList();
                    var existsStudyDesigns = Execute.SelectAll<DocEntityStudyDesign>().Where(e => e.Id.In(requestedStudyDesigns)).Select( e => e.Id ).ToList();
                    if (existsStudyDesigns.Count != requestedStudyDesigns.Count)
                    {
                        var nonExists = requestedStudyDesigns.Where(id => existsStudyDesigns.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection StudyDesigns with objects that do not exist. No matching StudyDesigns(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedStudyDesigns.Where(id => entity.StudyDesigns.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityStudyDesign.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.StudyDesigns)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.StudyDesigns)} to {nameof(DataSet)}");
                        entity.StudyDesigns.Add(target);
                    });
                    var toRemove = entity.StudyDesigns.Where(e => requestedStudyDesigns.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityStudyDesign.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.StudyDesigns)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.StudyDesigns)} from {nameof(DataSet)}");
                        entity.StudyDesigns.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.StudyDesigns.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityStudyDesign.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.StudyDesigns)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.StudyDesigns)} from {nameof(DataSet)}");
                        entity.StudyDesigns.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pStudyDesigns, nameof(request.StudyDesigns)) && !request.Select.Matches(nameof(request.StudyDesigns), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.StudyDesigns));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pUsers, permission, DocConstantModelName.DATASET, nameof(request.Users)))
            {
                if (true == pUsers?.Any() )
                {
                    var requestedUsers = pUsers.Select(p => p.Id).Distinct().ToList();
                    var existsUsers = Execute.SelectAll<DocEntityUser>().Where(e => e.Id.In(requestedUsers)).Select( e => e.Id ).ToList();
                    if (existsUsers.Count != requestedUsers.Count)
                    {
                        var nonExists = requestedUsers.Where(id => existsUsers.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Users with objects that do not exist. No matching Users(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedUsers.Where(id => entity.Users.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityUser.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Users)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Users)} to {nameof(DataSet)}");
                        entity.Users.Add(target);
                    });
                    var toRemove = entity.Users.Where(e => requestedUsers.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityUser.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Users)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Users)} from {nameof(DataSet)}");
                        entity.Users.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Users.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityUser.Get(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataSet), columnName: nameof(request.Users)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Users)} from {nameof(DataSet)}");
                        entity.Users.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pUsers, nameof(request.Users)) && !request.Select.Matches(nameof(request.Users), ignoreSpaces: true))
                {
                    request.Select.Add(nameof(request.Users));
                }
            }
            DocPermissionFactory.SetSelect<DataSet>(currentUser, nameof(DataSet), request.Select);
            ret = entity.ToDto();

            var cacheExpires = DocResources.Metadata.GetCacheExpiration(DocConstantModelName.DATASET);
            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.DATASET, cacheExpires);

            return ret;
        }


        public DataSet Post(DataSet request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.Select = request.Select ?? new List<string>();

            DataSet ret = null;

            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "DataSet")) 
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
                });
            }
            return ret;
        }
   
        public List<DataSet> Post(DataSetBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<DataSet>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as DataSet;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public DataSet Post(DataSetCopy request)
        {
            DataSet ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    var entity = DocEntityDataSet.Get(request?.Id);
                    if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                    if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    var pAdditionalCriteria = entity.AdditionalCriteria;
                    var pCharacteristics = entity.Characteristics.ToList();
                    var pClients = entity.Clients.ToList();
                    var pComparators = entity.Comparators.ToList();
                    var pConfidential = entity.Confidential;
                    var pDataCollection = entity.DataCollection;
                    var pDivisions = entity.Divisions.ToList();
                    var pDocuments = entity.Documents.ToList();
                    var pDocumentSets = entity.DocumentSets.ToList();
                    var pEvidencePortalId = entity.EvidencePortalId;
                    var pExtractionProtocol = entity.ExtractionProtocol;
                    var pFqId = entity.FqId;
                    var pFramedQuestionId = entity.FramedQuestionId;
                    var pGeneralScope = entity.GeneralScope;
                    var pHistories = entity.Histories.ToList();
                    var pImports = entity.Imports.ToList();
                    var pIndications = entity.Indications;
                    var pInterventions = entity.Interventions.ToList();
                    var pLegacyDocumentSetId = entity.LegacyDocumentSetId;
                    var pName = entity.Name;
                    if(!DocTools.IsNullOrEmpty(pName))
                        pName += " (Copy)";
                    var pNotes = entity.Notes;
                    var pOriginalComparators = entity.OriginalComparators;
                    var pOriginalDatabase = entity.OriginalDatabase;
                    if(!DocTools.IsNullOrEmpty(pOriginalDatabase))
                        pOriginalDatabase += " (Copy)";
                    var pOriginalDesigns = entity.OriginalDesigns;
                    var pOriginalInterventions = entity.OriginalInterventions;
                    var pOriginalOutcomes = entity.OriginalOutcomes;
                    var pOutcomes = entity.Outcomes.ToList();
                    var pOwner = entity.Owner;
                    var pParticipants = entity.Participants;
                    var pPrismaWorkflow = entity.PrismaWorkflow;
                    var pProjects = entity.Projects.ToList();
                    var pProjectTeam = entity.ProjectTeam;
                    var pScopes = entity.Scopes.ToList();
                    var pSettings = entity.Settings;
                    var pShowEtw = entity.ShowEtw;
                    var pShowPublicationType = entity.ShowPublicationType;
                    var pStats = entity.Stats.ToList();
                    var pStudyDesigns = entity.StudyDesigns.ToList();
                    var pType = entity.Type;
                    var pUsers = entity.Users.ToList();
                    var copy = new DocEntityDataSet(ssn)
                    {
                        Hash = Guid.NewGuid()
                                , AdditionalCriteria = pAdditionalCriteria
                                , Confidential = pConfidential
                                , DataCollection = pDataCollection
                                , EvidencePortalId = pEvidencePortalId
                                , ExtractionProtocol = pExtractionProtocol
                                , FqId = pFqId
                                , FramedQuestionId = pFramedQuestionId
                                , GeneralScope = pGeneralScope
                                , Indications = pIndications
                                , LegacyDocumentSetId = pLegacyDocumentSetId
                                , Name = pName
                                , Notes = pNotes
                                , OriginalComparators = pOriginalComparators
                                , OriginalDatabase = pOriginalDatabase
                                , OriginalDesigns = pOriginalDesigns
                                , OriginalInterventions = pOriginalInterventions
                                , OriginalOutcomes = pOriginalOutcomes
                                , Owner = pOwner
                                , Participants = pParticipants
                                , PrismaWorkflow = pPrismaWorkflow
                                , ProjectTeam = pProjectTeam
                                , Settings = pSettings
                                , ShowEtw = pShowEtw
                                , ShowPublicationType = pShowPublicationType
                                , Type = pType
                    };
                            foreach(var item in pCharacteristics)
                            {
                                entity.Characteristics.Add(item);
                            }

                            foreach(var item in pClients)
                            {
                                entity.Clients.Add(item);
                            }

                            foreach(var item in pComparators)
                            {
                                entity.Comparators.Add(item);
                            }

                            foreach(var item in pDivisions)
                            {
                                entity.Divisions.Add(item);
                            }

                            foreach(var item in pDocuments)
                            {
                                entity.Documents.Add(item);
                            }

                            foreach(var item in pDocumentSets)
                            {
                                entity.DocumentSets.Add(item);
                            }

                            foreach(var item in pHistories)
                            {
                                entity.Histories.Add(item);
                            }

                            foreach(var item in pImports)
                            {
                                entity.Imports.Add(item);
                            }

                            foreach(var item in pInterventions)
                            {
                                entity.Interventions.Add(item);
                            }

                            foreach(var item in pOutcomes)
                            {
                                entity.Outcomes.Add(item);
                            }

                            foreach(var item in pProjects)
                            {
                                entity.Projects.Add(item);
                            }

                            foreach(var item in pScopes)
                            {
                                entity.Scopes.Add(item);
                            }

                            foreach(var item in pStats)
                            {
                                entity.Stats.Add(item);
                            }

                            foreach(var item in pStudyDesigns)
                            {
                                entity.StudyDesigns.Add(item);
                            }

                            foreach(var item in pUsers)
                            {
                                entity.Users.Add(item);
                            }

                    copy.SaveChanges(DocConstantPermission.ADD);
                    ret = copy.ToDto();
                });
            }
            return ret;
        }



        public List<DataSet> Put(DataSetBatch request)
        {
            return Patch(request);
        }

        public DataSet Put(DataSet request)
        {
            return Patch(request);
        }


        public List<DataSet> Patch(DataSetBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<DataSet>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as DataSet;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public DataSet Patch(DataSet request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the DataSet to patch.");
            
            request.Select = request.Select ?? new List<string>();
            
            DataSet ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
                });
            }
            return ret;
        }


        public void Delete(DataSetBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(DataSet request)
        {
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!(request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, $"No Id provided for delete.");

                    var en = DocEntityDataSet.Get(request?.Id);
                    if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No DataSet could be found for Id {request?.Id}.");
                    if(en.IsRemoved) return;
                
                    if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                    en.Remove();

                    DocCacheClient.RemoveSearch(DocConstantModelName.DATASET);
                    DocCacheClient.RemoveById(request.Id);
                });
            }
        }

        public void Delete(DataSetSearch request)
        {
            var matches = Get(request) as List<DataSet>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");
            matches.ForEach(match =>
            {
                Delete(match);
            });
        }


        public object Get(DataSetJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "characteristics":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Characteristics", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "client":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityClient, Client, ClientSearch>((int)request.Id, DocConstantModelName.CLIENT, "Clients", request, (ss) => HostContext.ResolveService<ClientService>(Request)?.Get(ss));
                    case "comment":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request, (ss) => HostContext.ResolveService<CommentService>(Request)?.Get(ss));
                    case "comparators":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Comparators", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "division":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityDivision, Division, DivisionSearch>((int)request.Id, DocConstantModelName.DIVISION, "Divisions", request, (ss) => HostContext.ResolveService<DivisionService>(Request)?.Get(ss));
                    case "document":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityDocument, Document, DocumentSearch>((int)request.Id, DocConstantModelName.DOCUMENT, "Documents", request, (ss) => HostContext.ResolveService<DocumentService>(Request)?.Get(ss));
                    case "documentset":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request, (ss) => HostContext.ResolveService<DocumentSetService>(Request)?.Get(ss));
                    case "favorite":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request, (ss) => HostContext.ResolveService<FavoriteService>(Request)?.Get(ss));
                    case "file":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityFile, File, FileSearch>((int)request.Id, DocConstantModelName.FILE, "Files", request, (ss) => HostContext.ResolveService<FileService>(Request)?.Get(ss));
                    case "documentsethistory":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityDocumentSetHistory, DocumentSetHistory, DocumentSetHistorySearch>((int)request.Id, DocConstantModelName.DOCUMENTSETHISTORY, "Histories", request, (ss) => HostContext.ResolveService<DocumentSetHistoryService>(Request)?.Get(ss));
                    case "importdata":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityImportData, ImportData, ImportDataSearch>((int)request.Id, DocConstantModelName.IMPORTDATA, "Imports", request, (ss) => HostContext.ResolveService<ImportDataService>(Request)?.Get(ss));
                    case "interventions":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Interventions", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "outcomes":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Outcomes", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "projectlink":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityProject, Project, ProjectSearch>((int)request.Id, DocConstantModelName.PROJECT, "ProjectLinks", request, (ss) => HostContext.ResolveService<ProjectService>(Request)?.Get(ss));
                    case "project":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityProject, Project, ProjectSearch>((int)request.Id, DocConstantModelName.PROJECT, "Projects", request, (ss) => HostContext.ResolveService<ProjectService>(Request)?.Get(ss));
                    case "scope":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request, (ss) => HostContext.ResolveService<ScopeService>(Request)?.Get(ss));
                    case "statsstudyset":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityStatsStudySet, StatsStudySet, StatsStudySetSearch>((int)request.Id, DocConstantModelName.STATSSTUDYSET, "Stats", request, (ss) => HostContext.ResolveService<StatsStudySetService>(Request)?.Get(ss));
                    case "tag":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "user":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityUser, User, UserSearch>((int)request.Id, DocConstantModelName.USER, "Users", request, (ss) => HostContext.ResolveService<UserService>(Request)?.Get(ss));
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for dataset/{request.Id}/{request.Junction} was not found");
            }
        }


        public object Post(DataSetJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "characteristics":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Characteristics", request);
                    case "client":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityClient, Client, ClientSearch>((int)request.Id, DocConstantModelName.CLIENT, "Clients", request);
                    case "comment":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "comparators":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Comparators", request);
                    case "division":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityDivision, Division, DivisionSearch>((int)request.Id, DocConstantModelName.DIVISION, "Divisions", request);
                    case "document":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityDocument, Document, DocumentSearch>((int)request.Id, DocConstantModelName.DOCUMENT, "Documents", request);
                    case "favorite":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "file":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityFile, File, FileSearch>((int)request.Id, DocConstantModelName.FILE, "Files", request);
                    case "interventions":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Interventions", request);
                    case "outcomes":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Outcomes", request);
                    case "scope":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request);
                    case "studydesign":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityStudyDesign, StudyDesign, StudyDesignSearch>((int)request.Id, DocConstantModelName.STUDYDESIGN, "StudyDesigns", request);
                    case "tag":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "user":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityUser, User, UserSearch>((int)request.Id, DocConstantModelName.USER, "Users", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for dataset/{request.Id}/{request.Junction} was not found");
            }
        }

        public object Delete(DataSetJunction request)
        {    
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "characteristics":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Characteristics", request);
                    case "client":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityClient, Client, ClientSearch>((int)request.Id, DocConstantModelName.CLIENT, "Clients", request);
                    case "comment":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "comparators":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Comparators", request);
                    case "division":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityDivision, Division, DivisionSearch>((int)request.Id, DocConstantModelName.DIVISION, "Divisions", request);
                    case "document":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityDocument, Document, DocumentSearch>((int)request.Id, DocConstantModelName.DOCUMENT, "Documents", request);
                    case "favorite":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "file":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityFile, File, FileSearch>((int)request.Id, DocConstantModelName.FILE, "Files", request);
                    case "interventions":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Interventions", request);
                    case "outcomes":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Outcomes", request);
                    case "scope":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request);
                    case "studydesign":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityStudyDesign, StudyDesign, StudyDesignSearch>((int)request.Id, DocConstantModelName.STUDYDESIGN, "StudyDesigns", request);
                    case "tag":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "user":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityUser, User, UserSearch>((int)request.Id, DocConstantModelName.USER, "Users", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for dataset/{request.Id}/{request.Junction} was not found");
            }
        }


        private DataSet GetDataSet(DataSet request)
        {
            var id = request?.Id;
            DataSet ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetSelect<DataSet>(currentUser, "DataSet", request.Select);

            DocEntityDataSet entity = null;
            if(id.HasValue)
            {
                entity = DocEntityDataSet.Get(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No DataSet found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

    }
}
