//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;

using Xtensive.Orm;


namespace Services.API
{
    public partial class DataSetService : DocServiceBase
    {

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private IQueryable<DocEntityDataSet> _ExecSearch(DataSetSearch request, DocQuery query)
        {
            request = InitSearch<DataSet, DataSetSearch>(request);
            IQueryable<DocEntityDataSet> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityDataSet>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new DataSetFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityDataSet,DataSetFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.DATASET, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }
                if(true == request.ClientsIds?.Any())
                {
                    entities = entities.Where(en => en.Clients.Any(r => r.Id.In(request.ClientsIds)));
                }
                if(true == request.Confidential?.Any())
                {
                    entities = entities.Where(en => en.Confidential.In(request.Confidential));
                }
                if(true == request.DivisionsIds?.Any())
                {
                    entities = entities.Where(en => en.Divisions.Any(r => r.Id.In(request.DivisionsIds)));
                }
                if(true == request.DocumentsIds?.Any())
                {
                    entities = entities.Where(en => en.Documents.Any(r => r.Id.In(request.DocumentsIds)));
                }
                if(true == request.DocumentSetsIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentSets.Any(r => r.Id.In(request.DocumentSetsIds)));
                }
                if(true == request.HistoriesIds?.Any())
                {
                    entities = entities.Where(en => en.Histories.Any(r => r.Id.In(request.HistoriesIds)));
                }
                if(request.LegacyDocumentSetId.HasValue)
                    entities = entities.Where(en => request.LegacyDocumentSetId.Value == en.LegacyDocumentSetId);
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(!DocTools.IsNullOrEmpty(request.Names))
                    entities = entities.Where(en => en.Name.In(request.Names));
                if(!DocTools.IsNullOrEmpty(request.Owner) && !DocTools.IsNullOrEmpty(request.Owner.Id))
                {
                    entities = entities.Where(en => en.Owner.Id == request.Owner.Id );
                }
                if(true == request.OwnerIds?.Any())
                {
                    entities = entities.Where(en => en.Owner.Id.In(request.OwnerIds));
                }
                if(!DocTools.IsNullOrEmpty(request.ProjectTeam) && !DocTools.IsNullOrEmpty(request.ProjectTeam.Id))
                {
                    entities = entities.Where(en => en.ProjectTeam.Id == request.ProjectTeam.Id );
                }
                if(true == request.ProjectTeamIds?.Any())
                {
                    entities = entities.Where(en => en.ProjectTeam.Id.In(request.ProjectTeamIds));
                }
                if(true == request.ScopesIds?.Any())
                {
                    entities = entities.Where(en => en.Scopes.Any(r => r.Id.In(request.ScopesIds)));
                }
                if(true == request.StatsIds?.Any())
                {
                    entities = entities.Where(en => en.Stats.Any(r => r.Id.In(request.StatsIds)));
                }
                if(request.Type.HasValue)
                    entities = entities.Where(en => request.Type.Value == en.Type);
                if(!DocTools.IsNullOrEmpty(request.Types))
                    entities = entities.Where(en => en.Type.In(request.Types));
                if(true == request.UsersIds?.Any())
                {
                    entities = entities.Where(en => en.Users.Any(r => r.Id.In(request.UsersIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.AdditionalCriteria))
                    entities = entities.Where(en => en.AdditionalCriteria.Contains(request.AdditionalCriteria));
                if(!DocTools.IsNullOrEmpty(request.AdditionalCriterias))
                    entities = entities.Where(en => en.AdditionalCriteria.In(request.AdditionalCriterias));
                if(true == request.CharacteristicsIds?.Any())
                {
                    entities = entities.Where(en => en.Characteristics.Any(r => r.Id.In(request.CharacteristicsIds)));
                }
                if(true == request.ClientsIds?.Any())
                {
                    entities = entities.Where(en => en.Clients.Any(r => r.Id.In(request.ClientsIds)));
                }
                if(true == request.ComparatorsIds?.Any())
                {
                    entities = entities.Where(en => en.Comparators.Any(r => r.Id.In(request.ComparatorsIds)));
                }
                if(true == request.Confidential?.Any())
                {
                    entities = entities.Where(en => en.Confidential.In(request.Confidential));
                }
                if(!DocTools.IsNullOrEmpty(request.DataCollection))
                    entities = entities.Where(en => en.DataCollection.Contains(request.DataCollection));
                if(!DocTools.IsNullOrEmpty(request.DataCollections))
                    entities = entities.Where(en => en.DataCollection.In(request.DataCollections));
                if(true == request.DivisionsIds?.Any())
                {
                    entities = entities.Where(en => en.Divisions.Any(r => r.Id.In(request.DivisionsIds)));
                }
                if(true == request.DocumentsIds?.Any())
                {
                    entities = entities.Where(en => en.Documents.Any(r => r.Id.In(request.DocumentsIds)));
                }
                if(true == request.DocumentSetsIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentSets.Any(r => r.Id.In(request.DocumentSetsIds)));
                }
                if(request.EvidencePortalId.HasValue)
                    entities = entities.Where(en => request.EvidencePortalId.Value == en.EvidencePortalId);
                if(request.FqId.HasValue)
                    entities = entities.Where(en => request.FqId.Value == en.FqId);
                if(request.FramedQuestionId.HasValue)
                    entities = entities.Where(en => request.FramedQuestionId.Value == en.FramedQuestionId);
                if(!DocTools.IsNullOrEmpty(request.GeneralScope))
                    entities = entities.Where(en => en.GeneralScope.Contains(request.GeneralScope));
                if(!DocTools.IsNullOrEmpty(request.GeneralScopes))
                    entities = entities.Where(en => en.GeneralScope.In(request.GeneralScopes));
                if(true == request.HistoriesIds?.Any())
                {
                    entities = entities.Where(en => en.Histories.Any(r => r.Id.In(request.HistoriesIds)));
                }
                if(true == request.ImportsIds?.Any())
                {
                    entities = entities.Where(en => en.Imports.Any(r => r.Id.In(request.ImportsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Indications))
                    entities = entities.Where(en => en.Indications.Contains(request.Indications));
                if(!DocTools.IsNullOrEmpty(request.Indicationss))
                    entities = entities.Where(en => en.Indications.In(request.Indicationss));
                if(true == request.InterventionsIds?.Any())
                {
                    entities = entities.Where(en => en.Interventions.Any(r => r.Id.In(request.InterventionsIds)));
                }
                if(request.LegacyDocumentSetId.HasValue)
                    entities = entities.Where(en => request.LegacyDocumentSetId.Value == en.LegacyDocumentSetId);
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(!DocTools.IsNullOrEmpty(request.Names))
                    entities = entities.Where(en => en.Name.In(request.Names));
                if(!DocTools.IsNullOrEmpty(request.Notes))
                    entities = entities.Where(en => en.Notes.Contains(request.Notes));
                if(!DocTools.IsNullOrEmpty(request.Notess))
                    entities = entities.Where(en => en.Notes.In(request.Notess));
                if(!DocTools.IsNullOrEmpty(request.OriginalComparators))
                    entities = entities.Where(en => en.OriginalComparators.Contains(request.OriginalComparators));
                if(!DocTools.IsNullOrEmpty(request.OriginalComparatorss))
                    entities = entities.Where(en => en.OriginalComparators.In(request.OriginalComparatorss));
                if(!DocTools.IsNullOrEmpty(request.OriginalDatabase))
                    entities = entities.Where(en => en.OriginalDatabase.Contains(request.OriginalDatabase));
                if(!DocTools.IsNullOrEmpty(request.OriginalDatabases))
                    entities = entities.Where(en => en.OriginalDatabase.In(request.OriginalDatabases));
                if(!DocTools.IsNullOrEmpty(request.OriginalDesigns))
                    entities = entities.Where(en => en.OriginalDesigns.Contains(request.OriginalDesigns));
                if(!DocTools.IsNullOrEmpty(request.OriginalDesignss))
                    entities = entities.Where(en => en.OriginalDesigns.In(request.OriginalDesignss));
                if(!DocTools.IsNullOrEmpty(request.OriginalInterventions))
                    entities = entities.Where(en => en.OriginalInterventions.Contains(request.OriginalInterventions));
                if(!DocTools.IsNullOrEmpty(request.OriginalInterventionss))
                    entities = entities.Where(en => en.OriginalInterventions.In(request.OriginalInterventionss));
                if(!DocTools.IsNullOrEmpty(request.OriginalOutcomes))
                    entities = entities.Where(en => en.OriginalOutcomes.Contains(request.OriginalOutcomes));
                if(!DocTools.IsNullOrEmpty(request.OriginalOutcomess))
                    entities = entities.Where(en => en.OriginalOutcomes.In(request.OriginalOutcomess));
                if(true == request.OutcomesIds?.Any())
                {
                    entities = entities.Where(en => en.Outcomes.Any(r => r.Id.In(request.OutcomesIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Owner) && !DocTools.IsNullOrEmpty(request.Owner.Id))
                {
                    entities = entities.Where(en => en.Owner.Id == request.Owner.Id );
                }
                if(true == request.OwnerIds?.Any())
                {
                    entities = entities.Where(en => en.Owner.Id.In(request.OwnerIds));
                }
                if(!DocTools.IsNullOrEmpty(request.Participants))
                    entities = entities.Where(en => en.Participants.Contains(request.Participants));
                if(!DocTools.IsNullOrEmpty(request.Participantss))
                    entities = entities.Where(en => en.Participants.In(request.Participantss));
                if(!DocTools.IsNullOrEmpty(request.PrismaWorkflow) && !DocTools.IsNullOrEmpty(request.PrismaWorkflow.Id))
                {
                    entities = entities.Where(en => en.PrismaWorkflow.Id == request.PrismaWorkflow.Id );
                }
                if(true == request.PrismaWorkflowIds?.Any())
                {
                    entities = entities.Where(en => en.PrismaWorkflow.Id.In(request.PrismaWorkflowIds));
                }
                if(true == request.ProjectsIds?.Any())
                {
                    entities = entities.Where(en => en.Projects.Any(r => r.Id.In(request.ProjectsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.ProjectTeam) && !DocTools.IsNullOrEmpty(request.ProjectTeam.Id))
                {
                    entities = entities.Where(en => en.ProjectTeam.Id == request.ProjectTeam.Id );
                }
                if(true == request.ProjectTeamIds?.Any())
                {
                    entities = entities.Where(en => en.ProjectTeam.Id.In(request.ProjectTeamIds));
                }
                if(true == request.ScopesIds?.Any())
                {
                    entities = entities.Where(en => en.Scopes.Any(r => r.Id.In(request.ScopesIds)));
                }
                if(true == request.ShowEtw?.Any())
                {
                    entities = entities.Where(en => en.ShowEtw.In(request.ShowEtw));
                }
                if(true == request.ShowPublicationType?.Any())
                {
                    entities = entities.Where(en => en.ShowPublicationType.In(request.ShowPublicationType));
                }
                if(true == request.StatsIds?.Any())
                {
                    entities = entities.Where(en => en.Stats.Any(r => r.Id.In(request.StatsIds)));
                }
                if(true == request.StudyDesignsIds?.Any())
                {
                    entities = entities.Where(en => en.StudyDesigns.Any(r => r.Id.In(request.StudyDesignsIds)));
                }
                if(request.Type.HasValue)
                    entities = entities.Where(en => request.Type.Value == en.Type);
                if(!DocTools.IsNullOrEmpty(request.Types))
                    entities = entities.Where(en => en.Type.In(request.Types));
                if(true == request.UsersIds?.Any())
                {
                    entities = entities.Where(en => en.Users.Any(r => r.Id.In(request.UsersIds)));
                }

                entities = ApplyFilters<DocEntityDataSet,DataSetSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Post(DataSetSearch request) => Get(request);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Get(DataSetSearch request) => GetSearchResultWithCache<DataSet,DocEntityDataSet,DataSetSearch>(DocConstantModelName.DATASET, request, _ExecSearch);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Get(DataSet request) => GetEntityWithCache<DataSet>(DocConstantModelName.DATASET, request, GetDataSet);



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private DataSet _AssignValues(DataSet request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "DataSet"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.Select = request.Select ?? new List<string>();

            DataSet ret = null;
            request = _InitAssignValues<DataSet>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<DataSet>(DocConstantModelName.DATASET, nameof(DataSet), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pAdditionalCriteria = request.AdditionalCriteria;
            var pCharacteristics = GetVariable<Reference>(request, nameof(request.Characteristics), request.Characteristics?.ToList(), request.CharacteristicsIds?.ToList());
            var pClients = GetVariable<Reference>(request, nameof(request.Clients), request.Clients?.ToList(), request.ClientsIds?.ToList());
            var pComparators = GetVariable<Reference>(request, nameof(request.Comparators), request.Comparators?.ToList(), request.ComparatorsIds?.ToList());
            var pConfidential = request.Confidential;
            var pDataCollection = request.DataCollection;
            var pDivisions = GetVariable<Reference>(request, nameof(request.Divisions), request.Divisions?.ToList(), request.DivisionsIds?.ToList());
            var pDocuments = GetVariable<Reference>(request, nameof(request.Documents), request.Documents?.ToList(), request.DocumentsIds?.ToList());
            var pDocumentSets = GetVariable<Reference>(request, nameof(request.DocumentSets), request.DocumentSets?.ToList(), request.DocumentSetsIds?.ToList());
            var pEvidencePortalId = request.EvidencePortalId;
            var pExtractionProtocol = request.ExtractionProtocol;
            var pFqId = request.FqId;
            var pFramedQuestionId = request.FramedQuestionId;
            var pGeneralScope = request.GeneralScope;
            var pHistories = GetVariable<Reference>(request, nameof(request.Histories), request.Histories?.ToList(), request.HistoriesIds?.ToList());
            var pImports = GetVariable<Reference>(request, nameof(request.Imports), request.Imports?.ToList(), request.ImportsIds?.ToList());
            var pIndications = request.Indications;
            var pInterventions = GetVariable<Reference>(request, nameof(request.Interventions), request.Interventions?.ToList(), request.InterventionsIds?.ToList());
            var pLegacyDocumentSetId = request.LegacyDocumentSetId;
            var pName = request.Name;
            var pNotes = request.Notes;
            var pOriginalComparators = request.OriginalComparators;
            var pOriginalDatabase = request.OriginalDatabase;
            var pOriginalDesigns = request.OriginalDesigns;
            var pOriginalInterventions = request.OriginalInterventions;
            var pOriginalOutcomes = request.OriginalOutcomes;
            var pOutcomes = GetVariable<Reference>(request, nameof(request.Outcomes), request.Outcomes?.ToList(), request.OutcomesIds?.ToList());
            var pOwner = (request.Owner?.Id > 0) ? DocEntityDocumentSet.Get(request.Owner.Id) : null;
            var pParticipants = request.Participants;
            var pPrismaWorkflow = (request.PrismaWorkflow?.Id > 0) ? DocEntityWorkflow.Get(request.PrismaWorkflow.Id) : null;
            var pProjects = GetVariable<Reference>(request, nameof(request.Projects), request.Projects?.ToList(), request.ProjectsIds?.ToList());
            var pProjectTeam = (request.ProjectTeam?.Id > 0) ? DocEntityTeam.Get(request.ProjectTeam.Id) : null;
            var pScopes = GetVariable<Reference>(request, nameof(request.Scopes), request.Scopes?.ToList(), request.ScopesIds?.ToList());
            var pSettings = request.Settings;
            var pShowEtw = request.ShowEtw;
            var pShowPublicationType = request.ShowPublicationType;
            var pStats = GetVariable<Reference>(request, nameof(request.Stats), request.Stats?.ToList(), request.StatsIds?.ToList());
            var pStudyDesigns = GetVariable<Reference>(request, nameof(request.StudyDesigns), request.StudyDesigns?.ToList(), request.StudyDesignsIds?.ToList());
            var pType = request.Type;
            var pUsers = GetVariable<Reference>(request, nameof(request.Users), request.Users?.ToList(), request.UsersIds?.ToList());
            var pArchived = true == request.Archived;
            var pLocked = request.Locked;

            var entity = InitEntity<DocEntityDataSet,DataSet>(request, permission, session);

            if (AllowPatchValue<DataSet, bool>(request, DocConstantModelName.DATASET, pArchived, permission, nameof(request.Archived), pArchived != entity.Archived))
            {
                entity.Archived = pArchived;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pAdditionalCriteria, permission, nameof(request.AdditionalCriteria), pAdditionalCriteria != entity.AdditionalCriteria))
            {
                entity.AdditionalCriteria = pAdditionalCriteria;
            }
            if (AllowPatchValue<DataSet, bool>(request, DocConstantModelName.DATASET, pConfidential, permission, nameof(request.Confidential), pConfidential != entity.Confidential))
            {
                entity.Confidential = pConfidential;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pDataCollection, permission, nameof(request.DataCollection), pDataCollection != entity.DataCollection))
            {
                entity.DataCollection = pDataCollection;
            }
            if (AllowPatchValue<DataSet, int?>(request, DocConstantModelName.DATASET, pEvidencePortalId, permission, nameof(request.EvidencePortalId), pEvidencePortalId != entity.EvidencePortalId))
            {
                entity.EvidencePortalId = pEvidencePortalId;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pExtractionProtocol, permission, nameof(request.ExtractionProtocol), pExtractionProtocol != entity.ExtractionProtocol))
            {
                entity.ExtractionProtocol = pExtractionProtocol;
            }
            if (AllowPatchValue<DataSet, int?>(request, DocConstantModelName.DATASET, pFqId, permission, nameof(request.FqId), pFqId != entity.FqId))
            {
                entity.FqId = pFqId;
            }
            if (AllowPatchValue<DataSet, int?>(request, DocConstantModelName.DATASET, pFramedQuestionId, permission, nameof(request.FramedQuestionId), pFramedQuestionId != entity.FramedQuestionId))
            {
                entity.FramedQuestionId = pFramedQuestionId;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pGeneralScope, permission, nameof(request.GeneralScope), pGeneralScope != entity.GeneralScope))
            {
                entity.GeneralScope = pGeneralScope;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pIndications, permission, nameof(request.Indications), pIndications != entity.Indications))
            {
                entity.Indications = pIndications;
            }
            if (AllowPatchValue<DataSet, int?>(request, DocConstantModelName.DATASET, pLegacyDocumentSetId, permission, nameof(request.LegacyDocumentSetId), pLegacyDocumentSetId != entity.LegacyDocumentSetId))
            {
                entity.LegacyDocumentSetId = pLegacyDocumentSetId;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pName, permission, nameof(request.Name), pName != entity.Name))
            {
                entity.Name = pName;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pNotes, permission, nameof(request.Notes), pNotes != entity.Notes))
            {
                entity.Notes = pNotes;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pOriginalComparators, permission, nameof(request.OriginalComparators), pOriginalComparators != entity.OriginalComparators))
            {
                entity.OriginalComparators = pOriginalComparators;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pOriginalDatabase, permission, nameof(request.OriginalDatabase), pOriginalDatabase != entity.OriginalDatabase))
            {
                entity.OriginalDatabase = pOriginalDatabase;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pOriginalDesigns, permission, nameof(request.OriginalDesigns), pOriginalDesigns != entity.OriginalDesigns))
            {
                entity.OriginalDesigns = pOriginalDesigns;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pOriginalInterventions, permission, nameof(request.OriginalInterventions), pOriginalInterventions != entity.OriginalInterventions))
            {
                entity.OriginalInterventions = pOriginalInterventions;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pOriginalOutcomes, permission, nameof(request.OriginalOutcomes), pOriginalOutcomes != entity.OriginalOutcomes))
            {
                entity.OriginalOutcomes = pOriginalOutcomes;
            }
            if (AllowPatchValue<DataSet, DocEntityDocumentSet>(request, DocConstantModelName.DATASET, pOwner, permission, nameof(request.Owner), pOwner != entity.Owner))
            {
                entity.Owner = pOwner;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pParticipants, permission, nameof(request.Participants), pParticipants != entity.Participants))
            {
                entity.Participants = pParticipants;
            }
            if (AllowPatchValue<DataSet, DocEntityWorkflow>(request, DocConstantModelName.DATASET, pPrismaWorkflow, permission, nameof(request.PrismaWorkflow), pPrismaWorkflow != entity.PrismaWorkflow))
            {
                entity.PrismaWorkflow = pPrismaWorkflow;
            }
            if (AllowPatchValue<DataSet, DocEntityTeam>(request, DocConstantModelName.DATASET, pProjectTeam, permission, nameof(request.ProjectTeam), pProjectTeam != entity.ProjectTeam))
            {
                entity.ProjectTeam = pProjectTeam;
            }
            if (AllowPatchValue<DataSet, string>(request, DocConstantModelName.DATASET, pSettings, permission, nameof(request.Settings), pSettings != entity.Settings))
            {
                entity.Settings = pSettings;
            }
            if (AllowPatchValue<DataSet, bool>(request, DocConstantModelName.DATASET, pShowEtw, permission, nameof(request.ShowEtw), pShowEtw != entity.ShowEtw))
            {
                entity.ShowEtw = pShowEtw;
            }
            if (AllowPatchValue<DataSet, bool>(request, DocConstantModelName.DATASET, pShowPublicationType, permission, nameof(request.ShowPublicationType), pShowPublicationType != entity.ShowPublicationType))
            {
                entity.ShowPublicationType = pShowPublicationType;
            }
            if (AllowPatchValue<DataSet, DocumentSetTypeEnm?>(request, DocConstantModelName.DATASET, pType, permission, nameof(request.Type), pType != entity.Type))
            {
                if(null != pType) entity.Type = pType.Value;
            }
            if (request.Locked && AllowPatchValue<DataSet, bool>(request, DocConstantModelName.DATASET, pArchived, permission, nameof(request.Locked), pLocked != entity.Locked))
            {
                entity.Archived = pArchived;
            }
            entity.SaveChanges(permission);

            var idsToInvalidate = new List<int>();
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityTag>(request, entity, pCharacteristics, permission, nameof(request.Characteristics)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityClient>(request, entity, pClients, permission, nameof(request.Clients)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityTag>(request, entity, pComparators, permission, nameof(request.Comparators)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityDivision>(request, entity, pDivisions, permission, nameof(request.Divisions)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityDocument>(request, entity, pDocuments, permission, nameof(request.Documents)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityDocumentSet>(request, entity, pDocumentSets, permission, nameof(request.DocumentSets)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityDocumentSetHistory>(request, entity, pHistories, permission, nameof(request.Histories)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityImportData>(request, entity, pImports, permission, nameof(request.Imports)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityTag>(request, entity, pInterventions, permission, nameof(request.Interventions)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityTag>(request, entity, pOutcomes, permission, nameof(request.Outcomes)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityProject>(request, entity, pProjects, permission, nameof(request.Projects)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityScope>(request, entity, pScopes, permission, nameof(request.Scopes)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityStatsStudySet>(request, entity, pStats, permission, nameof(request.Stats)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityStudyDesign>(request, entity, pStudyDesigns, permission, nameof(request.StudyDesigns)));
            idsToInvalidate.AddRange(PatchCollection<DataSet, DocEntityDataSet, Reference, DocEntityUser>(request, entity, pUsers, permission, nameof(request.Users)));
            if (idsToInvalidate.Any())
            {
                idsToInvalidate.Add(entity.Id);
                DocCacheClient.RemoveByEntityIds(idsToInvalidate);
                DocCacheClient.RemoveSearch(DocConstantModelName.DATASET);
            }

            DocPermissionFactory.SetSelect<DataSet>(currentUser, nameof(DataSet), request.Select);
            ret = entity.ToDto();

            var cacheExpires = DocResources.Metadata.GetCacheExpiration(DocConstantModelName.DATASET);
            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.DATASET, cacheExpires);

            return ret;
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSet Post(DataSet request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.Select = request.Select ?? new List<string>();

            DataSet ret = null;

            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "DataSet")) 
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
                });
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<DataSet> Post(DataSetBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<DataSet>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as DataSet;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSet Post(DataSetCopy request)
        {
            DataSet ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    var entity = DocEntityDataSet.Get(request?.Id);
                    if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                    if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    var pAdditionalCriteria = entity.AdditionalCriteria;
                    var pCharacteristics = entity.Characteristics.ToList();
                    var pClients = entity.Clients.ToList();
                    var pComparators = entity.Comparators.ToList();
                    var pConfidential = entity.Confidential;
                    var pDataCollection = entity.DataCollection;
                    var pDivisions = entity.Divisions.ToList();
                    var pDocuments = entity.Documents.ToList();
                    var pDocumentSets = entity.DocumentSets.ToList();
                    var pEvidencePortalId = entity.EvidencePortalId;
                    var pExtractionProtocol = entity.ExtractionProtocol;
                    var pFqId = entity.FqId;
                    var pFramedQuestionId = entity.FramedQuestionId;
                    var pGeneralScope = entity.GeneralScope;
                    var pHistories = entity.Histories.ToList();
                    var pImports = entity.Imports.ToList();
                    var pIndications = entity.Indications;
                    var pInterventions = entity.Interventions.ToList();
                    var pLegacyDocumentSetId = entity.LegacyDocumentSetId;
                    var pName = entity.Name;
                    if(!DocTools.IsNullOrEmpty(pName))
                        pName += " (Copy)";
                    var pNotes = entity.Notes;
                    var pOriginalComparators = entity.OriginalComparators;
                    var pOriginalDatabase = entity.OriginalDatabase;
                    if(!DocTools.IsNullOrEmpty(pOriginalDatabase))
                        pOriginalDatabase += " (Copy)";
                    var pOriginalDesigns = entity.OriginalDesigns;
                    var pOriginalInterventions = entity.OriginalInterventions;
                    var pOriginalOutcomes = entity.OriginalOutcomes;
                    var pOutcomes = entity.Outcomes.ToList();
                    var pOwner = entity.Owner;
                    var pParticipants = entity.Participants;
                    var pPrismaWorkflow = entity.PrismaWorkflow;
                    var pProjects = entity.Projects.ToList();
                    var pProjectTeam = entity.ProjectTeam;
                    var pScopes = entity.Scopes.ToList();
                    var pSettings = entity.Settings;
                    var pShowEtw = entity.ShowEtw;
                    var pShowPublicationType = entity.ShowPublicationType;
                    var pStats = entity.Stats.ToList();
                    var pStudyDesigns = entity.StudyDesigns.ToList();
                    var pType = entity.Type;
                    var pUsers = entity.Users.ToList();
                    var copy = new DocEntityDataSet(ssn)
                    {
                        Hash = Guid.NewGuid()
                                , AdditionalCriteria = pAdditionalCriteria
                                , Confidential = pConfidential
                                , DataCollection = pDataCollection
                                , EvidencePortalId = pEvidencePortalId
                                , ExtractionProtocol = pExtractionProtocol
                                , FqId = pFqId
                                , FramedQuestionId = pFramedQuestionId
                                , GeneralScope = pGeneralScope
                                , Indications = pIndications
                                , LegacyDocumentSetId = pLegacyDocumentSetId
                                , Name = pName
                                , Notes = pNotes
                                , OriginalComparators = pOriginalComparators
                                , OriginalDatabase = pOriginalDatabase
                                , OriginalDesigns = pOriginalDesigns
                                , OriginalInterventions = pOriginalInterventions
                                , OriginalOutcomes = pOriginalOutcomes
                                , Owner = pOwner
                                , Participants = pParticipants
                                , PrismaWorkflow = pPrismaWorkflow
                                , ProjectTeam = pProjectTeam
                                , Settings = pSettings
                                , ShowEtw = pShowEtw
                                , ShowPublicationType = pShowPublicationType
                                , Type = pType
                    };
                            foreach(var item in pCharacteristics)
                            {
                                entity.Characteristics.Add(item);
                            }

                            foreach(var item in pClients)
                            {
                                entity.Clients.Add(item);
                            }

                            foreach(var item in pComparators)
                            {
                                entity.Comparators.Add(item);
                            }

                            foreach(var item in pDivisions)
                            {
                                entity.Divisions.Add(item);
                            }

                            foreach(var item in pDocuments)
                            {
                                entity.Documents.Add(item);
                            }

                            foreach(var item in pDocumentSets)
                            {
                                entity.DocumentSets.Add(item);
                            }

                            foreach(var item in pHistories)
                            {
                                entity.Histories.Add(item);
                            }

                            foreach(var item in pImports)
                            {
                                entity.Imports.Add(item);
                            }

                            foreach(var item in pInterventions)
                            {
                                entity.Interventions.Add(item);
                            }

                            foreach(var item in pOutcomes)
                            {
                                entity.Outcomes.Add(item);
                            }

                            foreach(var item in pProjects)
                            {
                                entity.Projects.Add(item);
                            }

                            foreach(var item in pScopes)
                            {
                                entity.Scopes.Add(item);
                            }

                            foreach(var item in pStats)
                            {
                                entity.Stats.Add(item);
                            }

                            foreach(var item in pStudyDesigns)
                            {
                                entity.StudyDesigns.Add(item);
                            }

                            foreach(var item in pUsers)
                            {
                                entity.Users.Add(item);
                            }

                    copy.SaveChanges(DocConstantPermission.ADD);
                    ret = copy.ToDto();
                });
            }
            return ret;
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<DataSet> Put(DataSetBatch request)
        {
            return Patch(request);
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSet Put(DataSet request)
        {
            return Patch(request);
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<DataSet> Patch(DataSetBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<DataSet>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as DataSet;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataSet Patch(DataSet request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the DataSet to patch.");
            
            request.Select = request.Select ?? new List<string>();
            
            DataSet ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
                });
            }
            return ret;
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Delete(DataSetBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Delete(DataSet request)
        {
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!(request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, $"No Id provided for delete.");

                    var en = DocEntityDataSet.Get(request?.Id);
                    if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No DataSet could be found for Id {request?.Id}.");
                    if(en.IsRemoved) return;
                
                    if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                    en.Remove();

                    DocCacheClient.RemoveSearch(DocConstantModelName.DATASET);
                    DocCacheClient.RemoveById(request.Id);
                });
            }
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Delete(DataSetSearch request)
        {
            var matches = Get(request) as List<DataSet>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");
            matches.ForEach(match =>
            {
                Delete(match);
            });
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Get(DataSetJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "characteristics":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Characteristics", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "client":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityClient, Client, ClientSearch>((int)request.Id, DocConstantModelName.CLIENT, "Clients", request, (ss) => HostContext.ResolveService<ClientService>(Request)?.Get(ss));
                    case "comment":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request, (ss) => HostContext.ResolveService<CommentService>(Request)?.Get(ss));
                    case "comparators":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Comparators", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "division":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityDivision, Division, DivisionSearch>((int)request.Id, DocConstantModelName.DIVISION, "Divisions", request, (ss) => HostContext.ResolveService<DivisionService>(Request)?.Get(ss));
                    case "document":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityDocument, Document, DocumentSearch>((int)request.Id, DocConstantModelName.DOCUMENT, "Documents", request, (ss) => HostContext.ResolveService<DocumentService>(Request)?.Get(ss));
                    case "documentset":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request, (ss) => HostContext.ResolveService<DocumentSetService>(Request)?.Get(ss));
                    case "favorite":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request, (ss) => HostContext.ResolveService<FavoriteService>(Request)?.Get(ss));
                    case "file":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityFile, File, FileSearch>((int)request.Id, DocConstantModelName.FILE, "Files", request, (ss) => HostContext.ResolveService<FileService>(Request)?.Get(ss));
                    case "documentsethistory":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityDocumentSetHistory, DocumentSetHistory, DocumentSetHistorySearch>((int)request.Id, DocConstantModelName.DOCUMENTSETHISTORY, "Histories", request, (ss) => HostContext.ResolveService<DocumentSetHistoryService>(Request)?.Get(ss));
                    case "importdata":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityImportData, ImportData, ImportDataSearch>((int)request.Id, DocConstantModelName.IMPORTDATA, "Imports", request, (ss) => HostContext.ResolveService<ImportDataService>(Request)?.Get(ss));
                    case "interventions":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Interventions", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "outcomes":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Outcomes", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "projectlink":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityProject, Project, ProjectSearch>((int)request.Id, DocConstantModelName.PROJECT, "ProjectLinks", request, (ss) => HostContext.ResolveService<ProjectService>(Request)?.Get(ss));
                    case "project":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityProject, Project, ProjectSearch>((int)request.Id, DocConstantModelName.PROJECT, "Projects", request, (ss) => HostContext.ResolveService<ProjectService>(Request)?.Get(ss));
                    case "scope":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request, (ss) => HostContext.ResolveService<ScopeService>(Request)?.Get(ss));
                    case "statsstudyset":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityStatsStudySet, StatsStudySet, StatsStudySetSearch>((int)request.Id, DocConstantModelName.STATSSTUDYSET, "Stats", request, (ss) => HostContext.ResolveService<StatsStudySetService>(Request)?.Get(ss));
                    case "tag":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "user":
                        return GetJunctionSearchResult<DataSet, DocEntityDataSet, DocEntityUser, User, UserSearch>((int)request.Id, DocConstantModelName.USER, "Users", request, (ss) => HostContext.ResolveService<UserService>(Request)?.Get(ss));
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for dataset/{request.Id}/{request.Junction} was not found");
            }
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Post(DataSetJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "characteristics":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Characteristics", request);
                    case "client":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityClient, Client, ClientSearch>((int)request.Id, DocConstantModelName.CLIENT, "Clients", request);
                    case "comment":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "comparators":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Comparators", request);
                    case "division":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityDivision, Division, DivisionSearch>((int)request.Id, DocConstantModelName.DIVISION, "Divisions", request);
                    case "document":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityDocument, Document, DocumentSearch>((int)request.Id, DocConstantModelName.DOCUMENT, "Documents", request);
                    case "favorite":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "file":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityFile, File, FileSearch>((int)request.Id, DocConstantModelName.FILE, "Files", request);
                    case "interventions":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Interventions", request);
                    case "outcomes":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Outcomes", request);
                    case "scope":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request);
                    case "studydesign":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityStudyDesign, StudyDesign, StudyDesignSearch>((int)request.Id, DocConstantModelName.STUDYDESIGN, "StudyDesigns", request);
                    case "tag":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "user":
                        return AddJunction<DataSet, DocEntityDataSet, DocEntityUser, User, UserSearch>((int)request.Id, DocConstantModelName.USER, "Users", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for dataset/{request.Id}/{request.Junction} was not found");
            }
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Delete(DataSetJunction request)
        {    
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "characteristics":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Characteristics", request);
                    case "client":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityClient, Client, ClientSearch>((int)request.Id, DocConstantModelName.CLIENT, "Clients", request);
                    case "comment":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "comparators":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Comparators", request);
                    case "division":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityDivision, Division, DivisionSearch>((int)request.Id, DocConstantModelName.DIVISION, "Divisions", request);
                    case "document":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityDocument, Document, DocumentSearch>((int)request.Id, DocConstantModelName.DOCUMENT, "Documents", request);
                    case "favorite":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "file":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityFile, File, FileSearch>((int)request.Id, DocConstantModelName.FILE, "Files", request);
                    case "interventions":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Interventions", request);
                    case "outcomes":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Outcomes", request);
                    case "scope":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request);
                    case "studydesign":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityStudyDesign, StudyDesign, StudyDesignSearch>((int)request.Id, DocConstantModelName.STUDYDESIGN, "StudyDesigns", request);
                    case "tag":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "user":
                        return RemoveJunction<DataSet, DocEntityDataSet, DocEntityUser, User, UserSearch>((int)request.Id, DocConstantModelName.USER, "Users", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for dataset/{request.Id}/{request.Junction} was not found");
            }
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private DataSet GetDataSet(DataSet request)
        {
            var id = request?.Id;
            DataSet ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetSelect<DataSet>(currentUser, "DataSet", request.Select);

            DocEntityDataSet entity = null;
            if(id.HasValue)
            {
                entity = DocEntityDataSet.Get(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No DataSet found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

    }
}
