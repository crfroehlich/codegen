//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class PageService : DocServiceBase
    {
        private void _ExecSearch(PageSearch request, Action<IQueryable<DocEntityPage>> callBack)
        {
            request = InitSearch(request);
            
            DocPermissionFactory.SetVisibleFields<Page>(currentUser, "Page", request.VisibleFields);

            Execute.Run( session => 
            {
                var entities = Execute.SelectAll<DocEntityPage>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new PageFullTextSearch(request);
                    entities = GetFullTextSearch(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                        if(true == request.AppsIds?.Any())
                        {
                            entities = entities.Where(en => en.Apps.Any(r => r.Id.In(request.AppsIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.Description))
                    entities = entities.Where(en => en.Description.Contains(request.Description));
                        if(true == request.GlossaryIds?.Any())
                        {
                            entities = entities.Where(en => en.Glossary.Any(r => r.Id.In(request.GlossaryIds)));
                        }
                        if(true == request.HelpIds?.Any())
                        {
                            entities = entities.Where(en => en.Help.Any(r => r.Id.In(request.HelpIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                        if(true == request.RolesIds?.Any())
                        {
                            entities = entities.Where(en => en.Roles.Any(r => r.Id.In(request.RolesIds)));
                        }

                entities = ApplyFilters(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
                callBack?.Invoke(entities);
            });
        }
        
        public object Post(PageSearch request)
        {
            return Get(request);
        }

        public object Get(PageSearch request)
        {
            object tryRet = null;
            var ret = new List<Page>();
            var cacheKey = GetApiCacheKey<Page>(DocConstantModelName.PAGE, nameof(Page), request);
            using (var cancellableRequest = base.Request.CreateCancellableRequest())
            {
                var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                try 
                {
                    if(true != request.IgnoreCache) 
                    {
                        tryRet = Request.ToOptimizedResultUsingCache(Cache, cacheKey, new TimeSpan(0, DocResources.Settings.SessionTimeout, 0), () =>
                        {
                            _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityPage,Page>(ret, Execute, requestCancel));
                            return ret;
                        });
                    }
                    if (tryRet == null)
                    {
                        _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityPage,Page>(ret, Execute, requestCancel));
                        tryRet = ret;
                        //Go ahead and cache the result for any future consumers
                        DocCacheClient.Set(key: cacheKey, value: ret, entityType: DocConstantModelName.PAGE, search: true);
                    }
                }
                catch(Exception) { throw; }
                finally
                {
                    requestCancel?.CloseRequest();
                }
            }
            DocCacheClient.SyncKeys(key: cacheKey, entityType: DocConstantModelName.PAGE, search: true);
            return tryRet;
        }

        public object Post(PageVersion request) 
        {
            return Get(request);
        }

        public object Get(PageVersion request) 
        {
            var ret = new List<Version>();
            _ExecSearch(request, (entities) => 
            {
                ret = entities.Select(e => new Version(e.Id, e.VersionNo)).ToList();
            });
            return ret;
        }

        public object Get(Page request)
        {
            object ret = null;
            
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");

            DocPermissionFactory.SetVisibleFields<Page>(currentUser, "Page", request.VisibleFields);
            var cacheKey = GetApiCacheKey<Page>(DocConstantModelName.PAGE, nameof(Page), request);
            if (true != request.IgnoreCache)
            {
                ret = Request.ToOptimizedResultUsingCache(Cache, cacheKey, new TimeSpan(0, DocResources.Settings.SessionTimeout, 0), () =>
                {
                    object cachedRet = null;
                    Execute.Run(s =>
                    {
                        cachedRet = GetPage(request);
                    });
                    DocCacheClient.Set(key: cacheKey, value: cachedRet, entityId: request.Id, entityType: DocConstantModelName.PAGE);
                    return cachedRet;
                });
            }
            if(null == ret)
            {
                Execute.Run(s =>
                {
                    ret = GetPage(request);
                    DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.PAGE);
                });
            }
            DocCacheClient.SyncKeys(key: cacheKey, entityId: request.Id, entityType: DocConstantModelName.PAGE);
            return ret;
        }

        private Page _AssignValues(Page request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "Page"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            Page ret = null;
            request = _InitAssignValues(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<Page>(DocConstantModelName.PAGE, nameof(Page), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pApps = request.Apps?.ToList();
            var pDescription = request.Description;
            var pGlossary = request.Glossary?.ToList();
            var pHelp = request.Help?.ToList();
            var pName = request.Name;
            var pRoles = request.Roles?.ToList();

            DocEntityPage entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityPage(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityPage.GetPage(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pDescription, permission, DocConstantModelName.PAGE, nameof(request.Description)))
            {
                if(DocPermissionFactory.IsRequested(request, pDescription, entity.Description, nameof(request.Description)))
                    entity.Description = pDescription;
                if(DocPermissionFactory.IsRequested<string>(request, pDescription, nameof(request.Description)) && !request.VisibleFields.Matches(nameof(request.Description), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Description));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pName, permission, DocConstantModelName.PAGE, nameof(request.Name)))
            {
                if(DocPermissionFactory.IsRequested(request, pName, entity.Name, nameof(request.Name)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Name)} cannot be modified once set.");
                    entity.Name = pName;
                if(DocPermissionFactory.IsRequested<string>(request, pName, nameof(request.Name)) && !request.VisibleFields.Matches(nameof(request.Name), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Name));
                }
            }
            
            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);
            
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pApps, permission, DocConstantModelName.PAGE, nameof(request.Apps)))
            {
                if (true == pApps?.Any() )
                {
                    var requestedApps = pApps.Select(p => p.Id).Distinct().ToList();
                    var existsApps = Execute.SelectAll<DocEntityApp>().Where(e => e.Id.In(requestedApps)).Select( e => e.Id ).ToList();
                    if (existsApps.Count != requestedApps.Count)
                    {
                        var nonExists = requestedApps.Where(id => existsApps.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Apps with objects that do not exist. No matching Apps(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedApps.Where(id => entity.Apps.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityApp.GetApp(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Page), columnName: nameof(request.Apps)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Apps)} to {nameof(Page)}");
                        entity.Apps.Add(target);
                    });
                    var toRemove = entity.Apps.Where(e => requestedApps.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityApp.GetApp(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Page), columnName: nameof(request.Apps)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Apps)} from {nameof(Page)}");
                        entity.Apps.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Apps.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityApp.GetApp(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Page), columnName: nameof(request.Apps)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Apps)} from {nameof(Page)}");
                        entity.Apps.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pApps, nameof(request.Apps)) && !request.VisibleFields.Matches(nameof(request.Apps), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Apps));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pGlossary, permission, DocConstantModelName.PAGE, nameof(request.Glossary)))
            {
                if (true == pGlossary?.Any() )
                {
                    var requestedGlossary = pGlossary.Select(p => p.Id).Distinct().ToList();
                    var existsGlossary = Execute.SelectAll<DocEntityGlossary>().Where(e => e.Id.In(requestedGlossary)).Select( e => e.Id ).ToList();
                    if (existsGlossary.Count != requestedGlossary.Count)
                    {
                        var nonExists = requestedGlossary.Where(id => existsGlossary.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Glossary with objects that do not exist. No matching Glossary(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedGlossary.Where(id => entity.Glossary.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityGlossary.GetGlossary(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Page), columnName: nameof(request.Glossary)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Glossary)} to {nameof(Page)}");
                        entity.Glossary.Add(target);
                    });
                    var toRemove = entity.Glossary.Where(e => requestedGlossary.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityGlossary.GetGlossary(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Page), columnName: nameof(request.Glossary)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Glossary)} from {nameof(Page)}");
                        entity.Glossary.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Glossary.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityGlossary.GetGlossary(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Page), columnName: nameof(request.Glossary)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Glossary)} from {nameof(Page)}");
                        entity.Glossary.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pGlossary, nameof(request.Glossary)) && !request.VisibleFields.Matches(nameof(request.Glossary), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Glossary));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pHelp, permission, DocConstantModelName.PAGE, nameof(request.Help)))
            {
                if (true == pHelp?.Any() )
                {
                    var requestedHelp = pHelp.Select(p => p.Id).Distinct().ToList();
                    var existsHelp = Execute.SelectAll<DocEntityHelp>().Where(e => e.Id.In(requestedHelp)).Select( e => e.Id ).ToList();
                    if (existsHelp.Count != requestedHelp.Count)
                    {
                        var nonExists = requestedHelp.Where(id => existsHelp.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Help with objects that do not exist. No matching Help(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedHelp.Where(id => entity.Help.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityHelp.GetHelp(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Page), columnName: nameof(request.Help)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Help)} to {nameof(Page)}");
                        entity.Help.Add(target);
                    });
                    var toRemove = entity.Help.Where(e => requestedHelp.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityHelp.GetHelp(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Page), columnName: nameof(request.Help)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Help)} from {nameof(Page)}");
                        entity.Help.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Help.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityHelp.GetHelp(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Page), columnName: nameof(request.Help)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Help)} from {nameof(Page)}");
                        entity.Help.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pHelp, nameof(request.Help)) && !request.VisibleFields.Matches(nameof(request.Help), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Help));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pRoles, permission, DocConstantModelName.PAGE, nameof(request.Roles)))
            {
                if (true == pRoles?.Any() )
                {
                    var requestedRoles = pRoles.Select(p => p.Id).Distinct().ToList();
                    var existsRoles = Execute.SelectAll<DocEntityRole>().Where(e => e.Id.In(requestedRoles)).Select( e => e.Id ).ToList();
                    if (existsRoles.Count != requestedRoles.Count)
                    {
                        var nonExists = requestedRoles.Where(id => existsRoles.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Roles with objects that do not exist. No matching Roles(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedRoles.Where(id => entity.Roles.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityRole.GetRole(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Page), columnName: nameof(request.Roles)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Roles)} to {nameof(Page)}");
                        entity.Roles.Add(target);
                    });
                    var toRemove = entity.Roles.Where(e => requestedRoles.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityRole.GetRole(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Page), columnName: nameof(request.Roles)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Roles)} from {nameof(Page)}");
                        entity.Roles.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Roles.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityRole.GetRole(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Page), columnName: nameof(request.Roles)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Roles)} from {nameof(Page)}");
                        entity.Roles.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pRoles, nameof(request.Roles)) && !request.VisibleFields.Matches(nameof(request.Roles), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Roles));
                }
            }
            DocPermissionFactory.SetVisibleFields<Page>(currentUser, nameof(Page), request.VisibleFields);
            ret = entity.ToDto();

            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.PAGE);

            return ret;
        }
        public Page Post(Page request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            Page ret = null;

            Execute.Run(ssn =>
            {
                if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "Page")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
            });

            return ret;
        }
   
        public List<Page> Post(PageBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Page>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as Page;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Page Post(PageCopy request)
        {
            Page ret = null;
            Execute.Run(ssn =>
            {
                var entity = DocEntityPage.GetPage(request?.Id);
                if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");
                
                    var pApps = entity.Apps.ToList();
                    var pDescription = entity.Description;
                    if(!DocTools.IsNullOrEmpty(pDescription))
                        pDescription += " (Copy)";
                    var pGlossary = entity.Glossary.ToList();
                    var pHelp = entity.Help.ToList();
                    var pName = entity.Name;
                    if(!DocTools.IsNullOrEmpty(pName))
                        pName += " (Copy)";
                    var pRoles = entity.Roles.ToList();
                #region Custom Before copyPage
                #endregion Custom Before copyPage
                var copy = new DocEntityPage(ssn)
                {
                    Hash = Guid.NewGuid()
                                , Description = pDescription
                                , Name = pName
                };
                            foreach(var item in pApps)
                            {
                                entity.Apps.Add(item);
                            }

                            foreach(var item in pGlossary)
                            {
                                entity.Glossary.Add(item);
                            }

                            foreach(var item in pHelp)
                            {
                                entity.Help.Add(item);
                            }

                            foreach(var item in pRoles)
                            {
                                entity.Roles.Add(item);
                            }

                #region Custom After copyPage
                #endregion Custom After copyPage
                copy.SaveChanges(DocConstantPermission.ADD);
                ret = copy.ToDto();
            });
            return ret;
        }


        public List<Page> Put(PageBatch request)
        {
            return Patch(request);
        }

        public Page Put(Page request)
        {
            return Patch(request);
        }

        public List<Page> Patch(PageBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Page>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as Page;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Page Patch(Page request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the Page to patch.");
            
            request.VisibleFields = request.VisibleFields ?? new List<string>();
            
            Page ret = null;
            Execute.Run(ssn =>
            {
                ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
            });
            return ret;
        }

        public void Delete(PageBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(Page request)
        {
            Execute.Run(ssn =>
            {
                if(!(request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, $"No Id provided for delete.");

                DocCacheClient.RemoveSearch(DocConstantModelName.PAGE);
                DocCacheClient.RemoveById(request.Id);
                var en = DocEntityPage.GetPage(request?.Id);

                if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No Page could be found for Id {request?.Id}.");
                if(en.IsRemoved) return;
                
                if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                en.Remove();
            });
        }

        public void Delete(PageSearch request)
        {
            var matches = Get(request) as List<Page>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");

            Execute.Run(ssn =>
            {
                matches.ForEach(match =>
                {
                    Delete(match);
                });
            });
        }
        public object Get(PageJunction request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            object ret = null;
            var skip = (request.Skip > 0) ? request.Skip.Value : 0;
            var take = (request.Take > 0) ? request.Take.Value : int.MaxValue;
                        
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-1]?.ToLower().Trim();
            Execute.Run( s => 
            {
                switch(method)
                {
                case "app":
                    ret = _GetPageApp(request, skip, take);
                    break;
                case "glossary":
                    ret = _GetPageGlossary(request, skip, take);
                    break;
                case "help":
                    ret = _GetPageHelp(request, skip, take);
                    break;
                case "role":
                    ret = _GetPageRole(request, skip, take);
                    break;
                }
            });
            return ret;
        }
        
        public object Get(PageJunctionVersion request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
            
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-2]?.ToLower().Trim();
            Execute.Run( ssn =>
            {
                switch(method)
                {
                case "app":
                    ret = GetPageAppVersion(request);
                    break;
                case "glossary":
                    ret = GetPageGlossaryVersion(request);
                    break;
                case "help":
                    ret = GetPageHelpVersion(request);
                    break;
                case "role":
                    ret = GetPageRoleVersion(request);
                    break;
                }
            });
            return ret;
        }
        

        private object _GetPageApp(PageJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<App>(currentUser, "App", request.VisibleFields);
             var en = DocEntityPage.GetPage(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.PAGE, columnName: "Apps", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Page and App");
             return en?.Apps.Take(take).Skip(skip).ConvertFromEntityList<DocEntityApp,App>(new List<App>());
        }

        private List<Version> GetPageAppVersion(PageJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityPage.GetPage(request.Id);
                ret = en?.Apps.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetPageGlossary(PageJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<Glossary>(currentUser, "Glossary", request.VisibleFields);
             var en = DocEntityPage.GetPage(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.PAGE, columnName: "Glossary", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Page and Glossary");
             return en?.Glossary.Take(take).Skip(skip).ConvertFromEntityList<DocEntityGlossary,Glossary>(new List<Glossary>());
        }

        private List<Version> GetPageGlossaryVersion(PageJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityPage.GetPage(request.Id);
                ret = en?.Glossary.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetPageHelp(PageJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<Help>(currentUser, "Help", request.VisibleFields);
             var en = DocEntityPage.GetPage(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.PAGE, columnName: "Help", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Page and Help");
             return en?.Help.Take(take).Skip(skip).ConvertFromEntityList<DocEntityHelp,Help>(new List<Help>());
        }

        private List<Version> GetPageHelpVersion(PageJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityPage.GetPage(request.Id);
                ret = en?.Help.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetPageRole(PageJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<Role>(currentUser, "Role", request.VisibleFields);
             var en = DocEntityPage.GetPage(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.PAGE, columnName: "Roles", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Page and Role");
             return en?.Roles.Take(take).Skip(skip).ConvertFromEntityList<DocEntityRole,Role>(new List<Role>());
        }

        private List<Version> GetPageRoleVersion(PageJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityPage.GetPage(request.Id);
                ret = en?.Roles.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }
        
        public object Post(PageJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                case "app":
                    ret = _PostPageApp(request);
                    break;
                case "glossary":
                    ret = _PostPageGlossary(request);
                    break;
                case "help":
                    ret = _PostPageHelp(request);
                    break;
                case "role":
                    ret = _PostPageRole(request);
                    break;
                }
            });
            return ret;
        }


        private object _PostPageApp(PageJunction request)
        {
            var entity = DocEntityPage.GetPage(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Page found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Page");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityApp.GetApp(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.APP, columnName: "Apps")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Apps property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Page with objects that do not exist. No matching App could be found for {id}.");
                entity.Apps.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostPageGlossary(PageJunction request)
        {
            var entity = DocEntityPage.GetPage(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Page found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Page");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityGlossary.GetGlossary(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.GLOSSARY, columnName: "Glossary")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Glossary property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Page with objects that do not exist. No matching Glossary could be found for {id}.");
                entity.Glossary.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostPageHelp(PageJunction request)
        {
            var entity = DocEntityPage.GetPage(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Page found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Page");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityHelp.GetHelp(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.HELP, columnName: "Help")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Help property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Page with objects that do not exist. No matching Help could be found for {id}.");
                entity.Help.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostPageRole(PageJunction request)
        {
            var entity = DocEntityPage.GetPage(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Page found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Page");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityRole.GetRole(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.ROLE, columnName: "Roles")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Roles property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Page with objects that do not exist. No matching Role could be found for {id}.");
                entity.Roles.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        public object Delete(PageJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                case "app":
                    ret = _DeletePageApp(request);
                    break;
                case "glossary":
                    ret = _DeletePageGlossary(request);
                    break;
                case "help":
                    ret = _DeletePageHelp(request);
                    break;
                case "role":
                    ret = _DeletePageRole(request);
                    break;
                }
            });
            return ret;
        }


        private object _DeletePageApp(PageJunction request)
        {
            var entity = DocEntityPage.GetPage(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Page found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Page");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityApp.GetApp(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.APP, columnName: "Apps"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Page and App");
                if(null != relationship && false == relationship.IsRemoved) entity.Apps.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeletePageGlossary(PageJunction request)
        {
            var entity = DocEntityPage.GetPage(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Page found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Page");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityGlossary.GetGlossary(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.GLOSSARY, columnName: "Glossary"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Page and Glossary");
                if(null != relationship && false == relationship.IsRemoved) entity.Glossary.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeletePageHelp(PageJunction request)
        {
            var entity = DocEntityPage.GetPage(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Page found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Page");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityHelp.GetHelp(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.HELP, columnName: "Help"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Page and Help");
                if(null != relationship && false == relationship.IsRemoved) entity.Help.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeletePageRole(PageJunction request)
        {
            var entity = DocEntityPage.GetPage(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Page found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Page");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityRole.GetRole(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.ROLE, columnName: "Roles"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Page and Role");
                if(null != relationship && false == relationship.IsRemoved) entity.Roles.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private Page GetPage(Page request)
        {
            var id = request?.Id;
            Page ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<Page>(currentUser, "Page", request.VisibleFields);

            DocEntityPage entity = null;
            if(id.HasValue)
            {
                entity = DocEntityPage.GetPage(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Page found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

        public List<int> Any(PageIds request)
        {
            List<int> ret = null;
            if (currentUser.IsSuperAdmin)
            {
                Execute.Run(s => { ret = Execute.SelectAll<DocEntityPage>().Select(d => d.Id).ToList(); });
            }
            else
            {
                throw new HttpError(HttpStatusCode.Forbidden);
            }

            return ret;
        }
    }
}