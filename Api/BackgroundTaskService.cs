//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class BackgroundTaskService : DocServiceBase
    {
        public const string CACHE_KEY_PREFIX = DocEntityBackgroundTask.CACHE_KEY_PREFIX;
        private void _ExecSearch(BackgroundTaskSearch request, Action<IQueryable<DocEntityBackgroundTask>> callBack)
        {
            request = InitSearch(request);
            
            DocPermissionFactory.SetVisibleFields<BackgroundTask>(currentUser, "BackgroundTask", request.VisibleFields);

            var entities = Execute.SelectAll<DocEntityBackgroundTask>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new BackgroundTaskFullTextSearch(request);
                    entities = GetFullTextSearch(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                if(!DocTools.IsNullOrEmpty(request.App) && !DocTools.IsNullOrEmpty(request.App.Id))
                {
                    entities = entities.Where(en => en.App.Id == request.App.Id );
                }
                if(true == request.AppIds?.Any())
                {
                    entities = entities.Where(en => en.App.Id.In(request.AppIds));
                }
                if(!DocTools.IsNullOrEmpty(request.Description))
                    entities = entities.Where(en => en.Description.Contains(request.Description));
                if(request.Enabled.HasValue)
                    entities = entities.Where(en => request.Enabled.Value == en.Enabled);
                if(request.Frequency.HasValue)
                    entities = entities.Where(en => request.Frequency.Value == en.Frequency);
                if(request.HistoryRetention.HasValue)
                    entities = entities.Where(en => request.HistoryRetention.Value == en.HistoryRetention);
                        if(true == request.ItemsIds?.Any())
                        {
                            entities = entities.Where(en => en.Items.Any(r => r.Id.In(request.ItemsIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.LastRunVersion))
                    entities = entities.Where(en => en.LastRunVersion.Contains(request.LastRunVersion));
                if(request.LogError.HasValue)
                    entities = entities.Where(en => request.LogError.Value == en.LogError);
                if(request.LogInfo.HasValue)
                    entities = entities.Where(en => request.LogInfo.Value == en.LogInfo);
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(request.RowsToProcessPerIteration.HasValue)
                    entities = entities.Where(en => request.RowsToProcessPerIteration.Value == en.RowsToProcessPerIteration);
                if(request.RunNow.HasValue)
                    entities = entities.Where(en => request.RunNow.Value == en.RunNow);
                if(!DocTools.IsNullOrEmpty(request.StartAt))
                    entities = entities.Where(en => en.StartAt.Contains(request.StartAt));
                        if(true == request.TaskHistoryIds?.Any())
                        {
                            entities = entities.Where(en => en.TaskHistory.Any(r => r.Id.In(request.TaskHistoryIds)));
                        }

                entities = ApplyFilters(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            callBack?.Invoke(entities);
        }
        
        public object Post(BackgroundTaskSearch request)
        {
            object tryRet = null;
            Execute.Run(s =>
            {
                using (var cancellableRequest = base.Request.CreateCancellableRequest())
                {
                    var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                    try 
                    {
                        var ret = new List<BackgroundTask>();
                        _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityBackgroundTask,BackgroundTask>(ret, Execute, requestCancel));
                        tryRet = ret;
                    }
                    catch(Exception) { throw; }
                    finally
                    {
                        requestCancel?.CloseRequest();
                    }
                }
            });
            return tryRet;
        }

        public object Get(BackgroundTaskSearch request)
        {
            object tryRet = null;
            Execute.Run(s =>
            {
                using (var cancellableRequest = base.Request.CreateCancellableRequest())
                {
                    var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                    try 
                    {
                        var ret = new List<BackgroundTask>();
                        _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityBackgroundTask,BackgroundTask>(ret, Execute, requestCancel));
                        tryRet = ret;
                    }
                    catch(Exception) { throw; }
                    finally
                    {
                        requestCancel?.CloseRequest();
                    }
                }
            });
            return tryRet;
        }

        public object Post(BackgroundTaskVersion request) 
        {
            return Get(request);
        }

        public object Get(BackgroundTaskVersion request) 
        {
            var ret = new List<Version>();
            Execute.Run(s =>
            {
                _ExecSearch(request, (entities) => 
                {
                    ret = entities.Select(e => new Version(e.Id, e.VersionNo)).ToList();
                });
            });
            return ret;
        }

        public object Get(BackgroundTask request)
        {
            object ret = null;
            
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");

            Execute.Run(s =>
            {
                DocPermissionFactory.SetVisibleFields<BackgroundTask>(currentUser, "BackgroundTask", request.VisibleFields);
                ret = GetBackgroundTask(request);
            });
            return ret;
        }

        private BackgroundTask _AssignValues(BackgroundTask dtoSource, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (dtoSource == null || dtoSource.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "BackgroundTask"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();

            BackgroundTask ret = null;
            dtoSource = _InitAssignValues(dtoSource, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && dtoSource.Id > 0) return dtoSource;
            
            //First, assign all the variables, do database lookups and conversions
            var pApp = (dtoSource.App?.Id > 0) ? DocEntityApp.GetApp(dtoSource.App.Id) : null;
            var pDescription = dtoSource.Description;
            var pEnabled = dtoSource.Enabled;
            var pFrequency = dtoSource.Frequency;
            var pHistoryRetention = dtoSource.HistoryRetention;
            var pItems = dtoSource.Items?.ToList();
            var pLastRunVersion = dtoSource.LastRunVersion;
            var pLogError = dtoSource.LogError;
            var pLogInfo = dtoSource.LogInfo;
            var pName = dtoSource.Name;
            var pRowsToProcessPerIteration = dtoSource.RowsToProcessPerIteration;
            var pRunNow = dtoSource.RunNow;
            var pStartAt = dtoSource.StartAt;
            var pTaskHistory = dtoSource.TaskHistory?.ToList();

            DocEntityBackgroundTask entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityBackgroundTask(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityBackgroundTask.GetBackgroundTask(dtoSource.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityApp>(currentUser, dtoSource, pApp, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.App)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pApp, entity.App, nameof(dtoSource.App)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(dtoSource.App)} cannot be modified once set.");
                    entity.App = pApp;
                if(DocPermissionFactory.IsRequested<DocEntityApp>(dtoSource, pApp, nameof(dtoSource.App)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.App), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.App));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pDescription, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.Description)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pDescription, entity.Description, nameof(dtoSource.Description)))
                    entity.Description = pDescription;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pDescription, nameof(dtoSource.Description)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Description), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Description));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, dtoSource, pEnabled, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.Enabled)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pEnabled, entity.Enabled, nameof(dtoSource.Enabled)))
                    entity.Enabled = pEnabled;
                if(DocPermissionFactory.IsRequested<bool>(dtoSource, pEnabled, nameof(dtoSource.Enabled)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Enabled), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Enabled));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, dtoSource, pFrequency, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.Frequency)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pFrequency, entity.Frequency, nameof(dtoSource.Frequency)))
                    if(null != pFrequency)
                        entity.Frequency = (int) pFrequency;
                if(DocPermissionFactory.IsRequested<int?>(dtoSource, pFrequency, nameof(dtoSource.Frequency)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Frequency), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Frequency));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, dtoSource, pHistoryRetention, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.HistoryRetention)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pHistoryRetention, entity.HistoryRetention, nameof(dtoSource.HistoryRetention)))
                    entity.HistoryRetention = pHistoryRetention;
                if(DocPermissionFactory.IsRequested<int?>(dtoSource, pHistoryRetention, nameof(dtoSource.HistoryRetention)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.HistoryRetention), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.HistoryRetention));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pLastRunVersion, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.LastRunVersion)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pLastRunVersion, entity.LastRunVersion, nameof(dtoSource.LastRunVersion)))
                    entity.LastRunVersion = pLastRunVersion;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pLastRunVersion, nameof(dtoSource.LastRunVersion)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.LastRunVersion), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.LastRunVersion));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, dtoSource, pLogError, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.LogError)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pLogError, entity.LogError, nameof(dtoSource.LogError)))
                    entity.LogError = pLogError;
                if(DocPermissionFactory.IsRequested<bool>(dtoSource, pLogError, nameof(dtoSource.LogError)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.LogError), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.LogError));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, dtoSource, pLogInfo, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.LogInfo)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pLogInfo, entity.LogInfo, nameof(dtoSource.LogInfo)))
                    entity.LogInfo = pLogInfo;
                if(DocPermissionFactory.IsRequested<bool>(dtoSource, pLogInfo, nameof(dtoSource.LogInfo)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.LogInfo), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.LogInfo));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pName, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.Name)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pName, entity.Name, nameof(dtoSource.Name)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(dtoSource.Name)} cannot be modified once set.");
                    entity.Name = pName;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pName, nameof(dtoSource.Name)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Name), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Name));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, dtoSource, pRowsToProcessPerIteration, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.RowsToProcessPerIteration)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pRowsToProcessPerIteration, entity.RowsToProcessPerIteration, nameof(dtoSource.RowsToProcessPerIteration)))
                    if(null != pRowsToProcessPerIteration)
                        entity.RowsToProcessPerIteration = (int) pRowsToProcessPerIteration;
                if(DocPermissionFactory.IsRequested<int?>(dtoSource, pRowsToProcessPerIteration, nameof(dtoSource.RowsToProcessPerIteration)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.RowsToProcessPerIteration), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.RowsToProcessPerIteration));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, dtoSource, pRunNow, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.RunNow)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pRunNow, entity.RunNow, nameof(dtoSource.RunNow)))
                    entity.RunNow = pRunNow;
                if(DocPermissionFactory.IsRequested<bool>(dtoSource, pRunNow, nameof(dtoSource.RunNow)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.RunNow), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.RunNow));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pStartAt, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.StartAt)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pStartAt, entity.StartAt, nameof(dtoSource.StartAt)))
                    entity.StartAt = pStartAt;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pStartAt, nameof(dtoSource.StartAt)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.StartAt), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.StartAt));
                }
            }
            
            if (dtoSource.Locked) entity.Locked = dtoSource.Locked;

            entity.SaveChanges(permission);
            
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pItems, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.Items)))
            {
                if (true == pItems?.Any() )
                {
                    var requestedItems = pItems.Select(p => p.Id).Distinct().ToList();
                    var existsItems = Execute.SelectAll<DocEntityBackgroundTaskItem>().Where(e => e.Id.In(requestedItems)).Select( e => e.Id ).ToList();
                    if (existsItems.Count != requestedItems.Count)
                    {
                        var nonExists = requestedItems.Where(id => existsItems.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Items with objects that do not exist. No matching Items(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedItems.Where(id => entity.Items.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityBackgroundTaskItem.GetBackgroundTaskItem(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(BackgroundTask), columnName: nameof(dtoSource.Items)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.Items)} to {nameof(BackgroundTask)}");
                        entity.Items.Add(target);
                    });
                    var toRemove = entity.Items.Where(e => requestedItems.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityBackgroundTaskItem.GetBackgroundTaskItem(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(BackgroundTask), columnName: nameof(dtoSource.Items)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Items)} from {nameof(BackgroundTask)}");
                        entity.Items.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Items.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityBackgroundTaskItem.GetBackgroundTaskItem(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(BackgroundTask), columnName: nameof(dtoSource.Items)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Items)} from {nameof(BackgroundTask)}");
                        entity.Items.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pItems, nameof(dtoSource.Items)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Items), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Items));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pTaskHistory, permission, DocConstantModelName.BACKGROUNDTASK, nameof(dtoSource.TaskHistory)))
            {
                if (true == pTaskHistory?.Any() )
                {
                    var requestedTaskHistory = pTaskHistory.Select(p => p.Id).Distinct().ToList();
                    var existsTaskHistory = Execute.SelectAll<DocEntityBackgroundTaskHistory>().Where(e => e.Id.In(requestedTaskHistory)).Select( e => e.Id ).ToList();
                    if (existsTaskHistory.Count != requestedTaskHistory.Count)
                    {
                        var nonExists = requestedTaskHistory.Where(id => existsTaskHistory.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection TaskHistory with objects that do not exist. No matching TaskHistory(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedTaskHistory.Where(id => entity.TaskHistory.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityBackgroundTaskHistory.GetBackgroundTaskHistory(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(BackgroundTask), columnName: nameof(dtoSource.TaskHistory)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.TaskHistory)} to {nameof(BackgroundTask)}");
                        entity.TaskHistory.Add(target);
                    });
                    var toRemove = entity.TaskHistory.Where(e => requestedTaskHistory.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityBackgroundTaskHistory.GetBackgroundTaskHistory(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(BackgroundTask), columnName: nameof(dtoSource.TaskHistory)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.TaskHistory)} from {nameof(BackgroundTask)}");
                        entity.TaskHistory.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.TaskHistory.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityBackgroundTaskHistory.GetBackgroundTaskHistory(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(BackgroundTask), columnName: nameof(dtoSource.TaskHistory)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.TaskHistory)} from {nameof(BackgroundTask)}");
                        entity.TaskHistory.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pTaskHistory, nameof(dtoSource.TaskHistory)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.TaskHistory), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.TaskHistory));
                }
            }
            DocPermissionFactory.SetVisibleFields<BackgroundTask>(currentUser, nameof(BackgroundTask), dtoSource.VisibleFields);
            ret = entity.ToDto();

            return ret;
        }


        public List<BackgroundTask> Put(BackgroundTaskBatch request)
        {
            return Patch(request);
        }

        public BackgroundTask Put(BackgroundTask dtoSource)
        {
            return Patch(dtoSource);
        }

        public List<BackgroundTask> Patch(BackgroundTaskBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<BackgroundTask>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as BackgroundTask;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public BackgroundTask Patch(BackgroundTask dtoSource)
        {
            if(true != (dtoSource?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the BackgroundTask to patch.");
            
            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();
            
            BackgroundTask ret = null;
            Execute.Run(ssn =>
            {
                ret = _AssignValues(dtoSource, DocConstantPermission.EDIT, ssn);
            });
            return ret;
        }

        public object Get(BackgroundTaskJunction request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            object ret = null;
            var skip = (request.Skip > 0) ? request.Skip.Value : 0;
            var take = (request.Take > 0) ? request.Take.Value : int.MaxValue;
                        
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-1]?.ToLower().Trim();
            Execute.Run( s => 
            {
                switch(method)
                {
                case "backgroundtaskitem":
                    ret = _GetBackgroundTaskBackgroundTaskItem(request, skip, take);
                    break;
                case "backgroundtaskhistory":
                    ret = _GetBackgroundTaskBackgroundTaskHistory(request, skip, take);
                    break;
                }
            });
            return ret;
        }
        
        public object Get(BackgroundTaskJunctionVersion request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
            
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-2]?.ToLower().Trim();
            Execute.Run( ssn =>
            {
                switch(method)
                {
                }
            });
            return ret;
        }
        

        private object _GetBackgroundTaskBackgroundTaskItem(BackgroundTaskJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<BackgroundTaskItem>(currentUser, "BackgroundTaskItem", request.VisibleFields);
             var en = DocEntityBackgroundTask.GetBackgroundTask(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.BACKGROUNDTASK, columnName: "Items", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between BackgroundTask and BackgroundTaskItem");
             return en?.Items.Take(take).Skip(skip).ConvertFromEntityList<DocEntityBackgroundTaskItem,BackgroundTaskItem>(new List<BackgroundTaskItem>());
        }

        private object _GetBackgroundTaskBackgroundTaskHistory(BackgroundTaskJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<BackgroundTaskHistory>(currentUser, "BackgroundTaskHistory", request.VisibleFields);
             var en = DocEntityBackgroundTask.GetBackgroundTask(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.BACKGROUNDTASK, columnName: "TaskHistory", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between BackgroundTask and BackgroundTaskHistory");
             return en?.TaskHistory.Take(take).Skip(skip).ConvertFromEntityList<DocEntityBackgroundTaskHistory,BackgroundTaskHistory>(new List<BackgroundTaskHistory>());
        }
        
        public object Post(BackgroundTaskJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                }
            });
            return ret;
        }


        public object Delete(BackgroundTaskJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                }
            });
            return ret;
        }


        private BackgroundTask GetBackgroundTask(BackgroundTask request)
        {
            var id = request?.Id;
            BackgroundTask ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<BackgroundTask>(currentUser, "BackgroundTask", request.VisibleFields);

            DocEntityBackgroundTask entity = null;
            if(id.HasValue)
            {
                entity = DocEntityBackgroundTask.GetBackgroundTask(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No BackgroundTask found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

        public List<int> Any(BackgroundTaskIds request)
        {
            List<int> ret = null;
            if (currentUser.IsSuperAdmin)
            {
                Execute.Run(s => { ret = Execute.SelectAll<DocEntityBackgroundTask>().Select(d => d.Id).ToList(); });
            }
            else
            {
                throw new HttpError(HttpStatusCode.Forbidden);
            }
            return ret;
        }
    }
}