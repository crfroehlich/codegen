//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class DocumentService : DocServiceBase
    {
        public const string CACHE_KEY_PREFIX = DocEntityDocument.CACHE_KEY_PREFIX;
        private object _GetIdCache(Document request)
        {
            object ret = null;

            if (true != request.IgnoreCache)
            {
                var key = currentUser.GetApiCacheKey(DocConstantModelName.DOCUMENT);
                var cacheKey = $"Document_{key}_{request.Id}_{UrnId.Create<Document>(request.GetMD5Hash())}";
                ret = Request.ToOptimizedResultUsingCache(Cache, cacheKey, new TimeSpan(0, DocResources.Settings.SessionTimeout, 0), () =>
                {
                    object cachedRet = null;
                    cachedRet = GetDocument(request);
                    return cachedRet;
                });
            }
            ret = ret ?? GetDocument(request);
            return ret;
        }

        private object _GetSearchCache(DocumentSearch request, DocRequestCancellation requestCancel)
        {
            object tryRet = null;
            var ret = new List<Document>();

            //Keys need to be customized to factor in permissions/scoping. Often, including the current user's Role Id is sufficient in the key
            var key = currentUser.GetApiCacheKey(DocConstantModelName.DOCUMENT);
            var cacheKey = $"{CACHE_KEY_PREFIX}_{key}_{UrnId.Create<DocumentSearch>(request.GetMD5Hash())}";
            tryRet = Request.ToOptimizedResultUsingCache(Cache, cacheKey, new TimeSpan(0, DocResources.Settings.SessionTimeout, 0), () =>
            {
                _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityDocument,Document>(ret, Execute, requestCancel));
                return ret;
            });

            if(tryRet == null)
            {
                ret = new List<Document>();
                _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityDocument,Document>(ret, Execute, requestCancel));
                return ret;
            }
            else
            {
                return tryRet;
            }
        }
        private void _ExecSearch(DocumentSearch request, Action<IQueryable<DocEntityDocument>> callBack)
        {
            request = InitSearch(request);
            
            DocPermissionFactory.SetVisibleFields<Document>(currentUser, "Document", request.VisibleFields);

            var entities = Execute.SelectAll<DocEntityDocument>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new DocumentFullTextSearch(request);
                    entities = GetFullTextSearch(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                if(!DocTools.IsNullOrEmpty(request.Abstract))
                    entities = entities.Where(en => en.Abstract.Contains(request.Abstract));
                if(!DocTools.IsNullOrEmpty(request.AccessionID))
                    entities = entities.Where(en => en.AccessionID.Contains(request.AccessionID));
                if(!DocTools.IsNullOrEmpty(request.Acronym))
                    entities = entities.Where(en => en.Acronym.Contains(request.Acronym));
                if(!DocTools.IsNullOrEmpty(request.Authors))
                    entities = entities.Where(en => en.Authors.Contains(request.Authors));
                if(!DocTools.IsNullOrEmpty(request.CochraneID))
                    entities = entities.Where(en => en.CochraneID.Contains(request.CochraneID));
                if(!DocTools.IsNullOrEmpty(request.CorporateAuthor))
                    entities = entities.Where(en => en.CorporateAuthor.Contains(request.CorporateAuthor));
                if(!DocTools.IsNullOrEmpty(request.Country))
                    entities = entities.Where(en => en.Country.Contains(request.Country));
                if(!DocTools.IsNullOrEmpty(request.DatabaseType) && !DocTools.IsNullOrEmpty(request.DatabaseType.Id))
                {
                    entities = entities.Where(en => en.DatabaseType.Id == request.DatabaseType.Id );
                }
                if(true == request.DatabaseTypeIds?.Any())
                {
                    entities = entities.Where(en => en.DatabaseType.Id.In(request.DatabaseTypeIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.DatabaseType) && !DocTools.IsNullOrEmpty(request.DatabaseType.Name))
                {
                    entities = entities.Where(en => en.DatabaseType.Name == request.DatabaseType.Name );
                }
                if(true == request.DatabaseTypeNames?.Any())
                {
                    entities = entities.Where(en => en.DatabaseType.Name.In(request.DatabaseTypeNames));
                }
                if(!DocTools.IsNullOrEmpty(request.DocumentType) && !DocTools.IsNullOrEmpty(request.DocumentType.Id))
                {
                    entities = entities.Where(en => en.DocumentType.Id == request.DocumentType.Id );
                }
                if(true == request.DocumentTypeIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentType.Id.In(request.DocumentTypeIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.DocumentType) && !DocTools.IsNullOrEmpty(request.DocumentType.Name))
                {
                    entities = entities.Where(en => en.DocumentType.Name == request.DocumentType.Name );
                }
                if(true == request.DocumentTypeNames?.Any())
                {
                    entities = entities.Where(en => en.DocumentType.Name.In(request.DocumentTypeNames));
                }
                if(!DocTools.IsNullOrEmpty(request.DOI))
                    entities = entities.Where(en => en.DOI.Contains(request.DOI));
                if(!DocTools.IsNullOrEmpty(request.EmbaseAccessionNumber))
                    entities = entities.Where(en => en.EmbaseAccessionNumber.Contains(request.EmbaseAccessionNumber));
                if(!DocTools.IsNullOrEmpty(request.Emtree))
                    entities = entities.Where(en => en.Emtree.Contains(request.Emtree));
                if(!DocTools.IsNullOrEmpty(request.ErrataText))
                    entities = entities.Where(en => en.ErrataText.Contains(request.ErrataText));
                if(!DocTools.IsNullOrEmpty(request.FullText))
                    entities = entities.Where(en => en.FullText.Contains(request.FullText));
                if(!DocTools.IsNullOrEmpty(request.FullTextURL))
                    entities = entities.Where(en => en.FullTextURL.Contains(request.FullTextURL));
                if(!DocTools.IsNullOrEmpty(request.Import) && !DocTools.IsNullOrEmpty(request.Import.Id))
                {
                    entities = entities.Where(en => en.Import.Id == request.Import.Id );
                }
                if(true == request.ImportIds?.Any())
                {
                    entities = entities.Where(en => en.Import.Id.In(request.ImportIds));
                }
                if(!DocTools.IsNullOrEmpty(request.ImportType) && !DocTools.IsNullOrEmpty(request.ImportType.Id))
                {
                    entities = entities.Where(en => en.ImportType.Id == request.ImportType.Id );
                }
                if(true == request.ImportTypeIds?.Any())
                {
                    entities = entities.Where(en => en.ImportType.Id.In(request.ImportTypeIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.ImportType) && !DocTools.IsNullOrEmpty(request.ImportType.Name))
                {
                    entities = entities.Where(en => en.ImportType.Name == request.ImportType.Name );
                }
                if(true == request.ImportTypeNames?.Any())
                {
                    entities = entities.Where(en => en.ImportType.Name.In(request.ImportTypeNames));
                }
                if(!DocTools.IsNullOrEmpty(request.Institution))
                    entities = entities.Where(en => en.Institution.Contains(request.Institution));
                if(!DocTools.IsNullOrEmpty(request.ISSN))
                    entities = entities.Where(en => en.ISSN.Contains(request.ISSN));
                if(!DocTools.IsNullOrEmpty(request.Issue))
                    entities = entities.Where(en => en.Issue.Contains(request.Issue));
                if(!DocTools.IsNullOrEmpty(request.JournalTitle))
                    entities = entities.Where(en => en.JournalTitle.Contains(request.JournalTitle));
                if(!DocTools.IsNullOrEmpty(request.LegacySync))
                    entities = entities.Where(en => null != en.LegacySync && request.LegacySync.Value.Date == en.LegacySync.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.LegacySyncBefore))
                    entities = entities.Where(en => en.LegacySync <= request.LegacySyncBefore);
                if(!DocTools.IsNullOrEmpty(request.LegacySyncAfter))
                    entities = entities.Where(en => en.LegacySync >= request.LegacySyncAfter);
                        if(true == request.LookupTablesIds?.Any())
                        {
                            entities = entities.Where(en => en.LookupTables.Any(r => r.Id.In(request.LookupTablesIds)));
                        }
                if(request.MedlineID.HasValue)
                    entities = entities.Where(en => request.MedlineID.Value == en.MedlineID);
                if(!DocTools.IsNullOrEmpty(request.MeSH))
                    entities = entities.Where(en => en.MeSH.Contains(request.MeSH));
                if(!DocTools.IsNullOrEmpty(request.Pages))
                    entities = entities.Where(en => en.Pages.Contains(request.Pages));
                if(request.ParentChildStatus.HasValue)
                    entities = entities.Where(en => request.ParentChildStatus.Value == en.ParentChildStatus);
                if(request.ParentID.HasValue)
                    entities = entities.Where(en => request.ParentID.Value == en.ParentID);
                if(!DocTools.IsNullOrEmpty(request.PublicationDate))
                    entities = entities.Where(en => en.PublicationDate.Contains(request.PublicationDate));
                if(request.PublicationYear.HasValue)
                    entities = entities.Where(en => request.PublicationYear.Value == en.PublicationYear);
                if(!DocTools.IsNullOrEmpty(request.PubType))
                    entities = entities.Where(en => en.PubType.Contains(request.PubType));
                if(request.ReferenceStudy.HasValue)
                    entities = entities.Where(en => request.ReferenceStudy.Value == en.ReferenceStudy);
                if(!DocTools.IsNullOrEmpty(request.SecondarySourceID))
                    entities = entities.Where(en => en.SecondarySourceID.Contains(request.SecondarySourceID));
                if(!DocTools.IsNullOrEmpty(request.Source))
                    entities = entities.Where(en => en.Source.Contains(request.Source));
                if(!DocTools.IsNullOrEmpty(request.TaStudyDesign))
                    entities = entities.Where(en => en.TaStudyDesign.Contains(request.TaStudyDesign));
                if(!DocTools.IsNullOrEmpty(request.Title))
                    entities = entities.Where(en => en.Title.Contains(request.Title));
                if(request.TrialOutcome.HasValue)
                    entities = entities.Where(en => request.TrialOutcome.Value == en.TrialOutcome);
                        if(true == request.VariableDataIds?.Any())
                        {
                            entities = entities.Where(en => en.VariableData.Any(r => r.Id.In(request.VariableDataIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.Volume))
                    entities = entities.Where(en => en.Volume.Contains(request.Volume));

                entities = ApplyFilters(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            callBack?.Invoke(entities);
        }
        
        public object Post(DocumentSearch request)
        {
            object tryRet = null;
            Execute.Run(s =>
            {
                using (var cancellableRequest = base.Request.CreateCancellableRequest())
                {
                    var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                    try 
                    {
                        var ret = new List<Document>();
                        var settings = DocResources.Settings;
                        if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "document")) 
                        {
                            tryRet = _GetSearchCache(request, requestCancel);
                        }
                        if (tryRet == null)
                        {
                            _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityDocument,Document>(ret, Execute, requestCancel));
                            tryRet = ret;
                        }
                    }
                    catch(Exception) { throw; }
                    finally
                    {
                        requestCancel?.CloseRequest();
                    }
                }
            });
            return tryRet;
        }

        public object Get(DocumentSearch request)
        {
            object tryRet = null;
            Execute.Run(s =>
            {
                using (var cancellableRequest = base.Request.CreateCancellableRequest())
                {
                    var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                    try 
                    {
                        var ret = new List<Document>();
                        var settings = DocResources.Settings;
                        if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "document")) 
                        {
                            tryRet = _GetSearchCache(request, requestCancel);
                        }
                        if (tryRet == null)
                        {
                            _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityDocument,Document>(ret, Execute, requestCancel));
                            tryRet = ret;
                        }
                    }
                    catch(Exception) { throw; }
                    finally
                    {
                        requestCancel?.CloseRequest();
                    }
                }
            });
            return tryRet;
        }

        public object Post(DocumentVersion request) 
        {
            return Get(request);
        }

        public object Get(DocumentVersion request) 
        {
            var ret = new List<Version>();
            Execute.Run(s =>
            {
                _ExecSearch(request, (entities) => 
                {
                    ret = entities.Select(e => new Version(e.Id, e.VersionNo)).ToList();
                });
            });
            return ret;
        }

        public object Get(Document request)
        {
            object ret = null;
            
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");

            Execute.Run(s =>
            {
                DocPermissionFactory.SetVisibleFields<Document>(currentUser, "Document", request.VisibleFields);
                var settings = DocResources.Settings;
                if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "document")) 
                {
                    ret = _GetIdCache(request);
                }
                else 
                {
                    ret = GetDocument(request);
                }
            });
            return ret;
        }

        private Document _AssignValues(Document dtoSource, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (dtoSource == null || dtoSource.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "Document"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();

            Document ret = null;
            dtoSource = _InitAssignValues(dtoSource, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && dtoSource.Id > 0) return dtoSource;
            
            //First, assign all the variables, do database lookups and conversions
            var pAbstract = dtoSource.Abstract;
            var pAccessionID = dtoSource.AccessionID;
            var pAcronym = dtoSource.Acronym;
            var pAuthors = dtoSource.Authors;
            var pCochraneID = dtoSource.CochraneID;
            var pCorporateAuthor = dtoSource.CorporateAuthor;
            var pCountry = dtoSource.Country;
            var pCustomData = dtoSource.CustomData;
            DocEntityLookupTable pDatabaseType = GetLookup(DocConstantLookupTable.DATABASETYPE, dtoSource.DatabaseType?.Name, dtoSource.DatabaseType?.Id);
            var pDocumentSets = dtoSource.DocumentSets?.ToList();
            DocEntityLookupTable pDocumentType = GetLookup(DocConstantLookupTable.DOCUMENTTYPE, dtoSource.DocumentType?.Name, dtoSource.DocumentType?.Id);
            var pDOI = dtoSource.DOI;
            var pEmbaseAccessionNumber = dtoSource.EmbaseAccessionNumber;
            var pEmtree = dtoSource.Emtree;
            var pErrataText = dtoSource.ErrataText;
            var pFullText = dtoSource.FullText;
            var pFullTextURL = dtoSource.FullTextURL;
            var pImport = (dtoSource.Import?.Id > 0) ? DocEntityImportData.GetImportData(dtoSource.Import.Id) : null;
            DocEntityLookupTable pImportType = GetLookup(DocConstantLookupTable.STUDYIMPORTTYPE, dtoSource.ImportType?.Name, dtoSource.ImportType?.Id);
            var pInstitution = dtoSource.Institution;
            var pISSN = dtoSource.ISSN;
            var pIssue = dtoSource.Issue;
            var pJournalTitle = dtoSource.JournalTitle;
            var pLegacyModel = dtoSource.LegacyModel;
            var pLegacySync = dtoSource.LegacySync;
            var pLookupTables = dtoSource.LookupTables?.ToList();
            var pMedlineID = dtoSource.MedlineID;
            var pMeSH = dtoSource.MeSH;
            var pNonDigitizedDocumentSets = dtoSource.NonDigitizedDocumentSets?.ToList();
            var pPages = dtoSource.Pages;
            var pParentChildStatus = dtoSource.ParentChildStatus;
            var pParentID = dtoSource.ParentID;
            var pPublicationDate = dtoSource.PublicationDate;
            var pPublicationYear = dtoSource.PublicationYear;
            var pPubType = dtoSource.PubType;
            var pReferenceStudy = dtoSource.ReferenceStudy;
            var pSecondarySourceID = dtoSource.SecondarySourceID;
            var pSource = dtoSource.Source;
            var pStorageModel = dtoSource.StorageModel;
            var pSupplementalFiles = dtoSource.SupplementalFiles;
            var pTaStudyDesign = dtoSource.TaStudyDesign;
            var pTitle = dtoSource.Title;
            var pTrialOutcome = dtoSource.TrialOutcome;
            var pVariableData = dtoSource.VariableData?.ToList();
            var pVolume = dtoSource.Volume;

            DocEntityDocument entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityDocument(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityDocument.GetDocument(dtoSource.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pAbstract, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.Abstract)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pAbstract, entity.Abstract, nameof(dtoSource.Abstract)))
                    entity.Abstract = pAbstract;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pAbstract, nameof(dtoSource.Abstract)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Abstract), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Abstract));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pAccessionID, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.AccessionID)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pAccessionID, entity.AccessionID, nameof(dtoSource.AccessionID)))
                    entity.AccessionID = pAccessionID;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pAccessionID, nameof(dtoSource.AccessionID)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.AccessionID), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.AccessionID));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pAcronym, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.Acronym)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pAcronym, entity.Acronym, nameof(dtoSource.Acronym)))
                    entity.Acronym = pAcronym;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pAcronym, nameof(dtoSource.Acronym)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Acronym), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Acronym));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pAuthors, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.Authors)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pAuthors, entity.Authors, nameof(dtoSource.Authors)))
                    entity.Authors = pAuthors;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pAuthors, nameof(dtoSource.Authors)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Authors), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Authors));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pCochraneID, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.CochraneID)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pCochraneID, entity.CochraneID, nameof(dtoSource.CochraneID)))
                    entity.CochraneID = pCochraneID;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pCochraneID, nameof(dtoSource.CochraneID)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.CochraneID), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.CochraneID));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pCorporateAuthor, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.CorporateAuthor)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pCorporateAuthor, entity.CorporateAuthor, nameof(dtoSource.CorporateAuthor)))
                    entity.CorporateAuthor = pCorporateAuthor;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pCorporateAuthor, nameof(dtoSource.CorporateAuthor)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.CorporateAuthor), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.CorporateAuthor));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pCountry, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.Country)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pCountry, entity.Country, nameof(dtoSource.Country)))
                    entity.Country = pCountry;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pCountry, nameof(dtoSource.Country)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Country), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Country));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pCustomData, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.CustomData)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pCustomData, entity.CustomData, nameof(dtoSource.CustomData)))
                    entity.CustomData = pCustomData;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pCustomData, nameof(dtoSource.CustomData)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.CustomData), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.CustomData));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, dtoSource, pDatabaseType, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.DatabaseType)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pDatabaseType, entity.DatabaseType, nameof(dtoSource.DatabaseType)))
                    entity.DatabaseType = pDatabaseType;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(dtoSource, pDatabaseType, nameof(dtoSource.DatabaseType)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.DatabaseType), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.DatabaseType));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, dtoSource, pDocumentType, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.DocumentType)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pDocumentType, entity.DocumentType, nameof(dtoSource.DocumentType)))
                    entity.DocumentType = pDocumentType;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(dtoSource, pDocumentType, nameof(dtoSource.DocumentType)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.DocumentType), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.DocumentType));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pDOI, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.DOI)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pDOI, entity.DOI, nameof(dtoSource.DOI)))
                    entity.DOI = pDOI;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pDOI, nameof(dtoSource.DOI)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.DOI), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.DOI));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pEmbaseAccessionNumber, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.EmbaseAccessionNumber)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pEmbaseAccessionNumber, entity.EmbaseAccessionNumber, nameof(dtoSource.EmbaseAccessionNumber)))
                    entity.EmbaseAccessionNumber = pEmbaseAccessionNumber;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pEmbaseAccessionNumber, nameof(dtoSource.EmbaseAccessionNumber)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.EmbaseAccessionNumber), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.EmbaseAccessionNumber));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pEmtree, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.Emtree)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pEmtree, entity.Emtree, nameof(dtoSource.Emtree)))
                    entity.Emtree = pEmtree;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pEmtree, nameof(dtoSource.Emtree)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Emtree), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Emtree));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pErrataText, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.ErrataText)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pErrataText, entity.ErrataText, nameof(dtoSource.ErrataText)))
                    entity.ErrataText = pErrataText;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pErrataText, nameof(dtoSource.ErrataText)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.ErrataText), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.ErrataText));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pFullText, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.FullText)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pFullText, entity.FullText, nameof(dtoSource.FullText)))
                    entity.FullText = pFullText;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pFullText, nameof(dtoSource.FullText)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.FullText), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.FullText));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pFullTextURL, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.FullTextURL)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pFullTextURL, entity.FullTextURL, nameof(dtoSource.FullTextURL)))
                    entity.FullTextURL = pFullTextURL;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pFullTextURL, nameof(dtoSource.FullTextURL)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.FullTextURL), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.FullTextURL));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityImportData>(currentUser, dtoSource, pImport, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.Import)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pImport, entity.Import, nameof(dtoSource.Import)))
                    entity.Import = pImport;
                if(DocPermissionFactory.IsRequested<DocEntityImportData>(dtoSource, pImport, nameof(dtoSource.Import)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Import), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Import));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, dtoSource, pImportType, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.ImportType)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pImportType, entity.ImportType, nameof(dtoSource.ImportType)))
                    entity.ImportType = pImportType;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(dtoSource, pImportType, nameof(dtoSource.ImportType)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.ImportType), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.ImportType));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pInstitution, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.Institution)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pInstitution, entity.Institution, nameof(dtoSource.Institution)))
                    entity.Institution = pInstitution;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pInstitution, nameof(dtoSource.Institution)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Institution), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Institution));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pISSN, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.ISSN)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pISSN, entity.ISSN, nameof(dtoSource.ISSN)))
                    entity.ISSN = pISSN;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pISSN, nameof(dtoSource.ISSN)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.ISSN), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.ISSN));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pIssue, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.Issue)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pIssue, entity.Issue, nameof(dtoSource.Issue)))
                    entity.Issue = pIssue;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pIssue, nameof(dtoSource.Issue)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Issue), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Issue));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pJournalTitle, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.JournalTitle)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pJournalTitle, entity.JournalTitle, nameof(dtoSource.JournalTitle)))
                    entity.JournalTitle = pJournalTitle;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pJournalTitle, nameof(dtoSource.JournalTitle)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.JournalTitle), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.JournalTitle));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pLegacyModel, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.LegacyModel)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pLegacyModel, entity.LegacyModel, nameof(dtoSource.LegacyModel)))
                    entity.LegacyModel = pLegacyModel;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pLegacyModel, nameof(dtoSource.LegacyModel)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.LegacyModel), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.LegacyModel));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, dtoSource, pLegacySync, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.LegacySync)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pLegacySync, entity.LegacySync, nameof(dtoSource.LegacySync)))
                    entity.LegacySync = pLegacySync;
                if(DocPermissionFactory.IsRequested<DateTime?>(dtoSource, pLegacySync, nameof(dtoSource.LegacySync)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.LegacySync), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.LegacySync));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, dtoSource, pMedlineID, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.MedlineID)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pMedlineID, entity.MedlineID, nameof(dtoSource.MedlineID)))
                    entity.MedlineID = pMedlineID;
                if(DocPermissionFactory.IsRequested<int?>(dtoSource, pMedlineID, nameof(dtoSource.MedlineID)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.MedlineID), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.MedlineID));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pMeSH, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.MeSH)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pMeSH, entity.MeSH, nameof(dtoSource.MeSH)))
                    entity.MeSH = pMeSH;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pMeSH, nameof(dtoSource.MeSH)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.MeSH), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.MeSH));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pPages, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.Pages)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pPages, entity.Pages, nameof(dtoSource.Pages)))
                    entity.Pages = pPages;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pPages, nameof(dtoSource.Pages)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Pages), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Pages));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<char?>(currentUser, dtoSource, pParentChildStatus, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.ParentChildStatus)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pParentChildStatus, entity.ParentChildStatus, nameof(dtoSource.ParentChildStatus)))
                    entity.ParentChildStatus = pParentChildStatus;
                if(DocPermissionFactory.IsRequested<char?>(dtoSource, pParentChildStatus, nameof(dtoSource.ParentChildStatus)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.ParentChildStatus), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.ParentChildStatus));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, dtoSource, pParentID, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.ParentID)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pParentID, entity.ParentID, nameof(dtoSource.ParentID)))
                    entity.ParentID = pParentID;
                if(DocPermissionFactory.IsRequested<int?>(dtoSource, pParentID, nameof(dtoSource.ParentID)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.ParentID), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.ParentID));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pPublicationDate, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.PublicationDate)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pPublicationDate, entity.PublicationDate, nameof(dtoSource.PublicationDate)))
                    entity.PublicationDate = pPublicationDate;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pPublicationDate, nameof(dtoSource.PublicationDate)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.PublicationDate), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.PublicationDate));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, dtoSource, pPublicationYear, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.PublicationYear)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pPublicationYear, entity.PublicationYear, nameof(dtoSource.PublicationYear)))
                    entity.PublicationYear = pPublicationYear;
                if(DocPermissionFactory.IsRequested<int?>(dtoSource, pPublicationYear, nameof(dtoSource.PublicationYear)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.PublicationYear), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.PublicationYear));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pPubType, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.PubType)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pPubType, entity.PubType, nameof(dtoSource.PubType)))
                    entity.PubType = pPubType;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pPubType, nameof(dtoSource.PubType)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.PubType), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.PubType));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, dtoSource, pReferenceStudy, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.ReferenceStudy)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pReferenceStudy, entity.ReferenceStudy, nameof(dtoSource.ReferenceStudy)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(dtoSource.ReferenceStudy)} cannot be modified once set.");
                    if(null != pReferenceStudy)
                        entity.ReferenceStudy = (int) pReferenceStudy;
                if(DocPermissionFactory.IsRequested<int?>(dtoSource, pReferenceStudy, nameof(dtoSource.ReferenceStudy)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.ReferenceStudy), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.ReferenceStudy));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pSecondarySourceID, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.SecondarySourceID)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pSecondarySourceID, entity.SecondarySourceID, nameof(dtoSource.SecondarySourceID)))
                    entity.SecondarySourceID = pSecondarySourceID;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pSecondarySourceID, nameof(dtoSource.SecondarySourceID)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.SecondarySourceID), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.SecondarySourceID));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pSource, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.Source)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pSource, entity.Source, nameof(dtoSource.Source)))
                    entity.Source = pSource;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pSource, nameof(dtoSource.Source)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Source), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Source));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pStorageModel, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.StorageModel)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pStorageModel, entity.StorageModel, nameof(dtoSource.StorageModel)))
                    entity.StorageModel = pStorageModel;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pStorageModel, nameof(dtoSource.StorageModel)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.StorageModel), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.StorageModel));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pSupplementalFiles, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.SupplementalFiles)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pSupplementalFiles, entity.SupplementalFiles, nameof(dtoSource.SupplementalFiles)))
                    entity.SupplementalFiles = pSupplementalFiles;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pSupplementalFiles, nameof(dtoSource.SupplementalFiles)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.SupplementalFiles), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.SupplementalFiles));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pTaStudyDesign, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.TaStudyDesign)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pTaStudyDesign, entity.TaStudyDesign, nameof(dtoSource.TaStudyDesign)))
                    entity.TaStudyDesign = pTaStudyDesign;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pTaStudyDesign, nameof(dtoSource.TaStudyDesign)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.TaStudyDesign), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.TaStudyDesign));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pTitle, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.Title)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pTitle, entity.Title, nameof(dtoSource.Title)))
                    entity.Title = pTitle;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pTitle, nameof(dtoSource.Title)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Title), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Title));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<short?>(currentUser, dtoSource, pTrialOutcome, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.TrialOutcome)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pTrialOutcome, entity.TrialOutcome, nameof(dtoSource.TrialOutcome)))
                    entity.TrialOutcome = pTrialOutcome;
                if(DocPermissionFactory.IsRequested<short?>(dtoSource, pTrialOutcome, nameof(dtoSource.TrialOutcome)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.TrialOutcome), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.TrialOutcome));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pVolume, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.Volume)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pVolume, entity.Volume, nameof(dtoSource.Volume)))
                    entity.Volume = pVolume;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pVolume, nameof(dtoSource.Volume)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Volume), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Volume));
                }
            }
            
            if (dtoSource.Locked) entity.Locked = dtoSource.Locked;

            entity.SaveChanges(permission);
            
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pDocumentSets, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.DocumentSets)))
            {
                if (true == pDocumentSets?.Any() )
                {
                    var requestedDocumentSets = pDocumentSets.Select(p => p.Id).Distinct().ToList();
                    var existsDocumentSets = Execute.SelectAll<DocEntityDocumentSet>().Where(e => e.Id.In(requestedDocumentSets)).Select( e => e.Id ).ToList();
                    if (existsDocumentSets.Count != requestedDocumentSets.Count)
                    {
                        var nonExists = requestedDocumentSets.Where(id => existsDocumentSets.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection DocumentSets with objects that do not exist. No matching DocumentSets(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedDocumentSets.Where(id => entity.DocumentSets.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Document), columnName: nameof(dtoSource.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.DocumentSets)} to {nameof(Document)}");
                        entity.DocumentSets.Add(target);
                    });
                    var toRemove = entity.DocumentSets.Where(e => requestedDocumentSets.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(dtoSource.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.DocumentSets)} from {nameof(Document)}");
                        entity.DocumentSets.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.DocumentSets.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(dtoSource.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.DocumentSets)} from {nameof(Document)}");
                        entity.DocumentSets.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pDocumentSets, nameof(dtoSource.DocumentSets)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.DocumentSets), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.DocumentSets));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pLookupTables, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.LookupTables)))
            {
                if (true == pLookupTables?.Any() )
                {
                    var requestedLookupTables = pLookupTables.Select(p => p.Id).Distinct().ToList();
                    var existsLookupTables = Execute.SelectAll<DocEntityLookupTable>().Where(e => e.Id.In(requestedLookupTables)).Select( e => e.Id ).ToList();
                    if (existsLookupTables.Count != requestedLookupTables.Count)
                    {
                        var nonExists = requestedLookupTables.Where(id => existsLookupTables.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection LookupTables with objects that do not exist. No matching LookupTables(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedLookupTables.Where(id => entity.LookupTables.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityLookupTable.GetLookupTable(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Document), columnName: nameof(dtoSource.LookupTables)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.LookupTables)} to {nameof(Document)}");
                        entity.LookupTables.Add(target);
                    });
                    var toRemove = entity.LookupTables.Where(e => requestedLookupTables.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityLookupTable.GetLookupTable(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(dtoSource.LookupTables)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.LookupTables)} from {nameof(Document)}");
                        entity.LookupTables.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.LookupTables.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityLookupTable.GetLookupTable(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(dtoSource.LookupTables)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.LookupTables)} from {nameof(Document)}");
                        entity.LookupTables.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pLookupTables, nameof(dtoSource.LookupTables)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.LookupTables), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.LookupTables));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pNonDigitizedDocumentSets, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.NonDigitizedDocumentSets)))
            {
                if (true == pNonDigitizedDocumentSets?.Any() )
                {
                    var requestedNonDigitizedDocumentSets = pNonDigitizedDocumentSets.Select(p => p.Id).Distinct().ToList();
                    var existsNonDigitizedDocumentSets = Execute.SelectAll<DocEntityDocumentSet>().Where(e => e.Id.In(requestedNonDigitizedDocumentSets)).Select( e => e.Id ).ToList();
                    if (existsNonDigitizedDocumentSets.Count != requestedNonDigitizedDocumentSets.Count)
                    {
                        var nonExists = requestedNonDigitizedDocumentSets.Where(id => existsNonDigitizedDocumentSets.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection NonDigitizedDocumentSets with objects that do not exist. No matching NonDigitizedDocumentSets(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedNonDigitizedDocumentSets.Where(id => entity.NonDigitizedDocumentSets.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Document), columnName: nameof(dtoSource.NonDigitizedDocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.NonDigitizedDocumentSets)} to {nameof(Document)}");
                        entity.NonDigitizedDocumentSets.Add(target);
                    });
                    var toRemove = entity.NonDigitizedDocumentSets.Where(e => requestedNonDigitizedDocumentSets.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(dtoSource.NonDigitizedDocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.NonDigitizedDocumentSets)} from {nameof(Document)}");
                        entity.NonDigitizedDocumentSets.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.NonDigitizedDocumentSets.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(dtoSource.NonDigitizedDocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.NonDigitizedDocumentSets)} from {nameof(Document)}");
                        entity.NonDigitizedDocumentSets.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pNonDigitizedDocumentSets, nameof(dtoSource.NonDigitizedDocumentSets)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.NonDigitizedDocumentSets), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.NonDigitizedDocumentSets));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pVariableData, permission, DocConstantModelName.DOCUMENT, nameof(dtoSource.VariableData)))
            {
                if (true == pVariableData?.Any() )
                {
                    var requestedVariableData = pVariableData.Select(p => p.Id).Distinct().ToList();
                    var existsVariableData = Execute.SelectAll<DocEntityVariableInstance>().Where(e => e.Id.In(requestedVariableData)).Select( e => e.Id ).ToList();
                    if (existsVariableData.Count != requestedVariableData.Count)
                    {
                        var nonExists = requestedVariableData.Where(id => existsVariableData.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection VariableData with objects that do not exist. No matching VariableData(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedVariableData.Where(id => entity.VariableData.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityVariableInstance.GetVariableInstance(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Document), columnName: nameof(dtoSource.VariableData)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.VariableData)} to {nameof(Document)}");
                        entity.VariableData.Add(target);
                    });
                    var toRemove = entity.VariableData.Where(e => requestedVariableData.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityVariableInstance.GetVariableInstance(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(dtoSource.VariableData)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.VariableData)} from {nameof(Document)}");
                        entity.VariableData.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.VariableData.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityVariableInstance.GetVariableInstance(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(dtoSource.VariableData)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.VariableData)} from {nameof(Document)}");
                        entity.VariableData.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pVariableData, nameof(dtoSource.VariableData)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.VariableData), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.VariableData));
                }
            }
            DocPermissionFactory.SetVisibleFields<Document>(currentUser, nameof(Document), dtoSource.VisibleFields);
            ret = entity.ToDto();

            return ret;
        }
        public Document Post(Document dtoSource)
        {
            if(dtoSource == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();

            Document ret = null;

            Execute.Run(ssn =>
            {
                if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "Document")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                ret = _AssignValues(dtoSource, DocConstantPermission.ADD, ssn);
            });

            return ret;
        }
   
        public List<Document> Post(DocumentBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Document>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as Document;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Document Post(DocumentCopy request)
        {
            Document ret = null;
            Execute.Run(ssn =>
            {
                var entity = DocEntityDocument.GetDocument(request?.Id);
                if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");
                
                    var pAbstract = entity.Abstract;
                    var pAccessionID = entity.AccessionID;
                    if(!DocTools.IsNullOrEmpty(pAccessionID))
                        pAccessionID += " (Copy)";
                    var pAcronym = entity.Acronym;
                    if(!DocTools.IsNullOrEmpty(pAcronym))
                        pAcronym += " (Copy)";
                    var pAuthors = entity.Authors;
                    if(!DocTools.IsNullOrEmpty(pAuthors))
                        pAuthors += " (Copy)";
                    var pCochraneID = entity.CochraneID;
                    if(!DocTools.IsNullOrEmpty(pCochraneID))
                        pCochraneID += " (Copy)";
                    var pCorporateAuthor = entity.CorporateAuthor;
                    if(!DocTools.IsNullOrEmpty(pCorporateAuthor))
                        pCorporateAuthor += " (Copy)";
                    var pCountry = entity.Country;
                    if(!DocTools.IsNullOrEmpty(pCountry))
                        pCountry += " (Copy)";
                    var pCustomData = entity.CustomData;
                    var pDatabaseType = entity.DatabaseType;
                    var pDocumentSets = entity.DocumentSets.ToList();
                    var pDocumentType = entity.DocumentType;
                    var pDOI = entity.DOI;
                    if(!DocTools.IsNullOrEmpty(pDOI))
                        pDOI += " (Copy)";
                    var pEmbaseAccessionNumber = entity.EmbaseAccessionNumber;
                    if(!DocTools.IsNullOrEmpty(pEmbaseAccessionNumber))
                        pEmbaseAccessionNumber += " (Copy)";
                    var pEmtree = entity.Emtree;
                    if(!DocTools.IsNullOrEmpty(pEmtree))
                        pEmtree += " (Copy)";
                    var pErrataText = entity.ErrataText;
                    if(!DocTools.IsNullOrEmpty(pErrataText))
                        pErrataText += " (Copy)";
                    var pFullText = entity.FullText;
                    if(!DocTools.IsNullOrEmpty(pFullText))
                        pFullText += " (Copy)";
                    var pFullTextURL = entity.FullTextURL;
                    if(!DocTools.IsNullOrEmpty(pFullTextURL))
                        pFullTextURL += " (Copy)";
                    var pImport = entity.Import;
                    var pImportType = entity.ImportType;
                    var pInstitution = entity.Institution;
                    if(!DocTools.IsNullOrEmpty(pInstitution))
                        pInstitution += " (Copy)";
                    var pISSN = entity.ISSN;
                    if(!DocTools.IsNullOrEmpty(pISSN))
                        pISSN += " (Copy)";
                    var pIssue = entity.Issue;
                    if(!DocTools.IsNullOrEmpty(pIssue))
                        pIssue += " (Copy)";
                    var pJournalTitle = entity.JournalTitle;
                    if(!DocTools.IsNullOrEmpty(pJournalTitle))
                        pJournalTitle += " (Copy)";
                    var pLegacyModel = entity.LegacyModel;
                    var pLegacySync = entity.LegacySync;
                    var pLookupTables = entity.LookupTables.ToList();
                    var pMedlineID = entity.MedlineID;
                    var pMeSH = entity.MeSH;
                    if(!DocTools.IsNullOrEmpty(pMeSH))
                        pMeSH += " (Copy)";
                    var pNonDigitizedDocumentSets = entity.NonDigitizedDocumentSets.ToList();
                    var pPages = entity.Pages;
                    if(!DocTools.IsNullOrEmpty(pPages))
                        pPages += " (Copy)";
                    var pParentChildStatus = entity.ParentChildStatus;
                    var pParentID = entity.ParentID;
                    var pPublicationDate = entity.PublicationDate;
                    if(!DocTools.IsNullOrEmpty(pPublicationDate))
                        pPublicationDate += " (Copy)";
                    var pPublicationYear = entity.PublicationYear;
                    var pPubType = entity.PubType;
                    if(!DocTools.IsNullOrEmpty(pPubType))
                        pPubType += " (Copy)";
                    var pReferenceStudy = entity.ReferenceStudy;
                    var pSecondarySourceID = entity.SecondarySourceID;
                    if(!DocTools.IsNullOrEmpty(pSecondarySourceID))
                        pSecondarySourceID += " (Copy)";
                    var pSource = entity.Source;
                    if(!DocTools.IsNullOrEmpty(pSource))
                        pSource += " (Copy)";
                    var pStorageModel = entity.StorageModel;
                    var pSupplementalFiles = entity.SupplementalFiles;
                    var pTaStudyDesign = entity.TaStudyDesign;
                    if(!DocTools.IsNullOrEmpty(pTaStudyDesign))
                        pTaStudyDesign += " (Copy)";
                    var pTitle = entity.Title;
                    if(!DocTools.IsNullOrEmpty(pTitle))
                        pTitle += " (Copy)";
                    var pTrialOutcome = entity.TrialOutcome;
                    var pVariableData = entity.VariableData.ToList();
                    var pVolume = entity.Volume;
                    if(!DocTools.IsNullOrEmpty(pVolume))
                        pVolume += " (Copy)";
                var copy = new DocEntityDocument(ssn)
                {
                    Hash = Guid.NewGuid()
                                , Abstract = pAbstract
                                , AccessionID = pAccessionID
                                , Acronym = pAcronym
                                , Authors = pAuthors
                                , CochraneID = pCochraneID
                                , CorporateAuthor = pCorporateAuthor
                                , Country = pCountry
                                , CustomData = pCustomData
                                , DatabaseType = pDatabaseType
                                , DocumentType = pDocumentType
                                , DOI = pDOI
                                , EmbaseAccessionNumber = pEmbaseAccessionNumber
                                , Emtree = pEmtree
                                , ErrataText = pErrataText
                                , FullText = pFullText
                                , FullTextURL = pFullTextURL
                                , Import = pImport
                                , ImportType = pImportType
                                , Institution = pInstitution
                                , ISSN = pISSN
                                , Issue = pIssue
                                , JournalTitle = pJournalTitle
                                , LegacyModel = pLegacyModel
                                , LegacySync = pLegacySync
                                , MedlineID = pMedlineID
                                , MeSH = pMeSH
                                , Pages = pPages
                                , ParentChildStatus = pParentChildStatus
                                , ParentID = pParentID
                                , PublicationDate = pPublicationDate
                                , PublicationYear = pPublicationYear
                                , PubType = pPubType
                                , ReferenceStudy = pReferenceStudy
                                , SecondarySourceID = pSecondarySourceID
                                , Source = pSource
                                , StorageModel = pStorageModel
                                , SupplementalFiles = pSupplementalFiles
                                , TaStudyDesign = pTaStudyDesign
                                , Title = pTitle
                                , TrialOutcome = pTrialOutcome
                                , Volume = pVolume
                };
                            foreach(var item in pDocumentSets)
                            {
                                entity.DocumentSets.Add(item);
                            }

                            foreach(var item in pLookupTables)
                            {
                                entity.LookupTables.Add(item);
                            }

                            foreach(var item in pNonDigitizedDocumentSets)
                            {
                                entity.NonDigitizedDocumentSets.Add(item);
                            }

                            foreach(var item in pVariableData)
                            {
                                entity.VariableData.Add(item);
                            }

                copy.SaveChanges(DocConstantPermission.ADD);
                ret = copy.ToDto();
            });
            return ret;
        }


        public List<Document> Put(DocumentBatch request)
        {
            return Patch(request);
        }

        public Document Put(Document dtoSource)
        {
            return Patch(dtoSource);
        }

        public List<Document> Patch(DocumentBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Document>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as Document;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Document Patch(Document dtoSource)
        {
            if(true != (dtoSource?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the Document to patch.");
            
            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();
            
            Document ret = null;
            Execute.Run(ssn =>
            {
                ret = _AssignValues(dtoSource, DocConstantPermission.EDIT, ssn);
            });
            return ret;
        }

        public void Delete(DocumentBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(Document request)
        {
            Execute.Run(ssn =>
            {
                var en = DocEntityDocument.GetDocument(request?.Id);

                if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No Document could be found for Id {request?.Id}.");
                if(en.IsRemoved) return;
                
                if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                en.Remove();
            });
        }

        public void Delete(DocumentSearch request)
        {
            var matches = Get(request) as List<Document>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");

            Execute.Run(ssn =>
            {
                matches.ForEach(match =>
                {
                    Delete(match);
                });
            });
        }
        public object Get(DocumentJunction request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            object ret = null;
            var skip = (request.Skip > 0) ? request.Skip.Value : 0;
            var take = (request.Take > 0) ? request.Take.Value : int.MaxValue;
                        
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-1]?.ToLower().Trim();
            Execute.Run( s => 
            {
                switch(method)
                {
                case "documentset":
                    ret = _GetDocumentDocumentSet(request, skip, take);
                    break;
                case "lookuptable":
                    ret = _GetDocumentLookupTable(request, skip, take);
                    break;
                case "nondigitizeddocumentset":
                    ret = _GetDocumentNonDigitizedDocumentSet(request, skip, take);
                    break;
                case "variableinstance":
                    ret = _GetDocumentVariableInstance(request, skip, take);
                    break;
                }
            });
            return ret;
        }
        
        public object Get(DocumentJunctionVersion request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
            
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-2]?.ToLower().Trim();
            Execute.Run( ssn =>
            {
                switch(method)
                {
                case "documentset":
                    ret = GetDocumentDocumentSetVersion(request);
                    break;
                case "lookuptable":
                    ret = GetDocumentLookupTableVersion(request);
                    break;
                case "nondigitizeddocumentset":
                    ret = GetDocumentNonDigitizedDocumentSetVersion(request);
                    break;
                case "variableinstance":
                    ret = GetDocumentVariableInstanceVersion(request);
                    break;
                }
            });
            return ret;
        }
        

        private object _GetDocumentDocumentSet(DocumentJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<DocumentSet>(currentUser, "DocumentSet", request.VisibleFields);
             var en = DocEntityDocument.GetDocument(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.DOCUMENT, columnName: "DocumentSets", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Document and DocumentSet");
             return en?.DocumentSets.Take(take).Skip(skip).ConvertFromEntityList<DocEntityDocumentSet,DocumentSet>(new List<DocumentSet>());
        }

        private List<Version> GetDocumentDocumentSetVersion(DocumentJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityDocument.GetDocument(request.Id);
                ret = en?.DocumentSets.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetDocumentLookupTable(DocumentJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<LookupTable>(currentUser, "LookupTable", request.VisibleFields);
             var en = DocEntityDocument.GetDocument(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.DOCUMENT, columnName: "LookupTables", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Document and LookupTable");
             return en?.LookupTables.Take(take).Skip(skip).ConvertFromEntityList<DocEntityLookupTable,LookupTable>(new List<LookupTable>());
        }

        private List<Version> GetDocumentLookupTableVersion(DocumentJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityDocument.GetDocument(request.Id);
                ret = en?.LookupTables.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetDocumentNonDigitizedDocumentSet(DocumentJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<DocumentSet>(currentUser, "DocumentSet", request.VisibleFields);
             var en = DocEntityDocument.GetDocument(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.DOCUMENT, columnName: "NonDigitizedDocumentSets", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Document and DocumentSet");
             return en?.NonDigitizedDocumentSets.Take(take).Skip(skip).ConvertFromEntityList<DocEntityDocumentSet,DocumentSet>(new List<DocumentSet>());
        }

        private List<Version> GetDocumentNonDigitizedDocumentSetVersion(DocumentJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityDocument.GetDocument(request.Id);
                ret = en?.NonDigitizedDocumentSets.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetDocumentVariableInstance(DocumentJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<VariableInstance>(currentUser, "VariableInstance", request.VisibleFields);
             var en = DocEntityDocument.GetDocument(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.DOCUMENT, columnName: "VariableData", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Document and VariableInstance");
             return en?.VariableData.Take(take).Skip(skip).ConvertFromEntityList<DocEntityVariableInstance,VariableInstance>(new List<VariableInstance>());
        }

        private List<Version> GetDocumentVariableInstanceVersion(DocumentJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityDocument.GetDocument(request.Id);
                ret = en?.VariableData.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }
        
        public object Post(DocumentJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                case "documentset":
                    ret = _PostDocumentDocumentSet(request);
                    break;
                case "lookuptable":
                    ret = _PostDocumentLookupTable(request);
                    break;
                case "nondigitizeddocumentset":
                    ret = _PostDocumentNonDigitizedDocumentSet(request);
                    break;
                case "variableinstance":
                    ret = _PostDocumentVariableInstance(request);
                    break;
                }
            });
            return ret;
        }


        private object _PostDocumentDocumentSet(DocumentJunction request)
        {
            var entity = DocEntityDocument.GetDocument(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Document found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Document");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityDocumentSet.GetDocumentSet(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.DOCUMENTSET, columnName: "DocumentSets")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the DocumentSets property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Document with objects that do not exist. No matching DocumentSet could be found for {id}.");
                entity.DocumentSets.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostDocumentLookupTable(DocumentJunction request)
        {
            var entity = DocEntityDocument.GetDocument(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Document found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Document");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityLookupTable.GetLookupTable(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.LOOKUPTABLE, columnName: "LookupTables")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the LookupTables property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Document with objects that do not exist. No matching LookupTable could be found for {id}.");
                entity.LookupTables.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostDocumentNonDigitizedDocumentSet(DocumentJunction request)
        {
            var entity = DocEntityDocument.GetDocument(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Document found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Document");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityDocumentSet.GetDocumentSet(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.DOCUMENTSET, columnName: "NonDigitizedDocumentSets")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the NonDigitizedDocumentSets property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Document with objects that do not exist. No matching DocumentSet could be found for {id}.");
                entity.NonDigitizedDocumentSets.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostDocumentVariableInstance(DocumentJunction request)
        {
            var entity = DocEntityDocument.GetDocument(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Document found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Document");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityVariableInstance.GetVariableInstance(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.VARIABLEINSTANCE, columnName: "VariableData")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the VariableData property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Document with objects that do not exist. No matching VariableInstance could be found for {id}.");
                entity.VariableData.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        public object Delete(DocumentJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                case "documentset":
                    ret = _DeleteDocumentDocumentSet(request);
                    break;
                case "lookuptable":
                    ret = _DeleteDocumentLookupTable(request);
                    break;
                case "nondigitizeddocumentset":
                    ret = _DeleteDocumentNonDigitizedDocumentSet(request);
                    break;
                case "variableinstance":
                    ret = _DeleteDocumentVariableInstance(request);
                    break;
                }
            });
            return ret;
        }


        private object _DeleteDocumentDocumentSet(DocumentJunction request)
        {
            var entity = DocEntityDocument.GetDocument(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Document found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Document");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityDocumentSet.GetDocumentSet(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.DOCUMENTSET, columnName: "DocumentSets"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Document and DocumentSet");
                if(null != relationship && false == relationship.IsRemoved) entity.DocumentSets.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteDocumentLookupTable(DocumentJunction request)
        {
            var entity = DocEntityDocument.GetDocument(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Document found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Document");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityLookupTable.GetLookupTable(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.LOOKUPTABLE, columnName: "LookupTables"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Document and LookupTable");
                if(null != relationship && false == relationship.IsRemoved) entity.LookupTables.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteDocumentNonDigitizedDocumentSet(DocumentJunction request)
        {
            var entity = DocEntityDocument.GetDocument(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Document found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Document");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityDocumentSet.GetDocumentSet(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.DOCUMENTSET, columnName: "NonDigitizedDocumentSets"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Document and DocumentSet");
                if(null != relationship && false == relationship.IsRemoved) entity.NonDigitizedDocumentSets.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteDocumentVariableInstance(DocumentJunction request)
        {
            var entity = DocEntityDocument.GetDocument(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Document found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Document");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityVariableInstance.GetVariableInstance(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.VARIABLEINSTANCE, columnName: "VariableData"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Document and VariableInstance");
                if(null != relationship && false == relationship.IsRemoved) entity.VariableData.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private Document GetDocument(Document request)
        {
            var id = request?.Id;
            Document ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<Document>(currentUser, "Document", request.VisibleFields);

            DocEntityDocument entity = null;
            if(id.HasValue)
            {
                entity = DocEntityDocument.GetDocument(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Document found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

        public List<int> Any(DocumentIds request)
        {
            List<int> ret = null;
            if (currentUser.IsSuperAdmin)
            {
                Execute.Run(s => { ret = Execute.SelectAll<DocEntityDocument>().Select(d => d.Id).ToList(); });
            }
            else
            {
                throw new HttpError(HttpStatusCode.Forbidden);
            }
            return ret;
        }
    }
}