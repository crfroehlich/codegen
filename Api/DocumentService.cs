//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.API
{
    public partial class DocumentService : DocServiceBase
    {
        private IQueryable<DocEntityDocument> _ExecSearch(DocumentSearch request, DocQuery query)
        {
            request = InitSearch<Document, DocumentSearch>(request);
            IQueryable<DocEntityDocument> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityDocument>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new DocumentFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityDocument,DocumentFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.DOCUMENT, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }

                if(!DocTools.IsNullOrEmpty(request.Abstract))
                    entities = entities.Where(en => en.Abstract.Contains(request.Abstract));
                if(!DocTools.IsNullOrEmpty(request.AccessionID))
                    entities = entities.Where(en => en.AccessionID.Contains(request.AccessionID));
                if(!DocTools.IsNullOrEmpty(request.Acronym))
                    entities = entities.Where(en => en.Acronym.Contains(request.Acronym));
                if(!DocTools.IsNullOrEmpty(request.Authors))
                    entities = entities.Where(en => en.Authors.Contains(request.Authors));
                if(!DocTools.IsNullOrEmpty(request.CochraneID))
                    entities = entities.Where(en => en.CochraneID.Contains(request.CochraneID));
                if(!DocTools.IsNullOrEmpty(request.CorporateAuthor))
                    entities = entities.Where(en => en.CorporateAuthor.Contains(request.CorporateAuthor));
                if(!DocTools.IsNullOrEmpty(request.Country))
                    entities = entities.Where(en => en.Country.Contains(request.Country));
                if(!DocTools.IsNullOrEmpty(request.DatabaseType) && !DocTools.IsNullOrEmpty(request.DatabaseType.Id))
                {
                    entities = entities.Where(en => en.DatabaseType.Id == request.DatabaseType.Id );
                }
                if(true == request.DatabaseTypeIds?.Any())
                {
                    entities = entities.Where(en => en.DatabaseType.Id.In(request.DatabaseTypeIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.DatabaseType) && !DocTools.IsNullOrEmpty(request.DatabaseType.Name))
                {
                    entities = entities.Where(en => en.DatabaseType.Name == request.DatabaseType.Name );
                }
                if(true == request.DatabaseTypeNames?.Any())
                {
                    entities = entities.Where(en => en.DatabaseType.Name.In(request.DatabaseTypeNames));
                }
                if(true == request.DocumentSetsIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentSets.Any(r => r.Id.In(request.DocumentSetsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.DocumentType) && !DocTools.IsNullOrEmpty(request.DocumentType.Id))
                {
                    entities = entities.Where(en => en.DocumentType.Id == request.DocumentType.Id );
                }
                if(true == request.DocumentTypeIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentType.Id.In(request.DocumentTypeIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.DocumentType) && !DocTools.IsNullOrEmpty(request.DocumentType.Name))
                {
                    entities = entities.Where(en => en.DocumentType.Name == request.DocumentType.Name );
                }
                if(true == request.DocumentTypeNames?.Any())
                {
                    entities = entities.Where(en => en.DocumentType.Name.In(request.DocumentTypeNames));
                }
                if(!DocTools.IsNullOrEmpty(request.DOI))
                    entities = entities.Where(en => en.DOI.Contains(request.DOI));
                if(!DocTools.IsNullOrEmpty(request.EmbaseAccessionNumber))
                    entities = entities.Where(en => en.EmbaseAccessionNumber.Contains(request.EmbaseAccessionNumber));
                if(!DocTools.IsNullOrEmpty(request.Emtree))
                    entities = entities.Where(en => en.Emtree.Contains(request.Emtree));
                if(!DocTools.IsNullOrEmpty(request.ErrataText))
                    entities = entities.Where(en => en.ErrataText.Contains(request.ErrataText));
                if(!DocTools.IsNullOrEmpty(request.FullText))
                    entities = entities.Where(en => en.FullText.Contains(request.FullText));
                if(!DocTools.IsNullOrEmpty(request.FullTextURL))
                    entities = entities.Where(en => en.FullTextURL.Contains(request.FullTextURL));
                if(!DocTools.IsNullOrEmpty(request.Import) && !DocTools.IsNullOrEmpty(request.Import.Id))
                {
                    entities = entities.Where(en => en.Import.Id == request.Import.Id );
                }
                if(true == request.ImportIds?.Any())
                {
                    entities = entities.Where(en => en.Import.Id.In(request.ImportIds));
                }
                if(!DocTools.IsNullOrEmpty(request.ImportType) && !DocTools.IsNullOrEmpty(request.ImportType.Id))
                {
                    entities = entities.Where(en => en.ImportType.Id == request.ImportType.Id );
                }
                if(true == request.ImportTypeIds?.Any())
                {
                    entities = entities.Where(en => en.ImportType.Id.In(request.ImportTypeIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.ImportType) && !DocTools.IsNullOrEmpty(request.ImportType.Name))
                {
                    entities = entities.Where(en => en.ImportType.Name == request.ImportType.Name );
                }
                if(true == request.ImportTypeNames?.Any())
                {
                    entities = entities.Where(en => en.ImportType.Name.In(request.ImportTypeNames));
                }
                if(!DocTools.IsNullOrEmpty(request.Institution))
                    entities = entities.Where(en => en.Institution.Contains(request.Institution));
                if(!DocTools.IsNullOrEmpty(request.ISSN))
                    entities = entities.Where(en => en.ISSN.Contains(request.ISSN));
                if(!DocTools.IsNullOrEmpty(request.Issue))
                    entities = entities.Where(en => en.Issue.Contains(request.Issue));
                if(!DocTools.IsNullOrEmpty(request.JournalTitle))
                    entities = entities.Where(en => en.JournalTitle.Contains(request.JournalTitle));
                if(!DocTools.IsNullOrEmpty(request.LegacySync))
                    entities = entities.Where(en => null != en.LegacySync && request.LegacySync.Value.Date == en.LegacySync.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.LegacySyncBefore))
                    entities = entities.Where(en => en.LegacySync <= request.LegacySyncBefore);
                if(!DocTools.IsNullOrEmpty(request.LegacySyncAfter))
                    entities = entities.Where(en => en.LegacySync >= request.LegacySyncAfter);
                if(true == request.LookupTablesIds?.Any())
                {
                    entities = entities.Where(en => en.LookupTables.Any(r => r.Id.In(request.LookupTablesIds)));
                }
                if(request.MedlineID.HasValue)
                    entities = entities.Where(en => request.MedlineID.Value == en.MedlineID);
                if(!DocTools.IsNullOrEmpty(request.MeSH))
                    entities = entities.Where(en => en.MeSH.Contains(request.MeSH));
                if(!DocTools.IsNullOrEmpty(request.Pages))
                    entities = entities.Where(en => en.Pages.Contains(request.Pages));
                if(request.ParentChildStatus.HasValue)
                    entities = entities.Where(en => request.ParentChildStatus.Value == en.ParentChildStatus);
                if(request.ParentID.HasValue)
                    entities = entities.Where(en => request.ParentID.Value == en.ParentID);
                if(!DocTools.IsNullOrEmpty(request.PublicationDate))
                    entities = entities.Where(en => en.PublicationDate.Contains(request.PublicationDate));
                if(request.PublicationYear.HasValue)
                    entities = entities.Where(en => request.PublicationYear.Value == en.PublicationYear);
                if(!DocTools.IsNullOrEmpty(request.PubType))
                    entities = entities.Where(en => en.PubType.Contains(request.PubType));
                if(request.ReferenceStudy.HasValue)
                    entities = entities.Where(en => request.ReferenceStudy.Value == en.ReferenceStudy);
                if(!DocTools.IsNullOrEmpty(request.SecondarySourceID))
                    entities = entities.Where(en => en.SecondarySourceID.Contains(request.SecondarySourceID));
                if(!DocTools.IsNullOrEmpty(request.Source))
                    entities = entities.Where(en => en.Source.Contains(request.Source));
                if(!DocTools.IsNullOrEmpty(request.TaStudyDesign))
                    entities = entities.Where(en => en.TaStudyDesign.Contains(request.TaStudyDesign));
                if(!DocTools.IsNullOrEmpty(request.Title))
                    entities = entities.Where(en => en.Title.Contains(request.Title));
                if(request.TrialOutcome.HasValue)
                    entities = entities.Where(en => request.TrialOutcome.Value == en.TrialOutcome);
                if(true == request.VariableDataIds?.Any())
                {
                    entities = entities.Where(en => en.VariableData.Any(r => r.Id.In(request.VariableDataIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Volume))
                    entities = entities.Where(en => en.Volume.Contains(request.Volume));

                entities = ApplyFilters<DocEntityDocument,DocumentSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(DocumentSearch request) => Get(request);

        public object Get(DocumentSearch request) => GetSearchResultWithCache<Document,DocEntityDocument,DocumentSearch>(DocConstantModelName.DOCUMENT, request, _ExecSearch);

        public object Get(Document request) => GetEntityWithCache<Document>(DocConstantModelName.DOCUMENT, request, GetDocument);

        private Document _AssignValues(Document request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "Document"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            Document ret = null;
            request = _InitAssignValues<Document>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<Document>(DocConstantModelName.DOCUMENT, nameof(Document), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pAbstract = request.Abstract;
            var pAccessionID = request.AccessionID;
            var pAcronym = request.Acronym;
            var pAuthors = request.Authors;
            var pCochraneID = request.CochraneID;
            var pCorporateAuthor = request.CorporateAuthor;
            var pCountry = request.Country;
            var pCustomData = request.CustomData;
            DocEntityLookupTable pDatabaseType = GetLookup(DocConstantLookupTable.DATABASETYPE, request.DatabaseType?.Name, request.DatabaseType?.Id);
            var pDocumentSets = request.DocumentSets?.ToList();
            DocEntityLookupTable pDocumentType = GetLookup(DocConstantLookupTable.DOCUMENTTYPE, request.DocumentType?.Name, request.DocumentType?.Id);
            var pDOI = request.DOI;
            var pEmbaseAccessionNumber = request.EmbaseAccessionNumber;
            var pEmtree = request.Emtree;
            var pErrataText = request.ErrataText;
            var pFullText = request.FullText;
            var pFullTextURL = request.FullTextURL;
            var pImport = (request.Import?.Id > 0) ? DocEntityImportData.GetImportData(request.Import.Id) : null;
            DocEntityLookupTable pImportType = GetLookup(DocConstantLookupTable.STUDYIMPORTTYPE, request.ImportType?.Name, request.ImportType?.Id);
            var pInstitution = request.Institution;
            var pISSN = request.ISSN;
            var pIssue = request.Issue;
            var pJournalTitle = request.JournalTitle;
            var pLegacyModel = request.LegacyModel;
            var pLegacySync = request.LegacySync;
            var pLookupTables = request.LookupTables?.ToList();
            var pMedlineID = request.MedlineID;
            var pMeSH = request.MeSH;
            var pPages = request.Pages;
            var pParentChildStatus = request.ParentChildStatus;
            var pParentID = request.ParentID;
            var pPublicationDate = request.PublicationDate;
            var pPublicationYear = request.PublicationYear;
            var pPubType = request.PubType;
            var pReferenceStudy = request.ReferenceStudy;
            var pSecondarySourceID = request.SecondarySourceID;
            var pSource = request.Source;
            var pStorageModel = request.StorageModel;
            var pSupplementalFiles = request.SupplementalFiles;
            var pTaStudyDesign = request.TaStudyDesign;
            var pTitle = request.Title;
            var pTrialOutcome = request.TrialOutcome;
            var pVariableData = request.VariableData?.ToList();
            var pVolume = request.Volume;

            DocEntityDocument entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityDocument(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityDocument.GetDocument(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            //Special case for Archived
            var pArchived = true == request.Archived;
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pArchived, permission, DocConstantModelName.DOCUMENT, nameof(request.Archived)))
            {
                if(DocPermissionFactory.IsRequested(request, pArchived, entity.Archived, nameof(request.Archived)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Archived)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Archived)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pArchived) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Archived))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Archived)} requires a value.");
                    entity.Archived = pArchived;
                if(DocPermissionFactory.IsRequested<bool>(request, pArchived, nameof(request.Archived)) && !request.VisibleFields.Matches(nameof(request.Archived), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Archived));
                }
            }

            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pAbstract, permission, DocConstantModelName.DOCUMENT, nameof(request.Abstract)))
            {
                if(DocPermissionFactory.IsRequested(request, pAbstract, entity.Abstract, nameof(request.Abstract)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Abstract)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Abstract)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pAbstract) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Abstract))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Abstract)} requires a value.");
                    entity.Abstract = pAbstract;
                if(DocPermissionFactory.IsRequested<string>(request, pAbstract, nameof(request.Abstract)) && !request.VisibleFields.Matches(nameof(request.Abstract), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Abstract));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pAccessionID, permission, DocConstantModelName.DOCUMENT, nameof(request.AccessionID)))
            {
                if(DocPermissionFactory.IsRequested(request, pAccessionID, entity.AccessionID, nameof(request.AccessionID)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.AccessionID)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.AccessionID)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pAccessionID) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.AccessionID))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.AccessionID)} requires a value.");
                    entity.AccessionID = pAccessionID;
                if(DocPermissionFactory.IsRequested<string>(request, pAccessionID, nameof(request.AccessionID)) && !request.VisibleFields.Matches(nameof(request.AccessionID), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.AccessionID));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pAcronym, permission, DocConstantModelName.DOCUMENT, nameof(request.Acronym)))
            {
                if(DocPermissionFactory.IsRequested(request, pAcronym, entity.Acronym, nameof(request.Acronym)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Acronym)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Acronym)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pAcronym) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Acronym))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Acronym)} requires a value.");
                    entity.Acronym = pAcronym;
                if(DocPermissionFactory.IsRequested<string>(request, pAcronym, nameof(request.Acronym)) && !request.VisibleFields.Matches(nameof(request.Acronym), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Acronym));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pAuthors, permission, DocConstantModelName.DOCUMENT, nameof(request.Authors)))
            {
                if(DocPermissionFactory.IsRequested(request, pAuthors, entity.Authors, nameof(request.Authors)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Authors)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Authors)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pAuthors) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Authors))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Authors)} requires a value.");
                    entity.Authors = pAuthors;
                if(DocPermissionFactory.IsRequested<string>(request, pAuthors, nameof(request.Authors)) && !request.VisibleFields.Matches(nameof(request.Authors), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Authors));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pCochraneID, permission, DocConstantModelName.DOCUMENT, nameof(request.CochraneID)))
            {
                if(DocPermissionFactory.IsRequested(request, pCochraneID, entity.CochraneID, nameof(request.CochraneID)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.CochraneID)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.CochraneID)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pCochraneID) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.CochraneID))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.CochraneID)} requires a value.");
                    entity.CochraneID = pCochraneID;
                if(DocPermissionFactory.IsRequested<string>(request, pCochraneID, nameof(request.CochraneID)) && !request.VisibleFields.Matches(nameof(request.CochraneID), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.CochraneID));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pCorporateAuthor, permission, DocConstantModelName.DOCUMENT, nameof(request.CorporateAuthor)))
            {
                if(DocPermissionFactory.IsRequested(request, pCorporateAuthor, entity.CorporateAuthor, nameof(request.CorporateAuthor)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.CorporateAuthor)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.CorporateAuthor)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pCorporateAuthor) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.CorporateAuthor))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.CorporateAuthor)} requires a value.");
                    entity.CorporateAuthor = pCorporateAuthor;
                if(DocPermissionFactory.IsRequested<string>(request, pCorporateAuthor, nameof(request.CorporateAuthor)) && !request.VisibleFields.Matches(nameof(request.CorporateAuthor), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.CorporateAuthor));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pCountry, permission, DocConstantModelName.DOCUMENT, nameof(request.Country)))
            {
                if(DocPermissionFactory.IsRequested(request, pCountry, entity.Country, nameof(request.Country)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Country)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Country)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pCountry) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Country))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Country)} requires a value.");
                    entity.Country = pCountry;
                if(DocPermissionFactory.IsRequested<string>(request, pCountry, nameof(request.Country)) && !request.VisibleFields.Matches(nameof(request.Country), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Country));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pCustomData, permission, DocConstantModelName.DOCUMENT, nameof(request.CustomData)))
            {
                if(DocPermissionFactory.IsRequested(request, pCustomData, entity.CustomData, nameof(request.CustomData)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.CustomData)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.CustomData)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pCustomData) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.CustomData))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.CustomData)} requires a value.");
                    entity.CustomData = pCustomData;
                if(DocPermissionFactory.IsRequested<string>(request, pCustomData, nameof(request.CustomData)) && !request.VisibleFields.Matches(nameof(request.CustomData), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.CustomData));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, request, pDatabaseType, permission, DocConstantModelName.DOCUMENT, nameof(request.DatabaseType)))
            {
                if(DocPermissionFactory.IsRequested(request, pDatabaseType, entity.DatabaseType, nameof(request.DatabaseType)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.DatabaseType)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.DatabaseType)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pDatabaseType) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.DatabaseType))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.DatabaseType)} requires a value.");
                    entity.DatabaseType = pDatabaseType;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(request, pDatabaseType, nameof(request.DatabaseType)) && !request.VisibleFields.Matches(nameof(request.DatabaseType), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.DatabaseType));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, request, pDocumentType, permission, DocConstantModelName.DOCUMENT, nameof(request.DocumentType)))
            {
                if(DocPermissionFactory.IsRequested(request, pDocumentType, entity.DocumentType, nameof(request.DocumentType)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.DocumentType)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.DocumentType)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pDocumentType) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.DocumentType))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.DocumentType)} requires a value.");
                    entity.DocumentType = pDocumentType;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(request, pDocumentType, nameof(request.DocumentType)) && !request.VisibleFields.Matches(nameof(request.DocumentType), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.DocumentType));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pDOI, permission, DocConstantModelName.DOCUMENT, nameof(request.DOI)))
            {
                if(DocPermissionFactory.IsRequested(request, pDOI, entity.DOI, nameof(request.DOI)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.DOI)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.DOI)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pDOI) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.DOI))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.DOI)} requires a value.");
                    entity.DOI = pDOI;
                if(DocPermissionFactory.IsRequested<string>(request, pDOI, nameof(request.DOI)) && !request.VisibleFields.Matches(nameof(request.DOI), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.DOI));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pEmbaseAccessionNumber, permission, DocConstantModelName.DOCUMENT, nameof(request.EmbaseAccessionNumber)))
            {
                if(DocPermissionFactory.IsRequested(request, pEmbaseAccessionNumber, entity.EmbaseAccessionNumber, nameof(request.EmbaseAccessionNumber)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.EmbaseAccessionNumber)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.EmbaseAccessionNumber)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pEmbaseAccessionNumber) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.EmbaseAccessionNumber))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.EmbaseAccessionNumber)} requires a value.");
                    entity.EmbaseAccessionNumber = pEmbaseAccessionNumber;
                if(DocPermissionFactory.IsRequested<string>(request, pEmbaseAccessionNumber, nameof(request.EmbaseAccessionNumber)) && !request.VisibleFields.Matches(nameof(request.EmbaseAccessionNumber), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.EmbaseAccessionNumber));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pEmtree, permission, DocConstantModelName.DOCUMENT, nameof(request.Emtree)))
            {
                if(DocPermissionFactory.IsRequested(request, pEmtree, entity.Emtree, nameof(request.Emtree)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Emtree)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Emtree)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pEmtree) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Emtree))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Emtree)} requires a value.");
                    entity.Emtree = pEmtree;
                if(DocPermissionFactory.IsRequested<string>(request, pEmtree, nameof(request.Emtree)) && !request.VisibleFields.Matches(nameof(request.Emtree), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Emtree));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pErrataText, permission, DocConstantModelName.DOCUMENT, nameof(request.ErrataText)))
            {
                if(DocPermissionFactory.IsRequested(request, pErrataText, entity.ErrataText, nameof(request.ErrataText)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.ErrataText)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ErrataText)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pErrataText) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.ErrataText))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ErrataText)} requires a value.");
                    entity.ErrataText = pErrataText;
                if(DocPermissionFactory.IsRequested<string>(request, pErrataText, nameof(request.ErrataText)) && !request.VisibleFields.Matches(nameof(request.ErrataText), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ErrataText));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pFullText, permission, DocConstantModelName.DOCUMENT, nameof(request.FullText)))
            {
                if(DocPermissionFactory.IsRequested(request, pFullText, entity.FullText, nameof(request.FullText)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.FullText)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.FullText)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pFullText) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.FullText))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.FullText)} requires a value.");
                    entity.FullText = pFullText;
                if(DocPermissionFactory.IsRequested<string>(request, pFullText, nameof(request.FullText)) && !request.VisibleFields.Matches(nameof(request.FullText), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.FullText));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pFullTextURL, permission, DocConstantModelName.DOCUMENT, nameof(request.FullTextURL)))
            {
                if(DocPermissionFactory.IsRequested(request, pFullTextURL, entity.FullTextURL, nameof(request.FullTextURL)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.FullTextURL)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.FullTextURL)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pFullTextURL) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.FullTextURL))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.FullTextURL)} requires a value.");
                    entity.FullTextURL = pFullTextURL;
                if(DocPermissionFactory.IsRequested<string>(request, pFullTextURL, nameof(request.FullTextURL)) && !request.VisibleFields.Matches(nameof(request.FullTextURL), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.FullTextURL));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityImportData>(currentUser, request, pImport, permission, DocConstantModelName.DOCUMENT, nameof(request.Import)))
            {
                if(DocPermissionFactory.IsRequested(request, pImport, entity.Import, nameof(request.Import)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Import)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Import)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pImport) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Import))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Import)} requires a value.");
                    entity.Import = pImport;
                if(DocPermissionFactory.IsRequested<DocEntityImportData>(request, pImport, nameof(request.Import)) && !request.VisibleFields.Matches(nameof(request.Import), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Import));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, request, pImportType, permission, DocConstantModelName.DOCUMENT, nameof(request.ImportType)))
            {
                if(DocPermissionFactory.IsRequested(request, pImportType, entity.ImportType, nameof(request.ImportType)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.ImportType)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ImportType)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pImportType) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.ImportType))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ImportType)} requires a value.");
                    entity.ImportType = pImportType;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(request, pImportType, nameof(request.ImportType)) && !request.VisibleFields.Matches(nameof(request.ImportType), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ImportType));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pInstitution, permission, DocConstantModelName.DOCUMENT, nameof(request.Institution)))
            {
                if(DocPermissionFactory.IsRequested(request, pInstitution, entity.Institution, nameof(request.Institution)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Institution)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Institution)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pInstitution) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Institution))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Institution)} requires a value.");
                    entity.Institution = pInstitution;
                if(DocPermissionFactory.IsRequested<string>(request, pInstitution, nameof(request.Institution)) && !request.VisibleFields.Matches(nameof(request.Institution), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Institution));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pISSN, permission, DocConstantModelName.DOCUMENT, nameof(request.ISSN)))
            {
                if(DocPermissionFactory.IsRequested(request, pISSN, entity.ISSN, nameof(request.ISSN)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.ISSN)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ISSN)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pISSN) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.ISSN))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ISSN)} requires a value.");
                    entity.ISSN = pISSN;
                if(DocPermissionFactory.IsRequested<string>(request, pISSN, nameof(request.ISSN)) && !request.VisibleFields.Matches(nameof(request.ISSN), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ISSN));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pIssue, permission, DocConstantModelName.DOCUMENT, nameof(request.Issue)))
            {
                if(DocPermissionFactory.IsRequested(request, pIssue, entity.Issue, nameof(request.Issue)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Issue)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Issue)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pIssue) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Issue))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Issue)} requires a value.");
                    entity.Issue = pIssue;
                if(DocPermissionFactory.IsRequested<string>(request, pIssue, nameof(request.Issue)) && !request.VisibleFields.Matches(nameof(request.Issue), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Issue));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pJournalTitle, permission, DocConstantModelName.DOCUMENT, nameof(request.JournalTitle)))
            {
                if(DocPermissionFactory.IsRequested(request, pJournalTitle, entity.JournalTitle, nameof(request.JournalTitle)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.JournalTitle)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.JournalTitle)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pJournalTitle) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.JournalTitle))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.JournalTitle)} requires a value.");
                    entity.JournalTitle = pJournalTitle;
                if(DocPermissionFactory.IsRequested<string>(request, pJournalTitle, nameof(request.JournalTitle)) && !request.VisibleFields.Matches(nameof(request.JournalTitle), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.JournalTitle));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pLegacyModel, permission, DocConstantModelName.DOCUMENT, nameof(request.LegacyModel)))
            {
                if(DocPermissionFactory.IsRequested(request, pLegacyModel, entity.LegacyModel, nameof(request.LegacyModel)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.LegacyModel)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.LegacyModel)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pLegacyModel) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.LegacyModel))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.LegacyModel)} requires a value.");
                    entity.LegacyModel = pLegacyModel;
                if(DocPermissionFactory.IsRequested<string>(request, pLegacyModel, nameof(request.LegacyModel)) && !request.VisibleFields.Matches(nameof(request.LegacyModel), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.LegacyModel));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, request, pLegacySync, permission, DocConstantModelName.DOCUMENT, nameof(request.LegacySync)))
            {
                if(DocPermissionFactory.IsRequested(request, pLegacySync, entity.LegacySync, nameof(request.LegacySync)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.LegacySync)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.LegacySync)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pLegacySync) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.LegacySync))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.LegacySync)} requires a value.");
                    entity.LegacySync = pLegacySync;
                if(DocPermissionFactory.IsRequested<DateTime?>(request, pLegacySync, nameof(request.LegacySync)) && !request.VisibleFields.Matches(nameof(request.LegacySync), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.LegacySync));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pMedlineID, permission, DocConstantModelName.DOCUMENT, nameof(request.MedlineID)))
            {
                if(DocPermissionFactory.IsRequested(request, pMedlineID, entity.MedlineID, nameof(request.MedlineID)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.MedlineID)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.MedlineID)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pMedlineID) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.MedlineID))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.MedlineID)} requires a value.");
                    entity.MedlineID = pMedlineID;
                if(DocPermissionFactory.IsRequested<int?>(request, pMedlineID, nameof(request.MedlineID)) && !request.VisibleFields.Matches(nameof(request.MedlineID), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.MedlineID));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pMeSH, permission, DocConstantModelName.DOCUMENT, nameof(request.MeSH)))
            {
                if(DocPermissionFactory.IsRequested(request, pMeSH, entity.MeSH, nameof(request.MeSH)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.MeSH)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.MeSH)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pMeSH) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.MeSH))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.MeSH)} requires a value.");
                    entity.MeSH = pMeSH;
                if(DocPermissionFactory.IsRequested<string>(request, pMeSH, nameof(request.MeSH)) && !request.VisibleFields.Matches(nameof(request.MeSH), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.MeSH));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pPages, permission, DocConstantModelName.DOCUMENT, nameof(request.Pages)))
            {
                if(DocPermissionFactory.IsRequested(request, pPages, entity.Pages, nameof(request.Pages)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Pages)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Pages)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pPages) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Pages))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Pages)} requires a value.");
                    entity.Pages = pPages;
                if(DocPermissionFactory.IsRequested<string>(request, pPages, nameof(request.Pages)) && !request.VisibleFields.Matches(nameof(request.Pages), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Pages));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<char?>(currentUser, request, pParentChildStatus, permission, DocConstantModelName.DOCUMENT, nameof(request.ParentChildStatus)))
            {
                if(DocPermissionFactory.IsRequested(request, pParentChildStatus, entity.ParentChildStatus, nameof(request.ParentChildStatus)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.ParentChildStatus)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ParentChildStatus)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pParentChildStatus) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.ParentChildStatus))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ParentChildStatus)} requires a value.");
                    entity.ParentChildStatus = pParentChildStatus;
                if(DocPermissionFactory.IsRequested<char?>(request, pParentChildStatus, nameof(request.ParentChildStatus)) && !request.VisibleFields.Matches(nameof(request.ParentChildStatus), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ParentChildStatus));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pParentID, permission, DocConstantModelName.DOCUMENT, nameof(request.ParentID)))
            {
                if(DocPermissionFactory.IsRequested(request, pParentID, entity.ParentID, nameof(request.ParentID)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.ParentID)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ParentID)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pParentID) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.ParentID))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ParentID)} requires a value.");
                    entity.ParentID = pParentID;
                if(DocPermissionFactory.IsRequested<int?>(request, pParentID, nameof(request.ParentID)) && !request.VisibleFields.Matches(nameof(request.ParentID), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ParentID));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pPublicationDate, permission, DocConstantModelName.DOCUMENT, nameof(request.PublicationDate)))
            {
                if(DocPermissionFactory.IsRequested(request, pPublicationDate, entity.PublicationDate, nameof(request.PublicationDate)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.PublicationDate)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.PublicationDate)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pPublicationDate) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.PublicationDate))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.PublicationDate)} requires a value.");
                    entity.PublicationDate = pPublicationDate;
                if(DocPermissionFactory.IsRequested<string>(request, pPublicationDate, nameof(request.PublicationDate)) && !request.VisibleFields.Matches(nameof(request.PublicationDate), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.PublicationDate));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pPublicationYear, permission, DocConstantModelName.DOCUMENT, nameof(request.PublicationYear)))
            {
                if(DocPermissionFactory.IsRequested(request, pPublicationYear, entity.PublicationYear, nameof(request.PublicationYear)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.PublicationYear)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.PublicationYear)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pPublicationYear) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.PublicationYear))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.PublicationYear)} requires a value.");
                    entity.PublicationYear = pPublicationYear;
                if(DocPermissionFactory.IsRequested<int?>(request, pPublicationYear, nameof(request.PublicationYear)) && !request.VisibleFields.Matches(nameof(request.PublicationYear), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.PublicationYear));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pPubType, permission, DocConstantModelName.DOCUMENT, nameof(request.PubType)))
            {
                if(DocPermissionFactory.IsRequested(request, pPubType, entity.PubType, nameof(request.PubType)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.PubType)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.PubType)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pPubType) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.PubType))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.PubType)} requires a value.");
                    entity.PubType = pPubType;
                if(DocPermissionFactory.IsRequested<string>(request, pPubType, nameof(request.PubType)) && !request.VisibleFields.Matches(nameof(request.PubType), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.PubType));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pReferenceStudy, permission, DocConstantModelName.DOCUMENT, nameof(request.ReferenceStudy)))
            {
                if(DocPermissionFactory.IsRequested(request, pReferenceStudy, entity.ReferenceStudy, nameof(request.ReferenceStudy)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.ReferenceStudy)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ReferenceStudy)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pReferenceStudy) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.ReferenceStudy))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ReferenceStudy)} requires a value.");
                    if(null != pReferenceStudy)
                        entity.ReferenceStudy = (int) pReferenceStudy;
                if(DocPermissionFactory.IsRequested<int?>(request, pReferenceStudy, nameof(request.ReferenceStudy)) && !request.VisibleFields.Matches(nameof(request.ReferenceStudy), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ReferenceStudy));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pSecondarySourceID, permission, DocConstantModelName.DOCUMENT, nameof(request.SecondarySourceID)))
            {
                if(DocPermissionFactory.IsRequested(request, pSecondarySourceID, entity.SecondarySourceID, nameof(request.SecondarySourceID)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.SecondarySourceID)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.SecondarySourceID)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSecondarySourceID) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.SecondarySourceID))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.SecondarySourceID)} requires a value.");
                    entity.SecondarySourceID = pSecondarySourceID;
                if(DocPermissionFactory.IsRequested<string>(request, pSecondarySourceID, nameof(request.SecondarySourceID)) && !request.VisibleFields.Matches(nameof(request.SecondarySourceID), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.SecondarySourceID));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pSource, permission, DocConstantModelName.DOCUMENT, nameof(request.Source)))
            {
                if(DocPermissionFactory.IsRequested(request, pSource, entity.Source, nameof(request.Source)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Source)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Source)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSource) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Source))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Source)} requires a value.");
                    entity.Source = pSource;
                if(DocPermissionFactory.IsRequested<string>(request, pSource, nameof(request.Source)) && !request.VisibleFields.Matches(nameof(request.Source), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Source));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pStorageModel, permission, DocConstantModelName.DOCUMENT, nameof(request.StorageModel)))
            {
                if(DocPermissionFactory.IsRequested(request, pStorageModel, entity.StorageModel, nameof(request.StorageModel)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.StorageModel)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.StorageModel)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pStorageModel) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.StorageModel))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.StorageModel)} requires a value.");
                    entity.StorageModel = pStorageModel;
                if(DocPermissionFactory.IsRequested<string>(request, pStorageModel, nameof(request.StorageModel)) && !request.VisibleFields.Matches(nameof(request.StorageModel), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.StorageModel));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pSupplementalFiles, permission, DocConstantModelName.DOCUMENT, nameof(request.SupplementalFiles)))
            {
                if(DocPermissionFactory.IsRequested(request, pSupplementalFiles, entity.SupplementalFiles, nameof(request.SupplementalFiles)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.SupplementalFiles)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.SupplementalFiles)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSupplementalFiles) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.SupplementalFiles))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.SupplementalFiles)} requires a value.");
                    entity.SupplementalFiles = pSupplementalFiles;
                if(DocPermissionFactory.IsRequested<string>(request, pSupplementalFiles, nameof(request.SupplementalFiles)) && !request.VisibleFields.Matches(nameof(request.SupplementalFiles), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.SupplementalFiles));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pTaStudyDesign, permission, DocConstantModelName.DOCUMENT, nameof(request.TaStudyDesign)))
            {
                if(DocPermissionFactory.IsRequested(request, pTaStudyDesign, entity.TaStudyDesign, nameof(request.TaStudyDesign)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.TaStudyDesign)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.TaStudyDesign)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pTaStudyDesign) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.TaStudyDesign))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.TaStudyDesign)} requires a value.");
                    entity.TaStudyDesign = pTaStudyDesign;
                if(DocPermissionFactory.IsRequested<string>(request, pTaStudyDesign, nameof(request.TaStudyDesign)) && !request.VisibleFields.Matches(nameof(request.TaStudyDesign), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.TaStudyDesign));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pTitle, permission, DocConstantModelName.DOCUMENT, nameof(request.Title)))
            {
                if(DocPermissionFactory.IsRequested(request, pTitle, entity.Title, nameof(request.Title)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Title)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Title)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pTitle) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Title))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Title)} requires a value.");
                    entity.Title = pTitle;
                if(DocPermissionFactory.IsRequested<string>(request, pTitle, nameof(request.Title)) && !request.VisibleFields.Matches(nameof(request.Title), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Title));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<short?>(currentUser, request, pTrialOutcome, permission, DocConstantModelName.DOCUMENT, nameof(request.TrialOutcome)))
            {
                if(DocPermissionFactory.IsRequested(request, pTrialOutcome, entity.TrialOutcome, nameof(request.TrialOutcome)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.TrialOutcome)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.TrialOutcome)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pTrialOutcome) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.TrialOutcome))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.TrialOutcome)} requires a value.");
                    entity.TrialOutcome = pTrialOutcome;
                if(DocPermissionFactory.IsRequested<short?>(request, pTrialOutcome, nameof(request.TrialOutcome)) && !request.VisibleFields.Matches(nameof(request.TrialOutcome), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.TrialOutcome));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pVolume, permission, DocConstantModelName.DOCUMENT, nameof(request.Volume)))
            {
                if(DocPermissionFactory.IsRequested(request, pVolume, entity.Volume, nameof(request.Volume)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.DOCUMENT, nameof(request.Volume)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Volume)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pVolume) && DocResources.Metadata.IsRequired(DocConstantModelName.DOCUMENT, nameof(request.Volume))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Volume)} requires a value.");
                    entity.Volume = pVolume;
                if(DocPermissionFactory.IsRequested<string>(request, pVolume, nameof(request.Volume)) && !request.VisibleFields.Matches(nameof(request.Volume), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Volume));
                }
            }

            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);

            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pDocumentSets, permission, DocConstantModelName.DOCUMENT, nameof(request.DocumentSets)))
            {
                if (true == pDocumentSets?.Any() )
                {
                    var requestedDocumentSets = pDocumentSets.Select(p => p.Id).Distinct().ToList();
                    var existsDocumentSets = Execute.SelectAll<DocEntityDocumentSet>().Where(e => e.Id.In(requestedDocumentSets)).Select( e => e.Id ).ToList();
                    if (existsDocumentSets.Count != requestedDocumentSets.Count)
                    {
                        var nonExists = requestedDocumentSets.Where(id => existsDocumentSets.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection DocumentSets with objects that do not exist. No matching DocumentSets(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedDocumentSets.Where(id => entity.DocumentSets.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Document), columnName: nameof(request.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.DocumentSets)} to {nameof(Document)}");
                        entity.DocumentSets.Add(target);
                    });
                    var toRemove = entity.DocumentSets.Where(e => requestedDocumentSets.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(request.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.DocumentSets)} from {nameof(Document)}");
                        entity.DocumentSets.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.DocumentSets.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(request.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.DocumentSets)} from {nameof(Document)}");
                        entity.DocumentSets.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pDocumentSets, nameof(request.DocumentSets)) && !request.VisibleFields.Matches(nameof(request.DocumentSets), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.DocumentSets));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pLookupTables, permission, DocConstantModelName.DOCUMENT, nameof(request.LookupTables)))
            {
                if (true == pLookupTables?.Any() )
                {
                    var requestedLookupTables = pLookupTables.Select(p => p.Id).Distinct().ToList();
                    var existsLookupTables = Execute.SelectAll<DocEntityLookupTable>().Where(e => e.Id.In(requestedLookupTables)).Select( e => e.Id ).ToList();
                    if (existsLookupTables.Count != requestedLookupTables.Count)
                    {
                        var nonExists = requestedLookupTables.Where(id => existsLookupTables.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection LookupTables with objects that do not exist. No matching LookupTables(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedLookupTables.Where(id => entity.LookupTables.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityLookupTable.GetLookupTable(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Document), columnName: nameof(request.LookupTables)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.LookupTables)} to {nameof(Document)}");
                        entity.LookupTables.Add(target);
                    });
                    var toRemove = entity.LookupTables.Where(e => requestedLookupTables.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityLookupTable.GetLookupTable(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(request.LookupTables)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.LookupTables)} from {nameof(Document)}");
                        entity.LookupTables.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.LookupTables.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityLookupTable.GetLookupTable(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(request.LookupTables)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.LookupTables)} from {nameof(Document)}");
                        entity.LookupTables.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pLookupTables, nameof(request.LookupTables)) && !request.VisibleFields.Matches(nameof(request.LookupTables), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.LookupTables));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pVariableData, permission, DocConstantModelName.DOCUMENT, nameof(request.VariableData)))
            {
                if (true == pVariableData?.Any() )
                {
                    var requestedVariableData = pVariableData.Select(p => p.Id).Distinct().ToList();
                    var existsVariableData = Execute.SelectAll<DocEntityVariableInstance>().Where(e => e.Id.In(requestedVariableData)).Select( e => e.Id ).ToList();
                    if (existsVariableData.Count != requestedVariableData.Count)
                    {
                        var nonExists = requestedVariableData.Where(id => existsVariableData.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection VariableData with objects that do not exist. No matching VariableData(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedVariableData.Where(id => entity.VariableData.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityVariableInstance.GetVariableInstance(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Document), columnName: nameof(request.VariableData)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.VariableData)} to {nameof(Document)}");
                        entity.VariableData.Add(target);
                    });
                    var toRemove = entity.VariableData.Where(e => requestedVariableData.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityVariableInstance.GetVariableInstance(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(request.VariableData)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.VariableData)} from {nameof(Document)}");
                        entity.VariableData.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.VariableData.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityVariableInstance.GetVariableInstance(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Document), columnName: nameof(request.VariableData)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.VariableData)} from {nameof(Document)}");
                        entity.VariableData.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pVariableData, nameof(request.VariableData)) && !request.VisibleFields.Matches(nameof(request.VariableData), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.VariableData));
                }
            }
            DocPermissionFactory.SetVisibleFields<Document>(currentUser, nameof(Document), request.VisibleFields);
            ret = entity.ToDto();

            var cacheExpires = DocResources.Metadata.GetCacheExpiration(DocConstantModelName.DOCUMENT);
            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.DOCUMENT, cacheExpires);

            return ret;
        }
        public Document Post(Document request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            Document ret = null;

            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "Document")) 
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
                });
            }
            return ret;
        }
   
        public List<Document> Post(DocumentBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Document>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as Document;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Document Post(DocumentCopy request)
        {
            Document ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    var entity = DocEntityDocument.GetDocument(request?.Id);
                    if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                    if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    var pAbstract = entity.Abstract;
                    var pAccessionID = entity.AccessionID;
                    if(!DocTools.IsNullOrEmpty(pAccessionID))
                        pAccessionID += " (Copy)";
                    var pAcronym = entity.Acronym;
                    if(!DocTools.IsNullOrEmpty(pAcronym))
                        pAcronym += " (Copy)";
                    var pAuthors = entity.Authors;
                    if(!DocTools.IsNullOrEmpty(pAuthors))
                        pAuthors += " (Copy)";
                    var pCochraneID = entity.CochraneID;
                    if(!DocTools.IsNullOrEmpty(pCochraneID))
                        pCochraneID += " (Copy)";
                    var pCorporateAuthor = entity.CorporateAuthor;
                    if(!DocTools.IsNullOrEmpty(pCorporateAuthor))
                        pCorporateAuthor += " (Copy)";
                    var pCountry = entity.Country;
                    if(!DocTools.IsNullOrEmpty(pCountry))
                        pCountry += " (Copy)";
                    var pCustomData = entity.CustomData;
                    var pDatabaseType = entity.DatabaseType;
                    var pDocumentSets = entity.DocumentSets.ToList();
                    var pDocumentType = entity.DocumentType;
                    var pDOI = entity.DOI;
                    if(!DocTools.IsNullOrEmpty(pDOI))
                        pDOI += " (Copy)";
                    var pEmbaseAccessionNumber = entity.EmbaseAccessionNumber;
                    if(!DocTools.IsNullOrEmpty(pEmbaseAccessionNumber))
                        pEmbaseAccessionNumber += " (Copy)";
                    var pEmtree = entity.Emtree;
                    if(!DocTools.IsNullOrEmpty(pEmtree))
                        pEmtree += " (Copy)";
                    var pErrataText = entity.ErrataText;
                    if(!DocTools.IsNullOrEmpty(pErrataText))
                        pErrataText += " (Copy)";
                    var pFullText = entity.FullText;
                    if(!DocTools.IsNullOrEmpty(pFullText))
                        pFullText += " (Copy)";
                    var pFullTextURL = entity.FullTextURL;
                    if(!DocTools.IsNullOrEmpty(pFullTextURL))
                        pFullTextURL += " (Copy)";
                    var pImport = entity.Import;
                    var pImportType = entity.ImportType;
                    var pInstitution = entity.Institution;
                    if(!DocTools.IsNullOrEmpty(pInstitution))
                        pInstitution += " (Copy)";
                    var pISSN = entity.ISSN;
                    if(!DocTools.IsNullOrEmpty(pISSN))
                        pISSN += " (Copy)";
                    var pIssue = entity.Issue;
                    if(!DocTools.IsNullOrEmpty(pIssue))
                        pIssue += " (Copy)";
                    var pJournalTitle = entity.JournalTitle;
                    if(!DocTools.IsNullOrEmpty(pJournalTitle))
                        pJournalTitle += " (Copy)";
                    var pLegacyModel = entity.LegacyModel;
                    var pLegacySync = entity.LegacySync;
                    var pLookupTables = entity.LookupTables.ToList();
                    var pMedlineID = entity.MedlineID;
                    var pMeSH = entity.MeSH;
                    if(!DocTools.IsNullOrEmpty(pMeSH))
                        pMeSH += " (Copy)";
                    var pPages = entity.Pages;
                    if(!DocTools.IsNullOrEmpty(pPages))
                        pPages += " (Copy)";
                    var pParentChildStatus = entity.ParentChildStatus;
                    var pParentID = entity.ParentID;
                    var pPublicationDate = entity.PublicationDate;
                    if(!DocTools.IsNullOrEmpty(pPublicationDate))
                        pPublicationDate += " (Copy)";
                    var pPublicationYear = entity.PublicationYear;
                    var pPubType = entity.PubType;
                    if(!DocTools.IsNullOrEmpty(pPubType))
                        pPubType += " (Copy)";
                    var pReferenceStudy = entity.ReferenceStudy;
                    var pSecondarySourceID = entity.SecondarySourceID;
                    if(!DocTools.IsNullOrEmpty(pSecondarySourceID))
                        pSecondarySourceID += " (Copy)";
                    var pSource = entity.Source;
                    if(!DocTools.IsNullOrEmpty(pSource))
                        pSource += " (Copy)";
                    var pStorageModel = entity.StorageModel;
                    var pSupplementalFiles = entity.SupplementalFiles;
                    var pTaStudyDesign = entity.TaStudyDesign;
                    if(!DocTools.IsNullOrEmpty(pTaStudyDesign))
                        pTaStudyDesign += " (Copy)";
                    var pTitle = entity.Title;
                    if(!DocTools.IsNullOrEmpty(pTitle))
                        pTitle += " (Copy)";
                    var pTrialOutcome = entity.TrialOutcome;
                    var pVariableData = entity.VariableData.ToList();
                    var pVolume = entity.Volume;
                    if(!DocTools.IsNullOrEmpty(pVolume))
                        pVolume += " (Copy)";
                    #region Custom Before copyDocument
                    #endregion Custom Before copyDocument
                    var copy = new DocEntityDocument(ssn)
                    {
                        Hash = Guid.NewGuid()
                                , Abstract = pAbstract
                                , AccessionID = pAccessionID
                                , Acronym = pAcronym
                                , Authors = pAuthors
                                , CochraneID = pCochraneID
                                , CorporateAuthor = pCorporateAuthor
                                , Country = pCountry
                                , CustomData = pCustomData
                                , DatabaseType = pDatabaseType
                                , DocumentType = pDocumentType
                                , DOI = pDOI
                                , EmbaseAccessionNumber = pEmbaseAccessionNumber
                                , Emtree = pEmtree
                                , ErrataText = pErrataText
                                , FullText = pFullText
                                , FullTextURL = pFullTextURL
                                , Import = pImport
                                , ImportType = pImportType
                                , Institution = pInstitution
                                , ISSN = pISSN
                                , Issue = pIssue
                                , JournalTitle = pJournalTitle
                                , LegacyModel = pLegacyModel
                                , LegacySync = pLegacySync
                                , MedlineID = pMedlineID
                                , MeSH = pMeSH
                                , Pages = pPages
                                , ParentChildStatus = pParentChildStatus
                                , ParentID = pParentID
                                , PublicationDate = pPublicationDate
                                , PublicationYear = pPublicationYear
                                , PubType = pPubType
                                , ReferenceStudy = pReferenceStudy
                                , SecondarySourceID = pSecondarySourceID
                                , Source = pSource
                                , StorageModel = pStorageModel
                                , SupplementalFiles = pSupplementalFiles
                                , TaStudyDesign = pTaStudyDesign
                                , Title = pTitle
                                , TrialOutcome = pTrialOutcome
                                , Volume = pVolume
                    };
                            foreach(var item in pDocumentSets)
                            {
                                entity.DocumentSets.Add(item);
                            }

                            foreach(var item in pLookupTables)
                            {
                                entity.LookupTables.Add(item);
                            }

                            foreach(var item in pVariableData)
                            {
                                entity.VariableData.Add(item);
                            }

                    #region Custom After copyDocument
                    #endregion Custom After copyDocument
                    copy.SaveChanges(DocConstantPermission.ADD);
                    ret = copy.ToDto();
                });
            }
            return ret;
        }

        public List<Document> Put(DocumentBatch request)
        {
            return Patch(request);
        }

        public Document Put(Document request)
        {
            return Patch(request);
        }
        public List<Document> Patch(DocumentBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Document>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as Document;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Document Patch(Document request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the Document to patch.");
            
            request.VisibleFields = request.VisibleFields ?? new List<string>();
            
            Document ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
                });
            }
            return ret;
        }
        public void Delete(DocumentBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(Document request)
        {
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!(request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, $"No Id provided for delete.");

                    var en = DocEntityDocument.GetDocument(request?.Id);
                    if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No Document could be found for Id {request?.Id}.");
                    if(en.IsRemoved) return;
                
                    if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                    en.Remove();

                    DocCacheClient.RemoveSearch(DocConstantModelName.DOCUMENT);
                    DocCacheClient.RemoveById(request.Id);
                });
            }
        }

        public void Delete(DocumentSearch request)
        {
            var matches = Get(request) as List<Document>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");
            matches.ForEach(match =>
            {
                Delete(match);
            });
        }
        public object Get(DocumentJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "documentset":
                        return GetJunctionSearchResult<Document, DocEntityDocument, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request, (ss) => HostContext.ResolveService<DocumentSetService>(Request)?.Get(ss));
                    case "lookuptable":
                        return GetJunctionSearchResult<Document, DocEntityDocument, DocEntityLookupTable, LookupTable, LookupTableSearch>((int)request.Id, DocConstantModelName.LOOKUPTABLE, "LookupTables", request, (ss) => HostContext.ResolveService<LookupTableService>(Request)?.Get(ss));
                    case "tag":
                        return GetJunctionSearchResult<Document, DocEntityDocument, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "variableinstance":
                        return GetJunctionSearchResult<Document, DocEntityDocument, DocEntityVariableInstance, VariableInstance, VariableInstanceSearch>((int)request.Id, DocConstantModelName.VARIABLEINSTANCE, "VariableData", request, (ss) => HostContext.ResolveService<VariableInstanceService>(Request)?.Get(ss));
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for document/{request.Id}/{request.Junction} was not found");
            }
        }
        public object Post(DocumentJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "documentset":
                        return AddJunction<Document, DocEntityDocument, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request);
                    case "lookuptable":
                        return AddJunction<Document, DocEntityDocument, DocEntityLookupTable, LookupTable, LookupTableSearch>((int)request.Id, DocConstantModelName.LOOKUPTABLE, "LookupTables", request);
                    case "tag":
                        return AddJunction<Document, DocEntityDocument, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "variableinstance":
                        return AddJunction<Document, DocEntityDocument, DocEntityVariableInstance, VariableInstance, VariableInstanceSearch>((int)request.Id, DocConstantModelName.VARIABLEINSTANCE, "VariableData", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for document/{request.Id}/{request.Junction} was not found");
            }
        }

        public object Delete(DocumentJunction request)
        {    
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "documentset":
                        return RemoveJunction<Document, DocEntityDocument, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request);
                    case "lookuptable":
                        return RemoveJunction<Document, DocEntityDocument, DocEntityLookupTable, LookupTable, LookupTableSearch>((int)request.Id, DocConstantModelName.LOOKUPTABLE, "LookupTables", request);
                    case "tag":
                        return RemoveJunction<Document, DocEntityDocument, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "variableinstance":
                        return RemoveJunction<Document, DocEntityDocument, DocEntityVariableInstance, VariableInstance, VariableInstanceSearch>((int)request.Id, DocConstantModelName.VARIABLEINSTANCE, "VariableData", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for document/{request.Id}/{request.Junction} was not found");
            }
        }
        private Document GetDocument(Document request)
        {
            var id = request?.Id;
            Document ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<Document>(currentUser, "Document", request.VisibleFields);

            DocEntityDocument entity = null;
            if(id.HasValue)
            {
                entity = DocEntityDocument.GetDocument(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Document found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }
    }
}
