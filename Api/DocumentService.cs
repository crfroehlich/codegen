//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;

using Xtensive.Orm;


namespace Services.API
{
    public partial class DocumentService : DocServiceBase
    {

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private IQueryable<DocEntityDocument> _ExecSearch(DocumentSearch request, DocQuery query)
        {
            request = InitSearch<Document, DocumentSearch>(request);
            IQueryable<DocEntityDocument> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityDocument>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new DocumentFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityDocument,DocumentFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.DOCUMENT, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }
                if(!DocTools.IsNullOrEmpty(request.Abstract))
                    entities = entities.Where(en => en.Abstract.Contains(request.Abstract));
                if(!DocTools.IsNullOrEmpty(request.Abstracts))
                    entities = entities.Where(en => en.Abstract.In(request.Abstracts));
                if(!DocTools.IsNullOrEmpty(request.AccessionID))
                    entities = entities.Where(en => en.AccessionID.Contains(request.AccessionID));
                if(!DocTools.IsNullOrEmpty(request.AccessionIDs))
                    entities = entities.Where(en => en.AccessionID.In(request.AccessionIDs));
                if(!DocTools.IsNullOrEmpty(request.Acronym))
                    entities = entities.Where(en => en.Acronym.Contains(request.Acronym));
                if(!DocTools.IsNullOrEmpty(request.Acronyms))
                    entities = entities.Where(en => en.Acronym.In(request.Acronyms));
                if(!DocTools.IsNullOrEmpty(request.ArticleId))
                    entities = entities.Where(en => en.ArticleId.Contains(request.ArticleId));
                if(!DocTools.IsNullOrEmpty(request.ArticleIds))
                    entities = entities.Where(en => en.ArticleId.In(request.ArticleIds));
                if(!DocTools.IsNullOrEmpty(request.Authors))
                    entities = entities.Where(en => en.Authors.Contains(request.Authors));
                if(!DocTools.IsNullOrEmpty(request.Authorss))
                    entities = entities.Where(en => en.Authors.In(request.Authorss));
                if(!DocTools.IsNullOrEmpty(request.CochraneID))
                    entities = entities.Where(en => en.CochraneID.Contains(request.CochraneID));
                if(!DocTools.IsNullOrEmpty(request.CochraneIDs))
                    entities = entities.Where(en => en.CochraneID.In(request.CochraneIDs));
                if(!DocTools.IsNullOrEmpty(request.CorporateAuthor))
                    entities = entities.Where(en => en.CorporateAuthor.Contains(request.CorporateAuthor));
                if(!DocTools.IsNullOrEmpty(request.CorporateAuthors))
                    entities = entities.Where(en => en.CorporateAuthor.In(request.CorporateAuthors));
                if(!DocTools.IsNullOrEmpty(request.Country))
                    entities = entities.Where(en => en.Country.Contains(request.Country));
                if(!DocTools.IsNullOrEmpty(request.Countrys))
                    entities = entities.Where(en => en.Country.In(request.Countrys));
                if(!DocTools.IsNullOrEmpty(request.DatabaseType) && !DocTools.IsNullOrEmpty(request.DatabaseType.Id))
                {
                    entities = entities.Where(en => en.DatabaseType.Id == request.DatabaseType.Id );
                }
                if(true == request.DatabaseTypeIds?.Any())
                {
                    entities = entities.Where(en => en.DatabaseType.Id.In(request.DatabaseTypeIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.DatabaseType) && !DocTools.IsNullOrEmpty(request.DatabaseType.Name))
                {
                    entities = entities.Where(en => en.DatabaseType.Name == request.DatabaseType.Name );
                }
                if(true == request.DatabaseTypeNames?.Any())
                {
                    entities = entities.Where(en => en.DatabaseType.Name.In(request.DatabaseTypeNames));
                }
                if(true == request.DocumentSetsIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentSets.Any(r => r.Id.In(request.DocumentSetsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.DocumentType) && !DocTools.IsNullOrEmpty(request.DocumentType.Id))
                {
                    entities = entities.Where(en => en.DocumentType.Id == request.DocumentType.Id );
                }
                if(true == request.DocumentTypeIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentType.Id.In(request.DocumentTypeIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.DocumentType) && !DocTools.IsNullOrEmpty(request.DocumentType.Name))
                {
                    entities = entities.Where(en => en.DocumentType.Name == request.DocumentType.Name );
                }
                if(true == request.DocumentTypeNames?.Any())
                {
                    entities = entities.Where(en => en.DocumentType.Name.In(request.DocumentTypeNames));
                }
                if(!DocTools.IsNullOrEmpty(request.DOI))
                    entities = entities.Where(en => en.DOI.Contains(request.DOI));
                if(!DocTools.IsNullOrEmpty(request.DOIs))
                    entities = entities.Where(en => en.DOI.In(request.DOIs));
                if(!DocTools.IsNullOrEmpty(request.EmbaseAccessionNumber))
                    entities = entities.Where(en => en.EmbaseAccessionNumber.Contains(request.EmbaseAccessionNumber));
                if(!DocTools.IsNullOrEmpty(request.EmbaseAccessionNumbers))
                    entities = entities.Where(en => en.EmbaseAccessionNumber.In(request.EmbaseAccessionNumbers));
                if(!DocTools.IsNullOrEmpty(request.Emtree))
                    entities = entities.Where(en => en.Emtree.Contains(request.Emtree));
                if(!DocTools.IsNullOrEmpty(request.Emtrees))
                    entities = entities.Where(en => en.Emtree.In(request.Emtrees));
                if(!DocTools.IsNullOrEmpty(request.ErrataText))
                    entities = entities.Where(en => en.ErrataText.Contains(request.ErrataText));
                if(!DocTools.IsNullOrEmpty(request.ErrataTexts))
                    entities = entities.Where(en => en.ErrataText.In(request.ErrataTexts));
                if(!DocTools.IsNullOrEmpty(request.FullText))
                    entities = entities.Where(en => en.FullText.Contains(request.FullText));
                if(!DocTools.IsNullOrEmpty(request.FullTexts))
                    entities = entities.Where(en => en.FullText.In(request.FullTexts));
                if(!DocTools.IsNullOrEmpty(request.FullTextURL))
                    entities = entities.Where(en => en.FullTextURL.Contains(request.FullTextURL));
                if(!DocTools.IsNullOrEmpty(request.FullTextURLs))
                    entities = entities.Where(en => en.FullTextURL.In(request.FullTextURLs));
                if(!DocTools.IsNullOrEmpty(request.Import) && !DocTools.IsNullOrEmpty(request.Import.Id))
                {
                    entities = entities.Where(en => en.Import.Id == request.Import.Id );
                }
                if(true == request.ImportIds?.Any())
                {
                    entities = entities.Where(en => en.Import.Id.In(request.ImportIds));
                }
                if(!DocTools.IsNullOrEmpty(request.ImportType) && !DocTools.IsNullOrEmpty(request.ImportType.Id))
                {
                    entities = entities.Where(en => en.ImportType.Id == request.ImportType.Id );
                }
                if(true == request.ImportTypeIds?.Any())
                {
                    entities = entities.Where(en => en.ImportType.Id.In(request.ImportTypeIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.ImportType) && !DocTools.IsNullOrEmpty(request.ImportType.Name))
                {
                    entities = entities.Where(en => en.ImportType.Name == request.ImportType.Name );
                }
                if(true == request.ImportTypeNames?.Any())
                {
                    entities = entities.Where(en => en.ImportType.Name.In(request.ImportTypeNames));
                }
                if(!DocTools.IsNullOrEmpty(request.Institution))
                    entities = entities.Where(en => en.Institution.Contains(request.Institution));
                if(!DocTools.IsNullOrEmpty(request.Institutions))
                    entities = entities.Where(en => en.Institution.In(request.Institutions));
                if(!DocTools.IsNullOrEmpty(request.ISSN))
                    entities = entities.Where(en => en.ISSN.Contains(request.ISSN));
                if(!DocTools.IsNullOrEmpty(request.ISSNs))
                    entities = entities.Where(en => en.ISSN.In(request.ISSNs));
                if(!DocTools.IsNullOrEmpty(request.Issue))
                    entities = entities.Where(en => en.Issue.Contains(request.Issue));
                if(!DocTools.IsNullOrEmpty(request.Issues))
                    entities = entities.Where(en => en.Issue.In(request.Issues));
                if(!DocTools.IsNullOrEmpty(request.JournalTitle))
                    entities = entities.Where(en => en.JournalTitle.Contains(request.JournalTitle));
                if(!DocTools.IsNullOrEmpty(request.JournalTitles))
                    entities = entities.Where(en => en.JournalTitle.In(request.JournalTitles));
                if(!DocTools.IsNullOrEmpty(request.LegacySync))
                    entities = entities.Where(en => null != en.LegacySync && request.LegacySync.Value.Date == en.LegacySync.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.LegacySyncBefore))
                    entities = entities.Where(en => en.LegacySync <= request.LegacySyncBefore);
                if(!DocTools.IsNullOrEmpty(request.LegacySyncAfter))
                    entities = entities.Where(en => en.LegacySync >= request.LegacySyncAfter);
                if(true == request.LookupTablesIds?.Any())
                {
                    entities = entities.Where(en => en.LookupTables.Any(r => r.Id.In(request.LookupTablesIds)));
                }
                if(request.MedlineID.HasValue)
                    entities = entities.Where(en => request.MedlineID.Value == en.MedlineID);
                if(!DocTools.IsNullOrEmpty(request.MeSH))
                    entities = entities.Where(en => en.MeSH.Contains(request.MeSH));
                if(!DocTools.IsNullOrEmpty(request.MeSHs))
                    entities = entities.Where(en => en.MeSH.In(request.MeSHs));
                if(!DocTools.IsNullOrEmpty(request.Pages))
                    entities = entities.Where(en => en.Pages.Contains(request.Pages));
                if(!DocTools.IsNullOrEmpty(request.Pagess))
                    entities = entities.Where(en => en.Pages.In(request.Pagess));
                if(request.ParentChildStatus.HasValue)
                    entities = entities.Where(en => request.ParentChildStatus.Value == en.ParentChildStatus);
                if(request.ParentID.HasValue)
                    entities = entities.Where(en => request.ParentID.Value == en.ParentID);
                if(!DocTools.IsNullOrEmpty(request.PublicationDate))
                    entities = entities.Where(en => en.PublicationDate.Contains(request.PublicationDate));
                if(!DocTools.IsNullOrEmpty(request.PublicationDates))
                    entities = entities.Where(en => en.PublicationDate.In(request.PublicationDates));
                if(request.PublicationYear.HasValue)
                    entities = entities.Where(en => request.PublicationYear.Value == en.PublicationYear);
                if(!DocTools.IsNullOrEmpty(request.PubType))
                    entities = entities.Where(en => en.PubType.Contains(request.PubType));
                if(!DocTools.IsNullOrEmpty(request.PubTypes))
                    entities = entities.Where(en => en.PubType.In(request.PubTypes));
                if(request.ReferenceStudy.HasValue)
                    entities = entities.Where(en => request.ReferenceStudy.Value == en.ReferenceStudy);
                if(!DocTools.IsNullOrEmpty(request.SecondarySourceID))
                    entities = entities.Where(en => en.SecondarySourceID.Contains(request.SecondarySourceID));
                if(!DocTools.IsNullOrEmpty(request.SecondarySourceIDs))
                    entities = entities.Where(en => en.SecondarySourceID.In(request.SecondarySourceIDs));
                if(!DocTools.IsNullOrEmpty(request.Source))
                    entities = entities.Where(en => en.Source.Contains(request.Source));
                if(!DocTools.IsNullOrEmpty(request.Sources))
                    entities = entities.Where(en => en.Source.In(request.Sources));
                if(!DocTools.IsNullOrEmpty(request.TaStudyDesign))
                    entities = entities.Where(en => en.TaStudyDesign.Contains(request.TaStudyDesign));
                if(!DocTools.IsNullOrEmpty(request.TaStudyDesigns))
                    entities = entities.Where(en => en.TaStudyDesign.In(request.TaStudyDesigns));
                if(!DocTools.IsNullOrEmpty(request.Title))
                    entities = entities.Where(en => en.Title.Contains(request.Title));
                if(!DocTools.IsNullOrEmpty(request.Titles))
                    entities = entities.Where(en => en.Title.In(request.Titles));
                if(request.TrialOutcome.HasValue)
                    entities = entities.Where(en => request.TrialOutcome.Value == en.TrialOutcome);
                if(true == request.VariableDataIds?.Any())
                {
                    entities = entities.Where(en => en.VariableData.Any(r => r.Id.In(request.VariableDataIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Volume))
                    entities = entities.Where(en => en.Volume.Contains(request.Volume));
                if(!DocTools.IsNullOrEmpty(request.Volumes))
                    entities = entities.Where(en => en.Volume.In(request.Volumes));

                entities = ApplyFilters<DocEntityDocument,DocumentSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Post(DocumentSearch request) => Get(request);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Get(DocumentSearch request) => GetSearchResultWithCache<Document,DocEntityDocument,DocumentSearch>(DocConstantModelName.DOCUMENT, request, _ExecSearch);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Get(Document request) => GetEntityWithCache<Document>(DocConstantModelName.DOCUMENT, request, GetDocument);



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private Document _AssignValues(Document request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "Document"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.Select = request.Select ?? new List<string>();

            Document ret = null;
            request = _InitAssignValues<Document>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<Document>(DocConstantModelName.DOCUMENT, nameof(Document), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pAbstract = request.Abstract;
            var pAccessionID = request.AccessionID;
            var pAcronym = request.Acronym;
            var pArticleId = request.ArticleId;
            var pAuthors = request.Authors;
            var pCochraneID = request.CochraneID;
            var pCorporateAuthor = request.CorporateAuthor;
            var pCountry = request.Country;
            var pCustomData = request.CustomData;
            DocEntityLookupTable pDatabaseType = GetLookup(DocConstantLookupTable.DATABASETYPE, request.DatabaseType?.Name, request.DatabaseType?.Id);
            var pDocumentSets = GetVariable<Reference>(request, nameof(request.DocumentSets), request.DocumentSets?.ToList(), request.DocumentSetsIds?.ToList());
            DocEntityLookupTable pDocumentType = GetLookup(DocConstantLookupTable.DOCUMENTTYPE, request.DocumentType?.Name, request.DocumentType?.Id);
            var pDOI = request.DOI;
            var pEmbaseAccessionNumber = request.EmbaseAccessionNumber;
            var pEmtree = request.Emtree;
            var pErrataText = request.ErrataText;
            var pFullText = request.FullText;
            var pFullTextURL = request.FullTextURL;
            var pImport = (request.Import?.Id > 0) ? DocEntityImportData.Get(request.Import.Id) : null;
            DocEntityLookupTable pImportType = GetLookup(DocConstantLookupTable.STUDYIMPORTTYPE, request.ImportType?.Name, request.ImportType?.Id);
            var pInstitution = request.Institution;
            var pISSN = request.ISSN;
            var pIssue = request.Issue;
            var pJournalTitle = request.JournalTitle;
            var pLegacySync = request.LegacySync;
            var pLookupTables = GetVariable<Reference>(request, nameof(request.LookupTables), request.LookupTables?.ToList(), request.LookupTablesIds?.ToList());
            var pMedlineID = request.MedlineID;
            var pMeSH = request.MeSH;
            var pPages = request.Pages;
            var pParentChildStatus = request.ParentChildStatus;
            var pParentID = request.ParentID;
            var pPublicationDate = request.PublicationDate;
            var pPublicationYear = request.PublicationYear;
            var pPubType = request.PubType;
            var pReferenceStudy = request.ReferenceStudy;
            var pSecondarySourceID = request.SecondarySourceID;
            var pSource = request.Source;
            var pStorageModel = request.StorageModel;
            var pSupplementalFiles = request.SupplementalFiles;
            var pTaStudyDesign = request.TaStudyDesign;
            var pTitle = request.Title;
            var pTrialOutcome = request.TrialOutcome;
            var pVariableData = GetVariable<Reference>(request, nameof(request.VariableData), request.VariableData?.ToList(), request.VariableDataIds?.ToList());
            var pVolume = request.Volume;
            var pArchived = true == request.Archived;
            var pLocked = request.Locked;

            var entity = InitEntity<DocEntityDocument,Document>(request, permission, session);

            if (AllowPatchValue<Document, bool>(request, DocConstantModelName.DOCUMENT, pArchived, permission, nameof(request.Archived), pArchived != entity.Archived))
            {
                entity.Archived = pArchived;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pAbstract, permission, nameof(request.Abstract), pAbstract != entity.Abstract))
            {
                entity.Abstract = pAbstract;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pAccessionID, permission, nameof(request.AccessionID), pAccessionID != entity.AccessionID))
            {
                entity.AccessionID = pAccessionID;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pAcronym, permission, nameof(request.Acronym), pAcronym != entity.Acronym))
            {
                entity.Acronym = pAcronym;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pArticleId, permission, nameof(request.ArticleId), pArticleId != entity.ArticleId))
            {
                entity.ArticleId = pArticleId;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pAuthors, permission, nameof(request.Authors), pAuthors != entity.Authors))
            {
                entity.Authors = pAuthors;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pCochraneID, permission, nameof(request.CochraneID), pCochraneID != entity.CochraneID))
            {
                entity.CochraneID = pCochraneID;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pCorporateAuthor, permission, nameof(request.CorporateAuthor), pCorporateAuthor != entity.CorporateAuthor))
            {
                entity.CorporateAuthor = pCorporateAuthor;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pCountry, permission, nameof(request.Country), pCountry != entity.Country))
            {
                entity.Country = pCountry;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pCustomData, permission, nameof(request.CustomData), pCustomData != entity.CustomData))
            {
                entity.CustomData = pCustomData;
            }
            if (AllowPatchValue<Document, DocEntityLookupTable>(request, DocConstantModelName.DOCUMENT, pDatabaseType, permission, nameof(request.DatabaseType), pDatabaseType != entity.DatabaseType))
            {
                entity.DatabaseType = pDatabaseType;
            }
            if (AllowPatchValue<Document, DocEntityLookupTable>(request, DocConstantModelName.DOCUMENT, pDocumentType, permission, nameof(request.DocumentType), pDocumentType != entity.DocumentType))
            {
                entity.DocumentType = pDocumentType;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pDOI, permission, nameof(request.DOI), pDOI != entity.DOI))
            {
                entity.DOI = pDOI;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pEmbaseAccessionNumber, permission, nameof(request.EmbaseAccessionNumber), pEmbaseAccessionNumber != entity.EmbaseAccessionNumber))
            {
                entity.EmbaseAccessionNumber = pEmbaseAccessionNumber;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pEmtree, permission, nameof(request.Emtree), pEmtree != entity.Emtree))
            {
                entity.Emtree = pEmtree;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pErrataText, permission, nameof(request.ErrataText), pErrataText != entity.ErrataText))
            {
                entity.ErrataText = pErrataText;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pFullText, permission, nameof(request.FullText), pFullText != entity.FullText))
            {
                entity.FullText = pFullText;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pFullTextURL, permission, nameof(request.FullTextURL), pFullTextURL != entity.FullTextURL))
            {
                entity.FullTextURL = pFullTextURL;
            }
            if (AllowPatchValue<Document, DocEntityImportData>(request, DocConstantModelName.DOCUMENT, pImport, permission, nameof(request.Import), pImport != entity.Import))
            {
                entity.Import = pImport;
            }
            if (AllowPatchValue<Document, DocEntityLookupTable>(request, DocConstantModelName.DOCUMENT, pImportType, permission, nameof(request.ImportType), pImportType != entity.ImportType))
            {
                entity.ImportType = pImportType;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pInstitution, permission, nameof(request.Institution), pInstitution != entity.Institution))
            {
                entity.Institution = pInstitution;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pISSN, permission, nameof(request.ISSN), pISSN != entity.ISSN))
            {
                entity.ISSN = pISSN;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pIssue, permission, nameof(request.Issue), pIssue != entity.Issue))
            {
                entity.Issue = pIssue;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pJournalTitle, permission, nameof(request.JournalTitle), pJournalTitle != entity.JournalTitle))
            {
                entity.JournalTitle = pJournalTitle;
            }
            if (AllowPatchValue<Document, DateTime?>(request, DocConstantModelName.DOCUMENT, pLegacySync, permission, nameof(request.LegacySync), pLegacySync != entity.LegacySync))
            {
                entity.LegacySync = pLegacySync;
            }
            if (AllowPatchValue<Document, int?>(request, DocConstantModelName.DOCUMENT, pMedlineID, permission, nameof(request.MedlineID), pMedlineID != entity.MedlineID))
            {
                entity.MedlineID = pMedlineID;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pMeSH, permission, nameof(request.MeSH), pMeSH != entity.MeSH))
            {
                entity.MeSH = pMeSH;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pPages, permission, nameof(request.Pages), pPages != entity.Pages))
            {
                entity.Pages = pPages;
            }
            if (AllowPatchValue<Document, char?>(request, DocConstantModelName.DOCUMENT, pParentChildStatus, permission, nameof(request.ParentChildStatus), pParentChildStatus != entity.ParentChildStatus))
            {
                entity.ParentChildStatus = pParentChildStatus;
            }
            if (AllowPatchValue<Document, int?>(request, DocConstantModelName.DOCUMENT, pParentID, permission, nameof(request.ParentID), pParentID != entity.ParentID))
            {
                entity.ParentID = pParentID;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pPublicationDate, permission, nameof(request.PublicationDate), pPublicationDate != entity.PublicationDate))
            {
                entity.PublicationDate = pPublicationDate;
            }
            if (AllowPatchValue<Document, int?>(request, DocConstantModelName.DOCUMENT, pPublicationYear, permission, nameof(request.PublicationYear), pPublicationYear != entity.PublicationYear))
            {
                entity.PublicationYear = pPublicationYear;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pPubType, permission, nameof(request.PubType), pPubType != entity.PubType))
            {
                entity.PubType = pPubType;
            }
            if (AllowPatchValue<Document, int?>(request, DocConstantModelName.DOCUMENT, pReferenceStudy, permission, nameof(request.ReferenceStudy), pReferenceStudy != entity.ReferenceStudy))
            {
                if(null != pReferenceStudy) entity.ReferenceStudy = (int) pReferenceStudy;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pSecondarySourceID, permission, nameof(request.SecondarySourceID), pSecondarySourceID != entity.SecondarySourceID))
            {
                entity.SecondarySourceID = pSecondarySourceID;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pSource, permission, nameof(request.Source), pSource != entity.Source))
            {
                entity.Source = pSource;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pStorageModel, permission, nameof(request.StorageModel), pStorageModel != entity.StorageModel))
            {
                entity.StorageModel = pStorageModel;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pSupplementalFiles, permission, nameof(request.SupplementalFiles), pSupplementalFiles != entity.SupplementalFiles))
            {
                entity.SupplementalFiles = pSupplementalFiles;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pTaStudyDesign, permission, nameof(request.TaStudyDesign), pTaStudyDesign != entity.TaStudyDesign))
            {
                entity.TaStudyDesign = pTaStudyDesign;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pTitle, permission, nameof(request.Title), pTitle != entity.Title))
            {
                entity.Title = pTitle;
            }
            if (AllowPatchValue<Document, short?>(request, DocConstantModelName.DOCUMENT, pTrialOutcome, permission, nameof(request.TrialOutcome), pTrialOutcome != entity.TrialOutcome))
            {
                entity.TrialOutcome = pTrialOutcome;
            }
            if (AllowPatchValue<Document, string>(request, DocConstantModelName.DOCUMENT, pVolume, permission, nameof(request.Volume), pVolume != entity.Volume))
            {
                entity.Volume = pVolume;
            }
            if (request.Locked && AllowPatchValue<Document, bool>(request, DocConstantModelName.DOCUMENT, pArchived, permission, nameof(request.Locked), pLocked != entity.Locked))
            {
                entity.Archived = pArchived;
            }
            entity.SaveChanges(permission);

            var idsToInvalidate = new List<int>();
            idsToInvalidate.AddRange(PatchCollection<Document, DocEntityDocument, Reference, DocEntityDocumentSet>(request, entity, pDocumentSets, permission, nameof(request.DocumentSets)));
            idsToInvalidate.AddRange(PatchCollection<Document, DocEntityDocument, Reference, DocEntityLookupTable>(request, entity, pLookupTables, permission, nameof(request.LookupTables)));
            idsToInvalidate.AddRange(PatchCollection<Document, DocEntityDocument, Reference, DocEntityVariableInstance>(request, entity, pVariableData, permission, nameof(request.VariableData)));
            if (idsToInvalidate.Any())
            {
                idsToInvalidate.Add(entity.Id);
                DocCacheClient.RemoveByEntityIds(idsToInvalidate);
                DocCacheClient.RemoveSearch(DocConstantModelName.DOCUMENT);
            }

            DocPermissionFactory.SetSelect<Document>(currentUser, nameof(Document), request.Select);
            ret = entity.ToDto();

            var cacheExpires = DocResources.Metadata.GetCacheExpiration(DocConstantModelName.DOCUMENT);
            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.DOCUMENT, cacheExpires);

            return ret;
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Document Post(Document request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.Select = request.Select ?? new List<string>();

            Document ret = null;

            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "Document")) 
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
                });
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Document> Post(DocumentBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Document>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as Document;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Document Post(DocumentCopy request)
        {
            Document ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    var entity = DocEntityDocument.Get(request?.Id);
                    if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                    if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    var pAbstract = entity.Abstract;
                    var pAccessionID = entity.AccessionID;
                    if(!DocTools.IsNullOrEmpty(pAccessionID))
                        pAccessionID += " (Copy)";
                    var pAcronym = entity.Acronym;
                    if(!DocTools.IsNullOrEmpty(pAcronym))
                        pAcronym += " (Copy)";
                    var pArticleId = entity.ArticleId;
                    if(!DocTools.IsNullOrEmpty(pArticleId))
                        pArticleId += " (Copy)";
                    var pAuthors = entity.Authors;
                    if(!DocTools.IsNullOrEmpty(pAuthors))
                        pAuthors += " (Copy)";
                    var pCochraneID = entity.CochraneID;
                    if(!DocTools.IsNullOrEmpty(pCochraneID))
                        pCochraneID += " (Copy)";
                    var pCorporateAuthor = entity.CorporateAuthor;
                    if(!DocTools.IsNullOrEmpty(pCorporateAuthor))
                        pCorporateAuthor += " (Copy)";
                    var pCountry = entity.Country;
                    if(!DocTools.IsNullOrEmpty(pCountry))
                        pCountry += " (Copy)";
                    var pCustomData = entity.CustomData;
                    var pDatabaseType = entity.DatabaseType;
                    var pDocumentSets = entity.DocumentSets.ToList();
                    var pDocumentType = entity.DocumentType;
                    var pDOI = entity.DOI;
                    if(!DocTools.IsNullOrEmpty(pDOI))
                        pDOI += " (Copy)";
                    var pEmbaseAccessionNumber = entity.EmbaseAccessionNumber;
                    if(!DocTools.IsNullOrEmpty(pEmbaseAccessionNumber))
                        pEmbaseAccessionNumber += " (Copy)";
                    var pEmtree = entity.Emtree;
                    if(!DocTools.IsNullOrEmpty(pEmtree))
                        pEmtree += " (Copy)";
                    var pErrataText = entity.ErrataText;
                    if(!DocTools.IsNullOrEmpty(pErrataText))
                        pErrataText += " (Copy)";
                    var pFullText = entity.FullText;
                    if(!DocTools.IsNullOrEmpty(pFullText))
                        pFullText += " (Copy)";
                    var pFullTextURL = entity.FullTextURL;
                    if(!DocTools.IsNullOrEmpty(pFullTextURL))
                        pFullTextURL += " (Copy)";
                    var pImport = entity.Import;
                    var pImportType = entity.ImportType;
                    var pInstitution = entity.Institution;
                    if(!DocTools.IsNullOrEmpty(pInstitution))
                        pInstitution += " (Copy)";
                    var pISSN = entity.ISSN;
                    if(!DocTools.IsNullOrEmpty(pISSN))
                        pISSN += " (Copy)";
                    var pIssue = entity.Issue;
                    if(!DocTools.IsNullOrEmpty(pIssue))
                        pIssue += " (Copy)";
                    var pJournalTitle = entity.JournalTitle;
                    if(!DocTools.IsNullOrEmpty(pJournalTitle))
                        pJournalTitle += " (Copy)";
                    var pLegacySync = entity.LegacySync;
                    var pLookupTables = entity.LookupTables.ToList();
                    var pMedlineID = entity.MedlineID;
                    var pMeSH = entity.MeSH;
                    if(!DocTools.IsNullOrEmpty(pMeSH))
                        pMeSH += " (Copy)";
                    var pPages = entity.Pages;
                    if(!DocTools.IsNullOrEmpty(pPages))
                        pPages += " (Copy)";
                    var pParentChildStatus = entity.ParentChildStatus;
                    var pParentID = entity.ParentID;
                    var pPublicationDate = entity.PublicationDate;
                    if(!DocTools.IsNullOrEmpty(pPublicationDate))
                        pPublicationDate += " (Copy)";
                    var pPublicationYear = entity.PublicationYear;
                    var pPubType = entity.PubType;
                    if(!DocTools.IsNullOrEmpty(pPubType))
                        pPubType += " (Copy)";
                    var pReferenceStudy = entity.ReferenceStudy;
                    var pSecondarySourceID = entity.SecondarySourceID;
                    if(!DocTools.IsNullOrEmpty(pSecondarySourceID))
                        pSecondarySourceID += " (Copy)";
                    var pSource = entity.Source;
                    if(!DocTools.IsNullOrEmpty(pSource))
                        pSource += " (Copy)";
                    var pStorageModel = entity.StorageModel;
                    var pSupplementalFiles = entity.SupplementalFiles;
                    var pTaStudyDesign = entity.TaStudyDesign;
                    if(!DocTools.IsNullOrEmpty(pTaStudyDesign))
                        pTaStudyDesign += " (Copy)";
                    var pTitle = entity.Title;
                    if(!DocTools.IsNullOrEmpty(pTitle))
                        pTitle += " (Copy)";
                    var pTrialOutcome = entity.TrialOutcome;
                    var pVariableData = entity.VariableData.ToList();
                    var pVolume = entity.Volume;
                    if(!DocTools.IsNullOrEmpty(pVolume))
                        pVolume += " (Copy)";
                    var copy = new DocEntityDocument(ssn)
                    {
                        Hash = Guid.NewGuid()
                                , Abstract = pAbstract
                                , AccessionID = pAccessionID
                                , Acronym = pAcronym
                                , ArticleId = pArticleId
                                , Authors = pAuthors
                                , CochraneID = pCochraneID
                                , CorporateAuthor = pCorporateAuthor
                                , Country = pCountry
                                , CustomData = pCustomData
                                , DatabaseType = pDatabaseType
                                , DocumentType = pDocumentType
                                , DOI = pDOI
                                , EmbaseAccessionNumber = pEmbaseAccessionNumber
                                , Emtree = pEmtree
                                , ErrataText = pErrataText
                                , FullText = pFullText
                                , FullTextURL = pFullTextURL
                                , Import = pImport
                                , ImportType = pImportType
                                , Institution = pInstitution
                                , ISSN = pISSN
                                , Issue = pIssue
                                , JournalTitle = pJournalTitle
                                , LegacySync = pLegacySync
                                , MedlineID = pMedlineID
                                , MeSH = pMeSH
                                , Pages = pPages
                                , ParentChildStatus = pParentChildStatus
                                , ParentID = pParentID
                                , PublicationDate = pPublicationDate
                                , PublicationYear = pPublicationYear
                                , PubType = pPubType
                                , ReferenceStudy = pReferenceStudy
                                , SecondarySourceID = pSecondarySourceID
                                , Source = pSource
                                , StorageModel = pStorageModel
                                , SupplementalFiles = pSupplementalFiles
                                , TaStudyDesign = pTaStudyDesign
                                , Title = pTitle
                                , TrialOutcome = pTrialOutcome
                                , Volume = pVolume
                    };
                            foreach(var item in pDocumentSets)
                            {
                                entity.DocumentSets.Add(item);
                            }

                            foreach(var item in pLookupTables)
                            {
                                entity.LookupTables.Add(item);
                            }

                            foreach(var item in pVariableData)
                            {
                                entity.VariableData.Add(item);
                            }

                    copy.SaveChanges(DocConstantPermission.ADD);
                    ret = copy.ToDto();
                });
            }
            return ret;
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Document> Put(DocumentBatch request)
        {
            return Patch(request);
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Document Put(Document request)
        {
            return Patch(request);
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<Document> Patch(DocumentBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Document>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as Document;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public Document Patch(Document request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the Document to patch.");
            
            request.Select = request.Select ?? new List<string>();
            
            Document ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
                });
            }
            return ret;
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Delete(DocumentBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Delete(Document request)
        {
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!(request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, $"No Id provided for delete.");

                    var en = DocEntityDocument.Get(request?.Id);
                    if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No Document could be found for Id {request?.Id}.");
                    if(en.IsRemoved) return;
                
                    if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                    en.Remove();

                    DocCacheClient.RemoveSearch(DocConstantModelName.DOCUMENT);
                    DocCacheClient.RemoveById(request.Id);
                });
            }
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public void Delete(DocumentSearch request)
        {
            var matches = Get(request) as List<Document>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");
            matches.ForEach(match =>
            {
                Delete(match);
            });
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Get(DocumentJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "comment":
                        return GetJunctionSearchResult<Document, DocEntityDocument, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request, (ss) => HostContext.ResolveService<CommentService>(Request)?.Get(ss));
                    case "documentset":
                        return GetJunctionSearchResult<Document, DocEntityDocument, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request, (ss) => HostContext.ResolveService<DocumentSetService>(Request)?.Get(ss));
                    case "favorite":
                        return GetJunctionSearchResult<Document, DocEntityDocument, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request, (ss) => HostContext.ResolveService<FavoriteService>(Request)?.Get(ss));
                    case "file":
                        return GetJunctionSearchResult<Document, DocEntityDocument, DocEntityFile, File, FileSearch>((int)request.Id, DocConstantModelName.FILE, "Files", request, (ss) => HostContext.ResolveService<FileService>(Request)?.Get(ss));
                    case "lookuptable":
                        return GetJunctionSearchResult<Document, DocEntityDocument, DocEntityLookupTable, LookupTable, LookupTableSearch>((int)request.Id, DocConstantModelName.LOOKUPTABLE, "LookupTables", request, (ss) => HostContext.ResolveService<LookupTableService>(Request)?.Get(ss));
                    case "tag":
                        return GetJunctionSearchResult<Document, DocEntityDocument, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "variableinstance":
                        return GetJunctionSearchResult<Document, DocEntityDocument, DocEntityVariableInstance, VariableInstance, VariableInstanceSearch>((int)request.Id, DocConstantModelName.VARIABLEINSTANCE, "VariableData", request, (ss) => HostContext.ResolveService<VariableInstanceService>(Request)?.Get(ss));
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for document/{request.Id}/{request.Junction} was not found");
            }
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Post(DocumentJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "comment":
                        return AddJunction<Document, DocEntityDocument, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "documentset":
                        return AddJunction<Document, DocEntityDocument, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request);
                    case "favorite":
                        return AddJunction<Document, DocEntityDocument, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "file":
                        return AddJunction<Document, DocEntityDocument, DocEntityFile, File, FileSearch>((int)request.Id, DocConstantModelName.FILE, "Files", request);
                    case "lookuptable":
                        return AddJunction<Document, DocEntityDocument, DocEntityLookupTable, LookupTable, LookupTableSearch>((int)request.Id, DocConstantModelName.LOOKUPTABLE, "LookupTables", request);
                    case "tag":
                        return AddJunction<Document, DocEntityDocument, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "variableinstance":
                        return AddJunction<Document, DocEntityDocument, DocEntityVariableInstance, VariableInstance, VariableInstanceSearch>((int)request.Id, DocConstantModelName.VARIABLEINSTANCE, "VariableData", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for document/{request.Id}/{request.Junction} was not found");
            }
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Delete(DocumentJunction request)
        {    
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "comment":
                        return RemoveJunction<Document, DocEntityDocument, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "documentset":
                        return RemoveJunction<Document, DocEntityDocument, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request);
                    case "favorite":
                        return RemoveJunction<Document, DocEntityDocument, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "file":
                        return RemoveJunction<Document, DocEntityDocument, DocEntityFile, File, FileSearch>((int)request.Id, DocConstantModelName.FILE, "Files", request);
                    case "lookuptable":
                        return RemoveJunction<Document, DocEntityDocument, DocEntityLookupTable, LookupTable, LookupTableSearch>((int)request.Id, DocConstantModelName.LOOKUPTABLE, "LookupTables", request);
                    case "tag":
                        return RemoveJunction<Document, DocEntityDocument, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "variableinstance":
                        return RemoveJunction<Document, DocEntityDocument, DocEntityVariableInstance, VariableInstance, VariableInstanceSearch>((int)request.Id, DocConstantModelName.VARIABLEINSTANCE, "VariableData", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for document/{request.Id}/{request.Junction} was not found");
            }
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private Document GetDocument(Document request)
        {
            var id = request?.Id;
            Document ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetSelect<Document>(currentUser, "Document", request.Select);

            DocEntityDocument entity = null;
            if(id.HasValue)
            {
                entity = DocEntityDocument.Get(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Document found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

    }
}
