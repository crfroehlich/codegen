
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;

using Xtensive.Orm;


namespace Services.API
{
    public partial class FileService : DocServiceBase
    {

        private IQueryable<DocEntityFile> _ExecSearch(FileSearch request, DocQuery query)
        {
            request = InitSearch<File, FileSearch>(request);
            IQueryable<DocEntityFile> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityFile>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new FileFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityFile,FileFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.FILE, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }
                if(request.Cost.HasValue)
                    entities = entities.Where(en => request.Cost.Value == en.Cost);
                if(!DocTools.IsNullOrEmpty(request.FileLabel))
                    entities = entities.Where(en => en.FileLabel.Contains(request.FileLabel));
                if(!DocTools.IsNullOrEmpty(request.FileLabels))
                    entities = entities.Where(en => en.FileLabel.In(request.FileLabels));
                if(!DocTools.IsNullOrEmpty(request.FileName))
                    entities = entities.Where(en => en.FileName.Contains(request.FileName));
                if(!DocTools.IsNullOrEmpty(request.FileNames))
                    entities = entities.Where(en => en.FileName.In(request.FileNames));
                if(!DocTools.IsNullOrEmpty(request.OriginalFileName))
                    entities = entities.Where(en => en.OriginalFileName.Contains(request.OriginalFileName));
                if(!DocTools.IsNullOrEmpty(request.OriginalFileNames))
                    entities = entities.Where(en => en.OriginalFileName.In(request.OriginalFileNames));
                if(request.Rights.HasValue)
                    entities = entities.Where(en => request.Rights.Value == en.Rights);
                if(!DocTools.IsNullOrEmpty(request.Rightss))
                    entities = entities.Where(en => en.Rights.In(request.Rightss));
                if(true == request.ScopesIds?.Any())
                {
                    entities = entities.Where(en => en.Scopes.Any(r => r.Id.In(request.ScopesIds)));
                }
                if(request.Source.HasValue)
                    entities = entities.Where(en => request.Source.Value == en.Source);
                if(!DocTools.IsNullOrEmpty(request.Sources))
                    entities = entities.Where(en => en.Source.In(request.Sources));
                if(request.Type.HasValue)
                    entities = entities.Where(en => request.Type.Value == en.Type);
                if(!DocTools.IsNullOrEmpty(request.Types))
                    entities = entities.Where(en => en.Type.In(request.Types));

                entities = ApplyFilters<DocEntityFile,FileSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(FileSearch request) => Get(request);

        public object Get(FileSearch request) => GetSearchResultWithCache<File,DocEntityFile,FileSearch>(DocConstantModelName.FILE, request, _ExecSearch);

        public object Get(File request) => GetEntityWithCache<File>(DocConstantModelName.FILE, request, GetFile);








        public object Get(FileJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "comment":
                        return GetJunctionSearchResult<File, DocEntityFile, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request, (ss) => HostContext.ResolveService<CommentService>(Request)?.Get(ss));
                    case "favorite":
                        return GetJunctionSearchResult<File, DocEntityFile, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request, (ss) => HostContext.ResolveService<FavoriteService>(Request)?.Get(ss));
                    case "scope":
                        return GetJunctionSearchResult<File, DocEntityFile, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request, (ss) => HostContext.ResolveService<ScopeService>(Request)?.Get(ss));
                    case "tag":
                        return GetJunctionSearchResult<File, DocEntityFile, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for file/{request.Id}/{request.Junction} was not found");
            }
        }



        private File GetFile(File request)
        {
            var id = request?.Id;
            File ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetSelect<File>(currentUser, "File", request.Select);

            DocEntityFile entity = null;
            if(id.HasValue)
            {
                entity = DocEntityFile.Get(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No File found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

    }
}
