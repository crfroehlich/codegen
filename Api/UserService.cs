//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;
namespace Services.API
{
    public partial class UserService : DocServiceBase
    {
        private IQueryable<DocEntityUser> _ExecSearch(UserSearch request, DocQuery query)
        {
            request = InitSearch<User, UserSearch>(request);
            IQueryable<DocEntityUser> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityUser>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new UserFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityUser,UserFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.USER, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }

                if(!DocTools.IsNullOrEmpty(request.ClientDepartment))
                    entities = entities.Where(en => en.ClientDepartment.Contains(request.ClientDepartment));
                if(!DocTools.IsNullOrEmpty(request.Division) && !DocTools.IsNullOrEmpty(request.Division.Id))
                {
                    entities = entities.Where(en => en.Division.Id == request.Division.Id );
                }
                if(true == request.DivisionIds?.Any())
                {
                    entities = entities.Where(en => en.Division.Id.In(request.DivisionIds));
                }
                if(true == request.DocumentSetsIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentSets.Any(r => r.Id.In(request.DocumentSetsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Email))
                    entities = entities.Where(en => en.Email.Contains(request.Email));
                if(!DocTools.IsNullOrEmpty(request.ExpireDate))
                    entities = entities.Where(en => null != en.ExpireDate && request.ExpireDate.Value.Date == en.ExpireDate.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.ExpireDateBefore))
                    entities = entities.Where(en => en.ExpireDate <= request.ExpireDateBefore);
                if(!DocTools.IsNullOrEmpty(request.ExpireDateAfter))
                    entities = entities.Where(en => en.ExpireDate >= request.ExpireDateAfter);
                if(request.FailedLoginCount.HasValue)
                    entities = entities.Where(en => request.FailedLoginCount.Value == en.FailedLoginCount);
                if(!DocTools.IsNullOrEmpty(request.FirstName))
                    entities = entities.Where(en => en.FirstName.Contains(request.FirstName));
                if(!DocTools.IsNullOrEmpty(request.Gravatar))
                    entities = entities.Where(en => en.Gravatar.Contains(request.Gravatar));
                if(true == request.HistoryIds?.Any())
                {
                    entities = entities.Where(en => en.History.Any(r => r.Id.In(request.HistoryIds)));
                }
                if(true == request.ImpersonatedIds?.Any())
                {
                    entities = entities.Where(en => en.Impersonated.Any(r => r.Id.In(request.ImpersonatedIds)));
                }
                if(true == request.ImpersonatingIds?.Any())
                {
                    entities = entities.Where(en => en.Impersonating.Any(r => r.Id.In(request.ImpersonatingIds)));
                }
                if(true == request.IsSystemUser?.Any())
                {
                    if(request.IsSystemUser.Any(v => v == null)) entities = entities.Where(en => en.IsSystemUser.In(request.IsSystemUser) || en.IsSystemUser == null);
                    else entities = entities.Where(en => en.IsSystemUser.In(request.IsSystemUser));
                }
                if(!DocTools.IsNullOrEmpty(request.JobTitle))
                    entities = entities.Where(en => en.JobTitle.Contains(request.JobTitle));
                if(!DocTools.IsNullOrEmpty(request.LastLogin))
                    entities = entities.Where(en => null != en.LastLogin && request.LastLogin.Value.Date == en.LastLogin.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.LastLoginBefore))
                    entities = entities.Where(en => en.LastLogin <= request.LastLoginBefore);
                if(!DocTools.IsNullOrEmpty(request.LastLoginAfter))
                    entities = entities.Where(en => en.LastLogin >= request.LastLoginAfter);
                if(!DocTools.IsNullOrEmpty(request.LastName))
                    entities = entities.Where(en => en.LastName.Contains(request.LastName));
                if(!DocTools.IsNullOrEmpty(request.LegacyUsername))
                    entities = entities.Where(en => en.LegacyUsername.Contains(request.LegacyUsername));
                if(!DocTools.IsNullOrEmpty(request.Locale) && !DocTools.IsNullOrEmpty(request.Locale.Id))
                {
                    entities = entities.Where(en => en.Locale.Id == request.Locale.Id );
                }
                if(true == request.LocaleIds?.Any())
                {
                    entities = entities.Where(en => en.Locale.Id.In(request.LocaleIds));
                }
                if(request.LoginCount.HasValue)
                    entities = entities.Where(en => request.LoginCount.Value == en.LoginCount);
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(true == request.RolesIds?.Any())
                {
                    entities = entities.Where(en => en.Roles.Any(r => r.Id.In(request.RolesIds)));
                }
                if(true == request.ScopesIds?.Any())
                {
                    entities = entities.Where(en => en.Scopes.Any(r => r.Id.In(request.ScopesIds)));
                }
                if(true == request.SessionsIds?.Any())
                {
                    entities = entities.Where(en => en.Sessions.Any(r => r.Id.In(request.SessionsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Slack))
                    entities = entities.Where(en => en.Slack.Contains(request.Slack));
                if(!DocTools.IsNullOrEmpty(request.StartDate))
                    entities = entities.Where(en => null != en.StartDate && request.StartDate.Value.Date == en.StartDate.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.StartDateBefore))
                    entities = entities.Where(en => en.StartDate <= request.StartDateBefore);
                if(!DocTools.IsNullOrEmpty(request.StartDateAfter))
                    entities = entities.Where(en => en.StartDate >= request.StartDateAfter);
                if(!DocTools.IsNullOrEmpty(request.Status) && !DocTools.IsNullOrEmpty(request.Status.Id))
                {
                    entities = entities.Where(en => en.Status.Id == request.Status.Id );
                }
                if(true == request.StatusIds?.Any())
                {
                    entities = entities.Where(en => en.Status.Id.In(request.StatusIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.Status) && !DocTools.IsNullOrEmpty(request.Status.Name))
                {
                    entities = entities.Where(en => en.Status.Name == request.Status.Name );
                }
                if(true == request.StatusNames?.Any())
                {
                    entities = entities.Where(en => en.Status.Name.In(request.StatusNames));
                }
                if(true == request.TeamsIds?.Any())
                {
                    entities = entities.Where(en => en.Teams.Any(r => r.Id.In(request.TeamsIds)));
                }
                if(true == request.TimeCardsIds?.Any())
                {
                    entities = entities.Where(en => en.TimeCards.Any(r => r.Id.In(request.TimeCardsIds)));
                }
                if(true == request.UpdatesIds?.Any())
                {
                    entities = entities.Where(en => en.Updates.Any(r => r.Id.In(request.UpdatesIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.UserType) && !DocTools.IsNullOrEmpty(request.UserType.Id))
                {
                    entities = entities.Where(en => en.UserType.Id == request.UserType.Id );
                }
                if(true == request.UserTypeIds?.Any())
                {
                    entities = entities.Where(en => en.UserType.Id.In(request.UserTypeIds));
                }
                if(true == request.WorkflowsIds?.Any())
                {
                    entities = entities.Where(en => en.Workflows.Any(r => r.Id.In(request.WorkflowsIds)));
                }

                entities = ApplyFilters<DocEntityUser,UserSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(UserSearch request) => Get(request);

        public object Get(UserSearch request) => GetSearchResultWithCache<User,DocEntityUser,UserSearch>(DocConstantModelName.USER, request, _ExecSearch);

        public object Get(User request) => GetEntityWithCache<User>(DocConstantModelName.USER, request, GetUser);

        private User _AssignValues(User request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "User"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            User ret = null;
            request = _InitAssignValues<User>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<User>(DocConstantModelName.USER, nameof(User), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pClientDepartment = request.ClientDepartment;
            var pDivision = (request.Division?.Id > 0) ? DocEntityDivision.GetDivision(request.Division.Id) : null;
            var pDocumentSets = request.DocumentSets?.ToList();
            var pEmail = request.Email;
            var pExpireDate = request.ExpireDate;
            var pFailedLoginCount = request.FailedLoginCount;
            var pFirstName = request.FirstName;
            var pGravatar = request.Gravatar;
            var pHistory = request.History?.ToList();
            var pImpersonated = request.Impersonated?.ToList();
            var pImpersonating = request.Impersonating?.ToList();
            var pIsSystemUser = request.IsSystemUser;
            var pJobTitle = request.JobTitle;
            var pLastLogin = request.LastLogin;
            var pLastName = request.LastName;
            var pLegacyUsername = request.LegacyUsername;
            var pLocale = (request.Locale?.Id > 0) ? DocEntityLocale.GetLocale(request.Locale.Id) : null;
            var pLoginCount = request.LoginCount;
            var pName = request.Name;
            var pRoles = request.Roles?.ToList();
            var pScopes = request.Scopes?.ToList();
            var pSessions = request.Sessions?.ToList();
            var pSettings = request.Settings;
            var pSlack = request.Slack;
            var pStartDate = request.StartDate;
            DocEntityLookupTable pStatus = GetLookup(DocConstantLookupTable.STATUS, request.Status?.Name, request.Status?.Id);
            var pTeams = request.Teams?.ToList();
            var pTimeCards = request.TimeCards?.ToList();
            var pUpdates = request.Updates?.ToList();
            var pUserType = (request.UserType?.Id > 0) ? DocEntityUserType.GetUserType(request.UserType.Id) : null;
            var pWorkflows = request.Workflows?.ToList();

            DocEntityUser entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityUser(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityUser.GetUser(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            //Special case for Archived
            var pArchived = true == request.Archived;
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pArchived, permission, DocConstantModelName.USER, nameof(request.Archived)))
            {
                if(DocPermissionFactory.IsRequested(request, pArchived, entity.Archived, nameof(request.Archived)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.Archived)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Archived)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pArchived) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.Archived))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Archived)} requires a value.");
                    entity.Archived = pArchived;
                if(DocPermissionFactory.IsRequested<bool>(request, pArchived, nameof(request.Archived)) && !request.VisibleFields.Matches(nameof(request.Archived), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Archived));
                }
            }

            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pClientDepartment, permission, DocConstantModelName.USER, nameof(request.ClientDepartment)))
            {
                if(DocPermissionFactory.IsRequested(request, pClientDepartment, entity.ClientDepartment, nameof(request.ClientDepartment)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.ClientDepartment)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ClientDepartment)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pClientDepartment) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.ClientDepartment))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ClientDepartment)} requires a value.");
                    entity.ClientDepartment = pClientDepartment;
                if(DocPermissionFactory.IsRequested<string>(request, pClientDepartment, nameof(request.ClientDepartment)) && !request.VisibleFields.Matches(nameof(request.ClientDepartment), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ClientDepartment));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityDivision>(currentUser, request, pDivision, permission, DocConstantModelName.USER, nameof(request.Division)))
            {
                if(DocPermissionFactory.IsRequested(request, pDivision, entity.Division, nameof(request.Division)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.Division)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Division)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pDivision) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.Division))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Division)} requires a value.");
                    entity.Division = pDivision;
                if(DocPermissionFactory.IsRequested<DocEntityDivision>(request, pDivision, nameof(request.Division)) && !request.VisibleFields.Matches(nameof(request.Division), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Division));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pEmail, permission, DocConstantModelName.USER, nameof(request.Email)))
            {
                if(DocPermissionFactory.IsRequested(request, pEmail, entity.Email, nameof(request.Email)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.Email)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Email)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pEmail) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.Email))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Email)} requires a value.");
                    entity.Email = pEmail;
                if(DocPermissionFactory.IsRequested<string>(request, pEmail, nameof(request.Email)) && !request.VisibleFields.Matches(nameof(request.Email), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Email));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, request, pExpireDate, permission, DocConstantModelName.USER, nameof(request.ExpireDate)))
            {
                if(DocPermissionFactory.IsRequested(request, pExpireDate, entity.ExpireDate, nameof(request.ExpireDate)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.ExpireDate)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ExpireDate)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pExpireDate) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.ExpireDate))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.ExpireDate)} requires a value.");
                    entity.ExpireDate = pExpireDate;
                if(DocPermissionFactory.IsRequested<DateTime?>(request, pExpireDate, nameof(request.ExpireDate)) && !request.VisibleFields.Matches(nameof(request.ExpireDate), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ExpireDate));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pFailedLoginCount, permission, DocConstantModelName.USER, nameof(request.FailedLoginCount)))
            {
                if(DocPermissionFactory.IsRequested(request, pFailedLoginCount, entity.FailedLoginCount, nameof(request.FailedLoginCount)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.FailedLoginCount)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.FailedLoginCount)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pFailedLoginCount) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.FailedLoginCount))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.FailedLoginCount)} requires a value.");
                    if(null != pFailedLoginCount)
                        entity.FailedLoginCount = (int) pFailedLoginCount;
                if(DocPermissionFactory.IsRequested<int?>(request, pFailedLoginCount, nameof(request.FailedLoginCount)) && !request.VisibleFields.Matches(nameof(request.FailedLoginCount), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.FailedLoginCount));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pFirstName, permission, DocConstantModelName.USER, nameof(request.FirstName)))
            {
                if(DocPermissionFactory.IsRequested(request, pFirstName, entity.FirstName, nameof(request.FirstName)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.FirstName)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.FirstName)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pFirstName) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.FirstName))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.FirstName)} requires a value.");
                    entity.FirstName = pFirstName;
                if(DocPermissionFactory.IsRequested<string>(request, pFirstName, nameof(request.FirstName)) && !request.VisibleFields.Matches(nameof(request.FirstName), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.FirstName));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pGravatar, permission, DocConstantModelName.USER, nameof(request.Gravatar)))
            {
                if(DocPermissionFactory.IsRequested(request, pGravatar, entity.Gravatar, nameof(request.Gravatar)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.Gravatar)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Gravatar)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pGravatar) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.Gravatar))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Gravatar)} requires a value.");
                    entity.Gravatar = pGravatar;
                if(DocPermissionFactory.IsRequested<string>(request, pGravatar, nameof(request.Gravatar)) && !request.VisibleFields.Matches(nameof(request.Gravatar), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Gravatar));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pJobTitle, permission, DocConstantModelName.USER, nameof(request.JobTitle)))
            {
                if(DocPermissionFactory.IsRequested(request, pJobTitle, entity.JobTitle, nameof(request.JobTitle)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.JobTitle)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.JobTitle)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pJobTitle) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.JobTitle))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.JobTitle)} requires a value.");
                    entity.JobTitle = pJobTitle;
                if(DocPermissionFactory.IsRequested<string>(request, pJobTitle, nameof(request.JobTitle)) && !request.VisibleFields.Matches(nameof(request.JobTitle), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.JobTitle));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, request, pLastLogin, permission, DocConstantModelName.USER, nameof(request.LastLogin)))
            {
                if(DocPermissionFactory.IsRequested(request, pLastLogin, entity.LastLogin, nameof(request.LastLogin)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.LastLogin)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.LastLogin)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pLastLogin) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.LastLogin))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.LastLogin)} requires a value.");
                    entity.LastLogin = pLastLogin;
                if(DocPermissionFactory.IsRequested<DateTime?>(request, pLastLogin, nameof(request.LastLogin)) && !request.VisibleFields.Matches(nameof(request.LastLogin), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.LastLogin));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pLastName, permission, DocConstantModelName.USER, nameof(request.LastName)))
            {
                if(DocPermissionFactory.IsRequested(request, pLastName, entity.LastName, nameof(request.LastName)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.LastName)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.LastName)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pLastName) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.LastName))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.LastName)} requires a value.");
                    entity.LastName = pLastName;
                if(DocPermissionFactory.IsRequested<string>(request, pLastName, nameof(request.LastName)) && !request.VisibleFields.Matches(nameof(request.LastName), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.LastName));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pLegacyUsername, permission, DocConstantModelName.USER, nameof(request.LegacyUsername)))
            {
                if(DocPermissionFactory.IsRequested(request, pLegacyUsername, entity.LegacyUsername, nameof(request.LegacyUsername)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.LegacyUsername)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.LegacyUsername)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pLegacyUsername) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.LegacyUsername))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.LegacyUsername)} requires a value.");
                    entity.LegacyUsername = pLegacyUsername;
                if(DocPermissionFactory.IsRequested<string>(request, pLegacyUsername, nameof(request.LegacyUsername)) && !request.VisibleFields.Matches(nameof(request.LegacyUsername), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.LegacyUsername));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLocale>(currentUser, request, pLocale, permission, DocConstantModelName.USER, nameof(request.Locale)))
            {
                if(DocPermissionFactory.IsRequested(request, pLocale, entity.Locale, nameof(request.Locale)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.Locale)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Locale)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pLocale) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.Locale))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Locale)} requires a value.");
                    entity.Locale = pLocale;
                if(DocPermissionFactory.IsRequested<DocEntityLocale>(request, pLocale, nameof(request.Locale)) && !request.VisibleFields.Matches(nameof(request.Locale), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Locale));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pLoginCount, permission, DocConstantModelName.USER, nameof(request.LoginCount)))
            {
                if(DocPermissionFactory.IsRequested(request, pLoginCount, entity.LoginCount, nameof(request.LoginCount)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.LoginCount)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.LoginCount)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pLoginCount) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.LoginCount))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.LoginCount)} requires a value.");
                    if(null != pLoginCount)
                        entity.LoginCount = (int) pLoginCount;
                if(DocPermissionFactory.IsRequested<int?>(request, pLoginCount, nameof(request.LoginCount)) && !request.VisibleFields.Matches(nameof(request.LoginCount), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.LoginCount));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pName, permission, DocConstantModelName.USER, nameof(request.Name)))
            {
                if(DocPermissionFactory.IsRequested(request, pName, entity.Name, nameof(request.Name)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.Name)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Name)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pName) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.Name))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Name)} requires a value.");
                    entity.Name = pName;
                if(DocPermissionFactory.IsRequested<string>(request, pName, nameof(request.Name)) && !request.VisibleFields.Matches(nameof(request.Name), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Name));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<JsonObject>(currentUser, request, pSettings, permission, DocConstantModelName.USER, nameof(request.Settings)))
            {
                if(DocPermissionFactory.IsRequested(request, pSettings, entity.Settings, nameof(request.Settings)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.Settings)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Settings)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSettings) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.Settings))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Settings)} requires a value.");
                    entity.Settings = DocSerialize<JsonObject>.ToString(pSettings);
                if(DocPermissionFactory.IsRequested<JsonObject>(request, pSettings, nameof(request.Settings)) && !request.VisibleFields.Matches(nameof(request.Settings), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Settings));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pSlack, permission, DocConstantModelName.USER, nameof(request.Slack)))
            {
                if(DocPermissionFactory.IsRequested(request, pSlack, entity.Slack, nameof(request.Slack)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.Slack)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Slack)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSlack) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.Slack))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Slack)} requires a value.");
                    entity.Slack = pSlack;
                if(DocPermissionFactory.IsRequested<string>(request, pSlack, nameof(request.Slack)) && !request.VisibleFields.Matches(nameof(request.Slack), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Slack));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, request, pStartDate, permission, DocConstantModelName.USER, nameof(request.StartDate)))
            {
                if(DocPermissionFactory.IsRequested(request, pStartDate, entity.StartDate, nameof(request.StartDate)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.StartDate)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.StartDate)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pStartDate) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.StartDate))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.StartDate)} requires a value.");
                    entity.StartDate = pStartDate;
                if(DocPermissionFactory.IsRequested<DateTime?>(request, pStartDate, nameof(request.StartDate)) && !request.VisibleFields.Matches(nameof(request.StartDate), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.StartDate));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, request, pStatus, permission, DocConstantModelName.USER, nameof(request.Status)))
            {
                if(DocPermissionFactory.IsRequested(request, pStatus, entity.Status, nameof(request.Status)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.Status)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Status)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pStatus) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.Status))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Status)} requires a value.");
                    entity.Status = pStatus;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(request, pStatus, nameof(request.Status)) && !request.VisibleFields.Matches(nameof(request.Status), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Status));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityUserType>(currentUser, request, pUserType, permission, DocConstantModelName.USER, nameof(request.UserType)))
            {
                if(DocPermissionFactory.IsRequested(request, pUserType, entity.UserType, nameof(request.UserType)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.USER, nameof(request.UserType)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.UserType)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pUserType) && DocResources.Metadata.IsRequired(DocConstantModelName.USER, nameof(request.UserType))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.UserType)} requires a value.");
                    entity.UserType = pUserType;
                if(DocPermissionFactory.IsRequested<DocEntityUserType>(request, pUserType, nameof(request.UserType)) && !request.VisibleFields.Matches(nameof(request.UserType), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.UserType));
                }
            }

            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);

            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pDocumentSets, permission, DocConstantModelName.USER, nameof(request.DocumentSets)))
            {
                if (true == pDocumentSets?.Any() )
                {
                    var requestedDocumentSets = pDocumentSets.Select(p => p.Id).Distinct().ToList();
                    var existsDocumentSets = Execute.SelectAll<DocEntityDocumentSet>().Where(e => e.Id.In(requestedDocumentSets)).Select( e => e.Id ).ToList();
                    if (existsDocumentSets.Count != requestedDocumentSets.Count)
                    {
                        var nonExists = requestedDocumentSets.Where(id => existsDocumentSets.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection DocumentSets with objects that do not exist. No matching DocumentSets(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedDocumentSets.Where(id => entity.DocumentSets.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(User), columnName: nameof(request.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.DocumentSets)} to {nameof(User)}");
                        entity.DocumentSets.Add(target);
                    });
                    var toRemove = entity.DocumentSets.Where(e => requestedDocumentSets.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.DocumentSets)} from {nameof(User)}");
                        entity.DocumentSets.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.DocumentSets.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocumentSet.GetDocumentSet(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.DocumentSets)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.DocumentSets)} from {nameof(User)}");
                        entity.DocumentSets.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pDocumentSets, nameof(request.DocumentSets)) && !request.VisibleFields.Matches(nameof(request.DocumentSets), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.DocumentSets));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pHistory, permission, DocConstantModelName.USER, nameof(request.History)))
            {
                if (true == pHistory?.Any() )
                {
                    var requestedHistory = pHistory.Select(p => p.Id).Distinct().ToList();
                    var existsHistory = Execute.SelectAll<DocEntityHistory>().Where(e => e.Id.In(requestedHistory)).Select( e => e.Id ).ToList();
                    if (existsHistory.Count != requestedHistory.Count)
                    {
                        var nonExists = requestedHistory.Where(id => existsHistory.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection History with objects that do not exist. No matching History(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedHistory.Where(id => entity.History.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityHistory.GetHistory(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(User), columnName: nameof(request.History)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.History)} to {nameof(User)}");
                        entity.History.Add(target);
                    });
                    var toRemove = entity.History.Where(e => requestedHistory.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityHistory.GetHistory(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.History)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.History)} from {nameof(User)}");
                        entity.History.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.History.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityHistory.GetHistory(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.History)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.History)} from {nameof(User)}");
                        entity.History.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pHistory, nameof(request.History)) && !request.VisibleFields.Matches(nameof(request.History), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.History));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pImpersonated, permission, DocConstantModelName.USER, nameof(request.Impersonated)))
            {
                if (true == pImpersonated?.Any() )
                {
                    var requestedImpersonated = pImpersonated.Select(p => p.Id).Distinct().ToList();
                    var existsImpersonated = Execute.SelectAll<DocEntityImpersonation>().Where(e => e.Id.In(requestedImpersonated)).Select( e => e.Id ).ToList();
                    if (existsImpersonated.Count != requestedImpersonated.Count)
                    {
                        var nonExists = requestedImpersonated.Where(id => existsImpersonated.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Impersonated with objects that do not exist. No matching Impersonated(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedImpersonated.Where(id => entity.Impersonated.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityImpersonation.GetImpersonation(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Impersonated)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Impersonated)} to {nameof(User)}");
                        entity.Impersonated.Add(target);
                    });
                    var toRemove = entity.Impersonated.Where(e => requestedImpersonated.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityImpersonation.GetImpersonation(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Impersonated)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Impersonated)} from {nameof(User)}");
                        entity.Impersonated.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Impersonated.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityImpersonation.GetImpersonation(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Impersonated)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Impersonated)} from {nameof(User)}");
                        entity.Impersonated.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pImpersonated, nameof(request.Impersonated)) && !request.VisibleFields.Matches(nameof(request.Impersonated), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Impersonated));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pImpersonating, permission, DocConstantModelName.USER, nameof(request.Impersonating)))
            {
                if (true == pImpersonating?.Any() )
                {
                    var requestedImpersonating = pImpersonating.Select(p => p.Id).Distinct().ToList();
                    var existsImpersonating = Execute.SelectAll<DocEntityImpersonation>().Where(e => e.Id.In(requestedImpersonating)).Select( e => e.Id ).ToList();
                    if (existsImpersonating.Count != requestedImpersonating.Count)
                    {
                        var nonExists = requestedImpersonating.Where(id => existsImpersonating.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Impersonating with objects that do not exist. No matching Impersonating(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedImpersonating.Where(id => entity.Impersonating.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityImpersonation.GetImpersonation(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Impersonating)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Impersonating)} to {nameof(User)}");
                        entity.Impersonating.Add(target);
                    });
                    var toRemove = entity.Impersonating.Where(e => requestedImpersonating.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityImpersonation.GetImpersonation(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Impersonating)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Impersonating)} from {nameof(User)}");
                        entity.Impersonating.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Impersonating.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityImpersonation.GetImpersonation(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Impersonating)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Impersonating)} from {nameof(User)}");
                        entity.Impersonating.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pImpersonating, nameof(request.Impersonating)) && !request.VisibleFields.Matches(nameof(request.Impersonating), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Impersonating));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Role>>(currentUser, request, pRoles, permission, DocConstantModelName.USER, nameof(request.Roles)))
            {
                if (true == pRoles?.Any() )
                {
                    var requestedRoles = pRoles.Select(p => p.Id).Distinct().ToList();
                    var existsRoles = Execute.SelectAll<DocEntityRole>().Where(e => e.Id.In(requestedRoles)).Select( e => e.Id ).ToList();
                    if (existsRoles.Count != requestedRoles.Count)
                    {
                        var nonExists = requestedRoles.Where(id => existsRoles.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Roles with objects that do not exist. No matching Roles(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedRoles.Where(id => entity.Roles.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityRole.GetRole(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Roles)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Roles)} to {nameof(User)}");
                        entity.Roles.Add(target);
                    });
                    var toRemove = entity.Roles.Where(e => requestedRoles.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityRole.GetRole(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Roles)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Roles)} from {nameof(User)}");
                        entity.Roles.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Roles.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityRole.GetRole(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Roles)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Roles)} from {nameof(User)}");
                        entity.Roles.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Role>>(request, pRoles, nameof(request.Roles)) && !request.VisibleFields.Matches(nameof(request.Roles), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Roles));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pScopes, permission, DocConstantModelName.USER, nameof(request.Scopes)))
            {
                if (true == pScopes?.Any() )
                {
                    var requestedScopes = pScopes.Select(p => p.Id).Distinct().ToList();
                    var existsScopes = Execute.SelectAll<DocEntityScope>().Where(e => e.Id.In(requestedScopes)).Select( e => e.Id ).ToList();
                    if (existsScopes.Count != requestedScopes.Count)
                    {
                        var nonExists = requestedScopes.Where(id => existsScopes.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Scopes with objects that do not exist. No matching Scopes(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedScopes.Where(id => entity.Scopes.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityScope.GetScope(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Scopes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Scopes)} to {nameof(User)}");
                        entity.Scopes.Add(target);
                    });
                    var toRemove = entity.Scopes.Where(e => requestedScopes.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityScope.GetScope(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Scopes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Scopes)} from {nameof(User)}");
                        entity.Scopes.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Scopes.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityScope.GetScope(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Scopes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Scopes)} from {nameof(User)}");
                        entity.Scopes.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pScopes, nameof(request.Scopes)) && !request.VisibleFields.Matches(nameof(request.Scopes), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Scopes));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pSessions, permission, DocConstantModelName.USER, nameof(request.Sessions)))
            {
                if (true == pSessions?.Any() )
                {
                    var requestedSessions = pSessions.Select(p => p.Id).Distinct().ToList();
                    var existsSessions = Execute.SelectAll<DocEntityUserSession>().Where(e => e.Id.In(requestedSessions)).Select( e => e.Id ).ToList();
                    if (existsSessions.Count != requestedSessions.Count)
                    {
                        var nonExists = requestedSessions.Where(id => existsSessions.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Sessions with objects that do not exist. No matching Sessions(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedSessions.Where(id => entity.Sessions.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityUserSession.GetUserSession(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Sessions)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Sessions)} to {nameof(User)}");
                        entity.Sessions.Add(target);
                    });
                    var toRemove = entity.Sessions.Where(e => requestedSessions.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityUserSession.GetUserSession(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Sessions)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Sessions)} from {nameof(User)}");
                        entity.Sessions.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Sessions.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityUserSession.GetUserSession(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Sessions)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Sessions)} from {nameof(User)}");
                        entity.Sessions.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pSessions, nameof(request.Sessions)) && !request.VisibleFields.Matches(nameof(request.Sessions), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Sessions));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pTeams, permission, DocConstantModelName.USER, nameof(request.Teams)))
            {
                if (true == pTeams?.Any() )
                {
                    var requestedTeams = pTeams.Select(p => p.Id).Distinct().ToList();
                    var existsTeams = Execute.SelectAll<DocEntityTeam>().Where(e => e.Id.In(requestedTeams)).Select( e => e.Id ).ToList();
                    if (existsTeams.Count != requestedTeams.Count)
                    {
                        var nonExists = requestedTeams.Where(id => existsTeams.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Teams with objects that do not exist. No matching Teams(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedTeams.Where(id => entity.Teams.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityTeam.GetTeam(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Teams)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Teams)} to {nameof(User)}");
                        entity.Teams.Add(target);
                    });
                    var toRemove = entity.Teams.Where(e => requestedTeams.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTeam.GetTeam(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Teams)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Teams)} from {nameof(User)}");
                        entity.Teams.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Teams.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTeam.GetTeam(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Teams)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Teams)} from {nameof(User)}");
                        entity.Teams.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pTeams, nameof(request.Teams)) && !request.VisibleFields.Matches(nameof(request.Teams), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Teams));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pTimeCards, permission, DocConstantModelName.USER, nameof(request.TimeCards)))
            {
                if (true == pTimeCards?.Any() )
                {
                    var requestedTimeCards = pTimeCards.Select(p => p.Id).Distinct().ToList();
                    var existsTimeCards = Execute.SelectAll<DocEntityTimeCard>().Where(e => e.Id.In(requestedTimeCards)).Select( e => e.Id ).ToList();
                    if (existsTimeCards.Count != requestedTimeCards.Count)
                    {
                        var nonExists = requestedTimeCards.Where(id => existsTimeCards.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection TimeCards with objects that do not exist. No matching TimeCards(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedTimeCards.Where(id => entity.TimeCards.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityTimeCard.GetTimeCard(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(User), columnName: nameof(request.TimeCards)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.TimeCards)} to {nameof(User)}");
                        entity.TimeCards.Add(target);
                    });
                    var toRemove = entity.TimeCards.Where(e => requestedTimeCards.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTimeCard.GetTimeCard(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.TimeCards)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.TimeCards)} from {nameof(User)}");
                        entity.TimeCards.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.TimeCards.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTimeCard.GetTimeCard(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.TimeCards)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.TimeCards)} from {nameof(User)}");
                        entity.TimeCards.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pTimeCards, nameof(request.TimeCards)) && !request.VisibleFields.Matches(nameof(request.TimeCards), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.TimeCards));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pUpdates, permission, DocConstantModelName.USER, nameof(request.Updates)))
            {
                if (true == pUpdates?.Any() )
                {
                    var requestedUpdates = pUpdates.Select(p => p.Id).Distinct().ToList();
                    var existsUpdates = Execute.SelectAll<DocEntityUpdate>().Where(e => e.Id.In(requestedUpdates)).Select( e => e.Id ).ToList();
                    if (existsUpdates.Count != requestedUpdates.Count)
                    {
                        var nonExists = requestedUpdates.Where(id => existsUpdates.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Updates with objects that do not exist. No matching Updates(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedUpdates.Where(id => entity.Updates.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityUpdate.GetUpdate(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Updates)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Updates)} to {nameof(User)}");
                        entity.Updates.Add(target);
                    });
                    var toRemove = entity.Updates.Where(e => requestedUpdates.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityUpdate.GetUpdate(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Updates)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Updates)} from {nameof(User)}");
                        entity.Updates.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Updates.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityUpdate.GetUpdate(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Updates)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Updates)} from {nameof(User)}");
                        entity.Updates.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pUpdates, nameof(request.Updates)) && !request.VisibleFields.Matches(nameof(request.Updates), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Updates));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pWorkflows, permission, DocConstantModelName.USER, nameof(request.Workflows)))
            {
                if (true == pWorkflows?.Any() )
                {
                    var requestedWorkflows = pWorkflows.Select(p => p.Id).Distinct().ToList();
                    var existsWorkflows = Execute.SelectAll<DocEntityWorkflow>().Where(e => e.Id.In(requestedWorkflows)).Select( e => e.Id ).ToList();
                    if (existsWorkflows.Count != requestedWorkflows.Count)
                    {
                        var nonExists = requestedWorkflows.Where(id => existsWorkflows.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Workflows with objects that do not exist. No matching Workflows(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedWorkflows.Where(id => entity.Workflows.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityWorkflow.GetWorkflow(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Workflows)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Workflows)} to {nameof(User)}");
                        entity.Workflows.Add(target);
                    });
                    var toRemove = entity.Workflows.Where(e => requestedWorkflows.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityWorkflow.GetWorkflow(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Workflows)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Workflows)} from {nameof(User)}");
                        entity.Workflows.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Workflows.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityWorkflow.GetWorkflow(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(User), columnName: nameof(request.Workflows)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Workflows)} from {nameof(User)}");
                        entity.Workflows.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pWorkflows, nameof(request.Workflows)) && !request.VisibleFields.Matches(nameof(request.Workflows), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Workflows));
                }
            }
            DocPermissionFactory.SetVisibleFields<User>(currentUser, nameof(User), request.VisibleFields);
            ret = entity.ToDto();

            var cacheExpires = DocResources.Metadata.GetCacheExpiration(DocConstantModelName.USER);
            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.USER, cacheExpires);

            return ret;
        }
        public User Post(User request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            User ret = null;

            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "User")) 
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
                });
            }
            return ret;
        }
   
        public List<User> Post(UserBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<User>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as User;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public User Post(UserCopy request)
        {
            User ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    var entity = DocEntityUser.GetUser(request?.Id);
                    if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                    if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    var pClientDepartment = entity.ClientDepartment;
                    if(!DocTools.IsNullOrEmpty(pClientDepartment))
                        pClientDepartment += " (Copy)";
                    var pDivision = entity.Division;
                    var pDocumentSets = entity.DocumentSets.ToList();
                    var pEmail = entity.Email;
                    if(!DocTools.IsNullOrEmpty(pEmail))
                        pEmail += " (Copy)";
                    var pExpireDate = entity.ExpireDate;
                    var pFailedLoginCount = entity.FailedLoginCount;
                    var pFirstName = entity.FirstName;
                    if(!DocTools.IsNullOrEmpty(pFirstName))
                        pFirstName += " (Copy)";
                    var pGravatar = entity.Gravatar;
                    if(!DocTools.IsNullOrEmpty(pGravatar))
                        pGravatar += " (Copy)";
                    var pHistory = entity.History.ToList();
                    var pImpersonated = entity.Impersonated.ToList();
                    var pImpersonating = entity.Impersonating.ToList();
                    var pIsSystemUser = entity.IsSystemUser;
                    var pJobTitle = entity.JobTitle;
                    if(!DocTools.IsNullOrEmpty(pJobTitle))
                        pJobTitle += " (Copy)";
                    var pLastLogin = entity.LastLogin;
                    var pLastName = entity.LastName;
                    if(!DocTools.IsNullOrEmpty(pLastName))
                        pLastName += " (Copy)";
                    var pLegacyUsername = entity.LegacyUsername;
                    if(!DocTools.IsNullOrEmpty(pLegacyUsername))
                        pLegacyUsername += " (Copy)";
                    var pLocale = entity.Locale;
                    var pLoginCount = entity.LoginCount;
                    var pName = entity.Name;
                    if(!DocTools.IsNullOrEmpty(pName))
                        pName += " (Copy)";
                    var pRoles = entity.Roles.ToList();
                    var pScopes = entity.Scopes.ToList();
                    var pSessions = entity.Sessions.ToList();
                    var pSettings = entity.Settings;
                    var pSlack = entity.Slack;
                    if(!DocTools.IsNullOrEmpty(pSlack))
                        pSlack += " (Copy)";
                    var pStartDate = entity.StartDate;
                    var pStatus = entity.Status;
                    var pTeams = entity.Teams.ToList();
                    var pTimeCards = entity.TimeCards.ToList();
                    var pUpdates = entity.Updates.ToList();
                    var pUserType = entity.UserType;
                    var pWorkflows = entity.Workflows.ToList();
                    #region Custom Before copyUser
                    #endregion Custom Before copyUser
                    var copy = new DocEntityUser(ssn)
                    {
                        Hash = Guid.NewGuid()
                                , ClientDepartment = pClientDepartment
                                , Division = pDivision
                                , Email = pEmail
                                , ExpireDate = pExpireDate
                                , FailedLoginCount = pFailedLoginCount
                                , FirstName = pFirstName
                                , Gravatar = pGravatar
                                , IsSystemUser = pIsSystemUser
                                , JobTitle = pJobTitle
                                , LastLogin = pLastLogin
                                , LastName = pLastName
                                , LegacyUsername = pLegacyUsername
                                , Locale = pLocale
                                , LoginCount = pLoginCount
                                , Name = pName
                                , Settings = pSettings
                                , Slack = pSlack
                                , StartDate = pStartDate
                                , Status = pStatus
                                , UserType = pUserType
                    };
                            foreach(var item in pDocumentSets)
                            {
                                entity.DocumentSets.Add(item);
                            }

                            foreach(var item in pHistory)
                            {
                                entity.History.Add(item);
                            }

                            foreach(var item in pImpersonated)
                            {
                                entity.Impersonated.Add(item);
                            }

                            foreach(var item in pImpersonating)
                            {
                                entity.Impersonating.Add(item);
                            }

                            foreach(var item in pRoles)
                            {
                                entity.Roles.Add(item);
                            }

                            foreach(var item in pScopes)
                            {
                                entity.Scopes.Add(item);
                            }

                            foreach(var item in pSessions)
                            {
                                entity.Sessions.Add(item);
                            }

                            foreach(var item in pTeams)
                            {
                                entity.Teams.Add(item);
                            }

                            foreach(var item in pTimeCards)
                            {
                                entity.TimeCards.Add(item);
                            }

                            foreach(var item in pUpdates)
                            {
                                entity.Updates.Add(item);
                            }

                            foreach(var item in pWorkflows)
                            {
                                entity.Workflows.Add(item);
                            }

                    #region Custom After copyUser
                    #endregion Custom After copyUser
                    copy.SaveChanges(DocConstantPermission.ADD);
                    ret = copy.ToDto();
                });
            }
            return ret;
        }

        public List<User> Put(UserBatch request)
        {
            return Patch(request);
        }

        public User Put(User request)
        {
            return Patch(request);
        }
        public List<User> Patch(UserBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<User>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as User;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public User Patch(User request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the User to patch.");
            
            request.VisibleFields = request.VisibleFields ?? new List<string>();
            
            User ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
                });
            }
            return ret;
        }
        public object Get(UserJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "auditrecord":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityAuditRecord, AuditRecord, AuditRecordSearch>((int)request.Id, DocConstantModelName.AUDITRECORD, "Audits", request, (ss) => HostContext.ResolveService<AuditRecordService>(Request)?.Get(ss));
                    case "lookuptablebinding":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityLookupTableBinding, LookupTableBinding, LookupTableBindingSearch>((int)request.Id, DocConstantModelName.LOOKUPTABLEBINDING, "Bindings", request, (ss) => HostContext.ResolveService<LookupTableBindingService>(Request)?.Get(ss));
                    case "documentset":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request, (ss) => HostContext.ResolveService<DocumentSetService>(Request)?.Get(ss));
                    case "history":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityHistory, History, HistorySearch>((int)request.Id, DocConstantModelName.HISTORY, "History", request, (ss) => HostContext.ResolveService<HistoryService>(Request)?.Get(ss));
                    case "impersonateduser":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityImpersonation, Impersonation, ImpersonationSearch>((int)request.Id, DocConstantModelName.IMPERSONATION, "Impersonated", request, (ss) => HostContext.ResolveService<ImpersonationService>(Request)?.Get(ss));
                    case "impersonatinguser":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityImpersonation, Impersonation, ImpersonationSearch>((int)request.Id, DocConstantModelName.IMPERSONATION, "Impersonating", request, (ss) => HostContext.ResolveService<ImpersonationService>(Request)?.Get(ss));
                    case "role":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityRole, Role, RoleSearch>((int)request.Id, DocConstantModelName.ROLE, "Roles", request, (ss) => HostContext.ResolveService<RoleService>(Request)?.Get(ss));
                    case "scope":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request, (ss) => HostContext.ResolveService<ScopeService>(Request)?.Get(ss));
                    case "session":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityUserSession, UserSession, UserSessionSearch>((int)request.Id, DocConstantModelName.USERSESSION, "Sessions", request, (ss) => HostContext.ResolveService<UserSessionService>(Request)?.Get(ss));
                    case "tag":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "team":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityTeam, Team, TeamSearch>((int)request.Id, DocConstantModelName.TEAM, "Teams", request, (ss) => HostContext.ResolveService<TeamService>(Request)?.Get(ss));
                    case "timecard":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityTimeCard, TimeCard, TimeCardSearch>((int)request.Id, DocConstantModelName.TIMECARD, "TimeCards", request, (ss) => HostContext.ResolveService<TimeCardService>(Request)?.Get(ss));
                    case "update":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityUpdate, Update, UpdateSearch>((int)request.Id, DocConstantModelName.UPDATE, "Updates", request, (ss) => HostContext.ResolveService<UpdateService>(Request)?.Get(ss));
                    case "workflow":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityWorkflow, Workflow, WorkflowSearch>((int)request.Id, DocConstantModelName.WORKFLOW, "Workflows", request, (ss) => HostContext.ResolveService<WorkflowService>(Request)?.Get(ss));
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for user/{request.Id}/{request.Junction} was not found");
            }
        }
        public object Post(UserJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "documentset":
                        return AddJunction<User, DocEntityUser, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request);
                    case "role":
                        return AddJunction<User, DocEntityUser, DocEntityRole, Role, RoleSearch>((int)request.Id, DocConstantModelName.ROLE, "Roles", request);
                    case "scope":
                        return AddJunction<User, DocEntityUser, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request);
                    case "tag":
                        return AddJunction<User, DocEntityUser, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "update":
                        return AddJunction<User, DocEntityUser, DocEntityUpdate, Update, UpdateSearch>((int)request.Id, DocConstantModelName.UPDATE, "Updates", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for user/{request.Id}/{request.Junction} was not found");
            }
        }

        public object Delete(UserJunction request)
        {    
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "documentset":
                        return RemoveJunction<User, DocEntityUser, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request);
                    case "role":
                        return RemoveJunction<User, DocEntityUser, DocEntityRole, Role, RoleSearch>((int)request.Id, DocConstantModelName.ROLE, "Roles", request);
                    case "scope":
                        return RemoveJunction<User, DocEntityUser, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request);
                    case "tag":
                        return RemoveJunction<User, DocEntityUser, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "update":
                        return RemoveJunction<User, DocEntityUser, DocEntityUpdate, Update, UpdateSearch>((int)request.Id, DocConstantModelName.UPDATE, "Updates", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for user/{request.Id}/{request.Junction} was not found");
            }
        }
        private User GetUser(User request)
        {
            var id = request?.Id;
            User ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<User>(currentUser, "User", request.VisibleFields);

            DocEntityUser entity = null;
            if(id.HasValue)
            {
                entity = DocEntityUser.GetUser(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No User found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }
    }
}
