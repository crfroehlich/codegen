//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;

using Xtensive.Orm;


namespace Services.API
{
    public partial class UserService : DocServiceBase
    {

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private IQueryable<DocEntityUser> _ExecSearch(UserSearch request, DocQuery query)
        {
            request = InitSearch<User, UserSearch>(request);
            IQueryable<DocEntityUser> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityUser>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new UserFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityUser,UserFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.USER, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }
                if(!DocTools.IsNullOrEmpty(request.ClientDepartment))
                    entities = entities.Where(en => en.ClientDepartment.Contains(request.ClientDepartment));
                if(!DocTools.IsNullOrEmpty(request.ClientDepartments))
                    entities = entities.Where(en => en.ClientDepartment.In(request.ClientDepartments));
                if(!DocTools.IsNullOrEmpty(request.Division) && !DocTools.IsNullOrEmpty(request.Division.Id))
                {
                    entities = entities.Where(en => en.Division.Id == request.Division.Id );
                }
                if(true == request.DivisionIds?.Any())
                {
                    entities = entities.Where(en => en.Division.Id.In(request.DivisionIds));
                }
                if(true == request.DocumentSetsIds?.Any())
                {
                    entities = entities.Where(en => en.DocumentSets.Any(r => r.Id.In(request.DocumentSetsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Email))
                    entities = entities.Where(en => en.Email.Contains(request.Email));
                if(!DocTools.IsNullOrEmpty(request.Emails))
                    entities = entities.Where(en => en.Email.In(request.Emails));
                if(!DocTools.IsNullOrEmpty(request.ExpireDate))
                    entities = entities.Where(en => null != en.ExpireDate && request.ExpireDate.Value.Date == en.ExpireDate.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.ExpireDateBefore))
                    entities = entities.Where(en => en.ExpireDate <= request.ExpireDateBefore);
                if(!DocTools.IsNullOrEmpty(request.ExpireDateAfter))
                    entities = entities.Where(en => en.ExpireDate >= request.ExpireDateAfter);
                if(request.FailedLoginCount.HasValue)
                    entities = entities.Where(en => request.FailedLoginCount.Value == en.FailedLoginCount);
                if(!DocTools.IsNullOrEmpty(request.FirstName))
                    entities = entities.Where(en => en.FirstName.Contains(request.FirstName));
                if(!DocTools.IsNullOrEmpty(request.FirstNames))
                    entities = entities.Where(en => en.FirstName.In(request.FirstNames));
                if(!DocTools.IsNullOrEmpty(request.Gravatar))
                    entities = entities.Where(en => en.Gravatar.Contains(request.Gravatar));
                if(!DocTools.IsNullOrEmpty(request.Gravatars))
                    entities = entities.Where(en => en.Gravatar.In(request.Gravatars));
                if(true == request.HistoryIds?.Any())
                {
                    entities = entities.Where(en => en.History.Any(r => r.Id.In(request.HistoryIds)));
                }
                if(true == request.ImpersonatedIds?.Any())
                {
                    entities = entities.Where(en => en.Impersonated.Any(r => r.Id.In(request.ImpersonatedIds)));
                }
                if(true == request.ImpersonatingIds?.Any())
                {
                    entities = entities.Where(en => en.Impersonating.Any(r => r.Id.In(request.ImpersonatingIds)));
                }
                if(true == request.IsSystemUser?.Any())
                {
                    if(request.IsSystemUser.Any(v => v == null)) entities = entities.Where(en => en.IsSystemUser.In(request.IsSystemUser) || en.IsSystemUser == null);
                    else entities = entities.Where(en => en.IsSystemUser.In(request.IsSystemUser));
                }
                if(!DocTools.IsNullOrEmpty(request.JobTitle))
                    entities = entities.Where(en => en.JobTitle.Contains(request.JobTitle));
                if(!DocTools.IsNullOrEmpty(request.JobTitles))
                    entities = entities.Where(en => en.JobTitle.In(request.JobTitles));
                if(!DocTools.IsNullOrEmpty(request.LastLogin))
                    entities = entities.Where(en => null != en.LastLogin && request.LastLogin.Value.Date == en.LastLogin.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.LastLoginBefore))
                    entities = entities.Where(en => en.LastLogin <= request.LastLoginBefore);
                if(!DocTools.IsNullOrEmpty(request.LastLoginAfter))
                    entities = entities.Where(en => en.LastLogin >= request.LastLoginAfter);
                if(!DocTools.IsNullOrEmpty(request.LastName))
                    entities = entities.Where(en => en.LastName.Contains(request.LastName));
                if(!DocTools.IsNullOrEmpty(request.LastNames))
                    entities = entities.Where(en => en.LastName.In(request.LastNames));
                if(!DocTools.IsNullOrEmpty(request.LegacyUsername))
                    entities = entities.Where(en => en.LegacyUsername.Contains(request.LegacyUsername));
                if(!DocTools.IsNullOrEmpty(request.LegacyUsernames))
                    entities = entities.Where(en => en.LegacyUsername.In(request.LegacyUsernames));
                if(!DocTools.IsNullOrEmpty(request.Locale) && !DocTools.IsNullOrEmpty(request.Locale.Id))
                {
                    entities = entities.Where(en => en.Locale.Id == request.Locale.Id );
                }
                if(true == request.LocaleIds?.Any())
                {
                    entities = entities.Where(en => en.Locale.Id.In(request.LocaleIds));
                }
                if(request.LoginCount.HasValue)
                    entities = entities.Where(en => request.LoginCount.Value == en.LoginCount);
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(!DocTools.IsNullOrEmpty(request.Names))
                    entities = entities.Where(en => en.Name.In(request.Names));
                if(true == request.RolesIds?.Any())
                {
                    entities = entities.Where(en => en.Roles.Any(r => r.Id.In(request.RolesIds)));
                }
                if(true == request.ScopesIds?.Any())
                {
                    entities = entities.Where(en => en.Scopes.Any(r => r.Id.In(request.ScopesIds)));
                }
                if(true == request.SessionsIds?.Any())
                {
                    entities = entities.Where(en => en.Sessions.Any(r => r.Id.In(request.SessionsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Slack))
                    entities = entities.Where(en => en.Slack.Contains(request.Slack));
                if(!DocTools.IsNullOrEmpty(request.Slacks))
                    entities = entities.Where(en => en.Slack.In(request.Slacks));
                if(!DocTools.IsNullOrEmpty(request.StartDate))
                    entities = entities.Where(en => null != en.StartDate && request.StartDate.Value.Date == en.StartDate.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.StartDateBefore))
                    entities = entities.Where(en => en.StartDate <= request.StartDateBefore);
                if(!DocTools.IsNullOrEmpty(request.StartDateAfter))
                    entities = entities.Where(en => en.StartDate >= request.StartDateAfter);
                if(request.Status.HasValue)
                    entities = entities.Where(en => request.Status.Value == en.Status);
                if(!DocTools.IsNullOrEmpty(request.Statuss))
                    entities = entities.Where(en => en.Status.In(request.Statuss));
                if(true == request.TeamsIds?.Any())
                {
                    entities = entities.Where(en => en.Teams.Any(r => r.Id.In(request.TeamsIds)));
                }
                if(true == request.TimeCardsIds?.Any())
                {
                    entities = entities.Where(en => en.TimeCards.Any(r => r.Id.In(request.TimeCardsIds)));
                }
                if(true == request.UpdatesIds?.Any())
                {
                    entities = entities.Where(en => en.Updates.Any(r => r.Id.In(request.UpdatesIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.UserType) && !DocTools.IsNullOrEmpty(request.UserType.Id))
                {
                    entities = entities.Where(en => en.UserType.Id == request.UserType.Id );
                }
                if(true == request.UserTypeIds?.Any())
                {
                    entities = entities.Where(en => en.UserType.Id.In(request.UserTypeIds));
                }
                if(true == request.WorkflowsIds?.Any())
                {
                    entities = entities.Where(en => en.Workflows.Any(r => r.Id.In(request.WorkflowsIds)));
                }

                entities = ApplyFilters<DocEntityUser,UserSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Post(UserSearch request) => Get(request);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Get(UserSearch request) => GetSearchResultWithCache<User,DocEntityUser,UserSearch>(DocConstantModelName.USER, request, _ExecSearch);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Get(User request) => GetEntityWithCache<User>(DocConstantModelName.USER, request, GetUser);



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private User _AssignValues(User request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "User"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.Select = request.Select ?? new List<string>();

            User ret = null;
            request = _InitAssignValues<User>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<User>(DocConstantModelName.USER, nameof(User), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pClientDepartment = request.ClientDepartment;
            var pDivision = (request.Division?.Id > 0) ? DocEntityDivision.Get(request.Division.Id) : null;
            var pDocumentSets = GetVariable<Reference>(request, nameof(request.DocumentSets), request.DocumentSets?.ToList(), request.DocumentSetsIds?.ToList());
            var pEmail = request.Email;
            var pExpireDate = request.ExpireDate;
            var pFailedLoginCount = request.FailedLoginCount;
            var pFirstName = request.FirstName;
            var pGravatar = request.Gravatar;
            var pHistory = GetVariable<Reference>(request, nameof(request.History), request.History?.ToList(), request.HistoryIds?.ToList());
            var pImpersonated = GetVariable<Reference>(request, nameof(request.Impersonated), request.Impersonated?.ToList(), request.ImpersonatedIds?.ToList());
            var pImpersonating = GetVariable<Reference>(request, nameof(request.Impersonating), request.Impersonating?.ToList(), request.ImpersonatingIds?.ToList());
            var pIsSystemUser = request.IsSystemUser;
            var pJobTitle = request.JobTitle;
            var pLastLogin = request.LastLogin;
            var pLastName = request.LastName;
            var pLegacyUsername = request.LegacyUsername;
            var pLocale = (request.Locale?.Id > 0) ? DocEntityLocale.Get(request.Locale.Id) : null;
            var pLoginCount = request.LoginCount;
            var pName = request.Name;
            var pRoles = GetVariable<Role>(request, nameof(request.Roles), request.Roles?.ToList(), request.RolesIds?.ToList());
            var pScopes = GetVariable<Reference>(request, nameof(request.Scopes), request.Scopes?.ToList(), request.ScopesIds?.ToList());
            var pSessions = GetVariable<Reference>(request, nameof(request.Sessions), request.Sessions?.ToList(), request.SessionsIds?.ToList());
            var pSettings = (DocTools.IsNullOrEmpty(request.Settings)) ? null : DocSerialize<JsonObject>.ToString(request.Settings);
            var pSlack = request.Slack;
            var pStartDate = request.StartDate;
            var pStatus = request.Status;
            var pTeams = GetVariable<Reference>(request, nameof(request.Teams), request.Teams?.ToList(), request.TeamsIds?.ToList());
            var pTimeCards = GetVariable<Reference>(request, nameof(request.TimeCards), request.TimeCards?.ToList(), request.TimeCardsIds?.ToList());
            var pUpdates = GetVariable<Reference>(request, nameof(request.Updates), request.Updates?.ToList(), request.UpdatesIds?.ToList());
            var pUserType = (request.UserType?.Id > 0) ? DocEntityUserType.Get(request.UserType.Id) : null;
            var pWorkflows = GetVariable<Reference>(request, nameof(request.Workflows), request.Workflows?.ToList(), request.WorkflowsIds?.ToList());
            var pArchived = true == request.Archived;
            var pLocked = request.Locked;

            var entity = InitEntity<DocEntityUser,User>(request, permission, session);

            if (AllowPatchValue<User, bool>(request, DocConstantModelName.USER, pArchived, permission, nameof(request.Archived), pArchived != entity.Archived))
            {
                entity.Archived = pArchived;
            }
            if (AllowPatchValue<User, string>(request, DocConstantModelName.USER, pClientDepartment, permission, nameof(request.ClientDepartment), pClientDepartment != entity.ClientDepartment))
            {
                entity.ClientDepartment = pClientDepartment;
            }
            if (AllowPatchValue<User, DocEntityDivision>(request, DocConstantModelName.USER, pDivision, permission, nameof(request.Division), pDivision != entity.Division))
            {
                entity.Division = pDivision;
            }
            if (AllowPatchValue<User, string>(request, DocConstantModelName.USER, pEmail, permission, nameof(request.Email), pEmail != entity.Email))
            {
                entity.Email = pEmail;
            }
            if (AllowPatchValue<User, DateTime?>(request, DocConstantModelName.USER, pExpireDate, permission, nameof(request.ExpireDate), pExpireDate != entity.ExpireDate))
            {
                entity.ExpireDate = pExpireDate;
            }
            if (AllowPatchValue<User, int?>(request, DocConstantModelName.USER, pFailedLoginCount, permission, nameof(request.FailedLoginCount), pFailedLoginCount != entity.FailedLoginCount))
            {
                if(null != pFailedLoginCount) entity.FailedLoginCount = (int) pFailedLoginCount;
            }
            if (AllowPatchValue<User, string>(request, DocConstantModelName.USER, pFirstName, permission, nameof(request.FirstName), pFirstName != entity.FirstName))
            {
                entity.FirstName = pFirstName;
            }
            if (AllowPatchValue<User, string>(request, DocConstantModelName.USER, pGravatar, permission, nameof(request.Gravatar), pGravatar != entity.Gravatar))
            {
                entity.Gravatar = pGravatar;
            }
            if (AllowPatchValue<User, string>(request, DocConstantModelName.USER, pJobTitle, permission, nameof(request.JobTitle), pJobTitle != entity.JobTitle))
            {
                entity.JobTitle = pJobTitle;
            }
            if (AllowPatchValue<User, DateTime?>(request, DocConstantModelName.USER, pLastLogin, permission, nameof(request.LastLogin), pLastLogin != entity.LastLogin))
            {
                entity.LastLogin = pLastLogin;
            }
            if (AllowPatchValue<User, string>(request, DocConstantModelName.USER, pLastName, permission, nameof(request.LastName), pLastName != entity.LastName))
            {
                entity.LastName = pLastName;
            }
            if (AllowPatchValue<User, string>(request, DocConstantModelName.USER, pLegacyUsername, permission, nameof(request.LegacyUsername), pLegacyUsername != entity.LegacyUsername))
            {
                entity.LegacyUsername = pLegacyUsername;
            }
            if (AllowPatchValue<User, DocEntityLocale>(request, DocConstantModelName.USER, pLocale, permission, nameof(request.Locale), pLocale != entity.Locale))
            {
                entity.Locale = pLocale;
            }
            if (AllowPatchValue<User, int?>(request, DocConstantModelName.USER, pLoginCount, permission, nameof(request.LoginCount), pLoginCount != entity.LoginCount))
            {
                if(null != pLoginCount) entity.LoginCount = (int) pLoginCount;
            }
            if (AllowPatchValue<User, string>(request, DocConstantModelName.USER, pName, permission, nameof(request.Name), pName != entity.Name))
            {
                entity.Name = pName;
            }
            if (AllowPatchValue<User, string>(request, DocConstantModelName.USER, pSettings, permission, nameof(request.Settings), pSettings != entity.Settings))
            {
                entity.Settings = pSettings;
            }
            if (AllowPatchValue<User, string>(request, DocConstantModelName.USER, pSlack, permission, nameof(request.Slack), pSlack != entity.Slack))
            {
                entity.Slack = pSlack;
            }
            if (AllowPatchValue<User, DateTime?>(request, DocConstantModelName.USER, pStartDate, permission, nameof(request.StartDate), pStartDate != entity.StartDate))
            {
                entity.StartDate = pStartDate;
            }
            if (AllowPatchValue<User, StatusEnm?>(request, DocConstantModelName.USER, pStatus, permission, nameof(request.Status), pStatus != entity.Status))
            {
                if(null != pStatus) entity.Status = pStatus.Value;
            }
            if (AllowPatchValue<User, DocEntityUserType>(request, DocConstantModelName.USER, pUserType, permission, nameof(request.UserType), pUserType != entity.UserType))
            {
                entity.UserType = pUserType;
            }
            if (request.Locked && AllowPatchValue<User, bool>(request, DocConstantModelName.USER, pArchived, permission, nameof(request.Locked), pLocked != entity.Locked))
            {
                entity.Archived = pArchived;
            }
            entity.SaveChanges(permission);

            var idsToInvalidate = new List<int>();
            idsToInvalidate.AddRange(PatchCollection<User, DocEntityUser, Reference, DocEntityDocumentSet>(request, entity, pDocumentSets, permission, nameof(request.DocumentSets)));
            idsToInvalidate.AddRange(PatchCollection<User, DocEntityUser, Reference, DocEntityHistory>(request, entity, pHistory, permission, nameof(request.History)));
            idsToInvalidate.AddRange(PatchCollection<User, DocEntityUser, Reference, DocEntityImpersonation>(request, entity, pImpersonated, permission, nameof(request.Impersonated)));
            idsToInvalidate.AddRange(PatchCollection<User, DocEntityUser, Reference, DocEntityImpersonation>(request, entity, pImpersonating, permission, nameof(request.Impersonating)));
            idsToInvalidate.AddRange(PatchCollection<User, DocEntityUser, Role, DocEntityRole>(request, entity, pRoles, permission, nameof(request.Roles)));
            idsToInvalidate.AddRange(PatchCollection<User, DocEntityUser, Reference, DocEntityScope>(request, entity, pScopes, permission, nameof(request.Scopes)));
            idsToInvalidate.AddRange(PatchCollection<User, DocEntityUser, Reference, DocEntityUserSession>(request, entity, pSessions, permission, nameof(request.Sessions)));
            idsToInvalidate.AddRange(PatchCollection<User, DocEntityUser, Reference, DocEntityTeam>(request, entity, pTeams, permission, nameof(request.Teams)));
            idsToInvalidate.AddRange(PatchCollection<User, DocEntityUser, Reference, DocEntityTimeCard>(request, entity, pTimeCards, permission, nameof(request.TimeCards)));
            idsToInvalidate.AddRange(PatchCollection<User, DocEntityUser, Reference, DocEntityUpdate>(request, entity, pUpdates, permission, nameof(request.Updates)));
            idsToInvalidate.AddRange(PatchCollection<User, DocEntityUser, Reference, DocEntityWorkflow>(request, entity, pWorkflows, permission, nameof(request.Workflows)));
            if (idsToInvalidate.Any())
            {
                idsToInvalidate.Add(entity.Id);
                DocCacheClient.RemoveByEntityIds(idsToInvalidate);
                DocCacheClient.RemoveSearch(DocConstantModelName.USER);
            }

            entity.SaveChanges(permission);
            DocPermissionFactory.SetSelect<User>(currentUser, nameof(User), request.Select);
            ret = entity.ToDto();

            var cacheExpires = DocResources.Metadata.GetCacheExpiration(DocConstantModelName.USER);
            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.USER, cacheExpires);

            return ret;
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public User Post(User request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.Select = request.Select ?? new List<string>();

            User ret = null;

            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "User")) 
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
                });
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<User> Post(UserBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<User>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as User;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public User Post(UserCopy request)
        {
            User ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    var entity = DocEntityUser.Get(request?.Id);
                    if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                    if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    var pClientDepartment = entity.ClientDepartment;
                    if(!DocTools.IsNullOrEmpty(pClientDepartment))
                        pClientDepartment += " (Copy)";
                    var pDivision = entity.Division;
                    var pDocumentSets = entity.DocumentSets.ToList();
                    var pEmail = entity.Email;
                    if(!DocTools.IsNullOrEmpty(pEmail))
                        pEmail += " (Copy)";
                    var pExpireDate = entity.ExpireDate;
                    var pFailedLoginCount = entity.FailedLoginCount;
                    var pFirstName = entity.FirstName;
                    if(!DocTools.IsNullOrEmpty(pFirstName))
                        pFirstName += " (Copy)";
                    var pGravatar = entity.Gravatar;
                    if(!DocTools.IsNullOrEmpty(pGravatar))
                        pGravatar += " (Copy)";
                    var pHistory = entity.History.ToList();
                    var pImpersonated = entity.Impersonated.ToList();
                    var pImpersonating = entity.Impersonating.ToList();
                    var pIsSystemUser = entity.IsSystemUser;
                    var pJobTitle = entity.JobTitle;
                    if(!DocTools.IsNullOrEmpty(pJobTitle))
                        pJobTitle += " (Copy)";
                    var pLastLogin = entity.LastLogin;
                    var pLastName = entity.LastName;
                    if(!DocTools.IsNullOrEmpty(pLastName))
                        pLastName += " (Copy)";
                    var pLegacyUsername = entity.LegacyUsername;
                    if(!DocTools.IsNullOrEmpty(pLegacyUsername))
                        pLegacyUsername += " (Copy)";
                    var pLocale = entity.Locale;
                    var pLoginCount = entity.LoginCount;
                    var pName = entity.Name;
                    if(!DocTools.IsNullOrEmpty(pName))
                        pName += " (Copy)";
                    var pRoles = entity.Roles.ToList();
                    var pScopes = entity.Scopes.ToList();
                    var pSessions = entity.Sessions.ToList();
                    var pSettings = entity.Settings;
                    var pSlack = entity.Slack;
                    if(!DocTools.IsNullOrEmpty(pSlack))
                        pSlack += " (Copy)";
                    var pStartDate = entity.StartDate;
                    var pStatus = entity.Status;
                    var pTeams = entity.Teams.ToList();
                    var pTimeCards = entity.TimeCards.ToList();
                    var pUpdates = entity.Updates.ToList();
                    var pUserType = entity.UserType;
                    var pWorkflows = entity.Workflows.ToList();
                    var copy = new DocEntityUser(ssn)
                    {
                        Hash = Guid.NewGuid()
                                , ClientDepartment = pClientDepartment
                                , Division = pDivision
                                , Email = pEmail
                                , ExpireDate = pExpireDate
                                , FailedLoginCount = pFailedLoginCount
                                , FirstName = pFirstName
                                , Gravatar = pGravatar
                                , IsSystemUser = pIsSystemUser
                                , JobTitle = pJobTitle
                                , LastLogin = pLastLogin
                                , LastName = pLastName
                                , LegacyUsername = pLegacyUsername
                                , Locale = pLocale
                                , LoginCount = pLoginCount
                                , Name = pName
                                , Settings = pSettings
                                , Slack = pSlack
                                , StartDate = pStartDate
                                , Status = pStatus
                                , UserType = pUserType
                    };
                            foreach(var item in pDocumentSets)
                            {
                                entity.DocumentSets.Add(item);
                            }

                            foreach(var item in pHistory)
                            {
                                entity.History.Add(item);
                            }

                            foreach(var item in pImpersonated)
                            {
                                entity.Impersonated.Add(item);
                            }

                            foreach(var item in pImpersonating)
                            {
                                entity.Impersonating.Add(item);
                            }

                            foreach(var item in pRoles)
                            {
                                entity.Roles.Add(item);
                            }

                            foreach(var item in pScopes)
                            {
                                entity.Scopes.Add(item);
                            }

                            foreach(var item in pSessions)
                            {
                                entity.Sessions.Add(item);
                            }

                            foreach(var item in pTeams)
                            {
                                entity.Teams.Add(item);
                            }

                            foreach(var item in pTimeCards)
                            {
                                entity.TimeCards.Add(item);
                            }

                            foreach(var item in pUpdates)
                            {
                                entity.Updates.Add(item);
                            }

                            foreach(var item in pWorkflows)
                            {
                                entity.Workflows.Add(item);
                            }

                    copy.SaveChanges(DocConstantPermission.ADD);
                    ret = copy.ToDto();
                });
            }
            return ret;
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<User> Put(UserBatch request)
        {
            return Patch(request);
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public User Put(User request)
        {
            return Patch(request);
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<User> Patch(UserBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<User>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as User;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public User Patch(User request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the User to patch.");
            
            request.Select = request.Select ?? new List<string>();
            
            User ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
                });
            }
            return ret;
        }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Get(UserJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "auditrecord":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityAuditRecord, AuditRecord, AuditRecordSearch>((int)request.Id, DocConstantModelName.AUDITRECORD, "Audits", request, (ss) => HostContext.ResolveService<AuditRecordService>(Request)?.Get(ss));
                    case "lookuptablebinding":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityLookupTableBinding, LookupTableBinding, LookupTableBindingSearch>((int)request.Id, DocConstantModelName.LOOKUPTABLEBINDING, "Bindings", request, (ss) => HostContext.ResolveService<LookupTableBindingService>(Request)?.Get(ss));
                    case "comment":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request, (ss) => HostContext.ResolveService<CommentService>(Request)?.Get(ss));
                    case "documentset":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request, (ss) => HostContext.ResolveService<DocumentSetService>(Request)?.Get(ss));
                    case "favorite":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request, (ss) => HostContext.ResolveService<FavoriteService>(Request)?.Get(ss));
                    case "history":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityHistory, History, HistorySearch>((int)request.Id, DocConstantModelName.HISTORY, "History", request, (ss) => HostContext.ResolveService<HistoryService>(Request)?.Get(ss));
                    case "impersonateduser":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityImpersonation, Impersonation, ImpersonationSearch>((int)request.Id, DocConstantModelName.IMPERSONATION, "Impersonated", request, (ss) => HostContext.ResolveService<ImpersonationService>(Request)?.Get(ss));
                    case "impersonatinguser":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityImpersonation, Impersonation, ImpersonationSearch>((int)request.Id, DocConstantModelName.IMPERSONATION, "Impersonating", request, (ss) => HostContext.ResolveService<ImpersonationService>(Request)?.Get(ss));
                    case "role":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityRole, Role, RoleSearch>((int)request.Id, DocConstantModelName.ROLE, "Roles", request, (ss) => HostContext.ResolveService<RoleService>(Request)?.Get(ss));
                    case "scope":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request, (ss) => HostContext.ResolveService<ScopeService>(Request)?.Get(ss));
                    case "session":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityUserSession, UserSession, UserSessionSearch>((int)request.Id, DocConstantModelName.USERSESSION, "Sessions", request, (ss) => HostContext.ResolveService<UserSessionService>(Request)?.Get(ss));
                    case "tag":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "team":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityTeam, Team, TeamSearch>((int)request.Id, DocConstantModelName.TEAM, "Teams", request, (ss) => HostContext.ResolveService<TeamService>(Request)?.Get(ss));
                    case "timecard":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityTimeCard, TimeCard, TimeCardSearch>((int)request.Id, DocConstantModelName.TIMECARD, "TimeCards", request, (ss) => HostContext.ResolveService<TimeCardService>(Request)?.Get(ss));
                    case "update":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityUpdate, Update, UpdateSearch>((int)request.Id, DocConstantModelName.UPDATE, "Updates", request, (ss) => HostContext.ResolveService<UpdateService>(Request)?.Get(ss));
                    case "workflow":
                        return GetJunctionSearchResult<User, DocEntityUser, DocEntityWorkflow, Workflow, WorkflowSearch>((int)request.Id, DocConstantModelName.WORKFLOW, "Workflows", request, (ss) => HostContext.ResolveService<WorkflowService>(Request)?.Get(ss));
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for user/{request.Id}/{request.Junction} was not found");
            }
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Post(UserJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "comment":
                        return AddJunction<User, DocEntityUser, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "documentset":
                        return AddJunction<User, DocEntityUser, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request);
                    case "favorite":
                        return AddJunction<User, DocEntityUser, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "role":
                        return AddJunction<User, DocEntityUser, DocEntityRole, Role, RoleSearch>((int)request.Id, DocConstantModelName.ROLE, "Roles", request);
                    case "scope":
                        return AddJunction<User, DocEntityUser, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request);
                    case "tag":
                        return AddJunction<User, DocEntityUser, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "update":
                        return AddJunction<User, DocEntityUser, DocEntityUpdate, Update, UpdateSearch>((int)request.Id, DocConstantModelName.UPDATE, "Updates", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for user/{request.Id}/{request.Junction} was not found");
            }
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Delete(UserJunction request)
        {    
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "comment":
                        return RemoveJunction<User, DocEntityUser, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "documentset":
                        return RemoveJunction<User, DocEntityUser, DocEntityDocumentSet, DocumentSet, DocumentSetSearch>((int)request.Id, DocConstantModelName.DOCUMENTSET, "DocumentSets", request);
                    case "favorite":
                        return RemoveJunction<User, DocEntityUser, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "role":
                        return RemoveJunction<User, DocEntityUser, DocEntityRole, Role, RoleSearch>((int)request.Id, DocConstantModelName.ROLE, "Roles", request);
                    case "scope":
                        return RemoveJunction<User, DocEntityUser, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request);
                    case "tag":
                        return RemoveJunction<User, DocEntityUser, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "update":
                        return RemoveJunction<User, DocEntityUser, DocEntityUpdate, Update, UpdateSearch>((int)request.Id, DocConstantModelName.UPDATE, "Updates", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for user/{request.Id}/{request.Junction} was not found");
            }
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private User GetUser(User request)
        {
            var id = request?.Id;
            User ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetSelect<User>(currentUser, "User", request.Select);

            DocEntityUser entity = null;
            if(id.HasValue)
            {
                entity = DocEntityUser.Get(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No User found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

    }
}
