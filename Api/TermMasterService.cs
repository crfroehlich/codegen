
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AutoMapper;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.internals;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class TermMasterService : DocServiceBase
    {

        private IQueryable<DocEntityTermMaster> _ExecSearch(TermMasterSearch request, DocQuery query)
        {
            request = InitSearch<TermMaster, TermMasterSearch>(request);
            IQueryable<DocEntityTermMaster> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityTermMaster>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new TermMasterFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityTermMaster,TermMasterFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.TERMMASTER, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }

                if(!DocTools.IsNullOrEmpty(request.BioPortal))
                    entities = entities.Where(en => en.BioPortal.Contains(request.BioPortal));
                if(true == request.CategoriesIds?.Any())
                {
                    entities = entities.Where(en => en.Categories.Any(r => r.Id.In(request.CategoriesIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.CUI))
                    entities = entities.Where(en => en.CUI.Contains(request.CUI));
                if(!DocTools.IsNullOrEmpty(request.Enum) && !DocTools.IsNullOrEmpty(request.Enum.Id))
                {
                    entities = entities.Where(en => en.Enum.Id == request.Enum.Id );
                }
                if(true == request.EnumIds?.Any())
                {
                    entities = entities.Where(en => en.Enum.Id.In(request.EnumIds));
                }
                if(!DocTools.IsNullOrEmpty(request.MedDRA))
                    entities = entities.Where(en => en.MedDRA.Contains(request.MedDRA));
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(!DocTools.IsNullOrEmpty(request.RxNorm))
                    entities = entities.Where(en => en.RxNorm.Contains(request.RxNorm));
                if(!DocTools.IsNullOrEmpty(request.SNOWMED))
                    entities = entities.Where(en => en.SNOWMED.Contains(request.SNOWMED));
                if(true == request.SynonymsIds?.Any())
                {
                    entities = entities.Where(en => en.Synonyms.Any(r => r.Id.In(request.SynonymsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.TUI))
                    entities = entities.Where(en => en.TUI.Contains(request.TUI));
                if(!DocTools.IsNullOrEmpty(request.URI))
                    entities = entities.Where(en => en.URI.Contains(request.URI));

                entities = ApplyFilters<DocEntityTermMaster,TermMasterSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(TermMasterSearch request) => Get(request);

        public object Get(TermMasterSearch request) => GetSearchResultWithCache<TermMaster,DocEntityTermMaster,TermMasterSearch>(DocConstantModelName.TERMMASTER, request, _ExecSearch);

        public object Get(TermMaster request) => GetEntityWithCache<TermMaster>(DocConstantModelName.TERMMASTER, request, GetTermMaster);



        private TermMaster _AssignValues(TermMaster request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "TermMaster"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            TermMaster ret = null;
            request = _InitAssignValues<TermMaster>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<TermMaster>(DocConstantModelName.TERMMASTER, nameof(TermMaster), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pBioPortal = request.BioPortal;
            var pCategories = request.Categories?.ToList();
            var pCUI = request.CUI;
            var pEnum = DocEntityLookupTableEnum.GetLookupTableEnum(request.Enum);
            var pMedDRA = request.MedDRA;
            var pName = request.Name;
            var pRxNorm = request.RxNorm;
            var pSNOWMED = request.SNOWMED;
            var pSynonyms = request.Synonyms?.ToList();
            var pTUI = request.TUI;
            var pURI = request.URI;

            DocEntityTermMaster entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityTermMaster(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityTermMaster.GetTermMaster(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            //Special case for Archived
            var pArchived = true == request.Archived;
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pArchived, permission, DocConstantModelName.TERMMASTER, nameof(request.Archived)))
            {
                if(DocPermissionFactory.IsRequested(request, pArchived, entity.Archived, nameof(request.Archived)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.TERMMASTER, nameof(request.Archived)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Archived)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pArchived) && DocResources.Metadata.IsRequired(DocConstantModelName.TERMMASTER, nameof(request.Archived))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Archived)} requires a value.");
                    entity.Archived = pArchived;
                if(DocPermissionFactory.IsRequested<bool>(request, pArchived, nameof(request.Archived)) && !request.VisibleFields.Matches(nameof(request.Archived), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Archived));
                }
            }

            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pBioPortal, permission, DocConstantModelName.TERMMASTER, nameof(request.BioPortal)))
            {
                if(DocPermissionFactory.IsRequested(request, pBioPortal, entity.BioPortal, nameof(request.BioPortal)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.TERMMASTER, nameof(request.BioPortal)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.BioPortal)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pBioPortal) && DocResources.Metadata.IsRequired(DocConstantModelName.TERMMASTER, nameof(request.BioPortal))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.BioPortal)} requires a value.");
                    entity.BioPortal = pBioPortal;
                if(DocPermissionFactory.IsRequested<string>(request, pBioPortal, nameof(request.BioPortal)) && !request.VisibleFields.Matches(nameof(request.BioPortal), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.BioPortal));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pCUI, permission, DocConstantModelName.TERMMASTER, nameof(request.CUI)))
            {
                if(DocPermissionFactory.IsRequested(request, pCUI, entity.CUI, nameof(request.CUI)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.TERMMASTER, nameof(request.CUI)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.CUI)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pCUI) && DocResources.Metadata.IsRequired(DocConstantModelName.TERMMASTER, nameof(request.CUI))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.CUI)} requires a value.");
                    entity.CUI = pCUI;
                if(DocPermissionFactory.IsRequested<string>(request, pCUI, nameof(request.CUI)) && !request.VisibleFields.Matches(nameof(request.CUI), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.CUI));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTableEnum>(currentUser, request, pEnum, permission, DocConstantModelName.TERMMASTER, nameof(request.Enum)))
            {
                if(DocPermissionFactory.IsRequested(request, pEnum, entity.Enum, nameof(request.Enum)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.TERMMASTER, nameof(request.Enum)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Enum)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pEnum) && DocResources.Metadata.IsRequired(DocConstantModelName.TERMMASTER, nameof(request.Enum))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Enum)} requires a value.");
                    entity.Enum = pEnum;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTableEnum>(request, pEnum, nameof(request.Enum)) && !request.VisibleFields.Matches(nameof(request.Enum), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Enum));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pMedDRA, permission, DocConstantModelName.TERMMASTER, nameof(request.MedDRA)))
            {
                if(DocPermissionFactory.IsRequested(request, pMedDRA, entity.MedDRA, nameof(request.MedDRA)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.TERMMASTER, nameof(request.MedDRA)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.MedDRA)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pMedDRA) && DocResources.Metadata.IsRequired(DocConstantModelName.TERMMASTER, nameof(request.MedDRA))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.MedDRA)} requires a value.");
                    entity.MedDRA = pMedDRA;
                if(DocPermissionFactory.IsRequested<string>(request, pMedDRA, nameof(request.MedDRA)) && !request.VisibleFields.Matches(nameof(request.MedDRA), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.MedDRA));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pName, permission, DocConstantModelName.TERMMASTER, nameof(request.Name)))
            {
                if(DocPermissionFactory.IsRequested(request, pName, entity.Name, nameof(request.Name)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.TERMMASTER, nameof(request.Name)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Name)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pName) && DocResources.Metadata.IsRequired(DocConstantModelName.TERMMASTER, nameof(request.Name))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.Name)} requires a value.");
                    entity.Name = pName;
                if(DocPermissionFactory.IsRequested<string>(request, pName, nameof(request.Name)) && !request.VisibleFields.Matches(nameof(request.Name), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Name));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pRxNorm, permission, DocConstantModelName.TERMMASTER, nameof(request.RxNorm)))
            {
                if(DocPermissionFactory.IsRequested(request, pRxNorm, entity.RxNorm, nameof(request.RxNorm)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.TERMMASTER, nameof(request.RxNorm)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.RxNorm)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pRxNorm) && DocResources.Metadata.IsRequired(DocConstantModelName.TERMMASTER, nameof(request.RxNorm))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.RxNorm)} requires a value.");
                    entity.RxNorm = pRxNorm;
                if(DocPermissionFactory.IsRequested<string>(request, pRxNorm, nameof(request.RxNorm)) && !request.VisibleFields.Matches(nameof(request.RxNorm), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.RxNorm));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pSNOWMED, permission, DocConstantModelName.TERMMASTER, nameof(request.SNOWMED)))
            {
                if(DocPermissionFactory.IsRequested(request, pSNOWMED, entity.SNOWMED, nameof(request.SNOWMED)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.TERMMASTER, nameof(request.SNOWMED)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.SNOWMED)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pSNOWMED) && DocResources.Metadata.IsRequired(DocConstantModelName.TERMMASTER, nameof(request.SNOWMED))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.SNOWMED)} requires a value.");
                    entity.SNOWMED = pSNOWMED;
                if(DocPermissionFactory.IsRequested<string>(request, pSNOWMED, nameof(request.SNOWMED)) && !request.VisibleFields.Matches(nameof(request.SNOWMED), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.SNOWMED));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pTUI, permission, DocConstantModelName.TERMMASTER, nameof(request.TUI)))
            {
                if(DocPermissionFactory.IsRequested(request, pTUI, entity.TUI, nameof(request.TUI)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.TERMMASTER, nameof(request.TUI)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.TUI)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pTUI) && DocResources.Metadata.IsRequired(DocConstantModelName.TERMMASTER, nameof(request.TUI))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.TUI)} requires a value.");
                    entity.TUI = pTUI;
                if(DocPermissionFactory.IsRequested<string>(request, pTUI, nameof(request.TUI)) && !request.VisibleFields.Matches(nameof(request.TUI), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.TUI));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pURI, permission, DocConstantModelName.TERMMASTER, nameof(request.URI)))
            {
                if(DocPermissionFactory.IsRequested(request, pURI, entity.URI, nameof(request.URI)))
                    if (DocResources.Metadata.IsInsertOnly(DocConstantModelName.TERMMASTER, nameof(request.URI)) && DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.URI)} cannot be modified once set.");
                    if (DocTools.IsNullOrEmpty(pURI) && DocResources.Metadata.IsRequired(DocConstantModelName.TERMMASTER, nameof(request.URI))) throw new HttpError(HttpStatusCode.BadRequest, $"{nameof(request.URI)} requires a value.");
                    entity.URI = pURI;
                if(DocPermissionFactory.IsRequested<string>(request, pURI, nameof(request.URI)) && !request.VisibleFields.Matches(nameof(request.URI), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.URI));
                }
            }

            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);

            if (DocPermissionFactory.IsRequestedHasPermission<List<TermCategory>>(currentUser, request, pCategories, permission, DocConstantModelName.TERMMASTER, nameof(request.Categories)))
            {
                if (true == pCategories?.Any() )
                {
                    var requestedCategories = pCategories.Select(p => p.Id).Distinct().ToList();
                    var existsCategories = Execute.SelectAll<DocEntityTermCategory>().Where(e => e.Id.In(requestedCategories)).Select( e => e.Id ).ToList();
                    if (existsCategories.Count != requestedCategories.Count)
                    {
                        var nonExists = requestedCategories.Where(id => existsCategories.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Categories with objects that do not exist. No matching Categories(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedCategories.Where(id => entity.Categories.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityTermCategory.GetTermCategory(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(TermMaster), columnName: nameof(request.Categories)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Categories)} to {nameof(TermMaster)}");
                        entity.Categories.Add(target);
                    });
                    var toRemove = entity.Categories.Where(e => requestedCategories.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTermCategory.GetTermCategory(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(TermMaster), columnName: nameof(request.Categories)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Categories)} from {nameof(TermMaster)}");
                        entity.Categories.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Categories.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTermCategory.GetTermCategory(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(TermMaster), columnName: nameof(request.Categories)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Categories)} from {nameof(TermMaster)}");
                        entity.Categories.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<TermCategory>>(request, pCategories, nameof(request.Categories)) && !request.VisibleFields.Matches(nameof(request.Categories), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Categories));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pSynonyms, permission, DocConstantModelName.TERMMASTER, nameof(request.Synonyms)))
            {
                if (true == pSynonyms?.Any() )
                {
                    var requestedSynonyms = pSynonyms.Select(p => p.Id).Distinct().ToList();
                    var existsSynonyms = Execute.SelectAll<DocEntityTermSynonym>().Where(e => e.Id.In(requestedSynonyms)).Select( e => e.Id ).ToList();
                    if (existsSynonyms.Count != requestedSynonyms.Count)
                    {
                        var nonExists = requestedSynonyms.Where(id => existsSynonyms.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Synonyms with objects that do not exist. No matching Synonyms(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedSynonyms.Where(id => entity.Synonyms.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityTermSynonym.GetTermSynonym(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(TermMaster), columnName: nameof(request.Synonyms)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Synonyms)} to {nameof(TermMaster)}");
                        entity.Synonyms.Add(target);
                    });
                    var toRemove = entity.Synonyms.Where(e => requestedSynonyms.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTermSynonym.GetTermSynonym(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(TermMaster), columnName: nameof(request.Synonyms)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Synonyms)} from {nameof(TermMaster)}");
                        entity.Synonyms.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Synonyms.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTermSynonym.GetTermSynonym(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(TermMaster), columnName: nameof(request.Synonyms)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Synonyms)} from {nameof(TermMaster)}");
                        entity.Synonyms.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pSynonyms, nameof(request.Synonyms)) && !request.VisibleFields.Matches(nameof(request.Synonyms), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Synonyms));
                }
            }
            DocPermissionFactory.SetVisibleFields<TermMaster>(currentUser, nameof(TermMaster), request.VisibleFields);
            ret = entity.ToDto();

            var cacheExpires = DocResources.Metadata.GetCacheExpiration(DocConstantModelName.TERMMASTER);
            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.TERMMASTER, cacheExpires);

            return ret;
        }


        public TermMaster Post(TermMaster request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            TermMaster ret = null;

            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "TermMaster")) 
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
                });
            }
            return ret;
        }
   
        public List<TermMaster> Post(TermMasterBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<TermMaster>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as TermMaster;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public TermMaster Post(TermMasterCopy request)
        {
            TermMaster ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    var entity = DocEntityTermMaster.GetTermMaster(request?.Id);
                    if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                    if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    var pBioPortal = entity.BioPortal;
                    if(!DocTools.IsNullOrEmpty(pBioPortal))
                        pBioPortal += " (Copy)";
                    var pCategories = entity.Categories.ToList();
                    var pCUI = entity.CUI;
                    if(!DocTools.IsNullOrEmpty(pCUI))
                        pCUI += " (Copy)";
                    var pEnum = entity.Enum;
                    var pMedDRA = entity.MedDRA;
                    if(!DocTools.IsNullOrEmpty(pMedDRA))
                        pMedDRA += " (Copy)";
                    var pName = entity.Name;
                    if(!DocTools.IsNullOrEmpty(pName))
                        pName += " (Copy)";
                    var pRxNorm = entity.RxNorm;
                    if(!DocTools.IsNullOrEmpty(pRxNorm))
                        pRxNorm += " (Copy)";
                    var pSNOWMED = entity.SNOWMED;
                    if(!DocTools.IsNullOrEmpty(pSNOWMED))
                        pSNOWMED += " (Copy)";
                    var pSynonyms = entity.Synonyms.ToList();
                    var pTUI = entity.TUI;
                    if(!DocTools.IsNullOrEmpty(pTUI))
                        pTUI += " (Copy)";
                    var pURI = entity.URI;
                    if(!DocTools.IsNullOrEmpty(pURI))
                        pURI += " (Copy)";
                    #region Custom Before copyTermMaster
                    #endregion Custom Before copyTermMaster
                    var copy = new DocEntityTermMaster(ssn)
                    {
                        Hash = Guid.NewGuid()
                                , BioPortal = pBioPortal
                                , CUI = pCUI
                                , Enum = pEnum
                                , MedDRA = pMedDRA
                                , Name = pName
                                , RxNorm = pRxNorm
                                , SNOWMED = pSNOWMED
                                , TUI = pTUI
                                , URI = pURI
                    };
                            foreach(var item in pCategories)
                            {
                                entity.Categories.Add(item);
                            }

                            foreach(var item in pSynonyms)
                            {
                                entity.Synonyms.Add(item);
                            }

                    #region Custom After copyTermMaster
                    #endregion Custom After copyTermMaster
                    copy.SaveChanges(DocConstantPermission.ADD);
                    ret = copy.ToDto();
                });
            }
            return ret;
        }



        public List<TermMaster> Put(TermMasterBatch request)
        {
            return Patch(request);
        }

        public TermMaster Put(TermMaster request)
        {
            return Patch(request);
        }


        public List<TermMaster> Patch(TermMasterBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<TermMaster>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as TermMaster;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public TermMaster Patch(TermMaster request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the TermMaster to patch.");
            
            request.VisibleFields = request.VisibleFields ?? new List<string>();
            
            TermMaster ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
                });
            }
            return ret;
        }


        public void Delete(TermMasterBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(TermMaster request)
        {
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!(request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, $"No Id provided for delete.");

                    var en = DocEntityTermMaster.GetTermMaster(request?.Id);
                    if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No TermMaster could be found for Id {request?.Id}.");
                    if(en.IsRemoved) return;
                
                    if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                    en.Remove();

                    DocCacheClient.RemoveSearch(DocConstantModelName.TERMMASTER);
                    DocCacheClient.RemoveById(request.Id);
                });
            }
        }

        public void Delete(TermMasterSearch request)
        {
            var matches = Get(request) as List<TermMaster>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");
            matches.ForEach(match =>
            {
                Delete(match);
            });
        }


        public object Get(TermMasterJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "termcategory":
                        return GetJunctionSearchResult<TermMaster, DocEntityTermMaster, DocEntityTermCategory, TermCategory, TermCategorySearch>((int)request.Id, DocConstantModelName.TERMCATEGORY, "Categories", request, (ss) => HostContext.ResolveService<TermCategoryService>(Request)?.Get(ss));
                    case "termsynonym":
                        return GetJunctionSearchResult<TermMaster, DocEntityTermMaster, DocEntityTermSynonym, TermSynonym, TermSynonymSearch>((int)request.Id, DocConstantModelName.TERMSYNONYM, "Synonyms", request, (ss) => HostContext.ResolveService<TermSynonymService>(Request)?.Get(ss));
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for termmaster/{request.Id}/{request.Junction} was not found");
            }
        }


        public object Post(TermMasterJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "termcategory":
                        return AddJunction<TermMaster, DocEntityTermMaster, DocEntityTermCategory, TermCategory, TermCategorySearch>((int)request.Id, DocConstantModelName.TERMCATEGORY, "Categories", request);
                    case "termsynonym":
                        return AddJunction<TermMaster, DocEntityTermMaster, DocEntityTermSynonym, TermSynonym, TermSynonymSearch>((int)request.Id, DocConstantModelName.TERMSYNONYM, "Synonyms", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for termmaster/{request.Id}/{request.Junction} was not found");
            }
        }

        public object Delete(TermMasterJunction request)
        {    
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "termcategory":
                        return RemoveJunction<TermMaster, DocEntityTermMaster, DocEntityTermCategory, TermCategory, TermCategorySearch>((int)request.Id, DocConstantModelName.TERMCATEGORY, "Categories", request);
                    case "termsynonym":
                        return RemoveJunction<TermMaster, DocEntityTermMaster, DocEntityTermSynonym, TermSynonym, TermSynonymSearch>((int)request.Id, DocConstantModelName.TERMSYNONYM, "Synonyms", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for termmaster/{request.Id}/{request.Junction} was not found");
            }
        }


        private TermMaster GetTermMaster(TermMaster request)
        {
            var id = request?.Id;
            TermMaster ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<TermMaster>(currentUser, "TermMaster", request.VisibleFields);

            DocEntityTermMaster entity = null;
            if(id.HasValue)
            {
                entity = DocEntityTermMaster.GetTermMaster(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No TermMaster found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

    }
}
