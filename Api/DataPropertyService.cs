//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;

using Xtensive.Orm;


namespace Services.API
{
    public partial class DataPropertyService : DocServiceBase
    {

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private IQueryable<DocEntityDataProperty> _ExecSearch(DataPropertySearch request, DocQuery query)
        {
            request = InitSearch<DataProperty, DataPropertySearch>(request);
            IQueryable<DocEntityDataProperty> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityDataProperty>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new DataPropertyFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityDataProperty,DataPropertyFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.DATAPROPERTY, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }
                if(true == request.AutoCreateMissing?.Any())
                {
                    entities = entities.Where(en => en.AutoCreateMissing.In(request.AutoCreateMissing));
                }
                if(true == request.ChildrenIds?.Any())
                {
                    entities = entities.Where(en => en.Children.Any(r => r.Id.In(request.ChildrenIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Class) && !DocTools.IsNullOrEmpty(request.Class.Id))
                {
                    entities = entities.Where(en => en.Class.Id == request.Class.Id );
                }
                if(true == request.ClassIds?.Any())
                {
                    entities = entities.Where(en => en.Class.Id.In(request.ClassIds));
                }
                if(!DocTools.IsNullOrEmpty(request.Description))
                    entities = entities.Where(en => en.Description.Contains(request.Description));
                if(!DocTools.IsNullOrEmpty(request.Descriptions))
                    entities = entities.Where(en => en.Description.In(request.Descriptions));
                if(!DocTools.IsNullOrEmpty(request.DisplayName))
                    entities = entities.Where(en => en.DisplayName.Contains(request.DisplayName));
                if(!DocTools.IsNullOrEmpty(request.DisplayNames))
                    entities = entities.Where(en => en.DisplayName.In(request.DisplayNames));
                if(true == request.IsAllowAddInForm?.Any())
                {
                    entities = entities.Where(en => en.IsAllowAddInForm.In(request.IsAllowAddInForm));
                }
                if(true == request.IsAllowCreateInForm?.Any())
                {
                    entities = entities.Where(en => en.IsAllowCreateInForm.In(request.IsAllowCreateInForm));
                }
                if(true == request.IsAllowEditInForm?.Any())
                {
                    entities = entities.Where(en => en.IsAllowEditInForm.In(request.IsAllowEditInForm));
                }
                if(true == request.IsAllowFreeText?.Any())
                {
                    entities = entities.Where(en => en.IsAllowFreeText.In(request.IsAllowFreeText));
                }
                if(true == request.IsAllowRemoveInForm?.Any())
                {
                    entities = entities.Where(en => en.IsAllowRemoveInForm.In(request.IsAllowRemoveInForm));
                }
                if(true == request.IsAudited?.Any())
                {
                    entities = entities.Where(en => en.IsAudited.In(request.IsAudited));
                }
                if(true == request.IsCompressed?.Any())
                {
                    entities = entities.Where(en => en.IsCompressed.In(request.IsCompressed));
                }
                if(true == request.IsDisplayInForm?.Any())
                {
                    entities = entities.Where(en => en.IsDisplayInForm.In(request.IsDisplayInForm));
                }
                if(true == request.IsDisplayInGrid?.Any())
                {
                    entities = entities.Where(en => en.IsDisplayInGrid.In(request.IsDisplayInGrid));
                }
                if(true == request.IsEditColumn?.Any())
                {
                    entities = entities.Where(en => en.IsEditColumn.In(request.IsEditColumn));
                }
                if(true == request.IsInsertOnly?.Any())
                {
                    entities = entities.Where(en => en.IsInsertOnly.In(request.IsInsertOnly));
                }
                if(true == request.IsJSON?.Any())
                {
                    entities = entities.Where(en => en.IsJSON.In(request.IsJSON));
                }
                if(true == request.IsLazy?.Any())
                {
                    entities = entities.Where(en => en.IsLazy.In(request.IsLazy));
                }
                if(true == request.IsNullOnUpgrade?.Any())
                {
                    entities = entities.Where(en => en.IsNullOnUpgrade.In(request.IsNullOnUpgrade));
                }
                if(true == request.IsReadOnly?.Any())
                {
                    entities = entities.Where(en => en.IsReadOnly.In(request.IsReadOnly));
                }
                if(true == request.IsRelationship?.Any())
                {
                    entities = entities.Where(en => en.IsRelationship.In(request.IsRelationship));
                }
                if(true == request.IsRequired?.Any())
                {
                    entities = entities.Where(en => en.IsRequired.In(request.IsRequired));
                }
                if(true == request.IsRequiredInForm?.Any())
                {
                    entities = entities.Where(en => en.IsRequiredInForm.In(request.IsRequiredInForm));
                }
                if(true == request.IsVirtual?.Any())
                {
                    entities = entities.Where(en => en.IsVirtual.In(request.IsVirtual));
                }
                if(!DocTools.IsNullOrEmpty(request.JsonType))
                    entities = entities.Where(en => en.JsonType.Contains(request.JsonType));
                if(!DocTools.IsNullOrEmpty(request.JsonTypes))
                    entities = entities.Where(en => en.JsonType.In(request.JsonTypes));
                if(!DocTools.IsNullOrEmpty(request.LookupTableEnum) && !DocTools.IsNullOrEmpty(request.LookupTableEnum.Id))
                {
                    entities = entities.Where(en => en.LookupTableEnum.Id == request.LookupTableEnum.Id );
                }
                if(true == request.LookupTableEnumIds?.Any())
                {
                    entities = entities.Where(en => en.LookupTableEnum.Id.In(request.LookupTableEnumIds));
                }
                if(true == request.LookupTableEnumNames?.Any())
                {
                    entities = entities.Where(en => en.LookupTableEnum.Name.In(request.LookupTableEnumNames));
                }
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(!DocTools.IsNullOrEmpty(request.Names))
                    entities = entities.Where(en => en.Name.In(request.Names));
                if(request.Order.HasValue)
                    entities = entities.Where(en => request.Order.Value == en.Order);
                if(!DocTools.IsNullOrEmpty(request.Owner) && !DocTools.IsNullOrEmpty(request.Owner.Id))
                {
                    entities = entities.Where(en => en.Owner.Id == request.Owner.Id );
                }
                if(true == request.OwnerIds?.Any())
                {
                    entities = entities.Where(en => en.Owner.Id.In(request.OwnerIds));
                }
                if(request.Precision.HasValue)
                    entities = entities.Where(en => request.Precision.Value == en.Precision);
                if(request.RelationshipOnOwnerRemove.HasValue)
                    entities = entities.Where(en => request.RelationshipOnOwnerRemove.Value == en.RelationshipOnOwnerRemove);
                if(!DocTools.IsNullOrEmpty(request.RelationshipOnOwnerRemoves))
                    entities = entities.Where(en => en.RelationshipOnOwnerRemove.In(request.RelationshipOnOwnerRemoves));
                if(request.RelationshipOnTargetRemove.HasValue)
                    entities = entities.Where(en => request.RelationshipOnTargetRemove.Value == en.RelationshipOnTargetRemove);
                if(!DocTools.IsNullOrEmpty(request.RelationshipOnTargetRemoves))
                    entities = entities.Where(en => en.RelationshipOnTargetRemove.In(request.RelationshipOnTargetRemoves));
                if(!DocTools.IsNullOrEmpty(request.RelationshipPairTo) && !DocTools.IsNullOrEmpty(request.RelationshipPairTo.Id))
                {
                    entities = entities.Where(en => en.RelationshipPairTo.Id == request.RelationshipPairTo.Id );
                }
                if(true == request.RelationshipPairToIds?.Any())
                {
                    entities = entities.Where(en => en.RelationshipPairTo.Id.In(request.RelationshipPairToIds));
                }
                if(request.Scale.HasValue)
                    entities = entities.Where(en => request.Scale.Value == en.Scale);
                if(!DocTools.IsNullOrEmpty(request.SetDefaultValue))
                    entities = entities.Where(en => en.SetDefaultValue.Contains(request.SetDefaultValue));
                if(!DocTools.IsNullOrEmpty(request.SetDefaultValues))
                    entities = entities.Where(en => en.SetDefaultValue.In(request.SetDefaultValues));
                if(!DocTools.IsNullOrEmpty(request.Tab) && !DocTools.IsNullOrEmpty(request.Tab.Id))
                {
                    entities = entities.Where(en => en.Tab.Id == request.Tab.Id );
                }
                if(true == request.TabIds?.Any())
                {
                    entities = entities.Where(en => en.Tab.Id.In(request.TabIds));
                }
                if(!DocTools.IsNullOrEmpty(request.Target) && !DocTools.IsNullOrEmpty(request.Target.Id))
                {
                    entities = entities.Where(en => en.Target.Id == request.Target.Id );
                }
                if(true == request.TargetIds?.Any())
                {
                    entities = entities.Where(en => en.Target.Id.In(request.TargetIds));
                }
                if(!DocTools.IsNullOrEmpty(request.TargetAlias))
                    entities = entities.Where(en => en.TargetAlias.Contains(request.TargetAlias));
                if(!DocTools.IsNullOrEmpty(request.TargetAliass))
                    entities = entities.Where(en => en.TargetAlias.In(request.TargetAliass));
                if(request.Type.HasValue)
                    entities = entities.Where(en => request.Type.Value == en.Type);
                if(!DocTools.IsNullOrEmpty(request.Types))
                    entities = entities.Where(en => en.Type.In(request.Types));
                if(request.UIType.HasValue)
                    entities = entities.Where(en => request.UIType.Value == en.UIType);
                if(!DocTools.IsNullOrEmpty(request.UITypes))
                    entities = entities.Where(en => en.UIType.In(request.UITypes));

                entities = ApplyFilters<DocEntityDataProperty,DataPropertySearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Post(DataPropertySearch request) => Get(request);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Get(DataPropertySearch request) => GetSearchResultWithCache<DataProperty,DocEntityDataProperty,DataPropertySearch>(DocConstantModelName.DATAPROPERTY, request, _ExecSearch);
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Get(DataProperty request) => GetEntityWithCache<DataProperty>(DocConstantModelName.DATAPROPERTY, request, GetDataProperty);



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private DataProperty _AssignValues(DataProperty request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "DataProperty"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.Select = request.Select ?? new List<string>();

            DataProperty ret = null;
            request = _InitAssignValues<DataProperty>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<DataProperty>(DocConstantModelName.DATAPROPERTY, nameof(DataProperty), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pAutoCreateMissing = request.AutoCreateMissing;
            var pChildren = GetVariable<Reference>(request, nameof(request.Children), request.Children?.ToList(), request.ChildrenIds?.ToList());
            var pClass = (request.Class?.Id > 0) ? DocEntityDataClass.Get(request.Class.Id) : null;
            var pDescription = request.Description;
            var pDisplayName = request.DisplayName;
            var pIsAllowAddInForm = request.IsAllowAddInForm;
            var pIsAllowCreateInForm = request.IsAllowCreateInForm;
            var pIsAllowEditInForm = request.IsAllowEditInForm;
            var pIsAllowFreeText = request.IsAllowFreeText;
            var pIsAllowRemoveInForm = request.IsAllowRemoveInForm;
            var pIsAudited = request.IsAudited;
            var pIsCompressed = request.IsCompressed;
            var pIsDisplayInForm = request.IsDisplayInForm;
            var pIsDisplayInGrid = request.IsDisplayInGrid;
            var pIsEditColumn = request.IsEditColumn;
            var pIsInsertOnly = request.IsInsertOnly;
            var pIsJSON = request.IsJSON;
            var pIsLazy = request.IsLazy;
            var pIsNullOnUpgrade = request.IsNullOnUpgrade;
            var pIsReadOnly = request.IsReadOnly;
            var pIsRelationship = request.IsRelationship;
            var pIsRequired = request.IsRequired;
            var pIsRequiredInForm = request.IsRequiredInForm;
            var pIsVirtual = request.IsVirtual;
            var pJsonType = request.JsonType;
            var pLookupTableEnum = DocEntityLookupTableEnum.Get(request.LookupTableEnum);
            var pName = request.Name;
            var pOrder = request.Order;
            var pOwner = (request.Owner?.Id > 0) ? DocEntityDataProperty.Get(request.Owner.Id) : null;
            var pPrecision = request.Precision;
            var pRelationshipOnOwnerRemove = request.RelationshipOnOwnerRemove;
            var pRelationshipOnTargetRemove = request.RelationshipOnTargetRemove;
            var pRelationshipPairTo = (request.RelationshipPairTo?.Id > 0) ? DocEntityDataProperty.Get(request.RelationshipPairTo.Id) : null;
            var pScale = request.Scale;
            var pSetDefaultValue = request.SetDefaultValue;
            var pTab = (request.Tab?.Id > 0) ? DocEntityDataTab.Get(request.Tab.Id) : null;
            var pTarget = (request.Target?.Id > 0) ? DocEntityDataClass.Get(request.Target.Id) : null;
            var pTargetAlias = request.TargetAlias;
            var pType = request.Type;
            var pUIType = request.UIType;
            var pArchived = true == request.Archived;
            var pLocked = request.Locked;

            var entity = InitEntity<DocEntityDataProperty,DataProperty>(request, permission, session);

            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pArchived, permission, nameof(request.Archived), pArchived != entity.Archived))
            {
                entity.Archived = pArchived;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pAutoCreateMissing, permission, nameof(request.AutoCreateMissing), pAutoCreateMissing != entity.AutoCreateMissing))
            {
                entity.AutoCreateMissing = pAutoCreateMissing;
            }
            if (AllowPatchValue<DataProperty, DocEntityDataClass>(request, DocConstantModelName.DATAPROPERTY, pClass, permission, nameof(request.Class), pClass != entity.Class))
            {
                entity.Class = pClass;
            }
            if (AllowPatchValue<DataProperty, string>(request, DocConstantModelName.DATAPROPERTY, pDescription, permission, nameof(request.Description), pDescription != entity.Description))
            {
                entity.Description = pDescription;
            }
            if (AllowPatchValue<DataProperty, string>(request, DocConstantModelName.DATAPROPERTY, pDisplayName, permission, nameof(request.DisplayName), pDisplayName != entity.DisplayName))
            {
                entity.DisplayName = pDisplayName;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsAllowAddInForm, permission, nameof(request.IsAllowAddInForm), pIsAllowAddInForm != entity.IsAllowAddInForm))
            {
                entity.IsAllowAddInForm = pIsAllowAddInForm;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsAllowCreateInForm, permission, nameof(request.IsAllowCreateInForm), pIsAllowCreateInForm != entity.IsAllowCreateInForm))
            {
                entity.IsAllowCreateInForm = pIsAllowCreateInForm;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsAllowEditInForm, permission, nameof(request.IsAllowEditInForm), pIsAllowEditInForm != entity.IsAllowEditInForm))
            {
                entity.IsAllowEditInForm = pIsAllowEditInForm;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsAllowFreeText, permission, nameof(request.IsAllowFreeText), pIsAllowFreeText != entity.IsAllowFreeText))
            {
                entity.IsAllowFreeText = pIsAllowFreeText;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsAllowRemoveInForm, permission, nameof(request.IsAllowRemoveInForm), pIsAllowRemoveInForm != entity.IsAllowRemoveInForm))
            {
                entity.IsAllowRemoveInForm = pIsAllowRemoveInForm;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsAudited, permission, nameof(request.IsAudited), pIsAudited != entity.IsAudited))
            {
                entity.IsAudited = pIsAudited;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsCompressed, permission, nameof(request.IsCompressed), pIsCompressed != entity.IsCompressed))
            {
                entity.IsCompressed = pIsCompressed;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsDisplayInForm, permission, nameof(request.IsDisplayInForm), pIsDisplayInForm != entity.IsDisplayInForm))
            {
                entity.IsDisplayInForm = pIsDisplayInForm;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsDisplayInGrid, permission, nameof(request.IsDisplayInGrid), pIsDisplayInGrid != entity.IsDisplayInGrid))
            {
                entity.IsDisplayInGrid = pIsDisplayInGrid;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsEditColumn, permission, nameof(request.IsEditColumn), pIsEditColumn != entity.IsEditColumn))
            {
                entity.IsEditColumn = pIsEditColumn;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsInsertOnly, permission, nameof(request.IsInsertOnly), pIsInsertOnly != entity.IsInsertOnly))
            {
                entity.IsInsertOnly = pIsInsertOnly;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsJSON, permission, nameof(request.IsJSON), pIsJSON != entity.IsJSON))
            {
                entity.IsJSON = pIsJSON;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsLazy, permission, nameof(request.IsLazy), pIsLazy != entity.IsLazy))
            {
                entity.IsLazy = pIsLazy;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsNullOnUpgrade, permission, nameof(request.IsNullOnUpgrade), pIsNullOnUpgrade != entity.IsNullOnUpgrade))
            {
                entity.IsNullOnUpgrade = pIsNullOnUpgrade;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsReadOnly, permission, nameof(request.IsReadOnly), pIsReadOnly != entity.IsReadOnly))
            {
                entity.IsReadOnly = pIsReadOnly;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsRelationship, permission, nameof(request.IsRelationship), pIsRelationship != entity.IsRelationship))
            {
                entity.IsRelationship = pIsRelationship;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsRequired, permission, nameof(request.IsRequired), pIsRequired != entity.IsRequired))
            {
                entity.IsRequired = pIsRequired;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsRequiredInForm, permission, nameof(request.IsRequiredInForm), pIsRequiredInForm != entity.IsRequiredInForm))
            {
                entity.IsRequiredInForm = pIsRequiredInForm;
            }
            if (AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pIsVirtual, permission, nameof(request.IsVirtual), pIsVirtual != entity.IsVirtual))
            {
                entity.IsVirtual = pIsVirtual;
            }
            if (AllowPatchValue<DataProperty, string>(request, DocConstantModelName.DATAPROPERTY, pJsonType, permission, nameof(request.JsonType), pJsonType != entity.JsonType))
            {
                entity.JsonType = pJsonType;
            }
            if (AllowPatchValue<DataProperty, DocEntityLookupTableEnum>(request, DocConstantModelName.DATAPROPERTY, pLookupTableEnum, permission, nameof(request.LookupTableEnum), pLookupTableEnum != entity.LookupTableEnum))
            {
                entity.LookupTableEnum = pLookupTableEnum;
            }
            if (AllowPatchValue<DataProperty, string>(request, DocConstantModelName.DATAPROPERTY, pName, permission, nameof(request.Name), pName != entity.Name))
            {
                entity.Name = pName;
            }
            if (AllowPatchValue<DataProperty, int?>(request, DocConstantModelName.DATAPROPERTY, pOrder, permission, nameof(request.Order), pOrder != entity.Order))
            {
                if(null != pOrder) entity.Order = (int) pOrder;
            }
            if (AllowPatchValue<DataProperty, DocEntityDataProperty>(request, DocConstantModelName.DATAPROPERTY, pOwner, permission, nameof(request.Owner), pOwner != entity.Owner))
            {
                entity.Owner = pOwner;
            }
            if (AllowPatchValue<DataProperty, int?>(request, DocConstantModelName.DATAPROPERTY, pPrecision, permission, nameof(request.Precision), pPrecision != entity.Precision))
            {
                entity.Precision = pPrecision;
            }
            if (AllowPatchValue<DataProperty, OnRemoveAction?>(request, DocConstantModelName.DATAPROPERTY, pRelationshipOnOwnerRemove, permission, nameof(request.RelationshipOnOwnerRemove), pRelationshipOnOwnerRemove != entity.RelationshipOnOwnerRemove))
            {
                entity.RelationshipOnOwnerRemove = pRelationshipOnOwnerRemove;
            }
            if (AllowPatchValue<DataProperty, OnRemoveAction?>(request, DocConstantModelName.DATAPROPERTY, pRelationshipOnTargetRemove, permission, nameof(request.RelationshipOnTargetRemove), pRelationshipOnTargetRemove != entity.RelationshipOnTargetRemove))
            {
                entity.RelationshipOnTargetRemove = pRelationshipOnTargetRemove;
            }
            if (AllowPatchValue<DataProperty, DocEntityDataProperty>(request, DocConstantModelName.DATAPROPERTY, pRelationshipPairTo, permission, nameof(request.RelationshipPairTo), pRelationshipPairTo != entity.RelationshipPairTo))
            {
                entity.RelationshipPairTo = pRelationshipPairTo;
            }
            if (AllowPatchValue<DataProperty, int?>(request, DocConstantModelName.DATAPROPERTY, pScale, permission, nameof(request.Scale), pScale != entity.Scale))
            {
                entity.Scale = pScale;
            }
            if (AllowPatchValue<DataProperty, string>(request, DocConstantModelName.DATAPROPERTY, pSetDefaultValue, permission, nameof(request.SetDefaultValue), pSetDefaultValue != entity.SetDefaultValue))
            {
                entity.SetDefaultValue = pSetDefaultValue;
            }
            if (AllowPatchValue<DataProperty, DocEntityDataTab>(request, DocConstantModelName.DATAPROPERTY, pTab, permission, nameof(request.Tab), pTab != entity.Tab))
            {
                entity.Tab = pTab;
            }
            if (AllowPatchValue<DataProperty, DocEntityDataClass>(request, DocConstantModelName.DATAPROPERTY, pTarget, permission, nameof(request.Target), pTarget != entity.Target))
            {
                entity.Target = pTarget;
            }
            if (AllowPatchValue<DataProperty, string>(request, DocConstantModelName.DATAPROPERTY, pTargetAlias, permission, nameof(request.TargetAlias), pTargetAlias != entity.TargetAlias))
            {
                entity.TargetAlias = pTargetAlias;
            }
            if (AllowPatchValue<DataProperty, DataType?>(request, DocConstantModelName.DATAPROPERTY, pType, permission, nameof(request.Type), pType != entity.Type))
            {
                if(null != pType) entity.Type = pType.Value;
            }
            if (AllowPatchValue<DataProperty, UiType?>(request, DocConstantModelName.DATAPROPERTY, pUIType, permission, nameof(request.UIType), pUIType != entity.UIType))
            {
                entity.UIType = pUIType;
            }
            if (request.Locked && AllowPatchValue<DataProperty, bool>(request, DocConstantModelName.DATAPROPERTY, pArchived, permission, nameof(request.Locked), pLocked != entity.Locked))
            {
                entity.Archived = pArchived;
            }
            entity.SaveChanges(permission);

            var idsToInvalidate = new List<int>();
            idsToInvalidate.AddRange(PatchCollection<DataProperty, DocEntityDataProperty, Reference, DocEntityDataProperty>(request, entity, pChildren, permission, nameof(request.Children)));
            if (idsToInvalidate.Any())
            {
                idsToInvalidate.Add(entity.Id);
                DocCacheClient.RemoveByEntityIds(idsToInvalidate);
                DocCacheClient.RemoveSearch(DocConstantModelName.DATAPROPERTY);
            }

            entity.SaveChanges(permission);
            DocPermissionFactory.SetSelect<DataProperty>(currentUser, nameof(DataProperty), request.Select);
            ret = entity.ToDto();

            var cacheExpires = DocResources.Metadata.GetCacheExpiration(DocConstantModelName.DATAPROPERTY);
            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.DATAPROPERTY, cacheExpires);

            return ret;
        }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<DataProperty> Put(DataPropertyBatch request)
        {
            return Patch(request);
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataProperty Put(DataProperty request)
        {
            return Patch(request);
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public List<DataProperty> Patch(DataPropertyBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<DataProperty>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as DataProperty;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public DataProperty Patch(DataProperty request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the DataProperty to patch.");
            
            request.Select = request.Select ?? new List<string>();
            
            DataProperty ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
                });
            }
            return ret;
        }



        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Get(DataPropertyJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "dataproperty":
                        return GetJunctionSearchResult<DataProperty, DocEntityDataProperty, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "Children", request, (ss) => HostContext.ResolveService<DataPropertyService>(Request)?.Get(ss));
                    case "comment":
                        return GetJunctionSearchResult<DataProperty, DocEntityDataProperty, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request, (ss) => HostContext.ResolveService<CommentService>(Request)?.Get(ss));
                    case "favorite":
                        return GetJunctionSearchResult<DataProperty, DocEntityDataProperty, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request, (ss) => HostContext.ResolveService<FavoriteService>(Request)?.Get(ss));
                    case "tag":
                        return GetJunctionSearchResult<DataProperty, DocEntityDataProperty, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for dataproperty/{request.Id}/{request.Junction} was not found");
            }
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Post(DataPropertyJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "dataproperty":
                        return AddJunction<DataProperty, DocEntityDataProperty, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "Children", request);
                    case "comment":
                        return AddJunction<DataProperty, DocEntityDataProperty, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "favorite":
                        return AddJunction<DataProperty, DocEntityDataProperty, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "tag":
                        return AddJunction<DataProperty, DocEntityDataProperty, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for dataproperty/{request.Id}/{request.Junction} was not found");
            }
        }

        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public object Delete(DataPropertyJunction request)
        {    
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "dataproperty":
                        return RemoveJunction<DataProperty, DocEntityDataProperty, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "Children", request);
                    case "comment":
                        return RemoveJunction<DataProperty, DocEntityDataProperty, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "favorite":
                        return RemoveJunction<DataProperty, DocEntityDataProperty, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "tag":
                        return RemoveJunction<DataProperty, DocEntityDataProperty, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for dataproperty/{request.Id}/{request.Junction} was not found");
            }
        }


        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        private DataProperty GetDataProperty(DataProperty request)
        {
            var id = request?.Id;
            DataProperty ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetSelect<DataProperty>(currentUser, "DataProperty", request.Select);

            DocEntityDataProperty entity = null;
            if(id.HasValue)
            {
                entity = DocEntityDataProperty.Get(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No DataProperty found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

    }
}
