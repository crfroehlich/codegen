//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class DataPropertyService : DocServiceBase
    {
        private IQueryable<DocEntityDataProperty> _ExecSearch(DataPropertySearch request)
        {
            request = InitSearch<DataProperty, DataPropertySearch>(request);
            IQueryable<DocEntityDataProperty> entities = null;
            Execute.Run( session => 
            {
                entities = Execute.SelectAll<DocEntityDataProperty>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new DataPropertyFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityDataProperty,DataPropertyFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                if(true == request.AutoCreateMissing?.Any())
                {
                    if(request.AutoCreateMissing.Any(v => v == null)) entities = entities.Where(en => en.AutoCreateMissing.In(request.AutoCreateMissing) || en.AutoCreateMissing == null);
                    else entities = entities.Where(en => en.AutoCreateMissing.In(request.AutoCreateMissing));
                }
                if(!DocTools.IsNullOrEmpty(request.Class) && !DocTools.IsNullOrEmpty(request.Class.Id))
                {
                    entities = entities.Where(en => en.Class.Id == request.Class.Id );
                }
                if(true == request.ClassIds?.Any())
                {
                    entities = entities.Where(en => en.Class.Id.In(request.ClassIds));
                }
                if(!DocTools.IsNullOrEmpty(request.Description))
                    entities = entities.Where(en => en.Description.Contains(request.Description));
                if(!DocTools.IsNullOrEmpty(request.DisplayName))
                    entities = entities.Where(en => en.DisplayName.Contains(request.DisplayName));
                if(true == request.IsAllowAddInForm?.Any())
                {
                    if(request.IsAllowAddInForm.Any(v => v == null)) entities = entities.Where(en => en.IsAllowAddInForm.In(request.IsAllowAddInForm) || en.IsAllowAddInForm == null);
                    else entities = entities.Where(en => en.IsAllowAddInForm.In(request.IsAllowAddInForm));
                }
                if(true == request.IsAllowCreateInForm?.Any())
                {
                    if(request.IsAllowCreateInForm.Any(v => v == null)) entities = entities.Where(en => en.IsAllowCreateInForm.In(request.IsAllowCreateInForm) || en.IsAllowCreateInForm == null);
                    else entities = entities.Where(en => en.IsAllowCreateInForm.In(request.IsAllowCreateInForm));
                }
                if(true == request.IsAllowEditInForm?.Any())
                {
                    if(request.IsAllowEditInForm.Any(v => v == null)) entities = entities.Where(en => en.IsAllowEditInForm.In(request.IsAllowEditInForm) || en.IsAllowEditInForm == null);
                    else entities = entities.Where(en => en.IsAllowEditInForm.In(request.IsAllowEditInForm));
                }
                if(true == request.IsAllowFreeText?.Any())
                {
                    if(request.IsAllowFreeText.Any(v => v == null)) entities = entities.Where(en => en.IsAllowFreeText.In(request.IsAllowFreeText) || en.IsAllowFreeText == null);
                    else entities = entities.Where(en => en.IsAllowFreeText.In(request.IsAllowFreeText));
                }
                if(true == request.IsAllowRemoveInForm?.Any())
                {
                    if(request.IsAllowRemoveInForm.Any(v => v == null)) entities = entities.Where(en => en.IsAllowRemoveInForm.In(request.IsAllowRemoveInForm) || en.IsAllowRemoveInForm == null);
                    else entities = entities.Where(en => en.IsAllowRemoveInForm.In(request.IsAllowRemoveInForm));
                }
                if(true == request.IsAudited?.Any())
                {
                    if(request.IsAudited.Any(v => v == null)) entities = entities.Where(en => en.IsAudited.In(request.IsAudited) || en.IsAudited == null);
                    else entities = entities.Where(en => en.IsAudited.In(request.IsAudited));
                }
                if(true == request.IsDisplayInForm?.Any())
                {
                    if(request.IsDisplayInForm.Any(v => v == null)) entities = entities.Where(en => en.IsDisplayInForm.In(request.IsDisplayInForm) || en.IsDisplayInForm == null);
                    else entities = entities.Where(en => en.IsDisplayInForm.In(request.IsDisplayInForm));
                }
                if(true == request.IsDisplayInGrid?.Any())
                {
                    if(request.IsDisplayInGrid.Any(v => v == null)) entities = entities.Where(en => en.IsDisplayInGrid.In(request.IsDisplayInGrid) || en.IsDisplayInGrid == null);
                    else entities = entities.Where(en => en.IsDisplayInGrid.In(request.IsDisplayInGrid));
                }
                if(true == request.IsEditColumn?.Any())
                {
                    if(request.IsEditColumn.Any(v => v == null)) entities = entities.Where(en => en.IsEditColumn.In(request.IsEditColumn) || en.IsEditColumn == null);
                    else entities = entities.Where(en => en.IsEditColumn.In(request.IsEditColumn));
                }
                if(true == request.IsInsertOnly?.Any())
                {
                    if(request.IsInsertOnly.Any(v => v == null)) entities = entities.Where(en => en.IsInsertOnly.In(request.IsInsertOnly) || en.IsInsertOnly == null);
                    else entities = entities.Where(en => en.IsInsertOnly.In(request.IsInsertOnly));
                }
                if(true == request.IsJSON?.Any())
                {
                    if(request.IsJSON.Any(v => v == null)) entities = entities.Where(en => en.IsJSON.In(request.IsJSON) || en.IsJSON == null);
                    else entities = entities.Where(en => en.IsJSON.In(request.IsJSON));
                }
                if(true == request.IsLazy?.Any())
                {
                    if(request.IsLazy.Any(v => v == null)) entities = entities.Where(en => en.IsLazy.In(request.IsLazy) || en.IsLazy == null);
                    else entities = entities.Where(en => en.IsLazy.In(request.IsLazy));
                }
                if(true == request.IsNullOnUpgrade?.Any())
                {
                    if(request.IsNullOnUpgrade.Any(v => v == null)) entities = entities.Where(en => en.IsNullOnUpgrade.In(request.IsNullOnUpgrade) || en.IsNullOnUpgrade == null);
                    else entities = entities.Where(en => en.IsNullOnUpgrade.In(request.IsNullOnUpgrade));
                }
                if(true == request.IsReadOnly?.Any())
                {
                    if(request.IsReadOnly.Any(v => v == null)) entities = entities.Where(en => en.IsReadOnly.In(request.IsReadOnly) || en.IsReadOnly == null);
                    else entities = entities.Where(en => en.IsReadOnly.In(request.IsReadOnly));
                }
                if(true == request.IsRelationship?.Any())
                {
                    if(request.IsRelationship.Any(v => v == null)) entities = entities.Where(en => en.IsRelationship.In(request.IsRelationship) || en.IsRelationship == null);
                    else entities = entities.Where(en => en.IsRelationship.In(request.IsRelationship));
                }
                if(true == request.IsRequired?.Any())
                {
                    if(request.IsRequired.Any(v => v == null)) entities = entities.Where(en => en.IsRequired.In(request.IsRequired) || en.IsRequired == null);
                    else entities = entities.Where(en => en.IsRequired.In(request.IsRequired));
                }
                if(true == request.IsRequiredInForm?.Any())
                {
                    if(request.IsRequiredInForm.Any(v => v == null)) entities = entities.Where(en => en.IsRequiredInForm.In(request.IsRequiredInForm) || en.IsRequiredInForm == null);
                    else entities = entities.Where(en => en.IsRequiredInForm.In(request.IsRequiredInForm));
                }
                if(true == request.IsVirtual?.Any())
                {
                    if(request.IsVirtual.Any(v => v == null)) entities = entities.Where(en => en.IsVirtual.In(request.IsVirtual) || en.IsVirtual == null);
                    else entities = entities.Where(en => en.IsVirtual.In(request.IsVirtual));
                }
                if(!DocTools.IsNullOrEmpty(request.JsonType))
                    entities = entities.Where(en => en.JsonType.Contains(request.JsonType));
                if(!DocTools.IsNullOrEmpty(request.LookupTableEnum) && !DocTools.IsNullOrEmpty(request.LookupTableEnum.Id))
                {
                    entities = entities.Where(en => en.LookupTableEnum.Id == request.LookupTableEnum.Id );
                }
                if(true == request.LookupTableEnumIds?.Any())
                {
                    entities = entities.Where(en => en.LookupTableEnum.Id.In(request.LookupTableEnumIds));
                }
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(request.Order.HasValue)
                    entities = entities.Where(en => request.Order.Value == en.Order);
                if(request.Precision.HasValue)
                    entities = entities.Where(en => request.Precision.Value == en.Precision);
                if(!DocTools.IsNullOrEmpty(request.RelationshipOnOwnerRemove))
                    entities = entities.Where(en => request.RelationshipOnOwnerRemove.Equals(en.RelationshipOnOwnerRemove));
                if(!DocTools.IsNullOrEmpty(request.RelationshipOnTargetRemove))
                    entities = entities.Where(en => request.RelationshipOnTargetRemove.Equals(en.RelationshipOnTargetRemove));
                if(!DocTools.IsNullOrEmpty(request.RelationshipPairTo) && !DocTools.IsNullOrEmpty(request.RelationshipPairTo.Id))
                {
                    entities = entities.Where(en => en.RelationshipPairTo.Id == request.RelationshipPairTo.Id );
                }
                if(true == request.RelationshipPairToIds?.Any())
                {
                    entities = entities.Where(en => en.RelationshipPairTo.Id.In(request.RelationshipPairToIds));
                }
                if(request.Scale.HasValue)
                    entities = entities.Where(en => request.Scale.Value == en.Scale);
                if(!DocTools.IsNullOrEmpty(request.SetDefaultValue))
                    entities = entities.Where(en => en.SetDefaultValue.Contains(request.SetDefaultValue));
                if(!DocTools.IsNullOrEmpty(request.Tab) && !DocTools.IsNullOrEmpty(request.Tab.Id))
                {
                    entities = entities.Where(en => en.Tab.Id == request.Tab.Id );
                }
                if(true == request.TabIds?.Any())
                {
                    entities = entities.Where(en => en.Tab.Id.In(request.TabIds));
                }
                if(!DocTools.IsNullOrEmpty(request.Target) && !DocTools.IsNullOrEmpty(request.Target.Id))
                {
                    entities = entities.Where(en => en.Target.Id == request.Target.Id );
                }
                if(true == request.TargetIds?.Any())
                {
                    entities = entities.Where(en => en.Target.Id.In(request.TargetIds));
                }
                if(!DocTools.IsNullOrEmpty(request.TargetAlias))
                    entities = entities.Where(en => en.TargetAlias.Contains(request.TargetAlias));
                if(!DocTools.IsNullOrEmpty(request.Type))
                    entities = entities.Where(en => request.Type.Equals(en.Type));
                if(!DocTools.IsNullOrEmpty(request.UIType))
                    entities = entities.Where(en => en.UIType.Contains(request.UIType));

                entities = ApplyFilters<DocEntityDataProperty,DataPropertySearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(DataPropertySearch request) => Get(request);

        public object Get(DataPropertySearch request) => GetSearchResultWithCache<DataProperty,DocEntityDataProperty,DataPropertySearch>(DocConstantModelName.DATAPROPERTY, request, _ExecSearch);

        public object Get(DataProperty request) => GetEntityWithCache<DataProperty>(DocConstantModelName.DATAPROPERTY, request, GetDataProperty);
        private DataProperty _AssignValues(DataProperty request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "DataProperty"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            DataProperty ret = null;
            request = _InitAssignValues<DataProperty>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<DataProperty>(DocConstantModelName.DATAPROPERTY, nameof(DataProperty), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pAutoCreateMissing = request.AutoCreateMissing;
            var pClass = (request.Class?.Id > 0) ? DocEntityDataClass.GetDataClass(request.Class.Id) : null;
            var pDescription = request.Description;
            var pDisplayName = request.DisplayName;
            var pIsAllowAddInForm = request.IsAllowAddInForm;
            var pIsAllowCreateInForm = request.IsAllowCreateInForm;
            var pIsAllowEditInForm = request.IsAllowEditInForm;
            var pIsAllowFreeText = request.IsAllowFreeText;
            var pIsAllowRemoveInForm = request.IsAllowRemoveInForm;
            var pIsAudited = request.IsAudited;
            var pIsDisplayInForm = request.IsDisplayInForm;
            var pIsDisplayInGrid = request.IsDisplayInGrid;
            var pIsEditColumn = request.IsEditColumn;
            var pIsInsertOnly = request.IsInsertOnly;
            var pIsJSON = request.IsJSON;
            var pIsLazy = request.IsLazy;
            var pIsNullOnUpgrade = request.IsNullOnUpgrade;
            var pIsReadOnly = request.IsReadOnly;
            var pIsRelationship = request.IsRelationship;
            var pIsRequired = request.IsRequired;
            var pIsRequiredInForm = request.IsRequiredInForm;
            var pIsVirtual = request.IsVirtual;
            var pJsonType = request.JsonType;
            var pLookupTableEnum = DocEntityLookupTableEnum.GetLookupTableEnum(request.LookupTableEnum);
            var pName = request.Name;
            var pOrder = request.Order;
            var pPrecision = request.Precision;
            var pRelationshipOnOwnerRemove = request.RelationshipOnOwnerRemove;
            var pRelationshipOnTargetRemove = request.RelationshipOnTargetRemove;
            var pRelationshipPairTo = (request.RelationshipPairTo?.Id > 0) ? DocEntityDataProperty.GetDataProperty(request.RelationshipPairTo.Id) : null;
            var pScale = request.Scale;
            var pSetDefaultValue = request.SetDefaultValue;
            var pTab = (request.Tab?.Id > 0) ? DocEntityDataTab.GetDataTab(request.Tab.Id) : null;
            var pTarget = (request.Target?.Id > 0) ? DocEntityDataClass.GetDataClass(request.Target.Id) : null;
            var pTargetAlias = request.TargetAlias;
            var pType = request.Type;
            var pUIType = request.UIType;

            DocEntityDataProperty entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityDataProperty(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityDataProperty.GetDataProperty(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pAutoCreateMissing, permission, DocConstantModelName.DATAPROPERTY, nameof(request.AutoCreateMissing)))
            {
                if(DocPermissionFactory.IsRequested(request, pAutoCreateMissing, entity.AutoCreateMissing, nameof(request.AutoCreateMissing)))
                    entity.AutoCreateMissing = pAutoCreateMissing;
                if(DocPermissionFactory.IsRequested<bool>(request, pAutoCreateMissing, nameof(request.AutoCreateMissing)) && !request.VisibleFields.Matches(nameof(request.AutoCreateMissing), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.AutoCreateMissing));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityDataClass>(currentUser, request, pClass, permission, DocConstantModelName.DATAPROPERTY, nameof(request.Class)))
            {
                if(DocPermissionFactory.IsRequested(request, pClass, entity.Class, nameof(request.Class)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Class)} cannot be modified once set.");
                    entity.Class = pClass;
                if(DocPermissionFactory.IsRequested<DocEntityDataClass>(request, pClass, nameof(request.Class)) && !request.VisibleFields.Matches(nameof(request.Class), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Class));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pDescription, permission, DocConstantModelName.DATAPROPERTY, nameof(request.Description)))
            {
                if(DocPermissionFactory.IsRequested(request, pDescription, entity.Description, nameof(request.Description)))
                    entity.Description = pDescription;
                if(DocPermissionFactory.IsRequested<string>(request, pDescription, nameof(request.Description)) && !request.VisibleFields.Matches(nameof(request.Description), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Description));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pDisplayName, permission, DocConstantModelName.DATAPROPERTY, nameof(request.DisplayName)))
            {
                if(DocPermissionFactory.IsRequested(request, pDisplayName, entity.DisplayName, nameof(request.DisplayName)))
                    entity.DisplayName = pDisplayName;
                if(DocPermissionFactory.IsRequested<string>(request, pDisplayName, nameof(request.DisplayName)) && !request.VisibleFields.Matches(nameof(request.DisplayName), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.DisplayName));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsAllowAddInForm, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsAllowAddInForm)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsAllowAddInForm, entity.IsAllowAddInForm, nameof(request.IsAllowAddInForm)))
                    entity.IsAllowAddInForm = pIsAllowAddInForm;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsAllowAddInForm, nameof(request.IsAllowAddInForm)) && !request.VisibleFields.Matches(nameof(request.IsAllowAddInForm), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsAllowAddInForm));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsAllowCreateInForm, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsAllowCreateInForm)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsAllowCreateInForm, entity.IsAllowCreateInForm, nameof(request.IsAllowCreateInForm)))
                    entity.IsAllowCreateInForm = pIsAllowCreateInForm;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsAllowCreateInForm, nameof(request.IsAllowCreateInForm)) && !request.VisibleFields.Matches(nameof(request.IsAllowCreateInForm), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsAllowCreateInForm));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsAllowEditInForm, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsAllowEditInForm)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsAllowEditInForm, entity.IsAllowEditInForm, nameof(request.IsAllowEditInForm)))
                    entity.IsAllowEditInForm = pIsAllowEditInForm;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsAllowEditInForm, nameof(request.IsAllowEditInForm)) && !request.VisibleFields.Matches(nameof(request.IsAllowEditInForm), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsAllowEditInForm));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsAllowFreeText, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsAllowFreeText)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsAllowFreeText, entity.IsAllowFreeText, nameof(request.IsAllowFreeText)))
                    entity.IsAllowFreeText = pIsAllowFreeText;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsAllowFreeText, nameof(request.IsAllowFreeText)) && !request.VisibleFields.Matches(nameof(request.IsAllowFreeText), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsAllowFreeText));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsAllowRemoveInForm, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsAllowRemoveInForm)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsAllowRemoveInForm, entity.IsAllowRemoveInForm, nameof(request.IsAllowRemoveInForm)))
                    entity.IsAllowRemoveInForm = pIsAllowRemoveInForm;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsAllowRemoveInForm, nameof(request.IsAllowRemoveInForm)) && !request.VisibleFields.Matches(nameof(request.IsAllowRemoveInForm), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsAllowRemoveInForm));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsAudited, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsAudited)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsAudited, entity.IsAudited, nameof(request.IsAudited)))
                    entity.IsAudited = pIsAudited;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsAudited, nameof(request.IsAudited)) && !request.VisibleFields.Matches(nameof(request.IsAudited), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsAudited));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsDisplayInForm, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsDisplayInForm)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsDisplayInForm, entity.IsDisplayInForm, nameof(request.IsDisplayInForm)))
                    entity.IsDisplayInForm = pIsDisplayInForm;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsDisplayInForm, nameof(request.IsDisplayInForm)) && !request.VisibleFields.Matches(nameof(request.IsDisplayInForm), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsDisplayInForm));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsDisplayInGrid, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsDisplayInGrid)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsDisplayInGrid, entity.IsDisplayInGrid, nameof(request.IsDisplayInGrid)))
                    entity.IsDisplayInGrid = pIsDisplayInGrid;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsDisplayInGrid, nameof(request.IsDisplayInGrid)) && !request.VisibleFields.Matches(nameof(request.IsDisplayInGrid), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsDisplayInGrid));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsEditColumn, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsEditColumn)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsEditColumn, entity.IsEditColumn, nameof(request.IsEditColumn)))
                    entity.IsEditColumn = pIsEditColumn;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsEditColumn, nameof(request.IsEditColumn)) && !request.VisibleFields.Matches(nameof(request.IsEditColumn), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsEditColumn));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsInsertOnly, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsInsertOnly)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsInsertOnly, entity.IsInsertOnly, nameof(request.IsInsertOnly)))
                    entity.IsInsertOnly = pIsInsertOnly;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsInsertOnly, nameof(request.IsInsertOnly)) && !request.VisibleFields.Matches(nameof(request.IsInsertOnly), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsInsertOnly));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsJSON, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsJSON)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsJSON, entity.IsJSON, nameof(request.IsJSON)))
                    entity.IsJSON = pIsJSON;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsJSON, nameof(request.IsJSON)) && !request.VisibleFields.Matches(nameof(request.IsJSON), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsJSON));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsLazy, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsLazy)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsLazy, entity.IsLazy, nameof(request.IsLazy)))
                    entity.IsLazy = pIsLazy;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsLazy, nameof(request.IsLazy)) && !request.VisibleFields.Matches(nameof(request.IsLazy), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsLazy));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsNullOnUpgrade, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsNullOnUpgrade)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsNullOnUpgrade, entity.IsNullOnUpgrade, nameof(request.IsNullOnUpgrade)))
                    entity.IsNullOnUpgrade = pIsNullOnUpgrade;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsNullOnUpgrade, nameof(request.IsNullOnUpgrade)) && !request.VisibleFields.Matches(nameof(request.IsNullOnUpgrade), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsNullOnUpgrade));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsReadOnly, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsReadOnly)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsReadOnly, entity.IsReadOnly, nameof(request.IsReadOnly)))
                    entity.IsReadOnly = pIsReadOnly;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsReadOnly, nameof(request.IsReadOnly)) && !request.VisibleFields.Matches(nameof(request.IsReadOnly), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsReadOnly));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsRelationship, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsRelationship)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsRelationship, entity.IsRelationship, nameof(request.IsRelationship)))
                    entity.IsRelationship = pIsRelationship;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsRelationship, nameof(request.IsRelationship)) && !request.VisibleFields.Matches(nameof(request.IsRelationship), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsRelationship));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsRequired, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsRequired)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsRequired, entity.IsRequired, nameof(request.IsRequired)))
                    entity.IsRequired = pIsRequired;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsRequired, nameof(request.IsRequired)) && !request.VisibleFields.Matches(nameof(request.IsRequired), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsRequired));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsRequiredInForm, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsRequiredInForm)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsRequiredInForm, entity.IsRequiredInForm, nameof(request.IsRequiredInForm)))
                    entity.IsRequiredInForm = pIsRequiredInForm;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsRequiredInForm, nameof(request.IsRequiredInForm)) && !request.VisibleFields.Matches(nameof(request.IsRequiredInForm), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsRequiredInForm));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsVirtual, permission, DocConstantModelName.DATAPROPERTY, nameof(request.IsVirtual)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsVirtual, entity.IsVirtual, nameof(request.IsVirtual)))
                    entity.IsVirtual = pIsVirtual;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsVirtual, nameof(request.IsVirtual)) && !request.VisibleFields.Matches(nameof(request.IsVirtual), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsVirtual));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pJsonType, permission, DocConstantModelName.DATAPROPERTY, nameof(request.JsonType)))
            {
                if(DocPermissionFactory.IsRequested(request, pJsonType, entity.JsonType, nameof(request.JsonType)))
                    entity.JsonType = pJsonType;
                if(DocPermissionFactory.IsRequested<string>(request, pJsonType, nameof(request.JsonType)) && !request.VisibleFields.Matches(nameof(request.JsonType), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.JsonType));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTableEnum>(currentUser, request, pLookupTableEnum, permission, DocConstantModelName.DATAPROPERTY, nameof(request.LookupTableEnum)))
            {
                if(DocPermissionFactory.IsRequested(request, pLookupTableEnum, entity.LookupTableEnum, nameof(request.LookupTableEnum)))
                    entity.LookupTableEnum = pLookupTableEnum;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTableEnum>(request, pLookupTableEnum, nameof(request.LookupTableEnum)) && !request.VisibleFields.Matches(nameof(request.LookupTableEnum), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.LookupTableEnum));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pName, permission, DocConstantModelName.DATAPROPERTY, nameof(request.Name)))
            {
                if(DocPermissionFactory.IsRequested(request, pName, entity.Name, nameof(request.Name)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Name)} cannot be modified once set.");
                    entity.Name = pName;
                if(DocPermissionFactory.IsRequested<string>(request, pName, nameof(request.Name)) && !request.VisibleFields.Matches(nameof(request.Name), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Name));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pOrder, permission, DocConstantModelName.DATAPROPERTY, nameof(request.Order)))
            {
                if(DocPermissionFactory.IsRequested(request, pOrder, entity.Order, nameof(request.Order)))
                    if(null != pOrder)
                        entity.Order = (int) pOrder;
                if(DocPermissionFactory.IsRequested<int?>(request, pOrder, nameof(request.Order)) && !request.VisibleFields.Matches(nameof(request.Order), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Order));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pPrecision, permission, DocConstantModelName.DATAPROPERTY, nameof(request.Precision)))
            {
                if(DocPermissionFactory.IsRequested(request, pPrecision, entity.Precision, nameof(request.Precision)))
                    entity.Precision = pPrecision;
                if(DocPermissionFactory.IsRequested<int?>(request, pPrecision, nameof(request.Precision)) && !request.VisibleFields.Matches(nameof(request.Precision), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Precision));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<OnRemoveAction>(currentUser, request, pRelationshipOnOwnerRemove, permission, DocConstantModelName.DATAPROPERTY, nameof(request.RelationshipOnOwnerRemove)))
            {
                if(DocPermissionFactory.IsRequested(request, pRelationshipOnOwnerRemove, entity.RelationshipOnOwnerRemove, nameof(request.RelationshipOnOwnerRemove)))
                    entity.RelationshipOnOwnerRemove = pRelationshipOnOwnerRemove;
                if(DocPermissionFactory.IsRequested<OnRemoveAction>(request, pRelationshipOnOwnerRemove, nameof(request.RelationshipOnOwnerRemove)) && !request.VisibleFields.Matches(nameof(request.RelationshipOnOwnerRemove), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.RelationshipOnOwnerRemove));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<OnRemoveAction>(currentUser, request, pRelationshipOnTargetRemove, permission, DocConstantModelName.DATAPROPERTY, nameof(request.RelationshipOnTargetRemove)))
            {
                if(DocPermissionFactory.IsRequested(request, pRelationshipOnTargetRemove, entity.RelationshipOnTargetRemove, nameof(request.RelationshipOnTargetRemove)))
                    entity.RelationshipOnTargetRemove = pRelationshipOnTargetRemove;
                if(DocPermissionFactory.IsRequested<OnRemoveAction>(request, pRelationshipOnTargetRemove, nameof(request.RelationshipOnTargetRemove)) && !request.VisibleFields.Matches(nameof(request.RelationshipOnTargetRemove), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.RelationshipOnTargetRemove));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityDataProperty>(currentUser, request, pRelationshipPairTo, permission, DocConstantModelName.DATAPROPERTY, nameof(request.RelationshipPairTo)))
            {
                if(DocPermissionFactory.IsRequested(request, pRelationshipPairTo, entity.RelationshipPairTo, nameof(request.RelationshipPairTo)))
                    entity.RelationshipPairTo = pRelationshipPairTo;
                if(DocPermissionFactory.IsRequested<DocEntityDataProperty>(request, pRelationshipPairTo, nameof(request.RelationshipPairTo)) && !request.VisibleFields.Matches(nameof(request.RelationshipPairTo), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.RelationshipPairTo));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pScale, permission, DocConstantModelName.DATAPROPERTY, nameof(request.Scale)))
            {
                if(DocPermissionFactory.IsRequested(request, pScale, entity.Scale, nameof(request.Scale)))
                    entity.Scale = pScale;
                if(DocPermissionFactory.IsRequested<int?>(request, pScale, nameof(request.Scale)) && !request.VisibleFields.Matches(nameof(request.Scale), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Scale));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pSetDefaultValue, permission, DocConstantModelName.DATAPROPERTY, nameof(request.SetDefaultValue)))
            {
                if(DocPermissionFactory.IsRequested(request, pSetDefaultValue, entity.SetDefaultValue, nameof(request.SetDefaultValue)))
                    entity.SetDefaultValue = pSetDefaultValue;
                if(DocPermissionFactory.IsRequested<string>(request, pSetDefaultValue, nameof(request.SetDefaultValue)) && !request.VisibleFields.Matches(nameof(request.SetDefaultValue), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.SetDefaultValue));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityDataTab>(currentUser, request, pTab, permission, DocConstantModelName.DATAPROPERTY, nameof(request.Tab)))
            {
                if(DocPermissionFactory.IsRequested(request, pTab, entity.Tab, nameof(request.Tab)))
                    entity.Tab = pTab;
                if(DocPermissionFactory.IsRequested<DocEntityDataTab>(request, pTab, nameof(request.Tab)) && !request.VisibleFields.Matches(nameof(request.Tab), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Tab));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityDataClass>(currentUser, request, pTarget, permission, DocConstantModelName.DATAPROPERTY, nameof(request.Target)))
            {
                if(DocPermissionFactory.IsRequested(request, pTarget, entity.Target, nameof(request.Target)))
                    entity.Target = pTarget;
                if(DocPermissionFactory.IsRequested<DocEntityDataClass>(request, pTarget, nameof(request.Target)) && !request.VisibleFields.Matches(nameof(request.Target), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Target));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pTargetAlias, permission, DocConstantModelName.DATAPROPERTY, nameof(request.TargetAlias)))
            {
                if(DocPermissionFactory.IsRequested(request, pTargetAlias, entity.TargetAlias, nameof(request.TargetAlias)))
                    entity.TargetAlias = pTargetAlias;
                if(DocPermissionFactory.IsRequested<string>(request, pTargetAlias, nameof(request.TargetAlias)) && !request.VisibleFields.Matches(nameof(request.TargetAlias), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.TargetAlias));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DataType>(currentUser, request, pType, permission, DocConstantModelName.DATAPROPERTY, nameof(request.Type)))
            {
                if(DocPermissionFactory.IsRequested(request, pType, entity.Type, nameof(request.Type)))
                    entity.Type = pType;
                if(DocPermissionFactory.IsRequested<DataType>(request, pType, nameof(request.Type)) && !request.VisibleFields.Matches(nameof(request.Type), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Type));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pUIType, permission, DocConstantModelName.DATAPROPERTY, nameof(request.UIType)))
            {
                if(DocPermissionFactory.IsRequested(request, pUIType, entity.UIType, nameof(request.UIType)))
                    entity.UIType = pUIType;
                if(DocPermissionFactory.IsRequested<string>(request, pUIType, nameof(request.UIType)) && !request.VisibleFields.Matches(nameof(request.UIType), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.UIType));
                }
            }
            
            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);
            
            DocPermissionFactory.SetVisibleFields<DataProperty>(currentUser, nameof(DataProperty), request.VisibleFields);
            ret = entity.ToDto();

            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.DATAPROPERTY);

            return ret;
        }


        public List<DataProperty> Put(DataPropertyBatch request)
        {
            return Patch(request);
        }

        public DataProperty Put(DataProperty request)
        {
            return Patch(request);
        }

        public List<DataProperty> Patch(DataPropertyBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<DataProperty>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as DataProperty;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public DataProperty Patch(DataProperty request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the DataProperty to patch.");
            
            request.VisibleFields = request.VisibleFields ?? new List<string>();
            
            DataProperty ret = null;
            Execute.Run(ssn =>
            {
                ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
            });
            return ret;
        }


        private DataProperty GetDataProperty(DataProperty request)
        {
            var id = request?.Id;
            DataProperty ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<DataProperty>(currentUser, "DataProperty", request.VisibleFields);

            DocEntityDataProperty entity = null;
            if(id.HasValue)
            {
                entity = DocEntityDataProperty.GetDataProperty(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No DataProperty found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }
    }
}