//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Security;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class ProductService : DocServiceBase
    {
        public const string CACHE_KEY_PREFIX = DocEntityProduct.CACHE_KEY_PREFIX;
        private object _GetIdCache(Product request)
        {
            object ret = null;

            if (true != request.IgnoreCache)
            {
                var key = currentUser.GetApiCacheKey(DocConstantModelName.PRODUCT);
                var cacheKey = $"Product_{key}_{request.Id}_{UrnId.Create<Product>(request.GetMD5Hash())}";
                ret = Request.ToOptimizedResultUsingCache(Cache, cacheKey, new TimeSpan(0, DocResources.Settings.SessionTimeout, 0), () =>
                {
                    object cachedRet = null;
                    Execute.Run(s =>
                    {
                        cachedRet = GetProduct(request);
                    });
                    return cachedRet;
                });
            }
            if(null == ret)
            {
                Execute.Run(s =>
                {
                    ret = GetProduct(request);
                });
            }
            return ret;
        }

        private object _GetSearchCache(ProductSearch request, DocRequestCancellation requestCancel)
        {
            object tryRet = null;
            var ret = new List<Product>();

            //Keys need to be customized to factor in permissions/scoping. Often, including the current user's Role Id is sufficient in the key
            var key = currentUser.GetApiCacheKey(DocConstantModelName.PRODUCT);
            var cacheKey = $"{CACHE_KEY_PREFIX}_{key}_{UrnId.Create<ProductSearch>(request.GetMD5Hash())}";
            tryRet = Request.ToOptimizedResultUsingCache(Cache, cacheKey, new TimeSpan(0, DocResources.Settings.SessionTimeout, 0), () =>
            {
                _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityProduct,Product>(ret, Execute, requestCancel));
                return ret;
            });

            if(tryRet == null)
            {
                ret = new List<Product>();
                _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityProduct,Product>(ret, Execute, requestCancel));
                return ret;
            }
            else
            {
                return tryRet;
            }
        }
        private void _ExecSearch(ProductSearch request, Action<IQueryable<DocEntityProduct>> callBack)
        {
            request = InitSearch(request);
            
            DocPermissionFactory.SetVisibleFields<Product>(currentUser, "Product", request.VisibleFields);

            Execute.Run( session => 
            {
                var entities = Execute.SelectAll<DocEntityProduct>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new ProductFullTextSearch(request);
                    entities = GetFullTextSearch(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                        if(true == request.ChildrenIds?.Any())
                        {
                            entities = entities.Where(en => en.Children.Any(r => r.Id.In(request.ChildrenIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.Client) && !DocTools.IsNullOrEmpty(request.Client.Id))
                {
                    entities = entities.Where(en => en.Client.Id == request.Client.Id );
                }
                if(true == request.ClientIds?.Any())
                {
                    entities = entities.Where(en => en.Client.Id.In(request.ClientIds));
                }
                if(!DocTools.IsNullOrEmpty(request.DatabaseDeadline))
                    entities = entities.Where(en => null != en.DatabaseDeadline && request.DatabaseDeadline.Value.Date == en.DatabaseDeadline.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.DatabaseDeadlineBefore))
                    entities = entities.Where(en => en.DatabaseDeadline <= request.DatabaseDeadlineBefore);
                if(!DocTools.IsNullOrEmpty(request.DatabaseDeadlineAfter))
                    entities = entities.Where(en => en.DatabaseDeadline >= request.DatabaseDeadlineAfter);
                if(!DocTools.IsNullOrEmpty(request.DatabaseName))
                    entities = entities.Where(en => en.DatabaseName.Contains(request.DatabaseName));
                if(!DocTools.IsNullOrEmpty(request.Dataset) && !DocTools.IsNullOrEmpty(request.Dataset.Id))
                {
                    entities = entities.Where(en => en.Dataset.Id == request.Dataset.Id );
                }
                if(true == request.DatasetIds?.Any())
                {
                    entities = entities.Where(en => en.Dataset.Id.In(request.DatasetIds));
                }
                if(!DocTools.IsNullOrEmpty(request.DeliverableDeadline))
                    entities = entities.Where(en => null != en.DeliverableDeadline && request.DeliverableDeadline.Value.Date == en.DeliverableDeadline.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.DeliverableDeadlineBefore))
                    entities = entities.Where(en => en.DeliverableDeadline <= request.DeliverableDeadlineBefore);
                if(!DocTools.IsNullOrEmpty(request.DeliverableDeadlineAfter))
                    entities = entities.Where(en => en.DeliverableDeadline >= request.DeliverableDeadlineAfter);
                if(request.FqId.HasValue)
                    entities = entities.Where(en => request.FqId.Value == en.FqId);
                if(request.LibraryPackageId.HasValue)
                    entities = entities.Where(en => request.LibraryPackageId.Value == en.LibraryPackageId);
                if(!DocTools.IsNullOrEmpty(request.LibraryPackageName))
                    entities = entities.Where(en => en.LibraryPackageName.Contains(request.LibraryPackageName));
                if(!DocTools.IsNullOrEmpty(request.Number))
                    entities = entities.Where(en => en.Number.Contains(request.Number));
                if(!DocTools.IsNullOrEmpty(request.OperationsDeliverable))
                    entities = entities.Where(en => en.OperationsDeliverable.Contains(request.OperationsDeliverable));
                if(!DocTools.IsNullOrEmpty(request.OpportunityId))
                    entities = entities.Where(en => en.OpportunityId.Contains(request.OpportunityId));
                if(!DocTools.IsNullOrEmpty(request.OpportunityName))
                    entities = entities.Where(en => en.OpportunityName.Contains(request.OpportunityName));
                if(!DocTools.IsNullOrEmpty(request.Parent) && !DocTools.IsNullOrEmpty(request.Parent.Id))
                {
                    entities = entities.Where(en => en.Parent.Id == request.Parent.Id );
                }
                if(true == request.ParentIds?.Any())
                {
                    entities = entities.Where(en => en.Parent.Id.In(request.ParentIds));
                }
                if(!DocTools.IsNullOrEmpty(request.PICO))
                    entities = entities.Where(en => en.PICO.Contains(request.PICO));
                if(!DocTools.IsNullOrEmpty(request.ProjectId))
                    entities = entities.Where(en => en.ProjectId.Contains(request.ProjectId));
                if(!DocTools.IsNullOrEmpty(request.ProjectName))
                    entities = entities.Where(en => en.ProjectName.Contains(request.ProjectName));
                if(!DocTools.IsNullOrEmpty(request.Status) && !DocTools.IsNullOrEmpty(request.Status.Id))
                {
                    entities = entities.Where(en => en.Status.Id == request.Status.Id );
                }
                if(true == request.StatusIds?.Any())
                {
                    entities = entities.Where(en => en.Status.Id.In(request.StatusIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.Status) && !DocTools.IsNullOrEmpty(request.Status.Name))
                {
                    entities = entities.Where(en => en.Status.Name == request.Status.Name );
                }
                if(true == request.StatusNames?.Any())
                {
                    entities = entities.Where(en => en.Status.Name.In(request.StatusNames));
                }

                entities = ApplyFilters(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
                callBack?.Invoke(entities);
            });
        }
        
        public object Post(ProductSearch request)
        {
            object tryRet = null;
            using (var cancellableRequest = base.Request.CreateCancellableRequest())
            {
                var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                try 
                {
                    var ret = new List<Product>();
                    var settings = DocResources.Settings;
                    if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "product")) 
                    {
                        tryRet = _GetSearchCache(request, requestCancel);
                    }
                    if (tryRet == null)
                    {
                        _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityProduct,Product>(ret, Execute, requestCancel));
                        tryRet = ret;
                    }
                }
                catch(Exception) { throw; }
                finally
                {
                    requestCancel?.CloseRequest();
                }
            }
            return tryRet;
        }

        public object Get(ProductSearch request)
        {
            object tryRet = null;
            using (var cancellableRequest = base.Request.CreateCancellableRequest())
            {
                var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                try 
                {
                    var ret = new List<Product>();
                    var settings = DocResources.Settings;
                    if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "product")) 
                    {
                        tryRet = _GetSearchCache(request, requestCancel);
                    }
                    if (tryRet == null)
                    {
                        _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityProduct,Product>(ret, Execute, requestCancel));
                        tryRet = ret;
                    }
                }
                catch(Exception) { throw; }
                finally
                {
                    requestCancel?.CloseRequest();
                }
            }
            return tryRet;
        }

        public object Post(ProductVersion request) 
        {
            return Get(request);
        }

        public object Get(ProductVersion request) 
        {
            var ret = new List<Version>();
            _ExecSearch(request, (entities) => 
            {
                ret = entities.Select(e => new Version(e.Id, e.VersionNo)).ToList();
            });
            return ret;
        }

        public object Get(Product request)
        {
            Product ret = null;
            
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");

            DocPermissionFactory.SetVisibleFields<Product>(currentUser, "Product", request.VisibleFields);
            var settings = DocResources.Settings;
            if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "product")) 
            {
                return _GetIdCache(request);
            }
            else 
            {
                Execute.Run((ssn) =>
                {
                    ret = GetProduct(request);
                });
            }
            return ret;
        }

        private Product _AssignValues(Product dtoSource, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (dtoSource == null || dtoSource.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "Product"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();

            Product ret = null;
            dtoSource = _InitAssignValues(dtoSource, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && dtoSource.Id > 0) return dtoSource;
            
            //First, assign all the variables, do database lookups and conversions
            var pChildren = dtoSource.Children?.ToList();
            var pClient = (dtoSource.Client?.Id > 0) ? DocEntityClient.GetClient(dtoSource.Client.Id) : null;
            var pDatabaseDeadline = dtoSource.DatabaseDeadline;
            var pDatabaseName = dtoSource.DatabaseName;
            var pDataset = (dtoSource.Dataset?.Id > 0) ? DocEntityDocumentSet.GetDocumentSet(dtoSource.Dataset.Id) : null;
            var pDeliverableDeadline = dtoSource.DeliverableDeadline;
            var pFqId = dtoSource.FqId;
            var pLibraryPackageId = dtoSource.LibraryPackageId;
            var pLibraryPackageName = dtoSource.LibraryPackageName;
            var pNumber = dtoSource.Number;
            var pOperationsDeliverable = dtoSource.OperationsDeliverable;
            var pOpportunityId = dtoSource.OpportunityId;
            var pOpportunityName = dtoSource.OpportunityName;
            var pParent = (dtoSource.Parent?.Id > 0) ? DocEntityProduct.GetProduct(dtoSource.Parent.Id) : null;
            var pPICO = dtoSource.PICO;
            var pProjectId = dtoSource.ProjectId;
            var pProjectName = dtoSource.ProjectName;
            DocEntityLookupTable pStatus = GetLookup(DocConstantLookupTable.FOREIGNKEYSTATUS, dtoSource.Status?.Name, dtoSource.Status?.Id);

            DocEntityProduct entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityProduct(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityProduct.GetProduct(dtoSource.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityClient>(currentUser, dtoSource, pClient, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.Client)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pClient, entity.Client, nameof(dtoSource.Client)))
                    entity.Client = pClient;
                if(DocPermissionFactory.IsRequested<DocEntityClient>(dtoSource, pClient, nameof(dtoSource.Client)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Client), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Client));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, dtoSource, pDatabaseDeadline, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.DatabaseDeadline)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pDatabaseDeadline, entity.DatabaseDeadline, nameof(dtoSource.DatabaseDeadline)))
                    entity.DatabaseDeadline = pDatabaseDeadline;
                if(DocPermissionFactory.IsRequested<DateTime?>(dtoSource, pDatabaseDeadline, nameof(dtoSource.DatabaseDeadline)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.DatabaseDeadline), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.DatabaseDeadline));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pDatabaseName, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.DatabaseName)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pDatabaseName, entity.DatabaseName, nameof(dtoSource.DatabaseName)))
                    entity.DatabaseName = pDatabaseName;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pDatabaseName, nameof(dtoSource.DatabaseName)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.DatabaseName), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.DatabaseName));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityDocumentSet>(currentUser, dtoSource, pDataset, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.Dataset)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pDataset, entity.Dataset, nameof(dtoSource.Dataset)))
                    entity.Dataset = pDataset;
                if(DocPermissionFactory.IsRequested<DocEntityDocumentSet>(dtoSource, pDataset, nameof(dtoSource.Dataset)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Dataset), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Dataset));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DateTime?>(currentUser, dtoSource, pDeliverableDeadline, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.DeliverableDeadline)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pDeliverableDeadline, entity.DeliverableDeadline, nameof(dtoSource.DeliverableDeadline)))
                    entity.DeliverableDeadline = pDeliverableDeadline;
                if(DocPermissionFactory.IsRequested<DateTime?>(dtoSource, pDeliverableDeadline, nameof(dtoSource.DeliverableDeadline)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.DeliverableDeadline), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.DeliverableDeadline));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, dtoSource, pFqId, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.FqId)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pFqId, entity.FqId, nameof(dtoSource.FqId)))
                    entity.FqId = pFqId;
                if(DocPermissionFactory.IsRequested<int?>(dtoSource, pFqId, nameof(dtoSource.FqId)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.FqId), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.FqId));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, dtoSource, pLibraryPackageId, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.LibraryPackageId)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pLibraryPackageId, entity.LibraryPackageId, nameof(dtoSource.LibraryPackageId)))
                    entity.LibraryPackageId = pLibraryPackageId;
                if(DocPermissionFactory.IsRequested<int?>(dtoSource, pLibraryPackageId, nameof(dtoSource.LibraryPackageId)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.LibraryPackageId), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.LibraryPackageId));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pLibraryPackageName, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.LibraryPackageName)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pLibraryPackageName, entity.LibraryPackageName, nameof(dtoSource.LibraryPackageName)))
                    entity.LibraryPackageName = pLibraryPackageName;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pLibraryPackageName, nameof(dtoSource.LibraryPackageName)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.LibraryPackageName), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.LibraryPackageName));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pNumber, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.Number)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pNumber, entity.Number, nameof(dtoSource.Number)))
                    entity.Number = pNumber;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pNumber, nameof(dtoSource.Number)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Number), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Number));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pOperationsDeliverable, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.OperationsDeliverable)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pOperationsDeliverable, entity.OperationsDeliverable, nameof(dtoSource.OperationsDeliverable)))
                    entity.OperationsDeliverable = pOperationsDeliverable;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pOperationsDeliverable, nameof(dtoSource.OperationsDeliverable)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.OperationsDeliverable), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.OperationsDeliverable));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pOpportunityId, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.OpportunityId)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pOpportunityId, entity.OpportunityId, nameof(dtoSource.OpportunityId)))
                    entity.OpportunityId = pOpportunityId;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pOpportunityId, nameof(dtoSource.OpportunityId)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.OpportunityId), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.OpportunityId));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pOpportunityName, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.OpportunityName)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pOpportunityName, entity.OpportunityName, nameof(dtoSource.OpportunityName)))
                    entity.OpportunityName = pOpportunityName;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pOpportunityName, nameof(dtoSource.OpportunityName)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.OpportunityName), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.OpportunityName));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityProduct>(currentUser, dtoSource, pParent, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.Parent)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pParent, entity.Parent, nameof(dtoSource.Parent)))
                    entity.Parent = pParent;
                if(DocPermissionFactory.IsRequested<DocEntityProduct>(dtoSource, pParent, nameof(dtoSource.Parent)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Parent), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Parent));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pPICO, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.PICO)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pPICO, entity.PICO, nameof(dtoSource.PICO)))
                    entity.PICO = pPICO;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pPICO, nameof(dtoSource.PICO)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.PICO), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.PICO));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pProjectId, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.ProjectId)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pProjectId, entity.ProjectId, nameof(dtoSource.ProjectId)))
                    entity.ProjectId = pProjectId;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pProjectId, nameof(dtoSource.ProjectId)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.ProjectId), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.ProjectId));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, dtoSource, pProjectName, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.ProjectName)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pProjectName, entity.ProjectName, nameof(dtoSource.ProjectName)))
                    entity.ProjectName = pProjectName;
                if(DocPermissionFactory.IsRequested<string>(dtoSource, pProjectName, nameof(dtoSource.ProjectName)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.ProjectName), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.ProjectName));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, dtoSource, pStatus, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.Status)))
            {
                if(DocPermissionFactory.IsRequested(dtoSource, pStatus, entity.Status, nameof(dtoSource.Status)))
                    entity.Status = pStatus;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(dtoSource, pStatus, nameof(dtoSource.Status)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Status), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Status));
                }
            }
            
            if (dtoSource.Locked) entity.Locked = dtoSource.Locked;

            entity.SaveChanges(permission);
            
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, dtoSource, pChildren, permission, DocConstantModelName.PRODUCT, nameof(dtoSource.Children)))
            {
                if (true == pChildren?.Any() )
                {
                    var requestedChildren = pChildren.Select(p => p.Id).Distinct().ToList();
                    var existsChildren = Execute.SelectAll<DocEntityProduct>().Where(e => e.Id.In(requestedChildren)).Select( e => e.Id ).ToList();
                    if (existsChildren.Count != requestedChildren.Count)
                    {
                        var nonExists = requestedChildren.Where(id => existsChildren.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Children with objects that do not exist. No matching Children(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedChildren.Where(id => entity.Children.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityProduct.GetProduct(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Product), columnName: nameof(dtoSource.Children)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(dtoSource.Children)} to {nameof(Product)}");
                        entity.Children.Add(target);
                    });
                    var toRemove = entity.Children.Where(e => requestedChildren.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityProduct.GetProduct(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Product), columnName: nameof(dtoSource.Children)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Children)} from {nameof(Product)}");
                        entity.Children.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Children.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityProduct.GetProduct(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Product), columnName: nameof(dtoSource.Children)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(dtoSource.Children)} from {nameof(Product)}");
                        entity.Children.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(dtoSource, pChildren, nameof(dtoSource.Children)) && !dtoSource.VisibleFields.Matches(nameof(dtoSource.Children), ignoreSpaces: true))
                {
                    dtoSource.VisibleFields.Add(nameof(dtoSource.Children));
                }
            }
            DocPermissionFactory.SetVisibleFields<Product>(currentUser, nameof(Product), dtoSource.VisibleFields);
            ret = entity.ToDto();

            return ret;
        }
        public Product Post(Product dtoSource)
        {
            if(dtoSource == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();

            Product ret = null;

            Execute.Run(ssn =>
            {
                if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "Product")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                ret = _AssignValues(dtoSource, DocConstantPermission.ADD, ssn);
            });

            return ret;
        }
   
        public List<Product> Post(ProductBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Product>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as Product;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Product Post(ProductCopy request)
        {
            Product ret = null;
            Execute.Run(ssn =>
            {
                var entity = DocEntityProduct.GetProduct(request?.Id);
                if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");
                
                    var pChildren = entity.Children.ToList();
                    var pClient = entity.Client;
                    var pDatabaseDeadline = entity.DatabaseDeadline;
                    var pDatabaseName = entity.DatabaseName;
                    if(!DocTools.IsNullOrEmpty(pDatabaseName))
                        pDatabaseName += " (Copy)";
                    var pDataset = entity.Dataset;
                    var pDeliverableDeadline = entity.DeliverableDeadline;
                    var pFqId = entity.FqId;
                    var pLibraryPackageId = entity.LibraryPackageId;
                    var pLibraryPackageName = entity.LibraryPackageName;
                    if(!DocTools.IsNullOrEmpty(pLibraryPackageName))
                        pLibraryPackageName += " (Copy)";
                    var pNumber = entity.Number;
                    if(!DocTools.IsNullOrEmpty(pNumber))
                        pNumber += " (Copy)";
                    var pOperationsDeliverable = entity.OperationsDeliverable;
                    if(!DocTools.IsNullOrEmpty(pOperationsDeliverable))
                        pOperationsDeliverable += " (Copy)";
                    var pOpportunityId = entity.OpportunityId;
                    if(!DocTools.IsNullOrEmpty(pOpportunityId))
                        pOpportunityId += " (Copy)";
                    var pOpportunityName = entity.OpportunityName;
                    if(!DocTools.IsNullOrEmpty(pOpportunityName))
                        pOpportunityName += " (Copy)";
                    var pParent = entity.Parent;
                    var pPICO = entity.PICO;
                    if(!DocTools.IsNullOrEmpty(pPICO))
                        pPICO += " (Copy)";
                    var pProjectId = entity.ProjectId;
                    if(!DocTools.IsNullOrEmpty(pProjectId))
                        pProjectId += " (Copy)";
                    var pProjectName = entity.ProjectName;
                    if(!DocTools.IsNullOrEmpty(pProjectName))
                        pProjectName += " (Copy)";
                    var pStatus = entity.Status;
                #region Custom Before copyProduct
                #endregion Custom Before copyProduct
                var copy = new DocEntityProduct(ssn)
                {
                    Hash = Guid.NewGuid()
                                , Client = pClient
                                , DatabaseDeadline = pDatabaseDeadline
                                , DatabaseName = pDatabaseName
                                , Dataset = pDataset
                                , DeliverableDeadline = pDeliverableDeadline
                                , FqId = pFqId
                                , LibraryPackageId = pLibraryPackageId
                                , LibraryPackageName = pLibraryPackageName
                                , Number = pNumber
                                , OperationsDeliverable = pOperationsDeliverable
                                , OpportunityId = pOpportunityId
                                , OpportunityName = pOpportunityName
                                , Parent = pParent
                                , PICO = pPICO
                                , ProjectId = pProjectId
                                , ProjectName = pProjectName
                                , Status = pStatus
                };
                            foreach(var item in pChildren)
                            {
                                entity.Children.Add(item);
                            }

                #region Custom After copyProduct
                #endregion Custom After copyProduct
                copy.SaveChanges(DocConstantPermission.ADD);
                ret = copy.ToDto();
            });
            return ret;
        }


        public List<Product> Put(ProductBatch request)
        {
            return Patch(request);
        }

        public Product Put(Product dtoSource)
        {
            return Patch(dtoSource);
        }

        public List<Product> Patch(ProductBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Product>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as Product;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Product Patch(Product dtoSource)
        {
            if(true != (dtoSource?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the Product to patch.");
            
            dtoSource.VisibleFields = dtoSource.VisibleFields ?? new List<string>();
            
            Product ret = null;
            Execute.Run(ssn =>
            {
                ret = _AssignValues(dtoSource, DocConstantPermission.EDIT, ssn);
            });
            return ret;
        }

        public void Delete(ProductBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(Product request)
        {
            Execute.Run(ssn =>
            {
                var en = DocEntityProduct.GetProduct(request?.Id);

                if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No Product could be found for Id {request?.Id}.");
                if(en.IsRemoved) return;
                
                if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                en.Remove();
            });
        }

        public void Delete(ProductSearch request)
        {
            var matches = Get(request) as List<Product>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");

            Execute.Run(ssn =>
            {
                matches.ForEach(match =>
                {
                    Delete(match);
                });
            });
        }
        public object Get(ProductJunction request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            object ret = null;
            var skip = (request.Skip > 0) ? request.Skip.Value : 0;
            var take = (request.Take > 0) ? request.Take.Value : int.MaxValue;
                        
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-1]?.ToLower().Trim();
            Execute.Run( s => 
            {
                switch(method)
                {
                case "product":
                    ret = _GetProductProduct(request, skip, take);
                    break;
                }
            });
            return ret;
        }
        
        public object Get(ProductJunctionVersion request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
            
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-2]?.ToLower().Trim();
            Execute.Run( ssn =>
            {
                switch(method)
                {
                }
            });
            return ret;
        }
        

        private object _GetProductProduct(ProductJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<Product>(currentUser, "Product", request.VisibleFields);
             var en = DocEntityProduct.GetProduct(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.PRODUCT, columnName: "Children", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Product and Product");
             return en?.Children.Take(take).Skip(skip).ConvertFromEntityList<DocEntityProduct,Product>(new List<Product>());
        }
        
        public object Post(ProductJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                }
            });
            return ret;
        }


        public object Delete(ProductJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                }
            });
            return ret;
        }


        private Product GetProduct(Product request)
        {
            var id = request?.Id;
            Product ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<Product>(currentUser, "Product", request.VisibleFields);

            DocEntityProduct entity = null;
            if(id.HasValue)
            {
                entity = DocEntityProduct.GetProduct(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Product found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

        public List<int> Any(ProductIds request)
        {
            List<int> ret = null;
            if (currentUser.IsSuperAdmin)
            {
                Execute.Run(s => { ret = Execute.SelectAll<DocEntityProduct>().Select(d => d.Id).ToList(); });
            }
            else
            {
                throw new HttpError(HttpStatusCode.Forbidden);
            }

            return ret;
        }
    }
}