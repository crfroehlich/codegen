//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class UserSessionService : DocServiceBase
    {
        public const string CACHE_KEY_PREFIX = DocEntityUserSession.CACHE_KEY_PREFIX;
        private object _GetIdCache(UserSession request)
        {
            object ret = null;

            if (true != request.IgnoreCache)
            {
                var key = currentUser.GetApiCacheKey(DocConstantModelName.USERSESSION);
                var cacheKey = $"UserSession_{key}_{request.Id}_{UrnId.Create<UserSession>(request.GetMD5Hash())}";
                ret = Request.ToOptimizedResultUsingCache(Cache, cacheKey, new TimeSpan(0, DocResources.Settings.SessionTimeout, 0), () =>
                {
                    object cachedRet = null;
                    Execute.Run(s =>
                    {
                        cachedRet = GetUserSession(request);
                    });
                    return cachedRet;
                });
            }
            if(null == ret)
            {
                Execute.Run(s =>
                {
                    ret = GetUserSession(request);
                });
            }
            return ret;
        }

        private object _GetSearchCache(UserSessionSearch request, DocRequestCancellation requestCancel)
        {
            object tryRet = null;
            var ret = new List<UserSession>();

            //Keys need to be customized to factor in permissions/scoping. Often, including the current user's Role Id is sufficient in the key
            var key = currentUser.GetApiCacheKey(DocConstantModelName.USERSESSION);
            var cacheKey = $"{CACHE_KEY_PREFIX}_{key}_{UrnId.Create<UserSessionSearch>(request.GetMD5Hash())}";
            tryRet = Request.ToOptimizedResultUsingCache(Cache, cacheKey, new TimeSpan(0, DocResources.Settings.SessionTimeout, 0), () =>
            {
                _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityUserSession,UserSession>(ret, Execute, requestCancel));
                return ret;
            });

            if(tryRet == null)
            {
                ret = new List<UserSession>();
                _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityUserSession,UserSession>(ret, Execute, requestCancel));
                return ret;
            }
            else
            {
                return tryRet;
            }
        }
        private void _ExecSearch(UserSessionSearch request, Action<IQueryable<DocEntityUserSession>> callBack)
        {
            request = InitSearch(request);
            
            DocPermissionFactory.SetVisibleFields<UserSession>(currentUser, "UserSession", request.VisibleFields);

            Execute.Run( session => 
            {
                var entities = Execute.SelectAll<DocEntityUserSession>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new UserSessionFullTextSearch(request);
                    entities = GetFullTextSearch(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                if(!DocTools.IsNullOrEmpty(request.ClientId))
                    entities = entities.Where(en => en.ClientId.Contains(request.ClientId));
                if(request.Hits.HasValue)
                    entities = entities.Where(en => request.Hits.Value == en.Hits);
                        if(true == request.ImpersonationsIds?.Any())
                        {
                            entities = entities.Where(en => en.Impersonations.Any(r => r.Id.In(request.ImpersonationsIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.IpAddress))
                    entities = entities.Where(en => en.IpAddress.Contains(request.IpAddress));
                        if(true == request.RequestsIds?.Any())
                        {
                            entities = entities.Where(en => en.Requests.Any(r => r.Id.In(request.RequestsIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.SessionId))
                    entities = entities.Where(en => en.SessionId.Contains(request.SessionId));
                if(!DocTools.IsNullOrEmpty(request.User) && !DocTools.IsNullOrEmpty(request.User.Id))
                {
                    entities = entities.Where(en => en.User.Id == request.User.Id );
                }
                if(true == request.UserIds?.Any())
                {
                    entities = entities.Where(en => en.User.Id.In(request.UserIds));
                }
                        if(true == request.UserHistoryIds?.Any())
                        {
                            entities = entities.Where(en => en.UserHistory.Any(r => r.Id.In(request.UserHistoryIds)));
                        }

                entities = ApplyFilters(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
                callBack?.Invoke(entities);
            });
        }
        
        public object Post(UserSessionSearch request)
        {
            object tryRet = null;
            using (var cancellableRequest = base.Request.CreateCancellableRequest())
            {
                var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                try 
                {
                    var ret = new List<UserSession>();
                    var settings = DocResources.Settings;
                    if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "usersession")) 
                    {
                        tryRet = _GetSearchCache(request, requestCancel);
                    }
                    if (tryRet == null)
                    {
                        _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityUserSession,UserSession>(ret, Execute, requestCancel));
                        tryRet = ret;
                    }
                }
                catch(Exception) { throw; }
                finally
                {
                    requestCancel?.CloseRequest();
                }
            }
            return tryRet;
        }

        public object Get(UserSessionSearch request)
        {
            object tryRet = null;
            using (var cancellableRequest = base.Request.CreateCancellableRequest())
            {
                var requestCancel = new DocRequestCancellation(HttpContext.Current.Response, cancellableRequest);
                try 
                {
                    var ret = new List<UserSession>();
                    var settings = DocResources.Settings;
                    if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "usersession")) 
                    {
                        tryRet = _GetSearchCache(request, requestCancel);
                    }
                    if (tryRet == null)
                    {
                        _ExecSearch(request, (entities) => entities.ConvertFromEntityList<DocEntityUserSession,UserSession>(ret, Execute, requestCancel));
                        tryRet = ret;
                    }
                }
                catch(Exception) { throw; }
                finally
                {
                    requestCancel?.CloseRequest();
                }
            }
            return tryRet;
        }

        public object Post(UserSessionVersion request) 
        {
            return Get(request);
        }

        public object Get(UserSessionVersion request) 
        {
            var ret = new List<Version>();
            _ExecSearch(request, (entities) => 
            {
                ret = entities.Select(e => new Version(e.Id, e.VersionNo)).ToList();
            });
            return ret;
        }

        public object Get(UserSession request)
        {
            UserSession ret = null;
            
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");

            DocPermissionFactory.SetVisibleFields<UserSession>(currentUser, "UserSession", request.VisibleFields);
            var settings = DocResources.Settings;
            if(true != request.IgnoreCache && settings.Cache.CacheWebServices && true != settings.Cache.ExcludedServicesFromCache?.Any(webservice => webservice.ToLower().Trim() == "usersession")) 
            {
                return _GetIdCache(request);
            }
            else 
            {
                Execute.Run((ssn) =>
                {
                    ret = GetUserSession(request);
                });
            }
            return ret;
        }




        public object Get(UserSessionJunction request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            object ret = null;
            var skip = (request.Skip > 0) ? request.Skip.Value : 0;
            var take = (request.Take > 0) ? request.Take.Value : int.MaxValue;
                        
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-1]?.ToLower().Trim();
            Execute.Run( s => 
            {
                switch(method)
                {
                case "impersonation":
                    ret = _GetUserSessionImpersonation(request, skip, take);
                    break;
                case "request":
                    ret = _GetUserSessionRequest(request, skip, take);
                    break;
                case "history":
                    ret = _GetUserSessionHistory(request, skip, take);
                    break;
                }
            });
            return ret;
        }
        
        public object Get(UserSessionJunctionVersion request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
            
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-2]?.ToLower().Trim();
            Execute.Run( ssn =>
            {
                switch(method)
                {
                case "impersonation":
                    ret = GetUserSessionImpersonationVersion(request);
                    break;
                }
            });
            return ret;
        }
        

        private object _GetUserSessionImpersonation(UserSessionJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<Impersonation>(currentUser, "Impersonation", request.VisibleFields);
             var en = DocEntityUserSession.GetUserSession(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.USERSESSION, columnName: "Impersonations", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between UserSession and Impersonation");
             return en?.Impersonations.Take(take).Skip(skip).ConvertFromEntityList<DocEntityImpersonation,Impersonation>(new List<Impersonation>());
        }

        private List<Version> GetUserSessionImpersonationVersion(UserSessionJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityUserSession.GetUserSession(request.Id);
                ret = en?.Impersonations.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetUserSessionRequest(UserSessionJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<UserRequest>(currentUser, "UserRequest", request.VisibleFields);
             var en = DocEntityUserSession.GetUserSession(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.USERSESSION, columnName: "Requests", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between UserSession and UserRequest");
             return en?.Requests.Take(take).Skip(skip).ConvertFromEntityList<DocEntityUserRequest,UserRequest>(new List<UserRequest>());
        }

        private object _GetUserSessionHistory(UserSessionJunction request, int skip, int take)
        {
             DocPermissionFactory.SetVisibleFields<History>(currentUser, "History", request.VisibleFields);
             var en = DocEntityUserSession.GetUserSession(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.USERSESSION, columnName: "UserHistory", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between UserSession and History");
             return en?.UserHistory.Take(take).Skip(skip).ConvertFromEntityList<DocEntityHistory,History>(new List<History>());
        }
        
        public object Post(UserSessionJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                case "impersonation":
                    ret = _PostUserSessionImpersonation(request);
                    break;
                }
            });
            return ret;
        }


        private object _PostUserSessionImpersonation(UserSessionJunction request)
        {
            var entity = DocEntityUserSession.GetUserSession(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No UserSession found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to UserSession");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityImpersonation.GetImpersonation(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.IMPERSONATION, columnName: "Impersonations")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Impersonations property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of UserSession with objects that do not exist. No matching Impersonation could be found for {id}.");
                entity.Impersonations.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        public object Delete(UserSessionJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                case "impersonation":
                    ret = _DeleteUserSessionImpersonation(request);
                    break;
                }
            });
            return ret;
        }


        private object _DeleteUserSessionImpersonation(UserSessionJunction request)
        {
            var entity = DocEntityUserSession.GetUserSession(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No UserSession found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to UserSession");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityImpersonation.GetImpersonation(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.IMPERSONATION, columnName: "Impersonations"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between UserSession and Impersonation");
                if(null != relationship && false == relationship.IsRemoved) entity.Impersonations.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private UserSession GetUserSession(UserSession request)
        {
            var id = request?.Id;
            UserSession ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<UserSession>(currentUser, "UserSession", request.VisibleFields);

            DocEntityUserSession entity = null;
            if(id.HasValue)
            {
                entity = DocEntityUserSession.GetUserSession(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No UserSession found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

        public List<int> Any(UserSessionIds request)
        {
            List<int> ret = null;
            if (currentUser.IsSuperAdmin)
            {
                Execute.Run(s => { ret = Execute.SelectAll<DocEntityUserSession>().Select(d => d.Id).ToList(); });
            }
            else
            {
                throw new HttpError(HttpStatusCode.Forbidden);
            }

            return ret;
        }
    }
}