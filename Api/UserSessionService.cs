//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class UserSessionService : DocServiceBase
    {
        private IQueryable<DocEntityUserSession> _ExecSearch(UserSessionSearch request)
        {
            request = InitSearch<UserSession, UserSessionSearch>(request);
            IQueryable<DocEntityUserSession> entities = null;
            Execute.Run( session => 
            {
                entities = Execute.SelectAll<DocEntityUserSession>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new UserSessionFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityUserSession,UserSessionFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                if(!DocTools.IsNullOrEmpty(request.ClientId))
                    entities = entities.Where(en => en.ClientId.Contains(request.ClientId));
                if(request.Hits.HasValue)
                    entities = entities.Where(en => request.Hits.Value == en.Hits);
                if(true == request.ImpersonationsIds?.Any())
                {
                    entities = entities.Where(en => en.Impersonations.Any(r => r.Id.In(request.ImpersonationsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.IpAddress))
                    entities = entities.Where(en => en.IpAddress.Contains(request.IpAddress));
                if(true == request.RequestsIds?.Any())
                {
                    entities = entities.Where(en => en.Requests.Any(r => r.Id.In(request.RequestsIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.SessionId))
                    entities = entities.Where(en => en.SessionId.Contains(request.SessionId));
                if(!DocTools.IsNullOrEmpty(request.TemporarySessionId))
                    entities = entities.Where(en => en.TemporarySessionId.Contains(request.TemporarySessionId));
                if(!DocTools.IsNullOrEmpty(request.User) && !DocTools.IsNullOrEmpty(request.User.Id))
                {
                    entities = entities.Where(en => en.User.Id == request.User.Id );
                }
                if(true == request.UserIds?.Any())
                {
                    entities = entities.Where(en => en.User.Id.In(request.UserIds));
                }
                if(true == request.UserHistoryIds?.Any())
                {
                    entities = entities.Where(en => en.UserHistory.Any(r => r.Id.In(request.UserHistoryIds)));
                }

                entities = ApplyFilters<DocEntityUserSession,UserSessionSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(UserSessionSearch request) => Get(request);

        public object Get(UserSessionSearch request) => GetSearchResultWithCache<UserSession,DocEntityUserSession,UserSessionSearch>(DocConstantModelName.USERSESSION, request, _ExecSearch);

        public object Get(UserSession request) => GetEntityWithCache<UserSession>(DocConstantModelName.USERSESSION, request, GetUserSession);



        public object Get(UserSessionJunction request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            object ret = null;
            Execute.Run( s => 
            {
                switch(request.Junction)
                {
                case "impersonation":
                    ret =     GetJunctionSearchResult<UserSession, DocEntityUserSession, DocEntityImpersonation, Impersonation, ImpersonationSearch>((int)request.Id, DocConstantModelName.IMPERSONATION, "Impersonations", request,
                            (ss) =>
                            { 
                                var service = HostContext.ResolveService<ImpersonationService>(Request);
                                return service.Get(ss);
                            });
                    break;
                case "request":
                    ret =     GetJunctionSearchResult<UserSession, DocEntityUserSession, DocEntityUserRequest, UserRequest, UserRequestSearch>((int)request.Id, DocConstantModelName.USERREQUEST, "Requests", request,
                            (ss) =>
                            { 
                                var service = HostContext.ResolveService<UserRequestService>(Request);
                                return service.Get(ss);
                            });
                    break;
                case "history":
                    ret =     GetJunctionSearchResult<UserSession, DocEntityUserSession, DocEntityHistory, History, HistorySearch>((int)request.Id, DocConstantModelName.HISTORY, "UserHistory", request,
                            (ss) =>
                            { 
                                var service = HostContext.ResolveService<HistoryService>(Request);
                                return service.Get(ss);
                            });
                    break;
                    default:
                        throw new HttpError(HttpStatusCode.NotFound, $"Route for usersession/{request.Id}/{request.Junction} was not found");
                }
            });
            return ret;
        }


        public object Post(UserSessionJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                switch(request.Junction)
                {
                case "impersonation":
                    ret = _PostUserSessionImpersonation(request);
                    break;
                    default:
                        throw new HttpError(HttpStatusCode.NotFound, $"Route for usersession/{request.Id}/{request.Junction} was not found");
                }
            });
            return ret;
        }


        private object _PostUserSessionImpersonation(UserSessionJunction request)
        {
            var entity = DocEntityUserSession.GetUserSession(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No UserSession found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to UserSession");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityImpersonation.GetImpersonation(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.IMPERSONATION, columnName: "Impersonations")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Impersonations property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of UserSession with objects that do not exist. No matching Impersonation could be found for {id}.");
                entity.Impersonations.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        public object Delete(UserSessionJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                switch(request.Junction)
                {
                case "impersonation":
                    ret = _DeleteUserSessionImpersonation(request);
                    break;
                    default:
                        throw new HttpError(HttpStatusCode.NotFound, $"Route for usersession/{request.Id}/{request.Junction} was not found");
                }
            });
            return ret;
        }


        private object _DeleteUserSessionImpersonation(UserSessionJunction request)
        {
            var entity = DocEntityUserSession.GetUserSession(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No UserSession found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to UserSession");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityImpersonation.GetImpersonation(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.IMPERSONATION, columnName: "Impersonations"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between UserSession and Impersonation");
                if(null != relationship && false == relationship.IsRemoved) entity.Impersonations.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private UserSession GetUserSession(UserSession request)
        {
            var id = request?.Id;
            UserSession ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<UserSession>(currentUser, "UserSession", request.VisibleFields);

            DocEntityUserSession entity = null;
            if(id.HasValue)
            {
                entity = DocEntityUserSession.GetUserSession(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No UserSession found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }
    }
}