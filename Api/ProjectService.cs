
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;

using Xtensive.Orm;


namespace Services.API
{
    public partial class ProjectService : DocServiceBase
    {

        private IQueryable<DocEntityProject> _ExecSearch(ProjectSearch request, DocQuery query)
        {
            request = InitSearch<Project, ProjectSearch>(request);
            IQueryable<DocEntityProject> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityProject>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new ProjectFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityProject,ProjectFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.PROJECT, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }
                if(true == request.ChildrenIds?.Any())
                {
                    entities = entities.Where(en => en.Children.Any(r => r.Id.In(request.ChildrenIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.Client) && !DocTools.IsNullOrEmpty(request.Client.Id))
                {
                    entities = entities.Where(en => en.Client.Id == request.Client.Id );
                }
                if(true == request.ClientIds?.Any())
                {
                    entities = entities.Where(en => en.Client.Id.In(request.ClientIds));
                }
                if(!DocTools.IsNullOrEmpty(request.DatabaseDeadline))
                    entities = entities.Where(en => null != en.DatabaseDeadline && request.DatabaseDeadline.Value.Date == en.DatabaseDeadline.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.DatabaseDeadlineBefore))
                    entities = entities.Where(en => en.DatabaseDeadline <= request.DatabaseDeadlineBefore);
                if(!DocTools.IsNullOrEmpty(request.DatabaseDeadlineAfter))
                    entities = entities.Where(en => en.DatabaseDeadline >= request.DatabaseDeadlineAfter);
                if(!DocTools.IsNullOrEmpty(request.DatabaseName))
                    entities = entities.Where(en => en.DatabaseName.Contains(request.DatabaseName));
                if(!DocTools.IsNullOrEmpty(request.DatabaseNames))
                    entities = entities.Where(en => en.DatabaseName.In(request.DatabaseNames));
                if(!DocTools.IsNullOrEmpty(request.Dataset) && !DocTools.IsNullOrEmpty(request.Dataset.Id))
                {
                    entities = entities.Where(en => en.Dataset.Id == request.Dataset.Id );
                }
                if(true == request.DatasetIds?.Any())
                {
                    entities = entities.Where(en => en.Dataset.Id.In(request.DatasetIds));
                }
                if(!DocTools.IsNullOrEmpty(request.DeliverableDeadline))
                    entities = entities.Where(en => null != en.DeliverableDeadline && request.DeliverableDeadline.Value.Date == en.DeliverableDeadline.Value.Date);
                if(!DocTools.IsNullOrEmpty(request.DeliverableDeadlineBefore))
                    entities = entities.Where(en => en.DeliverableDeadline <= request.DeliverableDeadlineBefore);
                if(!DocTools.IsNullOrEmpty(request.DeliverableDeadlineAfter))
                    entities = entities.Where(en => en.DeliverableDeadline >= request.DeliverableDeadlineAfter);
                if(request.FqId.HasValue)
                    entities = entities.Where(en => request.FqId.Value == en.FqId);
                if(!DocTools.IsNullOrEmpty(request.FqWorkflow) && !DocTools.IsNullOrEmpty(request.FqWorkflow.Id))
                {
                    entities = entities.Where(en => en.FqWorkflow.Id == request.FqWorkflow.Id );
                }
                if(true == request.FqWorkflowIds?.Any())
                {
                    entities = entities.Where(en => en.FqWorkflow.Id.In(request.FqWorkflowIds));
                }
                if(request.LegacyPackageId.HasValue)
                    entities = entities.Where(en => request.LegacyPackageId.Value == en.LegacyPackageId);
                if(!DocTools.IsNullOrEmpty(request.Library) && !DocTools.IsNullOrEmpty(request.Library.Id))
                {
                    entities = entities.Where(en => en.Library.Id == request.Library.Id );
                }
                if(true == request.LibraryIds?.Any())
                {
                    entities = entities.Where(en => en.Library.Id.In(request.LibraryIds));
                }
                if(request.LibraryPackageId.HasValue)
                    entities = entities.Where(en => request.LibraryPackageId.Value == en.LibraryPackageId);
                if(!DocTools.IsNullOrEmpty(request.LibraryPackageName))
                    entities = entities.Where(en => en.LibraryPackageName.Contains(request.LibraryPackageName));
                if(!DocTools.IsNullOrEmpty(request.LibraryPackageNames))
                    entities = entities.Where(en => en.LibraryPackageName.In(request.LibraryPackageNames));
                if(!DocTools.IsNullOrEmpty(request.Number))
                    entities = entities.Where(en => en.Number.Contains(request.Number));
                if(!DocTools.IsNullOrEmpty(request.Numbers))
                    entities = entities.Where(en => en.Number.In(request.Numbers));
                if(!DocTools.IsNullOrEmpty(request.OperationsDeliverable))
                    entities = entities.Where(en => en.OperationsDeliverable.Contains(request.OperationsDeliverable));
                if(!DocTools.IsNullOrEmpty(request.OperationsDeliverables))
                    entities = entities.Where(en => en.OperationsDeliverable.In(request.OperationsDeliverables));
                if(!DocTools.IsNullOrEmpty(request.OpportunityId))
                    entities = entities.Where(en => en.OpportunityId.Contains(request.OpportunityId));
                if(!DocTools.IsNullOrEmpty(request.OpportunityIds))
                    entities = entities.Where(en => en.OpportunityId.In(request.OpportunityIds));
                if(!DocTools.IsNullOrEmpty(request.OpportunityName))
                    entities = entities.Where(en => en.OpportunityName.Contains(request.OpportunityName));
                if(!DocTools.IsNullOrEmpty(request.OpportunityNames))
                    entities = entities.Where(en => en.OpportunityName.In(request.OpportunityNames));
                if(!DocTools.IsNullOrEmpty(request.Parent) && !DocTools.IsNullOrEmpty(request.Parent.Id))
                {
                    entities = entities.Where(en => en.Parent.Id == request.Parent.Id );
                }
                if(true == request.ParentIds?.Any())
                {
                    entities = entities.Where(en => en.Parent.Id.In(request.ParentIds));
                }
                if(!DocTools.IsNullOrEmpty(request.PICO))
                    entities = entities.Where(en => en.PICO.Contains(request.PICO));
                if(!DocTools.IsNullOrEmpty(request.PICOs))
                    entities = entities.Where(en => en.PICO.In(request.PICOs));
                if(!DocTools.IsNullOrEmpty(request.ProjectId))
                    entities = entities.Where(en => en.ProjectId.Contains(request.ProjectId));
                if(!DocTools.IsNullOrEmpty(request.ProjectIds))
                    entities = entities.Where(en => en.ProjectId.In(request.ProjectIds));
                if(!DocTools.IsNullOrEmpty(request.ProjectName))
                    entities = entities.Where(en => en.ProjectName.Contains(request.ProjectName));
                if(!DocTools.IsNullOrEmpty(request.ProjectNames))
                    entities = entities.Where(en => en.ProjectName.In(request.ProjectNames));
                if(request.Status.HasValue)
                    entities = entities.Where(en => request.Status.Value == en.Status);
                if(!DocTools.IsNullOrEmpty(request.Statuss))
                    entities = entities.Where(en => en.Status.In(request.Statuss));
                if(true == request.TimeCardsIds?.Any())
                {
                    entities = entities.Where(en => en.TimeCards.Any(r => r.Id.In(request.TimeCardsIds)));
                }

                entities = ApplyFilters<DocEntityProject,ProjectSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(ProjectSearch request) => Get(request);

        public object Get(ProjectSearch request) => GetSearchResultWithCache<Project,DocEntityProject,ProjectSearch>(DocConstantModelName.PROJECT, request, _ExecSearch);

        public object Get(Project request) => GetEntityWithCache<Project>(DocConstantModelName.PROJECT, request, GetProject);



        private Project _AssignValues(Project request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "Project"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.Select = request.Select ?? new List<string>();

            Project ret = null;
            request = _InitAssignValues<Project>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<Project>(DocConstantModelName.PROJECT, nameof(Project), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pChildren = GetVariable<Reference>(request, nameof(request.Children), request.Children?.ToList(), request.ChildrenIds?.ToList());
            var pClient = (request.Client?.Id > 0) ? DocEntityClient.Get(request.Client.Id) : null;
            var pDatabaseDeadline = request.DatabaseDeadline;
            var pDatabaseName = request.DatabaseName;
            var pDataset = (request.Dataset?.Id > 0) ? DocEntityDataSet.Get(request.Dataset.Id) : null;
            var pDeliverableDeadline = request.DeliverableDeadline;
            var pFqId = request.FqId;
            var pFqWorkflow = (request.FqWorkflow?.Id > 0) ? DocEntityWorkflow.Get(request.FqWorkflow.Id) : null;
            var pLegacyPackageId = request.LegacyPackageId;
            var pLibrary = (request.Library?.Id > 0) ? DocEntityLibrarySet.Get(request.Library.Id) : null;
            var pLibraryPackageId = request.LibraryPackageId;
            var pLibraryPackageName = request.LibraryPackageName;
            var pNumber = request.Number;
            var pOperationsDeliverable = request.OperationsDeliverable;
            var pOpportunityId = request.OpportunityId;
            var pOpportunityName = request.OpportunityName;
            var pParent = (request.Parent?.Id > 0) ? DocEntityProject.Get(request.Parent.Id) : null;
            var pPICO = request.PICO;
            var pProjectId = request.ProjectId;
            var pProjectName = request.ProjectName;
            var pStatus = request.Status;
            var pTimeCards = GetVariable<Reference>(request, nameof(request.TimeCards), request.TimeCards?.ToList(), request.TimeCardsIds?.ToList());
            var pArchived = true == request.Archived;
            var pLocked = request.Locked;

            var entity = InitEntity<DocEntityProject,Project>(request, permission, session);

            if (AllowPatchValue<Project, bool>(request, DocConstantModelName.PROJECT, pArchived, permission, nameof(request.Archived), pArchived != entity.Archived))
            {
                entity.Archived = pArchived;
            }
            if (AllowPatchValue<Project, DocEntityClient>(request, DocConstantModelName.PROJECT, pClient, permission, nameof(request.Client), pClient != entity.Client))
            {
                entity.Client = pClient;
            }
            if (AllowPatchValue<Project, DateTime?>(request, DocConstantModelName.PROJECT, pDatabaseDeadline, permission, nameof(request.DatabaseDeadline), pDatabaseDeadline != entity.DatabaseDeadline))
            {
                entity.DatabaseDeadline = pDatabaseDeadline;
            }
            if (AllowPatchValue<Project, string>(request, DocConstantModelName.PROJECT, pDatabaseName, permission, nameof(request.DatabaseName), pDatabaseName != entity.DatabaseName))
            {
                entity.DatabaseName = pDatabaseName;
            }
            if (AllowPatchValue<Project, DocEntityDataSet>(request, DocConstantModelName.PROJECT, pDataset, permission, nameof(request.Dataset), pDataset != entity.Dataset))
            {
                entity.Dataset = pDataset;
            }
            if (AllowPatchValue<Project, DateTime?>(request, DocConstantModelName.PROJECT, pDeliverableDeadline, permission, nameof(request.DeliverableDeadline), pDeliverableDeadline != entity.DeliverableDeadline))
            {
                entity.DeliverableDeadline = pDeliverableDeadline;
            }
            if (AllowPatchValue<Project, int?>(request, DocConstantModelName.PROJECT, pFqId, permission, nameof(request.FqId), pFqId != entity.FqId))
            {
                entity.FqId = pFqId;
            }
            if (AllowPatchValue<Project, DocEntityWorkflow>(request, DocConstantModelName.PROJECT, pFqWorkflow, permission, nameof(request.FqWorkflow), pFqWorkflow != entity.FqWorkflow))
            {
                entity.FqWorkflow = pFqWorkflow;
            }
            if (AllowPatchValue<Project, int?>(request, DocConstantModelName.PROJECT, pLegacyPackageId, permission, nameof(request.LegacyPackageId), pLegacyPackageId != entity.LegacyPackageId))
            {
                entity.LegacyPackageId = pLegacyPackageId;
            }
            if (AllowPatchValue<Project, DocEntityLibrarySet>(request, DocConstantModelName.PROJECT, pLibrary, permission, nameof(request.Library), pLibrary != entity.Library))
            {
                entity.Library = pLibrary;
            }
            if (AllowPatchValue<Project, int?>(request, DocConstantModelName.PROJECT, pLibraryPackageId, permission, nameof(request.LibraryPackageId), pLibraryPackageId != entity.LibraryPackageId))
            {
                entity.LibraryPackageId = pLibraryPackageId;
            }
            if (AllowPatchValue<Project, string>(request, DocConstantModelName.PROJECT, pLibraryPackageName, permission, nameof(request.LibraryPackageName), pLibraryPackageName != entity.LibraryPackageName))
            {
                entity.LibraryPackageName = pLibraryPackageName;
            }
            if (AllowPatchValue<Project, string>(request, DocConstantModelName.PROJECT, pNumber, permission, nameof(request.Number), pNumber != entity.Number))
            {
                entity.Number = pNumber;
            }
            if (AllowPatchValue<Project, string>(request, DocConstantModelName.PROJECT, pOperationsDeliverable, permission, nameof(request.OperationsDeliverable), pOperationsDeliverable != entity.OperationsDeliverable))
            {
                entity.OperationsDeliverable = pOperationsDeliverable;
            }
            if (AllowPatchValue<Project, string>(request, DocConstantModelName.PROJECT, pOpportunityId, permission, nameof(request.OpportunityId), pOpportunityId != entity.OpportunityId))
            {
                entity.OpportunityId = pOpportunityId;
            }
            if (AllowPatchValue<Project, string>(request, DocConstantModelName.PROJECT, pOpportunityName, permission, nameof(request.OpportunityName), pOpportunityName != entity.OpportunityName))
            {
                entity.OpportunityName = pOpportunityName;
            }
            if (AllowPatchValue<Project, DocEntityProject>(request, DocConstantModelName.PROJECT, pParent, permission, nameof(request.Parent), pParent != entity.Parent))
            {
                entity.Parent = pParent;
            }
            if (AllowPatchValue<Project, string>(request, DocConstantModelName.PROJECT, pPICO, permission, nameof(request.PICO), pPICO != entity.PICO))
            {
                entity.PICO = pPICO;
            }
            if (AllowPatchValue<Project, string>(request, DocConstantModelName.PROJECT, pProjectId, permission, nameof(request.ProjectId), pProjectId != entity.ProjectId))
            {
                entity.ProjectId = pProjectId;
            }
            if (AllowPatchValue<Project, string>(request, DocConstantModelName.PROJECT, pProjectName, permission, nameof(request.ProjectName), pProjectName != entity.ProjectName))
            {
                entity.ProjectName = pProjectName;
            }
            if (AllowPatchValue<Project, ForeignKeyStatusEnm?>(request, DocConstantModelName.PROJECT, pStatus, permission, nameof(request.Status), pStatus != entity.Status))
            {
                entity.Status = pStatus;
            }
            if (request.Locked && AllowPatchValue<Project, bool>(request, DocConstantModelName.PROJECT, pArchived, permission, nameof(request.Locked), pLocked != entity.Locked))
            {
                entity.Archived = pArchived;
            }
            entity.SaveChanges(permission);

            var idsToInvalidate = new List<int>();
            idsToInvalidate.AddRange(PatchCollection<Project, DocEntityProject, Reference, DocEntityProject>(request, entity, pChildren, permission, nameof(request.Children)));
            idsToInvalidate.AddRange(PatchCollection<Project, DocEntityProject, Reference, DocEntityTimeCard>(request, entity, pTimeCards, permission, nameof(request.TimeCards)));
            if (idsToInvalidate.Any())
            {
                idsToInvalidate.Add(entity.Id);
                DocCacheClient.RemoveByEntityIds(idsToInvalidate);
                DocCacheClient.RemoveSearch(DocConstantModelName.PROJECT);
            }

            DocPermissionFactory.SetSelect<Project>(currentUser, nameof(Project), request.Select);
            ret = entity.ToDto();

            var cacheExpires = DocResources.Metadata.GetCacheExpiration(DocConstantModelName.PROJECT);
            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.PROJECT, cacheExpires);

            return ret;
        }


        public Project Post(Project request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.Select = request.Select ?? new List<string>();

            Project ret = null;

            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "Project")) 
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
                });
            }
            return ret;
        }
   
        public List<Project> Post(ProjectBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Project>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as Project;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Project Post(ProjectCopy request)
        {
            Project ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    var entity = DocEntityProject.Get(request?.Id);
                    if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                    if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                    var pChildren = entity.Children.ToList();
                    var pClient = entity.Client;
                    var pDatabaseDeadline = entity.DatabaseDeadline;
                    var pDatabaseName = entity.DatabaseName;
                    if(!DocTools.IsNullOrEmpty(pDatabaseName))
                        pDatabaseName += " (Copy)";
                    var pDataset = entity.Dataset;
                    var pDeliverableDeadline = entity.DeliverableDeadline;
                    var pFqId = entity.FqId;
                    var pFqWorkflow = entity.FqWorkflow;
                    var pLegacyPackageId = entity.LegacyPackageId;
                    var pLibrary = entity.Library;
                    var pLibraryPackageId = entity.LibraryPackageId;
                    var pLibraryPackageName = entity.LibraryPackageName;
                    if(!DocTools.IsNullOrEmpty(pLibraryPackageName))
                        pLibraryPackageName += " (Copy)";
                    var pNumber = entity.Number;
                    if(!DocTools.IsNullOrEmpty(pNumber))
                        pNumber += " (Copy)";
                    var pOperationsDeliverable = entity.OperationsDeliverable;
                    if(!DocTools.IsNullOrEmpty(pOperationsDeliverable))
                        pOperationsDeliverable += " (Copy)";
                    var pOpportunityId = entity.OpportunityId;
                    if(!DocTools.IsNullOrEmpty(pOpportunityId))
                        pOpportunityId += " (Copy)";
                    var pOpportunityName = entity.OpportunityName;
                    if(!DocTools.IsNullOrEmpty(pOpportunityName))
                        pOpportunityName += " (Copy)";
                    var pParent = entity.Parent;
                    var pPICO = entity.PICO;
                    if(!DocTools.IsNullOrEmpty(pPICO))
                        pPICO += " (Copy)";
                    var pProjectId = entity.ProjectId;
                    if(!DocTools.IsNullOrEmpty(pProjectId))
                        pProjectId += " (Copy)";
                    var pProjectName = entity.ProjectName;
                    if(!DocTools.IsNullOrEmpty(pProjectName))
                        pProjectName += " (Copy)";
                    var pStatus = entity.Status;
                    var pTimeCards = entity.TimeCards.ToList();
                    var copy = new DocEntityProject(ssn)
                    {
                        Hash = Guid.NewGuid()
                                , Client = pClient
                                , DatabaseDeadline = pDatabaseDeadline
                                , DatabaseName = pDatabaseName
                                , Dataset = pDataset
                                , DeliverableDeadline = pDeliverableDeadline
                                , FqId = pFqId
                                , FqWorkflow = pFqWorkflow
                                , LegacyPackageId = pLegacyPackageId
                                , Library = pLibrary
                                , LibraryPackageId = pLibraryPackageId
                                , LibraryPackageName = pLibraryPackageName
                                , Number = pNumber
                                , OperationsDeliverable = pOperationsDeliverable
                                , OpportunityId = pOpportunityId
                                , OpportunityName = pOpportunityName
                                , Parent = pParent
                                , PICO = pPICO
                                , ProjectId = pProjectId
                                , ProjectName = pProjectName
                                , Status = pStatus
                    };
                            foreach(var item in pChildren)
                            {
                                entity.Children.Add(item);
                            }

                            foreach(var item in pTimeCards)
                            {
                                entity.TimeCards.Add(item);
                            }

                    copy.SaveChanges(DocConstantPermission.ADD);
                    ret = copy.ToDto();
                });
            }
            return ret;
        }



        public List<Project> Put(ProjectBatch request)
        {
            return Patch(request);
        }

        public Project Put(Project request)
        {
            return Patch(request);
        }


        public List<Project> Patch(ProjectBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Project>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as Project;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Project Patch(Project request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the Project to patch.");
            
            request.Select = request.Select ?? new List<string>();
            
            Project ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
                });
            }
            return ret;
        }


        public void Delete(ProjectBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(Project request)
        {
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    if(!(request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, $"No Id provided for delete.");

                    var en = DocEntityProject.Get(request?.Id);
                    if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No Project could be found for Id {request?.Id}.");
                    if(en.IsRemoved) return;
                
                    if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                        throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                    en.Remove();

                    DocCacheClient.RemoveSearch(DocConstantModelName.PROJECT);
                    DocCacheClient.RemoveById(request.Id);
                });
            }
        }

        public void Delete(ProjectSearch request)
        {
            var matches = Get(request) as List<Project>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");
            matches.ForEach(match =>
            {
                Delete(match);
            });
        }


        public object Get(ProjectJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "project":
                        return GetJunctionSearchResult<Project, DocEntityProject, DocEntityProject, Project, ProjectSearch>((int)request.Id, DocConstantModelName.PROJECT, "Children", request, (ss) => HostContext.ResolveService<ProjectService>(Request)?.Get(ss));
                    case "comment":
                        return GetJunctionSearchResult<Project, DocEntityProject, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request, (ss) => HostContext.ResolveService<CommentService>(Request)?.Get(ss));
                    case "favorite":
                        return GetJunctionSearchResult<Project, DocEntityProject, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request, (ss) => HostContext.ResolveService<FavoriteService>(Request)?.Get(ss));
                    case "tag":
                        return GetJunctionSearchResult<Project, DocEntityProject, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                    case "timecard":
                        return GetJunctionSearchResult<Project, DocEntityProject, DocEntityTimeCard, TimeCard, TimeCardSearch>((int)request.Id, DocConstantModelName.TIMECARD, "TimeCards", request, (ss) => HostContext.ResolveService<TimeCardService>(Request)?.Get(ss));
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for project/{request.Id}/{request.Junction} was not found");
            }
        }


        public object Post(ProjectJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "comment":
                        return AddJunction<Project, DocEntityProject, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "favorite":
                        return AddJunction<Project, DocEntityProject, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "tag":
                        return AddJunction<Project, DocEntityProject, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "timecard":
                        return AddJunction<Project, DocEntityProject, DocEntityTimeCard, TimeCard, TimeCardSearch>((int)request.Id, DocConstantModelName.TIMECARD, "TimeCards", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for project/{request.Id}/{request.Junction} was not found");
            }
        }

        public object Delete(ProjectJunction request)
        {    
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "comment":
                        return RemoveJunction<Project, DocEntityProject, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "favorite":
                        return RemoveJunction<Project, DocEntityProject, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "tag":
                        return RemoveJunction<Project, DocEntityProject, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                    case "timecard":
                        return RemoveJunction<Project, DocEntityProject, DocEntityTimeCard, TimeCard, TimeCardSearch>((int)request.Id, DocConstantModelName.TIMECARD, "TimeCards", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for project/{request.Id}/{request.Junction} was not found");
            }
        }


        private Project GetProject(Project request)
        {
            var id = request?.Id;
            Project ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetSelect<Project>(currentUser, "Project", request.Select);

            DocEntityProject entity = null;
            if(id.HasValue)
            {
                entity = DocEntityProject.Get(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Project found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

    }
}
