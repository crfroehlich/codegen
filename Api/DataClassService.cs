//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Dto.Security;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class DataClassService : DocServiceBase
    {
        private IQueryable<DocEntityDataClass> _ExecSearch(DataClassSearch request)
        {
            request = InitSearch<DataClass, DataClassSearch>(request);
            IQueryable<DocEntityDataClass> entities = null;
            Execute.Run( session => 
            {
                entities = Execute.SelectAll<DocEntityDataClass>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new DataClassFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityDataClass,DataClassFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                if(true == request.AllowDelete?.Any())
                {
                    if(request.AllowDelete.Any(v => v == null)) entities = entities.Where(en => en.AllowDelete.In(request.AllowDelete) || en.AllowDelete == null);
                    else entities = entities.Where(en => en.AllowDelete.In(request.AllowDelete));
                }
                if(true == request.AllVisibleFieldsByDefault?.Any())
                {
                    if(request.AllVisibleFieldsByDefault.Any(v => v == null)) entities = entities.Where(en => en.AllVisibleFieldsByDefault.In(request.AllVisibleFieldsByDefault) || en.AllVisibleFieldsByDefault == null);
                    else entities = entities.Where(en => en.AllVisibleFieldsByDefault.In(request.AllVisibleFieldsByDefault));
                }
                if(request.ClassId.HasValue)
                    entities = entities.Where(en => request.ClassId.Value == en.ClassId);
                if(true == request.CustomAuthorization?.Any())
                {
                    if(request.CustomAuthorization.Any(v => v == null)) entities = entities.Where(en => en.CustomAuthorization.In(request.CustomAuthorization) || en.CustomAuthorization == null);
                    else entities = entities.Where(en => en.CustomAuthorization.In(request.CustomAuthorization));
                }
                if(!DocTools.IsNullOrEmpty(request.CustomCollections))
                    entities = entities.Where(en => en.CustomCollections.Contains(request.CustomCollections));
                if(true == request.DELETE?.Any())
                {
                    if(request.DELETE.Any(v => v == null)) entities = entities.Where(en => en.DELETE.In(request.DELETE) || en.DELETE == null);
                    else entities = entities.Where(en => en.DELETE.In(request.DELETE));
                }
                if(!DocTools.IsNullOrEmpty(request.Description))
                    entities = entities.Where(en => en.Description.Contains(request.Description));
                if(!DocTools.IsNullOrEmpty(request.DontFlattenProperties))
                    entities = entities.Where(en => en.DontFlattenProperties.Contains(request.DontFlattenProperties));
                if(!DocTools.IsNullOrEmpty(request.DtoSuffix))
                    entities = entities.Where(en => en.DtoSuffix.Contains(request.DtoSuffix));
                if(true == request.FlattenReferences?.Any())
                {
                    if(request.FlattenReferences.Any(v => v == null)) entities = entities.Where(en => en.FlattenReferences.In(request.FlattenReferences) || en.FlattenReferences == null);
                    else entities = entities.Where(en => en.FlattenReferences.In(request.FlattenReferences));
                }
                if(true == request.GET?.Any())
                {
                    if(request.GET.Any(v => v == null)) entities = entities.Where(en => en.GET.In(request.GET) || en.GET == null);
                    else entities = entities.Where(en => en.GET.In(request.GET));
                }
                if(true == request.HasDto?.Any())
                {
                    if(request.HasDto.Any(v => v == null)) entities = entities.Where(en => en.HasDto.In(request.HasDto) || en.HasDto == null);
                    else entities = entities.Where(en => en.HasDto.In(request.HasDto));
                }
                if(!DocTools.IsNullOrEmpty(request.IgnoreInSearch))
                    entities = entities.Where(en => en.IgnoreInSearch.Contains(request.IgnoreInSearch));
                if(!DocTools.IsNullOrEmpty(request.IgnoreProps))
                    entities = entities.Where(en => en.IgnoreProps.Contains(request.IgnoreProps));
                if(true == request.ImplementService?.Any())
                {
                    if(request.ImplementService.Any(v => v == null)) entities = entities.Where(en => en.ImplementService.In(request.ImplementService) || en.ImplementService == null);
                    else entities = entities.Where(en => en.ImplementService.In(request.ImplementService));
                }
                if(!DocTools.IsNullOrEmpty(request.Inherits))
                    entities = entities.Where(en => en.Inherits.Contains(request.Inherits));
                if(true == request.IsBaseClass?.Any())
                {
                    if(request.IsBaseClass.Any(v => v == null)) entities = entities.Where(en => en.IsBaseClass.In(request.IsBaseClass) || en.IsBaseClass == null);
                    else entities = entities.Where(en => en.IsBaseClass.In(request.IsBaseClass));
                }
                if(true == request.IsCached?.Any())
                {
                    if(request.IsCached.Any(v => v == null)) entities = entities.Where(en => en.IsCached.In(request.IsCached) || en.IsCached == null);
                    else entities = entities.Where(en => en.IsCached.In(request.IsCached));
                }
                if(true == request.IsInModel?.Any())
                {
                    if(request.IsInModel.Any(v => v == null)) entities = entities.Where(en => en.IsInModel.In(request.IsInModel) || en.IsInModel == null);
                    else entities = entities.Where(en => en.IsInModel.In(request.IsInModel));
                }
                if(true == request.IsInsertOnly?.Any())
                {
                    if(request.IsInsertOnly.Any(v => v == null)) entities = entities.Where(en => en.IsInsertOnly.In(request.IsInsertOnly) || en.IsInsertOnly == null);
                    else entities = entities.Where(en => en.IsInsertOnly.In(request.IsInsertOnly));
                }
                if(true == request.IsReadOnly?.Any())
                {
                    if(request.IsReadOnly.Any(v => v == null)) entities = entities.Where(en => en.IsReadOnly.In(request.IsReadOnly) || en.IsReadOnly == null);
                    else entities = entities.Where(en => en.IsReadOnly.In(request.IsReadOnly));
                }
                if(!DocTools.IsNullOrEmpty(request.JsonIgnore))
                    entities = entities.Where(en => en.JsonIgnore.Contains(request.JsonIgnore));
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(true == request.PATCH?.Any())
                {
                    if(request.PATCH.Any(v => v == null)) entities = entities.Where(en => en.PATCH.In(request.PATCH) || en.PATCH == null);
                    else entities = entities.Where(en => en.PATCH.In(request.PATCH));
                }
                if(true == request.POST?.Any())
                {
                    if(request.POST.Any(v => v == null)) entities = entities.Where(en => en.POST.In(request.POST) || en.POST == null);
                    else entities = entities.Where(en => en.POST.In(request.POST));
                }
                if(true == request.PropertiesIds?.Any())
                {
                    entities = entities.Where(en => en.Properties.Any(r => r.Id.In(request.PropertiesIds)));
                }
                if(true == request.PUT?.Any())
                {
                    if(request.PUT.Any(v => v == null)) entities = entities.Where(en => en.PUT.In(request.PUT) || en.PUT == null);
                    else entities = entities.Where(en => en.PUT.In(request.PUT));
                }
                if(true == request.SuperAdminOnly?.Any())
                {
                    if(request.SuperAdminOnly.Any(v => v == null)) entities = entities.Where(en => en.SuperAdminOnly.In(request.SuperAdminOnly) || en.SuperAdminOnly == null);
                    else entities = entities.Where(en => en.SuperAdminOnly.In(request.SuperAdminOnly));
                }
                if(true == request.TabsIds?.Any())
                {
                    entities = entities.Where(en => en.Tabs.Any(r => r.Id.In(request.TabsIds)));
                }

                entities = ApplyFilters<DocEntityDataClass,DataClassSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(DataClassSearch request) => Get(request);

        public object Get(DataClassSearch request) => GetSearchResultWithCache<DataClass,DocEntityDataClass,DataClassSearch>(DocConstantModelName.DATACLASS, request, _ExecSearch);

        public object Get(DataClass request) => GetEntityWithCache<DataClass>(DocConstantModelName.DATACLASS, request, GetDataClass);
        private DataClass _AssignValues(DataClass request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "DataClass"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            DataClass ret = null;
            request = _InitAssignValues<DataClass>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<DataClass>(DocConstantModelName.DATACLASS, nameof(DataClass), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pAllowDelete = request.AllowDelete;
            var pAllVisibleFieldsByDefault = request.AllVisibleFieldsByDefault;
            var pClassId = request.ClassId;
            var pCustomAuthorization = request.CustomAuthorization;
            var pCustomCollections = request.CustomCollections;
            var pDELETE = request.DELETE;
            var pDescription = request.Description;
            var pDontFlattenProperties = request.DontFlattenProperties;
            var pDtoSuffix = request.DtoSuffix;
            var pFlattenReferences = request.FlattenReferences;
            var pGET = request.GET;
            var pHasDto = request.HasDto;
            var pIgnoreInSearch = request.IgnoreInSearch;
            var pIgnoreProps = request.IgnoreProps;
            var pImplementService = request.ImplementService;
            var pInherits = request.Inherits;
            var pIsBaseClass = request.IsBaseClass;
            var pIsCached = request.IsCached;
            var pIsInModel = request.IsInModel;
            var pIsInsertOnly = request.IsInsertOnly;
            var pIsReadOnly = request.IsReadOnly;
            var pJsonIgnore = request.JsonIgnore;
            var pName = request.Name;
            var pPATCH = request.PATCH;
            var pPOST = request.POST;
            var pProperties = request.Properties?.ToList();
            var pPUT = request.PUT;
            var pSuperAdminOnly = request.SuperAdminOnly;
            var pTabs = request.Tabs?.ToList();

            DocEntityDataClass entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityDataClass(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityDataClass.GetDataClass(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pAllowDelete, permission, DocConstantModelName.DATACLASS, nameof(request.AllowDelete)))
            {
                if(DocPermissionFactory.IsRequested(request, pAllowDelete, entity.AllowDelete, nameof(request.AllowDelete)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.AllowDelete)} cannot be modified once set.");
                    entity.AllowDelete = pAllowDelete;
                if(DocPermissionFactory.IsRequested<bool>(request, pAllowDelete, nameof(request.AllowDelete)) && !request.VisibleFields.Matches(nameof(request.AllowDelete), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.AllowDelete));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pAllVisibleFieldsByDefault, permission, DocConstantModelName.DATACLASS, nameof(request.AllVisibleFieldsByDefault)))
            {
                if(DocPermissionFactory.IsRequested(request, pAllVisibleFieldsByDefault, entity.AllVisibleFieldsByDefault, nameof(request.AllVisibleFieldsByDefault)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.AllVisibleFieldsByDefault)} cannot be modified once set.");
                    entity.AllVisibleFieldsByDefault = pAllVisibleFieldsByDefault;
                if(DocPermissionFactory.IsRequested<bool>(request, pAllVisibleFieldsByDefault, nameof(request.AllVisibleFieldsByDefault)) && !request.VisibleFields.Matches(nameof(request.AllVisibleFieldsByDefault), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.AllVisibleFieldsByDefault));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<int?>(currentUser, request, pClassId, permission, DocConstantModelName.DATACLASS, nameof(request.ClassId)))
            {
                if(DocPermissionFactory.IsRequested(request, pClassId, entity.ClassId, nameof(request.ClassId)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ClassId)} cannot be modified once set.");
                    if(null != pClassId)
                        entity.ClassId = (int) pClassId;
                if(DocPermissionFactory.IsRequested<int?>(request, pClassId, nameof(request.ClassId)) && !request.VisibleFields.Matches(nameof(request.ClassId), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ClassId));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pCustomAuthorization, permission, DocConstantModelName.DATACLASS, nameof(request.CustomAuthorization)))
            {
                if(DocPermissionFactory.IsRequested(request, pCustomAuthorization, entity.CustomAuthorization, nameof(request.CustomAuthorization)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.CustomAuthorization)} cannot be modified once set.");
                    entity.CustomAuthorization = pCustomAuthorization;
                if(DocPermissionFactory.IsRequested<bool>(request, pCustomAuthorization, nameof(request.CustomAuthorization)) && !request.VisibleFields.Matches(nameof(request.CustomAuthorization), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.CustomAuthorization));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pCustomCollections, permission, DocConstantModelName.DATACLASS, nameof(request.CustomCollections)))
            {
                if(DocPermissionFactory.IsRequested(request, pCustomCollections, entity.CustomCollections, nameof(request.CustomCollections)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.CustomCollections)} cannot be modified once set.");
                    entity.CustomCollections = pCustomCollections;
                if(DocPermissionFactory.IsRequested<string>(request, pCustomCollections, nameof(request.CustomCollections)) && !request.VisibleFields.Matches(nameof(request.CustomCollections), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.CustomCollections));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pDELETE, permission, DocConstantModelName.DATACLASS, nameof(request.DELETE)))
            {
                if(DocPermissionFactory.IsRequested(request, pDELETE, entity.DELETE, nameof(request.DELETE)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.DELETE)} cannot be modified once set.");
                    entity.DELETE = pDELETE;
                if(DocPermissionFactory.IsRequested<bool>(request, pDELETE, nameof(request.DELETE)) && !request.VisibleFields.Matches(nameof(request.DELETE), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.DELETE));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pDescription, permission, DocConstantModelName.DATACLASS, nameof(request.Description)))
            {
                if(DocPermissionFactory.IsRequested(request, pDescription, entity.Description, nameof(request.Description)))
                    entity.Description = pDescription;
                if(DocPermissionFactory.IsRequested<string>(request, pDescription, nameof(request.Description)) && !request.VisibleFields.Matches(nameof(request.Description), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Description));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pDontFlattenProperties, permission, DocConstantModelName.DATACLASS, nameof(request.DontFlattenProperties)))
            {
                if(DocPermissionFactory.IsRequested(request, pDontFlattenProperties, entity.DontFlattenProperties, nameof(request.DontFlattenProperties)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.DontFlattenProperties)} cannot be modified once set.");
                    entity.DontFlattenProperties = pDontFlattenProperties;
                if(DocPermissionFactory.IsRequested<string>(request, pDontFlattenProperties, nameof(request.DontFlattenProperties)) && !request.VisibleFields.Matches(nameof(request.DontFlattenProperties), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.DontFlattenProperties));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pDtoSuffix, permission, DocConstantModelName.DATACLASS, nameof(request.DtoSuffix)))
            {
                if(DocPermissionFactory.IsRequested(request, pDtoSuffix, entity.DtoSuffix, nameof(request.DtoSuffix)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.DtoSuffix)} cannot be modified once set.");
                    entity.DtoSuffix = pDtoSuffix;
                if(DocPermissionFactory.IsRequested<string>(request, pDtoSuffix, nameof(request.DtoSuffix)) && !request.VisibleFields.Matches(nameof(request.DtoSuffix), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.DtoSuffix));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pFlattenReferences, permission, DocConstantModelName.DATACLASS, nameof(request.FlattenReferences)))
            {
                if(DocPermissionFactory.IsRequested(request, pFlattenReferences, entity.FlattenReferences, nameof(request.FlattenReferences)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.FlattenReferences)} cannot be modified once set.");
                    entity.FlattenReferences = pFlattenReferences;
                if(DocPermissionFactory.IsRequested<bool>(request, pFlattenReferences, nameof(request.FlattenReferences)) && !request.VisibleFields.Matches(nameof(request.FlattenReferences), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.FlattenReferences));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pGET, permission, DocConstantModelName.DATACLASS, nameof(request.GET)))
            {
                if(DocPermissionFactory.IsRequested(request, pGET, entity.GET, nameof(request.GET)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.GET)} cannot be modified once set.");
                    entity.GET = pGET;
                if(DocPermissionFactory.IsRequested<bool>(request, pGET, nameof(request.GET)) && !request.VisibleFields.Matches(nameof(request.GET), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.GET));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pHasDto, permission, DocConstantModelName.DATACLASS, nameof(request.HasDto)))
            {
                if(DocPermissionFactory.IsRequested(request, pHasDto, entity.HasDto, nameof(request.HasDto)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.HasDto)} cannot be modified once set.");
                    entity.HasDto = pHasDto;
                if(DocPermissionFactory.IsRequested<bool>(request, pHasDto, nameof(request.HasDto)) && !request.VisibleFields.Matches(nameof(request.HasDto), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.HasDto));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pIgnoreInSearch, permission, DocConstantModelName.DATACLASS, nameof(request.IgnoreInSearch)))
            {
                if(DocPermissionFactory.IsRequested(request, pIgnoreInSearch, entity.IgnoreInSearch, nameof(request.IgnoreInSearch)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.IgnoreInSearch)} cannot be modified once set.");
                    entity.IgnoreInSearch = pIgnoreInSearch;
                if(DocPermissionFactory.IsRequested<string>(request, pIgnoreInSearch, nameof(request.IgnoreInSearch)) && !request.VisibleFields.Matches(nameof(request.IgnoreInSearch), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IgnoreInSearch));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pIgnoreProps, permission, DocConstantModelName.DATACLASS, nameof(request.IgnoreProps)))
            {
                if(DocPermissionFactory.IsRequested(request, pIgnoreProps, entity.IgnoreProps, nameof(request.IgnoreProps)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.IgnoreProps)} cannot be modified once set.");
                    entity.IgnoreProps = pIgnoreProps;
                if(DocPermissionFactory.IsRequested<string>(request, pIgnoreProps, nameof(request.IgnoreProps)) && !request.VisibleFields.Matches(nameof(request.IgnoreProps), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IgnoreProps));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pImplementService, permission, DocConstantModelName.DATACLASS, nameof(request.ImplementService)))
            {
                if(DocPermissionFactory.IsRequested(request, pImplementService, entity.ImplementService, nameof(request.ImplementService)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.ImplementService)} cannot be modified once set.");
                    entity.ImplementService = pImplementService;
                if(DocPermissionFactory.IsRequested<bool>(request, pImplementService, nameof(request.ImplementService)) && !request.VisibleFields.Matches(nameof(request.ImplementService), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.ImplementService));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pInherits, permission, DocConstantModelName.DATACLASS, nameof(request.Inherits)))
            {
                if(DocPermissionFactory.IsRequested(request, pInherits, entity.Inherits, nameof(request.Inherits)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Inherits)} cannot be modified once set.");
                    entity.Inherits = pInherits;
                if(DocPermissionFactory.IsRequested<string>(request, pInherits, nameof(request.Inherits)) && !request.VisibleFields.Matches(nameof(request.Inherits), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Inherits));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsBaseClass, permission, DocConstantModelName.DATACLASS, nameof(request.IsBaseClass)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsBaseClass, entity.IsBaseClass, nameof(request.IsBaseClass)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.IsBaseClass)} cannot be modified once set.");
                    entity.IsBaseClass = pIsBaseClass;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsBaseClass, nameof(request.IsBaseClass)) && !request.VisibleFields.Matches(nameof(request.IsBaseClass), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsBaseClass));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsCached, permission, DocConstantModelName.DATACLASS, nameof(request.IsCached)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsCached, entity.IsCached, nameof(request.IsCached)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.IsCached)} cannot be modified once set.");
                    entity.IsCached = pIsCached;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsCached, nameof(request.IsCached)) && !request.VisibleFields.Matches(nameof(request.IsCached), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsCached));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsInModel, permission, DocConstantModelName.DATACLASS, nameof(request.IsInModel)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsInModel, entity.IsInModel, nameof(request.IsInModel)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.IsInModel)} cannot be modified once set.");
                    entity.IsInModel = pIsInModel;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsInModel, nameof(request.IsInModel)) && !request.VisibleFields.Matches(nameof(request.IsInModel), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsInModel));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsInsertOnly, permission, DocConstantModelName.DATACLASS, nameof(request.IsInsertOnly)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsInsertOnly, entity.IsInsertOnly, nameof(request.IsInsertOnly)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.IsInsertOnly)} cannot be modified once set.");
                    entity.IsInsertOnly = pIsInsertOnly;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsInsertOnly, nameof(request.IsInsertOnly)) && !request.VisibleFields.Matches(nameof(request.IsInsertOnly), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsInsertOnly));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsReadOnly, permission, DocConstantModelName.DATACLASS, nameof(request.IsReadOnly)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsReadOnly, entity.IsReadOnly, nameof(request.IsReadOnly)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.IsReadOnly)} cannot be modified once set.");
                    entity.IsReadOnly = pIsReadOnly;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsReadOnly, nameof(request.IsReadOnly)) && !request.VisibleFields.Matches(nameof(request.IsReadOnly), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsReadOnly));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pJsonIgnore, permission, DocConstantModelName.DATACLASS, nameof(request.JsonIgnore)))
            {
                if(DocPermissionFactory.IsRequested(request, pJsonIgnore, entity.JsonIgnore, nameof(request.JsonIgnore)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.JsonIgnore)} cannot be modified once set.");
                    entity.JsonIgnore = pJsonIgnore;
                if(DocPermissionFactory.IsRequested<string>(request, pJsonIgnore, nameof(request.JsonIgnore)) && !request.VisibleFields.Matches(nameof(request.JsonIgnore), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.JsonIgnore));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pName, permission, DocConstantModelName.DATACLASS, nameof(request.Name)))
            {
                if(DocPermissionFactory.IsRequested(request, pName, entity.Name, nameof(request.Name)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.Name)} cannot be modified once set.");
                    entity.Name = pName;
                if(DocPermissionFactory.IsRequested<string>(request, pName, nameof(request.Name)) && !request.VisibleFields.Matches(nameof(request.Name), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Name));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pPATCH, permission, DocConstantModelName.DATACLASS, nameof(request.PATCH)))
            {
                if(DocPermissionFactory.IsRequested(request, pPATCH, entity.PATCH, nameof(request.PATCH)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.PATCH)} cannot be modified once set.");
                    entity.PATCH = pPATCH;
                if(DocPermissionFactory.IsRequested<bool>(request, pPATCH, nameof(request.PATCH)) && !request.VisibleFields.Matches(nameof(request.PATCH), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.PATCH));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pPOST, permission, DocConstantModelName.DATACLASS, nameof(request.POST)))
            {
                if(DocPermissionFactory.IsRequested(request, pPOST, entity.POST, nameof(request.POST)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.POST)} cannot be modified once set.");
                    entity.POST = pPOST;
                if(DocPermissionFactory.IsRequested<bool>(request, pPOST, nameof(request.POST)) && !request.VisibleFields.Matches(nameof(request.POST), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.POST));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pPUT, permission, DocConstantModelName.DATACLASS, nameof(request.PUT)))
            {
                if(DocPermissionFactory.IsRequested(request, pPUT, entity.PUT, nameof(request.PUT)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.PUT)} cannot be modified once set.");
                    entity.PUT = pPUT;
                if(DocPermissionFactory.IsRequested<bool>(request, pPUT, nameof(request.PUT)) && !request.VisibleFields.Matches(nameof(request.PUT), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.PUT));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pSuperAdminOnly, permission, DocConstantModelName.DATACLASS, nameof(request.SuperAdminOnly)))
            {
                if(DocPermissionFactory.IsRequested(request, pSuperAdminOnly, entity.SuperAdminOnly, nameof(request.SuperAdminOnly)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.SuperAdminOnly)} cannot be modified once set.");
                    entity.SuperAdminOnly = pSuperAdminOnly;
                if(DocPermissionFactory.IsRequested<bool>(request, pSuperAdminOnly, nameof(request.SuperAdminOnly)) && !request.VisibleFields.Matches(nameof(request.SuperAdminOnly), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.SuperAdminOnly));
                }
            }
            
            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);
            
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pProperties, permission, DocConstantModelName.DATACLASS, nameof(request.Properties)))
            {
                if (true == pProperties?.Any() )
                {
                    var requestedProperties = pProperties.Select(p => p.Id).Distinct().ToList();
                    var existsProperties = Execute.SelectAll<DocEntityDataProperty>().Where(e => e.Id.In(requestedProperties)).Select( e => e.Id ).ToList();
                    if (existsProperties.Count != requestedProperties.Count)
                    {
                        var nonExists = requestedProperties.Where(id => existsProperties.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Properties with objects that do not exist. No matching Properties(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedProperties.Where(id => entity.Properties.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityDataProperty.GetDataProperty(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataClass), columnName: nameof(request.Properties)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Properties)} to {nameof(DataClass)}");
                        entity.Properties.Add(target);
                    });
                    var toRemove = entity.Properties.Where(e => requestedProperties.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDataProperty.GetDataProperty(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataClass), columnName: nameof(request.Properties)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Properties)} from {nameof(DataClass)}");
                        entity.Properties.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Properties.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDataProperty.GetDataProperty(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataClass), columnName: nameof(request.Properties)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Properties)} from {nameof(DataClass)}");
                        entity.Properties.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pProperties, nameof(request.Properties)) && !request.VisibleFields.Matches(nameof(request.Properties), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Properties));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pTabs, permission, DocConstantModelName.DATACLASS, nameof(request.Tabs)))
            {
                if (true == pTabs?.Any() )
                {
                    var requestedTabs = pTabs.Select(p => p.Id).Distinct().ToList();
                    var existsTabs = Execute.SelectAll<DocEntityDataTab>().Where(e => e.Id.In(requestedTabs)).Select( e => e.Id ).ToList();
                    if (existsTabs.Count != requestedTabs.Count)
                    {
                        var nonExists = requestedTabs.Where(id => existsTabs.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Tabs with objects that do not exist. No matching Tabs(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedTabs.Where(id => entity.Tabs.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityDataTab.GetDataTab(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(DataClass), columnName: nameof(request.Tabs)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Tabs)} to {nameof(DataClass)}");
                        entity.Tabs.Add(target);
                    });
                    var toRemove = entity.Tabs.Where(e => requestedTabs.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDataTab.GetDataTab(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataClass), columnName: nameof(request.Tabs)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Tabs)} from {nameof(DataClass)}");
                        entity.Tabs.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Tabs.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDataTab.GetDataTab(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(DataClass), columnName: nameof(request.Tabs)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Tabs)} from {nameof(DataClass)}");
                        entity.Tabs.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pTabs, nameof(request.Tabs)) && !request.VisibleFields.Matches(nameof(request.Tabs), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Tabs));
                }
            }
            DocPermissionFactory.SetVisibleFields<DataClass>(currentUser, nameof(DataClass), request.VisibleFields);
            ret = entity.ToDto();

            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.DATACLASS);

            return ret;
        }


        public List<DataClass> Put(DataClassBatch request)
        {
            return Patch(request);
        }

        public DataClass Put(DataClass request)
        {
            return Patch(request);
        }

        public List<DataClass> Patch(DataClassBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<DataClass>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as DataClass;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public DataClass Patch(DataClass request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the DataClass to patch.");
            
            request.VisibleFields = request.VisibleFields ?? new List<string>();
            
            DataClass ret = null;
            Execute.Run(ssn =>
            {
                ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
            });
            return ret;
        }

        public object Get(DataClassJunction request) =>
            Execute.Run( s => 
            {
                switch(request.Junction.ToLower().TrimAndPruneSpaces())
                {
                    case "dataproperty":
                        return GetJunctionSearchResult<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "Properties", request, (ss) => HostContext.ResolveService<DataPropertyService>(Request)?.Get(ss));
                    case "datatab":
                        return GetJunctionSearchResult<DataClass, DocEntityDataClass, DocEntityDataTab, DataTab, DataTabSearch>((int)request.Id, DocConstantModelName.DATATAB, "Tabs", request, (ss) => HostContext.ResolveService<DataTabService>(Request)?.Get(ss));
                    default:
                        throw new HttpError(HttpStatusCode.NotFound, $"Route for dataclass/{request.Id}/{request.Junction} was not found");
                }
            });
        public object Post(DataClassJunction request) =>
            Execute.Run( ssn =>
            {
                switch(request.Junction.ToLower().TrimAndPruneSpaces())
                {
                    case "dataproperty":
                        return AddJunction<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "Properties", request);
                    case "datatab":
                        return AddJunction<DataClass, DocEntityDataClass, DocEntityDataTab, DataTab, DataTabSearch>((int)request.Id, DocConstantModelName.DATATAB, "Tabs", request);
                    default:
                        throw new HttpError(HttpStatusCode.NotFound, $"Route for dataclass/{request.Id}/{request.Junction} was not found");
                }
            });

        public object Delete(DataClassJunction request) =>
            Execute.Run( ssn =>
            {
                switch(request.Junction.ToLower().TrimAndPruneSpaces())
                {
                    case "dataproperty":
                        return RemoveJunction<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "Properties", request);
                    case "datatab":
                        return RemoveJunction<DataClass, DocEntityDataClass, DocEntityDataTab, DataTab, DataTabSearch>((int)request.Id, DocConstantModelName.DATATAB, "Tabs", request);
                    default:
                        throw new HttpError(HttpStatusCode.NotFound, $"Route for dataclass/{request.Id}/{request.Junction} was not found");
                }
            });

        private DataClass GetDataClass(DataClass request)
        {
            var id = request?.Id;
            DataClass ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<DataClass>(currentUser, "DataClass", request.VisibleFields);

            DocEntityDataClass entity = null;
            if(id.HasValue)
            {
                entity = DocEntityDataClass.GetDataClass(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No DataClass found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }
    }
}