
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Schema;

using ServiceStack;
using ServiceStack.Text;

using Typed;
using Typed.Bindings;
using Typed.Notifications;

using Xtensive.Orm;


namespace Services.API
{
    public partial class DataClassService : DocServiceBase
    {

        private IQueryable<DocEntityDataClass> _ExecSearch(DataClassSearch request, DocQuery query)
        {
            request = InitSearch<DataClass, DataClassSearch>(request);
            IQueryable<DocEntityDataClass> entities = null;
            query.Run( session => 
            {
                entities = query.SelectAll<DocEntityDataClass>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new DataClassFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityDataClass,DataClassFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }
                if(true == request.Archived?.Any() && currentUser.HasProperty(DocConstantModelName.DATACLASS, nameof(Reference.Archived), DocConstantPermission.VIEW))
                {
                    entities = entities.Where(en => en.Archived.In(request.Archived));
                }
                else
                {
                    entities = entities.Where(en => !en.Archived);
                }
                if(true == request.Locked?.Any())
                {
                    entities = entities.Where(en => en.Locked.In(request.Locked));
                }
                if(true == request.AllowDelete?.Any())
                {
                    if(request.AllowDelete.Any(v => v == null)) entities = entities.Where(en => en.AllowDelete.In(request.AllowDelete) || en.AllowDelete == null);
                    else entities = entities.Where(en => en.AllowDelete.In(request.AllowDelete));
                }
                if(true == request.AllSelectByDefault?.Any())
                {
                    if(request.AllSelectByDefault.Any(v => v == null)) entities = entities.Where(en => en.AllSelectByDefault.In(request.AllSelectByDefault) || en.AllSelectByDefault == null);
                    else entities = entities.Where(en => en.AllSelectByDefault.In(request.AllSelectByDefault));
                }
                if(request.Base.HasValue)
                    entities = entities.Where(en => request.Base.Value == en.Base);
                if(!DocTools.IsNullOrEmpty(request.Bases))
                    entities = entities.Where(en => en.Base.In(request.Bases));
                if(request.CacheDuration.HasValue)
                    entities = entities.Where(en => request.CacheDuration.Value == en.CacheDuration);
                if(request.ClassId.HasValue)
                    entities = entities.Where(en => request.ClassId.Value == en.ClassId);
                if(true == request.CustomCollectionsIds?.Any())
                {
                    entities = entities.Where(en => en.CustomCollections.Any(r => r.Id.In(request.CustomCollectionsIds)));
                }
                if(true == request.DELETE?.Any())
                {
                    if(request.DELETE.Any(v => v == null)) entities = entities.Where(en => en.DELETE.In(request.DELETE) || en.DELETE == null);
                    else entities = entities.Where(en => en.DELETE.In(request.DELETE));
                }
                if(!DocTools.IsNullOrEmpty(request.Description))
                    entities = entities.Where(en => en.Description.Contains(request.Description));
                if(!DocTools.IsNullOrEmpty(request.Descriptions))
                    entities = entities.Where(en => en.Description.In(request.Descriptions));
                if(true == request.DontFlattenPropertiesIds?.Any())
                {
                    entities = entities.Where(en => en.DontFlattenProperties.Any(r => r.Id.In(request.DontFlattenPropertiesIds)));
                }
                if(!DocTools.IsNullOrEmpty(request.DtoSuffix))
                    entities = entities.Where(en => en.DtoSuffix.Contains(request.DtoSuffix));
                if(!DocTools.IsNullOrEmpty(request.DtoSuffixs))
                    entities = entities.Where(en => en.DtoSuffix.In(request.DtoSuffixs));
                if(true == request.FlattenReferences?.Any())
                {
                    if(request.FlattenReferences.Any(v => v == null)) entities = entities.Where(en => en.FlattenReferences.In(request.FlattenReferences) || en.FlattenReferences == null);
                    else entities = entities.Where(en => en.FlattenReferences.In(request.FlattenReferences));
                }
                if(true == request.GET?.Any())
                {
                    if(request.GET.Any(v => v == null)) entities = entities.Where(en => en.GET.In(request.GET) || en.GET == null);
                    else entities = entities.Where(en => en.GET.In(request.GET));
                }
                if(true == request.IgnorePropsIds?.Any())
                {
                    entities = entities.Where(en => en.IgnoreProps.Any(r => r.Id.In(request.IgnorePropsIds)));
                }
                if(true == request.IsInsertOnly?.Any())
                {
                    if(request.IsInsertOnly.Any(v => v == null)) entities = entities.Where(en => en.IsInsertOnly.In(request.IsInsertOnly) || en.IsInsertOnly == null);
                    else entities = entities.Where(en => en.IsInsertOnly.In(request.IsInsertOnly));
                }
                if(true == request.IsReadOnly?.Any())
                {
                    if(request.IsReadOnly.Any(v => v == null)) entities = entities.Where(en => en.IsReadOnly.In(request.IsReadOnly) || en.IsReadOnly == null);
                    else entities = entities.Where(en => en.IsReadOnly.In(request.IsReadOnly));
                }
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(!DocTools.IsNullOrEmpty(request.Names))
                    entities = entities.Where(en => en.Name.In(request.Names));
                if(true == request.PATCH?.Any())
                {
                    if(request.PATCH.Any(v => v == null)) entities = entities.Where(en => en.PATCH.In(request.PATCH) || en.PATCH == null);
                    else entities = entities.Where(en => en.PATCH.In(request.PATCH));
                }
                if(true == request.POST?.Any())
                {
                    if(request.POST.Any(v => v == null)) entities = entities.Where(en => en.POST.In(request.POST) || en.POST == null);
                    else entities = entities.Where(en => en.POST.In(request.POST));
                }
                if(true == request.PropertiesIds?.Any())
                {
                    entities = entities.Where(en => en.Properties.Any(r => r.Id.In(request.PropertiesIds)));
                }
                if(true == request.PUT?.Any())
                {
                    if(request.PUT.Any(v => v == null)) entities = entities.Where(en => en.PUT.In(request.PUT) || en.PUT == null);
                    else entities = entities.Where(en => en.PUT.In(request.PUT));
                }
                if(true == request.TabsIds?.Any())
                {
                    entities = entities.Where(en => en.Tabs.Any(r => r.Id.In(request.TabsIds)));
                }

                entities = ApplyFilters<DocEntityDataClass,DataClassSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(DataClassSearch request) => Get(request);

        public object Get(DataClassSearch request) => GetSearchResultWithCache<DataClass,DocEntityDataClass,DataClassSearch>(DocConstantModelName.DATACLASS, request, _ExecSearch);

        public object Get(DataClass request) => GetEntityWithCache<DataClass>(DocConstantModelName.DATACLASS, request, GetDataClass);



        private DataClass _AssignValues(DataClass request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "DataClass"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.Select = request.Select ?? new List<string>();

            DataClass ret = null;
            request = _InitAssignValues<DataClass>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<DataClass>(DocConstantModelName.DATACLASS, nameof(DataClass), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pAllowDelete = request.AllowDelete;
            var pAllSelectByDefault = request.AllSelectByDefault;
            var pBase = request.Base;
            var pCacheDuration = request.CacheDuration;
            var pClassId = request.ClassId;
            var pCustomCollections = GetVariable<Reference>(request, nameof(request.CustomCollections), request.CustomCollections?.ToList(), request.CustomCollectionsIds?.ToList());
            var pDELETE = request.DELETE;
            var pDescription = request.Description;
            var pDontFlattenProperties = GetVariable<Reference>(request, nameof(request.DontFlattenProperties), request.DontFlattenProperties?.ToList(), request.DontFlattenPropertiesIds?.ToList());
            var pDtoSuffix = request.DtoSuffix;
            var pFlattenReferences = request.FlattenReferences;
            var pGET = request.GET;
            var pIgnoreProps = GetVariable<Reference>(request, nameof(request.IgnoreProps), request.IgnoreProps?.ToList(), request.IgnorePropsIds?.ToList());
            var pIsInsertOnly = request.IsInsertOnly;
            var pIsReadOnly = request.IsReadOnly;
            var pName = request.Name;
            var pPATCH = request.PATCH;
            var pPOST = request.POST;
            var pProperties = GetVariable<DataProperty>(request, nameof(request.Properties), request.Properties?.ToList(), request.PropertiesIds?.ToList());
            var pPUT = request.PUT;
            var pTabs = GetVariable<DataTab>(request, nameof(request.Tabs), request.Tabs?.ToList(), request.TabsIds?.ToList());

            DocEntityDataClass entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityDataClass(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityDataClass.Get(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            //Special case for Archived
            var pArchived = true == request.Archived;
            if (PatchValue<DataClass, bool>(request, DocConstantModelName.DATACLASS, pArchived, entity.Archived, permission, nameof(request.Archived), pArchived != entity.Archived))
            {
                entity.Archived = pArchived;
            }
            if (PatchValue<DataClass, bool>(request, DocConstantModelName.DATACLASS, pAllowDelete, entity.AllowDelete, permission, nameof(request.AllowDelete), pAllowDelete != entity.AllowDelete))
            {
                entity.AllowDelete = pAllowDelete;
            }
            if (PatchValue<DataClass, bool>(request, DocConstantModelName.DATACLASS, pAllSelectByDefault, entity.AllSelectByDefault, permission, nameof(request.AllSelectByDefault), pAllSelectByDefault != entity.AllSelectByDefault))
            {
                entity.AllSelectByDefault = pAllSelectByDefault;
            }
            if (PatchValue<DataClass, ModelNameEnm?>(request, DocConstantModelName.DATACLASS, pBase, entity.Base, permission, nameof(request.Base), pBase != entity.Base))
            {
                entity.Base = pBase;
            }
            if (PatchValue<DataClass, int?>(request, DocConstantModelName.DATACLASS, pCacheDuration, entity.CacheDuration, permission, nameof(request.CacheDuration), pCacheDuration != entity.CacheDuration))
            {
                if(null != pCacheDuration) entity.CacheDuration = (int) pCacheDuration;
            }
            if (PatchValue<DataClass, int?>(request, DocConstantModelName.DATACLASS, pClassId, entity.ClassId, permission, nameof(request.ClassId), pClassId != entity.ClassId))
            {
                if(null != pClassId) entity.ClassId = (int) pClassId;
            }
            if (PatchValue<DataClass, bool>(request, DocConstantModelName.DATACLASS, pDELETE, entity.DELETE, permission, nameof(request.DELETE), pDELETE != entity.DELETE))
            {
                entity.DELETE = pDELETE;
            }
            if (PatchValue<DataClass, string>(request, DocConstantModelName.DATACLASS, pDescription, entity.Description, permission, nameof(request.Description), pDescription != entity.Description))
            {
                entity.Description = pDescription;
            }
            if (PatchValue<DataClass, string>(request, DocConstantModelName.DATACLASS, pDtoSuffix, entity.DtoSuffix, permission, nameof(request.DtoSuffix), pDtoSuffix != entity.DtoSuffix))
            {
                entity.DtoSuffix = pDtoSuffix;
            }
            if (PatchValue<DataClass, bool>(request, DocConstantModelName.DATACLASS, pFlattenReferences, entity.FlattenReferences, permission, nameof(request.FlattenReferences), pFlattenReferences != entity.FlattenReferences))
            {
                entity.FlattenReferences = pFlattenReferences;
            }
            if (PatchValue<DataClass, bool>(request, DocConstantModelName.DATACLASS, pGET, entity.GET, permission, nameof(request.GET), pGET != entity.GET))
            {
                entity.GET = pGET;
            }
            if (PatchValue<DataClass, bool>(request, DocConstantModelName.DATACLASS, pIsInsertOnly, entity.IsInsertOnly, permission, nameof(request.IsInsertOnly), pIsInsertOnly != entity.IsInsertOnly))
            {
                entity.IsInsertOnly = pIsInsertOnly;
            }
            if (PatchValue<DataClass, bool>(request, DocConstantModelName.DATACLASS, pIsReadOnly, entity.IsReadOnly, permission, nameof(request.IsReadOnly), pIsReadOnly != entity.IsReadOnly))
            {
                entity.IsReadOnly = pIsReadOnly;
            }
            if (PatchValue<DataClass, string>(request, DocConstantModelName.DATACLASS, pName, entity.Name, permission, nameof(request.Name), pName != entity.Name))
            {
                entity.Name = pName;
            }
            if (PatchValue<DataClass, bool>(request, DocConstantModelName.DATACLASS, pPATCH, entity.PATCH, permission, nameof(request.PATCH), pPATCH != entity.PATCH))
            {
                entity.PATCH = pPATCH;
            }
            if (PatchValue<DataClass, bool>(request, DocConstantModelName.DATACLASS, pPOST, entity.POST, permission, nameof(request.POST), pPOST != entity.POST))
            {
                entity.POST = pPOST;
            }
            if (PatchValue<DataClass, bool>(request, DocConstantModelName.DATACLASS, pPUT, entity.PUT, permission, nameof(request.PUT), pPUT != entity.PUT))
            {
                entity.PUT = pPUT;
            }

            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);

            var idsToInvalidate = new List<int>();
            idsToInvalidate.AddRange(PatchCollection<DataClass, DocEntityDataClass, Reference, DocEntityDataProperty>(request, entity, pCustomCollections, permission, nameof(request.CustomCollections)));
            idsToInvalidate.AddRange(PatchCollection<DataClass, DocEntityDataClass, Reference, DocEntityDataProperty>(request, entity, pDontFlattenProperties, permission, nameof(request.DontFlattenProperties)));
            idsToInvalidate.AddRange(PatchCollection<DataClass, DocEntityDataClass, Reference, DocEntityDataProperty>(request, entity, pIgnoreProps, permission, nameof(request.IgnoreProps)));
            idsToInvalidate.AddRange(PatchCollection<DataClass, DocEntityDataClass, DataProperty, DocEntityDataProperty>(request, entity, pProperties, permission, nameof(request.Properties)));
            idsToInvalidate.AddRange(PatchCollection<DataClass, DocEntityDataClass, DataTab, DocEntityDataTab>(request, entity, pTabs, permission, nameof(request.Tabs)));
            if (idsToInvalidate.Any())
            {
                idsToInvalidate.Add(entity.Id);
                DocCacheClient.RemoveByEntityIds(idsToInvalidate);
                DocCacheClient.RemoveSearch(DocConstantModelName.DATACLASS);
            }

            DocPermissionFactory.SetSelect<DataClass>(currentUser, nameof(DataClass), request.Select);
            ret = entity.ToDto();

            var cacheExpires = DocResources.Metadata.GetCacheExpiration(DocConstantModelName.DATACLASS);
            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.DATACLASS, cacheExpires);

            return ret;
        }




        public List<DataClass> Put(DataClassBatch request)
        {
            return Patch(request);
        }

        public DataClass Put(DataClass request)
        {
            return Patch(request);
        }


        public List<DataClass> Patch(DataClassBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<DataClass>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as DataClass;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public DataClass Patch(DataClass request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the DataClass to patch.");
            
            request.Select = request.Select ?? new List<string>();
            
            DataClass ret = null;
            using(Execute)
            {
                Execute.Run(ssn =>
                {
                    ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
                });
            }
            return ret;
        }



        public object Get(DataClassJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "comment":
                        return GetJunctionSearchResult<DataClass, DocEntityDataClass, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request, (ss) => HostContext.ResolveService<CommentService>(Request)?.Get(ss));
                    case "customcollections":
                        return GetJunctionSearchResult<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "CustomCollections", request, (ss) => HostContext.ResolveService<DataPropertyService>(Request)?.Get(ss));
                    case "dontflattenproperties":
                        return GetJunctionSearchResult<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "DontFlattenProperties", request, (ss) => HostContext.ResolveService<DataPropertyService>(Request)?.Get(ss));
                    case "favorite":
                        return GetJunctionSearchResult<DataClass, DocEntityDataClass, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request, (ss) => HostContext.ResolveService<FavoriteService>(Request)?.Get(ss));
                    case "ignoreprops":
                        return GetJunctionSearchResult<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "IgnoreProps", request, (ss) => HostContext.ResolveService<DataPropertyService>(Request)?.Get(ss));
                    case "dataproperty":
                        return GetJunctionSearchResult<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "Properties", request, (ss) => HostContext.ResolveService<DataPropertyService>(Request)?.Get(ss));
                    case "datatab":
                        return GetJunctionSearchResult<DataClass, DocEntityDataClass, DocEntityDataTab, DataTab, DataTabSearch>((int)request.Id, DocConstantModelName.DATATAB, "Tabs", request, (ss) => HostContext.ResolveService<DataTabService>(Request)?.Get(ss));
                    case "tag":
                        return GetJunctionSearchResult<DataClass, DocEntityDataClass, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request, (ss) => HostContext.ResolveService<TagService>(Request)?.Get(ss));
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for dataclass/{request.Id}/{request.Junction} was not found");
            }
        }


        public object Post(DataClassJunction request)
        {
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "comment":
                        return AddJunction<DataClass, DocEntityDataClass, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "customcollections":
                        return AddJunction<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "CustomCollections", request);
                    case "dontflattenproperties":
                        return AddJunction<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "DontFlattenProperties", request);
                    case "favorite":
                        return AddJunction<DataClass, DocEntityDataClass, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "ignoreprops":
                        return AddJunction<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "IgnoreProps", request);
                    case "dataproperty":
                        return AddJunction<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "Properties", request);
                    case "datatab":
                        return AddJunction<DataClass, DocEntityDataClass, DocEntityDataTab, DataTab, DataTabSearch>((int)request.Id, DocConstantModelName.DATATAB, "Tabs", request);
                    case "tag":
                        return AddJunction<DataClass, DocEntityDataClass, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for dataclass/{request.Id}/{request.Junction} was not found");
            }
        }

        public object Delete(DataClassJunction request)
        {    
            switch(request.Junction.ToLower().TrimAndPruneSpaces())
            {
                    case "comment":
                        return RemoveJunction<DataClass, DocEntityDataClass, DocEntityComment, Comment, CommentSearch>((int)request.Id, DocConstantModelName.COMMENT, "Comments", request);
                    case "customcollections":
                        return RemoveJunction<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "CustomCollections", request);
                    case "dontflattenproperties":
                        return RemoveJunction<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "DontFlattenProperties", request);
                    case "favorite":
                        return RemoveJunction<DataClass, DocEntityDataClass, DocEntityFavorite, Favorite, FavoriteSearch>((int)request.Id, DocConstantModelName.FAVORITE, "Favorites", request);
                    case "ignoreprops":
                        return RemoveJunction<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "IgnoreProps", request);
                    case "dataproperty":
                        return RemoveJunction<DataClass, DocEntityDataClass, DocEntityDataProperty, DataProperty, DataPropertySearch>((int)request.Id, DocConstantModelName.DATAPROPERTY, "Properties", request);
                    case "datatab":
                        return RemoveJunction<DataClass, DocEntityDataClass, DocEntityDataTab, DataTab, DataTabSearch>((int)request.Id, DocConstantModelName.DATATAB, "Tabs", request);
                    case "tag":
                        return RemoveJunction<DataClass, DocEntityDataClass, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request);
                default:
                    throw new HttpError(HttpStatusCode.NotFound, $"Route for dataclass/{request.Id}/{request.Junction} was not found");
            }
        }


        private DataClass GetDataClass(DataClass request)
        {
            var id = request?.Id;
            DataClass ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetSelect<DataClass>(currentUser, "DataClass", request.Select);

            DocEntityDataClass entity = null;
            if(id.HasValue)
            {
                entity = DocEntityDataClass.Get(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No DataClass found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

    }
}
