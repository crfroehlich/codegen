//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class TeamService : DocServiceBase
    {
        private IQueryable<DocEntityTeam> _ExecSearch(TeamSearch request)
        {
            request = InitSearch<Team, TeamSearch>(request);
            IQueryable<DocEntityTeam> entities = null;
            Execute.Run( session => 
            {
                entities = Execute.SelectAll<DocEntityTeam>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new TeamFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityTeam,TeamFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                        if(true == request.AdminRolesIds?.Any())
                        {
                            entities = entities.Where(en => en.AdminRoles.Any(r => r.Id.In(request.AdminRolesIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.Description))
                    entities = entities.Where(en => en.Description.Contains(request.Description));
                if(!DocTools.IsNullOrEmpty(request.Email))
                    entities = entities.Where(en => en.Email.Contains(request.Email));
                if(request.IsInternal.HasValue)
                    entities = entities.Where(en => request.IsInternal.Value == en.IsInternal);
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(!DocTools.IsNullOrEmpty(request.Owner) && !DocTools.IsNullOrEmpty(request.Owner.Id))
                {
                    entities = entities.Where(en => en.Owner.Id == request.Owner.Id );
                }
                if(true == request.OwnerIds?.Any())
                {
                    entities = entities.Where(en => en.Owner.Id.In(request.OwnerIds));
                }
                        if(true == request.ScopesIds?.Any())
                        {
                            entities = entities.Where(en => en.Scopes.Any(r => r.Id.In(request.ScopesIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.Slack))
                    entities = entities.Where(en => en.Slack.Contains(request.Slack));
                        if(true == request.UpdatesIds?.Any())
                        {
                            entities = entities.Where(en => en.Updates.Any(r => r.Id.In(request.UpdatesIds)));
                        }
                        if(true == request.UsersIds?.Any())
                        {
                            entities = entities.Where(en => en.Users.Any(r => r.Id.In(request.UsersIds)));
                        }

                entities = ApplyFilters<DocEntityTeam,TeamSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(TeamSearch request) => Get(request);

        public object Get(TeamSearch request) => GetSearchResultWithCache<Team,DocEntityTeam,TeamSearch>(DocConstantModelName.TEAM, request, _ExecSearch);

        public object Post(TeamVersion request) => Get(request);

        public object Get(TeamVersion request) 
        {
            List<Version> ret = null;
            Execute.Run(s=>
            {
                ret = _ExecSearch(request).Select(e => new Version(e.Id, e.VersionNo)).ToList();
            });
            return ret;
        }

        public object Get(Team request) => GetEntityWithCache<Team>(DocConstantModelName.TEAM, request, GetTeam);
        private Team _AssignValues(Team request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "Team"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            Team ret = null;
            request = _InitAssignValues<Team>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<Team>(DocConstantModelName.TEAM, nameof(Team), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pAdminRoles = request.AdminRoles?.ToList();
            var pDescription = request.Description;
            var pEmail = request.Email;
            var pIsInternal = request.IsInternal;
            var pName = request.Name;
            var pOwner = (request.Owner?.Id > 0) ? DocEntityUser.GetUser(request.Owner.Id) : null;
            var pScopes = request.Scopes?.ToList();
            var pSettings = request.Settings;
            var pSlack = request.Slack;
            var pUpdates = request.Updates?.ToList();
            var pUsers = request.Users?.ToList();

            DocEntityTeam entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityTeam(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityTeam.GetTeam(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pDescription, permission, DocConstantModelName.TEAM, nameof(request.Description)))
            {
                if(DocPermissionFactory.IsRequested(request, pDescription, entity.Description, nameof(request.Description)))
                    entity.Description = pDescription;
                if(DocPermissionFactory.IsRequested<string>(request, pDescription, nameof(request.Description)) && !request.VisibleFields.Matches(nameof(request.Description), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Description));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pEmail, permission, DocConstantModelName.TEAM, nameof(request.Email)))
            {
                if(DocPermissionFactory.IsRequested(request, pEmail, entity.Email, nameof(request.Email)))
                    entity.Email = pEmail;
                if(DocPermissionFactory.IsRequested<string>(request, pEmail, nameof(request.Email)) && !request.VisibleFields.Matches(nameof(request.Email), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Email));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<bool>(currentUser, request, pIsInternal, permission, DocConstantModelName.TEAM, nameof(request.IsInternal)))
            {
                if(DocPermissionFactory.IsRequested(request, pIsInternal, entity.IsInternal, nameof(request.IsInternal)))
                    entity.IsInternal = pIsInternal;
                if(DocPermissionFactory.IsRequested<bool>(request, pIsInternal, nameof(request.IsInternal)) && !request.VisibleFields.Matches(nameof(request.IsInternal), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.IsInternal));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pName, permission, DocConstantModelName.TEAM, nameof(request.Name)))
            {
                if(DocPermissionFactory.IsRequested(request, pName, entity.Name, nameof(request.Name)))
                    entity.Name = pName;
                if(DocPermissionFactory.IsRequested<string>(request, pName, nameof(request.Name)) && !request.VisibleFields.Matches(nameof(request.Name), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Name));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityUser>(currentUser, request, pOwner, permission, DocConstantModelName.TEAM, nameof(request.Owner)))
            {
                if(DocPermissionFactory.IsRequested(request, pOwner, entity.Owner, nameof(request.Owner)))
                    entity.Owner = pOwner;
                if(DocPermissionFactory.IsRequested<DocEntityUser>(request, pOwner, nameof(request.Owner)) && !request.VisibleFields.Matches(nameof(request.Owner), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Owner));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<TeamSettings>(currentUser, request, pSettings, permission, DocConstantModelName.TEAM, nameof(request.Settings)))
            {
                if(DocPermissionFactory.IsRequested(request, pSettings, entity.Settings, nameof(request.Settings)))
                    entity.Settings = DocSerialize<TeamSettings>.ToString(pSettings);
                if(DocPermissionFactory.IsRequested<TeamSettings>(request, pSettings, nameof(request.Settings)) && !request.VisibleFields.Matches(nameof(request.Settings), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Settings));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pSlack, permission, DocConstantModelName.TEAM, nameof(request.Slack)))
            {
                if(DocPermissionFactory.IsRequested(request, pSlack, entity.Slack, nameof(request.Slack)))
                    entity.Slack = pSlack;
                if(DocPermissionFactory.IsRequested<string>(request, pSlack, nameof(request.Slack)) && !request.VisibleFields.Matches(nameof(request.Slack), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Slack));
                }
            }
            
            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);
            
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pAdminRoles, permission, DocConstantModelName.TEAM, nameof(request.AdminRoles)))
            {
                if (true == pAdminRoles?.Any() )
                {
                    var requestedAdminRoles = pAdminRoles.Select(p => p.Id).Distinct().ToList();
                    var existsAdminRoles = Execute.SelectAll<DocEntityRole>().Where(e => e.Id.In(requestedAdminRoles)).Select( e => e.Id ).ToList();
                    if (existsAdminRoles.Count != requestedAdminRoles.Count)
                    {
                        var nonExists = requestedAdminRoles.Where(id => existsAdminRoles.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection AdminRoles with objects that do not exist. No matching AdminRoles(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedAdminRoles.Where(id => entity.AdminRoles.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityRole.GetRole(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Team), columnName: nameof(request.AdminRoles)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.AdminRoles)} to {nameof(Team)}");
                        entity.AdminRoles.Add(target);
                    });
                    var toRemove = entity.AdminRoles.Where(e => requestedAdminRoles.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityRole.GetRole(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Team), columnName: nameof(request.AdminRoles)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.AdminRoles)} from {nameof(Team)}");
                        entity.AdminRoles.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.AdminRoles.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityRole.GetRole(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Team), columnName: nameof(request.AdminRoles)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.AdminRoles)} from {nameof(Team)}");
                        entity.AdminRoles.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pAdminRoles, nameof(request.AdminRoles)) && !request.VisibleFields.Matches(nameof(request.AdminRoles), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.AdminRoles));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pScopes, permission, DocConstantModelName.TEAM, nameof(request.Scopes)))
            {
                if (true == pScopes?.Any() )
                {
                    var requestedScopes = pScopes.Select(p => p.Id).Distinct().ToList();
                    var existsScopes = Execute.SelectAll<DocEntityScope>().Where(e => e.Id.In(requestedScopes)).Select( e => e.Id ).ToList();
                    if (existsScopes.Count != requestedScopes.Count)
                    {
                        var nonExists = requestedScopes.Where(id => existsScopes.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Scopes with objects that do not exist. No matching Scopes(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedScopes.Where(id => entity.Scopes.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityScope.GetScope(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Team), columnName: nameof(request.Scopes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Scopes)} to {nameof(Team)}");
                        entity.Scopes.Add(target);
                    });
                    var toRemove = entity.Scopes.Where(e => requestedScopes.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityScope.GetScope(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Team), columnName: nameof(request.Scopes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Scopes)} from {nameof(Team)}");
                        entity.Scopes.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Scopes.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityScope.GetScope(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Team), columnName: nameof(request.Scopes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Scopes)} from {nameof(Team)}");
                        entity.Scopes.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pScopes, nameof(request.Scopes)) && !request.VisibleFields.Matches(nameof(request.Scopes), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Scopes));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pUpdates, permission, DocConstantModelName.TEAM, nameof(request.Updates)))
            {
                if (true == pUpdates?.Any() )
                {
                    var requestedUpdates = pUpdates.Select(p => p.Id).Distinct().ToList();
                    var existsUpdates = Execute.SelectAll<DocEntityUpdate>().Where(e => e.Id.In(requestedUpdates)).Select( e => e.Id ).ToList();
                    if (existsUpdates.Count != requestedUpdates.Count)
                    {
                        var nonExists = requestedUpdates.Where(id => existsUpdates.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Updates with objects that do not exist. No matching Updates(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedUpdates.Where(id => entity.Updates.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityUpdate.GetUpdate(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Team), columnName: nameof(request.Updates)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Updates)} to {nameof(Team)}");
                        entity.Updates.Add(target);
                    });
                    var toRemove = entity.Updates.Where(e => requestedUpdates.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityUpdate.GetUpdate(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Team), columnName: nameof(request.Updates)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Updates)} from {nameof(Team)}");
                        entity.Updates.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Updates.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityUpdate.GetUpdate(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Team), columnName: nameof(request.Updates)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Updates)} from {nameof(Team)}");
                        entity.Updates.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pUpdates, nameof(request.Updates)) && !request.VisibleFields.Matches(nameof(request.Updates), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Updates));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pUsers, permission, DocConstantModelName.TEAM, nameof(request.Users)))
            {
                if (true == pUsers?.Any() )
                {
                    var requestedUsers = pUsers.Select(p => p.Id).Distinct().ToList();
                    var existsUsers = Execute.SelectAll<DocEntityUser>().Where(e => e.Id.In(requestedUsers)).Select( e => e.Id ).ToList();
                    if (existsUsers.Count != requestedUsers.Count)
                    {
                        var nonExists = requestedUsers.Where(id => existsUsers.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Users with objects that do not exist. No matching Users(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedUsers.Where(id => entity.Users.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityUser.GetUser(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Team), columnName: nameof(request.Users)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Users)} to {nameof(Team)}");
                        entity.Users.Add(target);
                    });
                    var toRemove = entity.Users.Where(e => requestedUsers.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityUser.GetUser(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Team), columnName: nameof(request.Users)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Users)} from {nameof(Team)}");
                        entity.Users.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Users.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityUser.GetUser(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Team), columnName: nameof(request.Users)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Users)} from {nameof(Team)}");
                        entity.Users.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pUsers, nameof(request.Users)) && !request.VisibleFields.Matches(nameof(request.Users), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Users));
                }
            }
            DocPermissionFactory.SetVisibleFields<Team>(currentUser, nameof(Team), request.VisibleFields);
            ret = entity.ToDto();

            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.TEAM);

            return ret;
        }
        public Team Post(Team request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            Team ret = null;

            Execute.Run(ssn =>
            {
                if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "Team")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
            });

            return ret;
        }
   
        public List<Team> Post(TeamBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Team>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as Team;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Team Post(TeamCopy request)
        {
            Team ret = null;
            Execute.Run(ssn =>
            {
                var entity = DocEntityTeam.GetTeam(request?.Id);
                if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");
                
                    var pAdminRoles = entity.AdminRoles.ToList();
                    var pDescription = entity.Description;
                    if(!DocTools.IsNullOrEmpty(pDescription))
                        pDescription += " (Copy)";
                    var pEmail = entity.Email;
                    if(!DocTools.IsNullOrEmpty(pEmail))
                        pEmail += " (Copy)";
                    var pIsInternal = entity.IsInternal;
                    var pName = entity.Name;
                    if(!DocTools.IsNullOrEmpty(pName))
                        pName += " (Copy)";
                    var pOwner = entity.Owner;
                    var pScopes = entity.Scopes.ToList();
                    var pSettings = entity.Settings;
                    var pSlack = entity.Slack;
                    if(!DocTools.IsNullOrEmpty(pSlack))
                        pSlack += " (Copy)";
                    var pUpdates = entity.Updates.ToList();
                    var pUsers = entity.Users.ToList();
                #region Custom Before copyTeam
                #endregion Custom Before copyTeam
                var copy = new DocEntityTeam(ssn)
                {
                    Hash = Guid.NewGuid()
                                , Description = pDescription
                                , Email = pEmail
                                , IsInternal = pIsInternal
                                , Name = pName
                                , Owner = pOwner
                                , Settings = pSettings
                                , Slack = pSlack
                };
                            foreach(var item in pAdminRoles)
                            {
                                entity.AdminRoles.Add(item);
                            }

                            foreach(var item in pScopes)
                            {
                                entity.Scopes.Add(item);
                            }

                            foreach(var item in pUpdates)
                            {
                                entity.Updates.Add(item);
                            }

                            foreach(var item in pUsers)
                            {
                                entity.Users.Add(item);
                            }

                #region Custom After copyTeam
                #endregion Custom After copyTeam
                copy.SaveChanges(DocConstantPermission.ADD);
                ret = copy.ToDto();
            });
            return ret;
        }


        public List<Team> Put(TeamBatch request)
        {
            return Patch(request);
        }

        public Team Put(Team request)
        {
            return Patch(request);
        }

        public List<Team> Patch(TeamBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Team>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as Team;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Team Patch(Team request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the Team to patch.");
            
            request.VisibleFields = request.VisibleFields ?? new List<string>();
            
            Team ret = null;
            Execute.Run(ssn =>
            {
                ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
            });
            return ret;
        }

        public void Delete(TeamBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    Delete(dto);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{request.Count-errors.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
        }

        public void Delete(Team request)
        {
            Execute.Run(ssn =>
            {
                if(!(request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, $"No Id provided for delete.");

                DocCacheClient.RemoveSearch(DocConstantModelName.TEAM);
                DocCacheClient.RemoveById(request.Id);
                var en = DocEntityTeam.GetTeam(request?.Id);

                if(null == en) throw new HttpError(HttpStatusCode.NotFound, $"No Team could be found for Id {request?.Id}.");
                if(en.IsRemoved) return;
                
                if(!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.DELETE))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have DELETE permission for this route.");
                
                en.Remove();
            });
        }

        public void Delete(TeamSearch request)
        {
            var matches = Get(request) as List<Team>;
            if(true != matches?.Any()) throw new HttpError(HttpStatusCode.NotFound, "No matches for request");

            Execute.Run(ssn =>
            {
                matches.ForEach(match =>
                {
                    Delete(match);
                });
            });
        }
        public object Get(TeamJunction request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            object ret = null;
            var skip = (request.Skip > 0) ? request.Skip.Value : 0;
            var take = (request.Take > 0) ? request.Take.Value : int.MaxValue;
                        
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-1]?.ToLower().Trim();
            Execute.Run( s => 
            {
                switch(method)
                {
                case "role":
                    ret = _GetTeamRole(request, skip, take);
                    break;
                case "scope":
                    ret = _GetTeamScope(request, skip, take);
                    break;
                case "update":
                    ret = _GetTeamUpdate(request, skip, take);
                    break;
                case "user":
                    ret = _GetTeamUser(request, skip, take);
                    break;
                }
            });
            return ret;
        }
        
        public object Get(TeamJunctionVersion request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
            
            var info = Request.PathInfo.Split('?')[0].Split('/');
            var method = info[info.Length-2]?.ToLower().Trim();
            Execute.Run( ssn =>
            {
                switch(method)
                {
                case "role":
                    ret = GetTeamRoleVersion(request);
                    break;
                case "scope":
                    ret = GetTeamScopeVersion(request);
                    break;
                case "update":
                    ret = GetTeamUpdateVersion(request);
                    break;
                case "user":
                    ret = GetTeamUserVersion(request);
                    break;
                }
            });
            return ret;
        }
        

        private object _GetTeamRole(TeamJunction request, int skip, int take)
        {
             request.VisibleFields = InitVisibleFields<Role>(Dto.Role.Fields, request.VisibleFields);
             var en = DocEntityTeam.GetTeam(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.TEAM, columnName: "AdminRoles", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Team and Role");
             return en?.AdminRoles.Take(take).Skip(skip).ConvertFromEntityList<DocEntityRole,Role>(new List<Role>());
        }

        private List<Version> GetTeamRoleVersion(TeamJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityTeam.GetTeam(request.Id);
                ret = en?.AdminRoles.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetTeamScope(TeamJunction request, int skip, int take)
        {
             request.VisibleFields = InitVisibleFields<Scope>(Dto.Scope.Fields, request.VisibleFields);
             var en = DocEntityTeam.GetTeam(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.TEAM, columnName: "Scopes", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Team and Scope");
             return en?.Scopes.Take(take).Skip(skip).ConvertFromEntityList<DocEntityScope,Scope>(new List<Scope>());
        }

        private List<Version> GetTeamScopeVersion(TeamJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityTeam.GetTeam(request.Id);
                ret = en?.Scopes.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetTeamUpdate(TeamJunction request, int skip, int take)
        {
             request.VisibleFields = InitVisibleFields<Update>(Dto.Update.Fields, request.VisibleFields);
             var en = DocEntityTeam.GetTeam(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.TEAM, columnName: "Updates", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Team and Update");
             return en?.Updates.Take(take).Skip(skip).ConvertFromEntityList<DocEntityUpdate,Update>(new List<Update>());
        }

        private List<Version> GetTeamUpdateVersion(TeamJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityTeam.GetTeam(request.Id);
                ret = en?.Updates.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }

        private object _GetTeamUser(TeamJunction request, int skip, int take)
        {
             request.VisibleFields = InitVisibleFields<User>(Dto.User.Fields, request.VisibleFields);
             var en = DocEntityTeam.GetTeam(request.Id);
             if (!DocPermissionFactory.HasPermission(en, currentUser, DocConstantPermission.VIEW, targetName: DocConstantModelName.TEAM, columnName: "Users", targetEntity: null))
                 throw new HttpError(HttpStatusCode.Forbidden, "You do not have View permission to relationships between Team and User");
             return en?.Users.Take(take).Skip(skip).ConvertFromEntityList<DocEntityUser,User>(new List<User>());
        }

        private List<Version> GetTeamUserVersion(TeamJunctionVersion request)
        { 
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            var ret = new List<Version>();
             Execute.Run((ssn) =>
             {
                var en = DocEntityTeam.GetTeam(request.Id);
                ret = en?.Users.Select(e => new Version(e.Id, e.VersionNo)).ToList();
             });
            return ret;
        }
        
        public object Post(TeamJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                case "role":
                    ret = _PostTeamRole(request);
                    break;
                case "scope":
                    ret = _PostTeamScope(request);
                    break;
                case "update":
                    ret = _PostTeamUpdate(request);
                    break;
                case "user":
                    ret = _PostTeamUser(request);
                    break;
                }
            });
            return ret;
        }


        private object _PostTeamRole(TeamJunction request)
        {
            var entity = DocEntityTeam.GetTeam(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Team found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Team");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityRole.GetRole(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.ROLE, columnName: "AdminRoles")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the AdminRoles property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Team with objects that do not exist. No matching Role could be found for {id}.");
                entity.AdminRoles.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostTeamScope(TeamJunction request)
        {
            var entity = DocEntityTeam.GetTeam(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Team found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Team");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityScope.GetScope(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.SCOPE, columnName: "Scopes")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Scopes property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Team with objects that do not exist. No matching Scope could be found for {id}.");
                entity.Scopes.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostTeamUpdate(TeamJunction request)
        {
            var entity = DocEntityTeam.GetTeam(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Team found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Team");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityUpdate.GetUpdate(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.UPDATE, columnName: "Updates")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Updates property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Team with objects that do not exist. No matching Update could be found for {id}.");
                entity.Updates.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostTeamUser(TeamJunction request)
        {
            var entity = DocEntityTeam.GetTeam(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Team found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Team");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityUser.GetUser(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.USER, columnName: "Users")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Users property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Team with objects that do not exist. No matching User could be found for {id}.");
                entity.Users.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        public object Delete(TeamJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                var info = Request.PathInfo.Split('/');
                var method = info[info.Length-1];
                switch(method)
                {
                case "role":
                    ret = _DeleteTeamRole(request);
                    break;
                case "scope":
                    ret = _DeleteTeamScope(request);
                    break;
                case "update":
                    ret = _DeleteTeamUpdate(request);
                    break;
                case "user":
                    ret = _DeleteTeamUser(request);
                    break;
                }
            });
            return ret;
        }


        private object _DeleteTeamRole(TeamJunction request)
        {
            var entity = DocEntityTeam.GetTeam(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Team found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Team");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityRole.GetRole(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.ROLE, columnName: "AdminRoles"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Team and Role");
                if(null != relationship && false == relationship.IsRemoved) entity.AdminRoles.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteTeamScope(TeamJunction request)
        {
            var entity = DocEntityTeam.GetTeam(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Team found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Team");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityScope.GetScope(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.SCOPE, columnName: "Scopes"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Team and Scope");
                if(null != relationship && false == relationship.IsRemoved) entity.Scopes.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteTeamUpdate(TeamJunction request)
        {
            var entity = DocEntityTeam.GetTeam(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Team found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Team");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityUpdate.GetUpdate(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.UPDATE, columnName: "Updates"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Team and Update");
                if(null != relationship && false == relationship.IsRemoved) entity.Updates.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteTeamUser(TeamJunction request)
        {
            var entity = DocEntityTeam.GetTeam(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Team found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Team");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityUser.GetUser(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.USER, columnName: "Users"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Team and User");
                if(null != relationship && false == relationship.IsRemoved) entity.Users.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private Team GetTeam(Team request)
        {
            var id = request?.Id;
            Team ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<Team>(currentUser, "Team", request.VisibleFields);

            DocEntityTeam entity = null;
            if(id.HasValue)
            {
                entity = DocEntityTeam.GetTeam(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Team found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }

        public List<int> Any(TeamIds request)
        {
            List<int> ret = null;
            if (currentUser.IsSuperAdmin)
            {
                Execute.Run(s => { ret = Execute.SelectAll<DocEntityTeam>().Select(d => d.Id).ToList(); });
            }
            else
            {
                throw new HttpError(HttpStatusCode.Forbidden);
            }

            return ret;
        }
    }
}