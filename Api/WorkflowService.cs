//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;

using Services.Core;
using Services.Db;
using Services.Dto;
using Services.Enums;
using Services.Models;
using Services.Schema;

using Typed;
using Typed.Bindings;
using Typed.Notifications;
using Typed.Settings;

using ServiceStack;
using ServiceStack.Text;

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web;

using Xtensive.Orm;
using Xtensive.Orm.Model;

using Attribute = Services.Dto.Attribute;
using ValueType = Services.Dto.ValueType;
using Version = Services.Dto.Version;

namespace Services.API
{
    public partial class WorkflowService : DocServiceBase
    {
        private IQueryable<DocEntityWorkflow> _ExecSearch(WorkflowSearch request)
        {
            request = InitSearch<Workflow, WorkflowSearch>(request);
            IQueryable<DocEntityWorkflow> entities = null;
            Execute.Run( session => 
            {
                entities = Execute.SelectAll<DocEntityWorkflow>();
                if(!DocTools.IsNullOrEmpty(request.FullTextSearch))
                {
                    var fts = new WorkflowFullTextSearch(request);
                    entities = GetFullTextSearch<DocEntityWorkflow,WorkflowFullTextSearch>(fts, entities);
                }

                if(null != request.Ids && request.Ids.Any())
                    entities = entities.Where(en => en.Id.In(request.Ids));

                if (!DocTools.IsNullOrEmpty(request.Updated))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated.Value.Date == request.Updated.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.UpdatedBefore))
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated <= request.UpdatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.UpdatedAfter ) )
                {
                    entities = entities.Where(e => null != e.Updated && e.Updated >= request.UpdatedAfter);
                }
                if (!DocTools.IsNullOrEmpty(request.Created))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created.Value.Date == request.Created.Value.Date);
                }
                if (!DocTools.IsNullOrEmpty(request.CreatedBefore))
                {
                    entities = entities.Where(e => null!= e.Created && e.Created <= request.CreatedBefore);
                }
                if( !DocTools.IsNullOrEmpty( request.CreatedAfter ) )
                {
                    entities = entities.Where(e => null!= e.Created && e.Created >= request.CreatedAfter);
                }

                if(request.Archived.HasValue)
                    entities = entities.Where(en => request.Archived.Value == en.Archived);
                        if(true == request.BindingsIds?.Any())
                        {
                            entities = entities.Where(en => en.Bindings.Any(r => r.Id.In(request.BindingsIds)));
                        }
                        if(true == request.CommentsIds?.Any())
                        {
                            entities = entities.Where(en => en.Comments.Any(r => r.Id.In(request.CommentsIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.Description))
                    entities = entities.Where(en => en.Description.Contains(request.Description));
                        if(true == request.DocumentsIds?.Any())
                        {
                            entities = entities.Where(en => en.Documents.Any(r => r.Id.In(request.DocumentsIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.Name))
                    entities = entities.Where(en => en.Name.Contains(request.Name));
                if(!DocTools.IsNullOrEmpty(request.Owner) && !DocTools.IsNullOrEmpty(request.Owner.Id))
                {
                    entities = entities.Where(en => en.Owner.Id == request.Owner.Id );
                }
                if(true == request.OwnerIds?.Any())
                {
                    entities = entities.Where(en => en.Owner.Id.In(request.OwnerIds));
                }
                        if(true == request.ScopesIds?.Any())
                        {
                            entities = entities.Where(en => en.Scopes.Any(r => r.Id.In(request.ScopesIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.Status) && !DocTools.IsNullOrEmpty(request.Status.Id))
                {
                    entities = entities.Where(en => en.Status.Id == request.Status.Id );
                }
                if(true == request.StatusIds?.Any())
                {
                    entities = entities.Where(en => en.Status.Id.In(request.StatusIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.Status) && !DocTools.IsNullOrEmpty(request.Status.Name))
                {
                    entities = entities.Where(en => en.Status.Name == request.Status.Name );
                }
                if(true == request.StatusNames?.Any())
                {
                    entities = entities.Where(en => en.Status.Name.In(request.StatusNames));
                }
                        if(true == request.TagsIds?.Any())
                        {
                            entities = entities.Where(en => en.Tags.Any(r => r.Id.In(request.TagsIds)));
                        }
                        if(true == request.TasksIds?.Any())
                        {
                            entities = entities.Where(en => en.Tasks.Any(r => r.Id.In(request.TasksIds)));
                        }
                if(!DocTools.IsNullOrEmpty(request.Type) && !DocTools.IsNullOrEmpty(request.Type.Id))
                {
                    entities = entities.Where(en => en.Type.Id == request.Type.Id );
                }
                if(true == request.TypeIds?.Any())
                {
                    entities = entities.Where(en => en.Type.Id.In(request.TypeIds));
                }
                else if(!DocTools.IsNullOrEmpty(request.Type) && !DocTools.IsNullOrEmpty(request.Type.Name))
                {
                    entities = entities.Where(en => en.Type.Name == request.Type.Name );
                }
                if(true == request.TypeNames?.Any())
                {
                    entities = entities.Where(en => en.Type.Name.In(request.TypeNames));
                }
                if(!DocTools.IsNullOrEmpty(request.User) && !DocTools.IsNullOrEmpty(request.User.Id))
                {
                    entities = entities.Where(en => en.User.Id == request.User.Id );
                }
                if(true == request.UserIds?.Any())
                {
                    entities = entities.Where(en => en.User.Id.In(request.UserIds));
                }
                        if(true == request.VariablesIds?.Any())
                        {
                            entities = entities.Where(en => en.Variables.Any(r => r.Id.In(request.VariablesIds)));
                        }
                        if(true == request.WorkflowsIds?.Any())
                        {
                            entities = entities.Where(en => en.Workflows.Any(r => r.Id.In(request.WorkflowsIds)));
                        }

                entities = ApplyFilters<DocEntityWorkflow,WorkflowSearch>(request, entities);

                if(request.Skip > 0)
                    entities = entities.Skip(request.Skip.Value);
                if(request.Take > 0)
                    entities = entities.Take(request.Take.Value);
                if(true == request?.OrderBy?.Any())
                    entities = entities.OrderBy(request.OrderBy);
                if(true == request?.OrderByDesc?.Any())
                    entities = entities.OrderByDescending(request.OrderByDesc);
            });
            return entities;
        }

        public object Post(WorkflowSearch request) => Get(request);

        public object Get(WorkflowSearch request) => GetSearchResultWithCache<Workflow,DocEntityWorkflow,WorkflowSearch>(DocConstantModelName.WORKFLOW, request, _ExecSearch);

        public object Get(Workflow request) => GetEntityWithCache<Workflow>(DocConstantModelName.WORKFLOW, request, GetWorkflow);
        private Workflow _AssignValues(Workflow request, DocConstantPermission permission, Session session)
        {
            if(permission != DocConstantPermission.ADD && (request == null || request.Id <= 0))
                throw new HttpError(HttpStatusCode.NotFound, $"No record");

            if(permission == DocConstantPermission.ADD && !DocPermissionFactory.HasPermissionTryAdd(currentUser, "Workflow"))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            Workflow ret = null;
            request = _InitAssignValues<Workflow>(request, permission, session);
            //In case init assign handles create for us, return it
            if(permission == DocConstantPermission.ADD && request.Id > 0) return request;
            
            var cacheKey = GetApiCacheKey<Workflow>(DocConstantModelName.WORKFLOW, nameof(Workflow), request);
            
            //First, assign all the variables, do database lookups and conversions
            var pArchived = request.Archived;
            var pBindings = request.Bindings?.ToList();
            var pComments = request.Comments?.ToList();
            var pData = request.Data;
            var pDescription = request.Description;
            var pDocuments = request.Documents?.ToList();
            var pName = request.Name;
            var pOwner = (request.Owner?.Id > 0) ? DocEntityWorkflow.GetWorkflow(request.Owner.Id) : null;
            var pScopes = request.Scopes?.ToList();
            DocEntityLookupTable pStatus = GetLookup(DocConstantLookupTable.WORKFLOWSTATUS, request.Status?.Name, request.Status?.Id);
            var pTags = request.Tags?.ToList();
            var pTasks = request.Tasks?.ToList();
            DocEntityLookupTable pType = GetLookup(DocConstantLookupTable.WORKFLOW, request.Type?.Name, request.Type?.Id);
            var pUser = (request.User?.Id > 0) ? DocEntityUser.GetUser(request.User.Id) : null;
            var pVariables = request.Variables?.ToList();
            var pWorkflows = request.Workflows?.ToList();

            DocEntityWorkflow entity = null;
            if(permission == DocConstantPermission.ADD)
            {
                var now = DateTime.UtcNow;
                entity = new DocEntityWorkflow(session)
                {
                    Created = now,
                    Updated = now
                };
            }
            else
            {
                entity = DocEntityWorkflow.GetWorkflow(request.Id);
                if(null == entity)
                    throw new HttpError(HttpStatusCode.NotFound, $"No record");
            }

            if (DocPermissionFactory.IsRequestedHasPermission<bool?>(currentUser, request, pArchived, permission, DocConstantModelName.WORKFLOW, nameof(request.Archived)))
            {
                if(DocPermissionFactory.IsRequested(request, pArchived, entity.Archived, nameof(request.Archived)))
                    entity.Archived = pArchived;
                if(DocPermissionFactory.IsRequested<bool?>(request, pArchived, nameof(request.Archived)) && !request.VisibleFields.Matches(nameof(request.Archived), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Archived));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pData, permission, DocConstantModelName.WORKFLOW, nameof(request.Data)))
            {
                if(DocPermissionFactory.IsRequested(request, pData, entity.Data, nameof(request.Data)))
                    entity.Data = pData;
                if(DocPermissionFactory.IsRequested<string>(request, pData, nameof(request.Data)) && !request.VisibleFields.Matches(nameof(request.Data), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Data));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pDescription, permission, DocConstantModelName.WORKFLOW, nameof(request.Description)))
            {
                if(DocPermissionFactory.IsRequested(request, pDescription, entity.Description, nameof(request.Description)))
                    entity.Description = pDescription;
                if(DocPermissionFactory.IsRequested<string>(request, pDescription, nameof(request.Description)) && !request.VisibleFields.Matches(nameof(request.Description), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Description));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<string>(currentUser, request, pName, permission, DocConstantModelName.WORKFLOW, nameof(request.Name)))
            {
                if(DocPermissionFactory.IsRequested(request, pName, entity.Name, nameof(request.Name)))
                    entity.Name = pName;
                if(DocPermissionFactory.IsRequested<string>(request, pName, nameof(request.Name)) && !request.VisibleFields.Matches(nameof(request.Name), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Name));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityWorkflow>(currentUser, request, pOwner, permission, DocConstantModelName.WORKFLOW, nameof(request.Owner)))
            {
                if(DocPermissionFactory.IsRequested(request, pOwner, entity.Owner, nameof(request.Owner)))
                    entity.Owner = pOwner;
                if(DocPermissionFactory.IsRequested<DocEntityWorkflow>(request, pOwner, nameof(request.Owner)) && !request.VisibleFields.Matches(nameof(request.Owner), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Owner));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, request, pStatus, permission, DocConstantModelName.WORKFLOW, nameof(request.Status)))
            {
                if(DocPermissionFactory.IsRequested(request, pStatus, entity.Status, nameof(request.Status)))
                    entity.Status = pStatus;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(request, pStatus, nameof(request.Status)) && !request.VisibleFields.Matches(nameof(request.Status), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Status));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityLookupTable>(currentUser, request, pType, permission, DocConstantModelName.WORKFLOW, nameof(request.Type)))
            {
                if(DocPermissionFactory.IsRequested(request, pType, entity.Type, nameof(request.Type)))
                    entity.Type = pType;
                if(DocPermissionFactory.IsRequested<DocEntityLookupTable>(request, pType, nameof(request.Type)) && !request.VisibleFields.Matches(nameof(request.Type), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Type));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<DocEntityUser>(currentUser, request, pUser, permission, DocConstantModelName.WORKFLOW, nameof(request.User)))
            {
                if(DocPermissionFactory.IsRequested(request, pUser, entity.User, nameof(request.User)))
                    if (DocConstantPermission.ADD != permission) throw new HttpError(HttpStatusCode.Forbidden, $"{nameof(request.User)} cannot be modified once set.");
                    entity.User = pUser;
                if(DocPermissionFactory.IsRequested<DocEntityUser>(request, pUser, nameof(request.User)) && !request.VisibleFields.Matches(nameof(request.User), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.User));
                }
            }
            
            if (request.Locked) entity.Locked = request.Locked;

            entity.SaveChanges(permission);
            
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pBindings, permission, DocConstantModelName.WORKFLOW, nameof(request.Bindings)))
            {
                if (true == pBindings?.Any() )
                {
                    var requestedBindings = pBindings.Select(p => p.Id).Distinct().ToList();
                    var existsBindings = Execute.SelectAll<DocEntityLookupTableBinding>().Where(e => e.Id.In(requestedBindings)).Select( e => e.Id ).ToList();
                    if (existsBindings.Count != requestedBindings.Count)
                    {
                        var nonExists = requestedBindings.Where(id => existsBindings.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Bindings with objects that do not exist. No matching Bindings(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedBindings.Where(id => entity.Bindings.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityLookupTableBinding.GetLookupTableBinding(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Bindings)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Bindings)} to {nameof(Workflow)}");
                        entity.Bindings.Add(target);
                    });
                    var toRemove = entity.Bindings.Where(e => requestedBindings.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityLookupTableBinding.GetLookupTableBinding(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Bindings)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Bindings)} from {nameof(Workflow)}");
                        entity.Bindings.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Bindings.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityLookupTableBinding.GetLookupTableBinding(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Bindings)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Bindings)} from {nameof(Workflow)}");
                        entity.Bindings.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pBindings, nameof(request.Bindings)) && !request.VisibleFields.Matches(nameof(request.Bindings), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Bindings));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pComments, permission, DocConstantModelName.WORKFLOW, nameof(request.Comments)))
            {
                if (true == pComments?.Any() )
                {
                    var requestedComments = pComments.Select(p => p.Id).Distinct().ToList();
                    var existsComments = Execute.SelectAll<DocEntityWorkflowComment>().Where(e => e.Id.In(requestedComments)).Select( e => e.Id ).ToList();
                    if (existsComments.Count != requestedComments.Count)
                    {
                        var nonExists = requestedComments.Where(id => existsComments.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Comments with objects that do not exist. No matching Comments(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedComments.Where(id => entity.Comments.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityWorkflowComment.GetWorkflowComment(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Comments)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Comments)} to {nameof(Workflow)}");
                        entity.Comments.Add(target);
                    });
                    var toRemove = entity.Comments.Where(e => requestedComments.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityWorkflowComment.GetWorkflowComment(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Comments)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Comments)} from {nameof(Workflow)}");
                        entity.Comments.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Comments.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityWorkflowComment.GetWorkflowComment(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Comments)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Comments)} from {nameof(Workflow)}");
                        entity.Comments.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pComments, nameof(request.Comments)) && !request.VisibleFields.Matches(nameof(request.Comments), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Comments));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pDocuments, permission, DocConstantModelName.WORKFLOW, nameof(request.Documents)))
            {
                if (true == pDocuments?.Any() )
                {
                    var requestedDocuments = pDocuments.Select(p => p.Id).Distinct().ToList();
                    var existsDocuments = Execute.SelectAll<DocEntityDocument>().Where(e => e.Id.In(requestedDocuments)).Select( e => e.Id ).ToList();
                    if (existsDocuments.Count != requestedDocuments.Count)
                    {
                        var nonExists = requestedDocuments.Where(id => existsDocuments.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Documents with objects that do not exist. No matching Documents(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedDocuments.Where(id => entity.Documents.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityDocument.GetDocument(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Documents)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Documents)} to {nameof(Workflow)}");
                        entity.Documents.Add(target);
                    });
                    var toRemove = entity.Documents.Where(e => requestedDocuments.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocument.GetDocument(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Documents)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Documents)} from {nameof(Workflow)}");
                        entity.Documents.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Documents.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityDocument.GetDocument(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Documents)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Documents)} from {nameof(Workflow)}");
                        entity.Documents.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pDocuments, nameof(request.Documents)) && !request.VisibleFields.Matches(nameof(request.Documents), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Documents));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pScopes, permission, DocConstantModelName.WORKFLOW, nameof(request.Scopes)))
            {
                if (true == pScopes?.Any() )
                {
                    var requestedScopes = pScopes.Select(p => p.Id).Distinct().ToList();
                    var existsScopes = Execute.SelectAll<DocEntityScope>().Where(e => e.Id.In(requestedScopes)).Select( e => e.Id ).ToList();
                    if (existsScopes.Count != requestedScopes.Count)
                    {
                        var nonExists = requestedScopes.Where(id => existsScopes.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Scopes with objects that do not exist. No matching Scopes(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedScopes.Where(id => entity.Scopes.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityScope.GetScope(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Scopes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Scopes)} to {nameof(Workflow)}");
                        entity.Scopes.Add(target);
                    });
                    var toRemove = entity.Scopes.Where(e => requestedScopes.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityScope.GetScope(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Scopes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Scopes)} from {nameof(Workflow)}");
                        entity.Scopes.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Scopes.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityScope.GetScope(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Scopes)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Scopes)} from {nameof(Workflow)}");
                        entity.Scopes.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pScopes, nameof(request.Scopes)) && !request.VisibleFields.Matches(nameof(request.Scopes), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Scopes));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pTags, permission, DocConstantModelName.WORKFLOW, nameof(request.Tags)))
            {
                if (true == pTags?.Any() )
                {
                    var requestedTags = pTags.Select(p => p.Id).Distinct().ToList();
                    var existsTags = Execute.SelectAll<DocEntityTag>().Where(e => e.Id.In(requestedTags)).Select( e => e.Id ).ToList();
                    if (existsTags.Count != requestedTags.Count)
                    {
                        var nonExists = requestedTags.Where(id => existsTags.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Tags with objects that do not exist. No matching Tags(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedTags.Where(id => entity.Tags.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityTag.GetTag(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Tags)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Tags)} to {nameof(Workflow)}");
                        entity.Tags.Add(target);
                    });
                    var toRemove = entity.Tags.Where(e => requestedTags.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTag.GetTag(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Tags)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Tags)} from {nameof(Workflow)}");
                        entity.Tags.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Tags.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityTag.GetTag(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Tags)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Tags)} from {nameof(Workflow)}");
                        entity.Tags.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pTags, nameof(request.Tags)) && !request.VisibleFields.Matches(nameof(request.Tags), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Tags));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pTasks, permission, DocConstantModelName.WORKFLOW, nameof(request.Tasks)))
            {
                if (true == pTasks?.Any() )
                {
                    var requestedTasks = pTasks.Select(p => p.Id).Distinct().ToList();
                    var existsTasks = Execute.SelectAll<DocEntityWorkflowTask>().Where(e => e.Id.In(requestedTasks)).Select( e => e.Id ).ToList();
                    if (existsTasks.Count != requestedTasks.Count)
                    {
                        var nonExists = requestedTasks.Where(id => existsTasks.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Tasks with objects that do not exist. No matching Tasks(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedTasks.Where(id => entity.Tasks.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityWorkflowTask.GetWorkflowTask(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Tasks)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Tasks)} to {nameof(Workflow)}");
                        entity.Tasks.Add(target);
                    });
                    var toRemove = entity.Tasks.Where(e => requestedTasks.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityWorkflowTask.GetWorkflowTask(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Tasks)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Tasks)} from {nameof(Workflow)}");
                        entity.Tasks.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Tasks.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityWorkflowTask.GetWorkflowTask(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Tasks)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Tasks)} from {nameof(Workflow)}");
                        entity.Tasks.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pTasks, nameof(request.Tasks)) && !request.VisibleFields.Matches(nameof(request.Tasks), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Tasks));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pVariables, permission, DocConstantModelName.WORKFLOW, nameof(request.Variables)))
            {
                if (true == pVariables?.Any() )
                {
                    var requestedVariables = pVariables.Select(p => p.Id).Distinct().ToList();
                    var existsVariables = Execute.SelectAll<DocEntityVariableInstance>().Where(e => e.Id.In(requestedVariables)).Select( e => e.Id ).ToList();
                    if (existsVariables.Count != requestedVariables.Count)
                    {
                        var nonExists = requestedVariables.Where(id => existsVariables.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Variables with objects that do not exist. No matching Variables(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedVariables.Where(id => entity.Variables.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityVariableInstance.GetVariableInstance(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Variables)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Variables)} to {nameof(Workflow)}");
                        entity.Variables.Add(target);
                    });
                    var toRemove = entity.Variables.Where(e => requestedVariables.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityVariableInstance.GetVariableInstance(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Variables)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Variables)} from {nameof(Workflow)}");
                        entity.Variables.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Variables.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityVariableInstance.GetVariableInstance(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Variables)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Variables)} from {nameof(Workflow)}");
                        entity.Variables.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pVariables, nameof(request.Variables)) && !request.VisibleFields.Matches(nameof(request.Variables), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Variables));
                }
            }
            if (DocPermissionFactory.IsRequestedHasPermission<List<Reference>>(currentUser, request, pWorkflows, permission, DocConstantModelName.WORKFLOW, nameof(request.Workflows)))
            {
                if (true == pWorkflows?.Any() )
                {
                    var requestedWorkflows = pWorkflows.Select(p => p.Id).Distinct().ToList();
                    var existsWorkflows = Execute.SelectAll<DocEntityWorkflow>().Where(e => e.Id.In(requestedWorkflows)).Select( e => e.Id ).ToList();
                    if (existsWorkflows.Count != requestedWorkflows.Count)
                    {
                        var nonExists = requestedWorkflows.Where(id => existsWorkflows.All(eId => eId != id));
                        throw new HttpError(HttpStatusCode.NotFound, $"Cannot patch collection Workflows with objects that do not exist. No matching Workflows(s) could be found for Ids: {nonExists.ToDelimitedString()}.");
                    }
                    var toAdd = requestedWorkflows.Where(id => entity.Workflows.All(e => e.Id != id)).ToList(); 
                    toAdd?.ForEach(id =>
                    {
                        var target = DocEntityWorkflow.GetWorkflow(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Workflows)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to add {nameof(request.Workflows)} to {nameof(Workflow)}");
                        entity.Workflows.Add(target);
                    });
                    var toRemove = entity.Workflows.Where(e => requestedWorkflows.All(id => e.Id != id)).Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityWorkflow.GetWorkflow(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Workflows)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Workflows)} from {nameof(Workflow)}");
                        entity.Workflows.Remove(target);
                    });
                }
                else
                {
                    var toRemove = entity.Workflows.Select(e => e.Id).ToList(); 
                    toRemove.ForEach(id =>
                    {
                        var target = DocEntityWorkflow.GetWorkflow(id);
                        if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: target, targetName: nameof(Workflow), columnName: nameof(request.Workflows)))
                            throw new HttpError(HttpStatusCode.Forbidden, "You do not have permission to remove {nameof(request.Workflows)} from {nameof(Workflow)}");
                        entity.Workflows.Remove(target);
                    });
                }
                if(DocPermissionFactory.IsRequested<List<Reference>>(request, pWorkflows, nameof(request.Workflows)) && !request.VisibleFields.Matches(nameof(request.Workflows), ignoreSpaces: true))
                {
                    request.VisibleFields.Add(nameof(request.Workflows));
                }
            }
            DocPermissionFactory.SetVisibleFields<Workflow>(currentUser, nameof(Workflow), request.VisibleFields);
            ret = entity.ToDto();

            DocCacheClient.Set(key: cacheKey, value: ret, entityId: request.Id, entityType: DocConstantModelName.WORKFLOW);

            return ret;
        }
        public Workflow Post(Workflow request)
        {
            if(request == null) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");

            request.VisibleFields = request.VisibleFields ?? new List<string>();

            Workflow ret = null;

            Execute.Run(ssn =>
            {
                if(!DocPermissionFactory.HasPermissionTryAdd(currentUser, "Workflow")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");

                ret = _AssignValues(request, DocConstantPermission.ADD, ssn);
            });

            return ret;
        }
   
        public List<Workflow> Post(WorkflowBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Workflow>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Post(dto) as Workflow;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"{obj.Id}";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = null;
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Workflow Post(WorkflowCopy request)
        {
            Workflow ret = null;
            Execute.Run(ssn =>
            {
                var entity = DocEntityWorkflow.GetWorkflow(request?.Id);
                if(null == entity) throw new HttpError(HttpStatusCode.NoContent, "The COPY request did not succeed.");
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have ADD permission for this route.");
                
                    var pArchived = entity.Archived;
                    var pBindings = entity.Bindings.ToList();
                    var pComments = entity.Comments.ToList();
                    var pData = entity.Data;
                    var pDescription = entity.Description;
                    if(!DocTools.IsNullOrEmpty(pDescription))
                        pDescription += " (Copy)";
                    var pDocuments = entity.Documents.ToList();
                    var pName = entity.Name;
                    if(!DocTools.IsNullOrEmpty(pName))
                        pName += " (Copy)";
                    var pOwner = entity.Owner;
                    var pScopes = entity.Scopes.ToList();
                    var pStatus = entity.Status;
                    var pTags = entity.Tags.ToList();
                    var pTasks = entity.Tasks.ToList();
                    var pType = entity.Type;
                    var pUser = entity.User;
                    var pVariables = entity.Variables.ToList();
                    var pWorkflows = entity.Workflows.ToList();
                #region Custom Before copyWorkflow
                #endregion Custom Before copyWorkflow
                var copy = new DocEntityWorkflow(ssn)
                {
                    Hash = Guid.NewGuid()
                                , Archived = pArchived
                                , Data = pData
                                , Description = pDescription
                                , Name = pName
                                , Owner = pOwner
                                , Status = pStatus
                                , Type = pType
                                , User = pUser
                };
                            foreach(var item in pBindings)
                            {
                                entity.Bindings.Add(item);
                            }

                            foreach(var item in pComments)
                            {
                                entity.Comments.Add(item);
                            }

                            foreach(var item in pDocuments)
                            {
                                entity.Documents.Add(item);
                            }

                            foreach(var item in pScopes)
                            {
                                entity.Scopes.Add(item);
                            }

                            foreach(var item in pTags)
                            {
                                entity.Tags.Add(item);
                            }

                            foreach(var item in pTasks)
                            {
                                entity.Tasks.Add(item);
                            }

                            foreach(var item in pVariables)
                            {
                                entity.Variables.Add(item);
                            }

                            foreach(var item in pWorkflows)
                            {
                                entity.Workflows.Add(item);
                            }

                #region Custom After copyWorkflow
                #endregion Custom After copyWorkflow
                copy.SaveChanges(DocConstantPermission.ADD);
                ret = copy.ToDto();
            });
            return ret;
        }


        public List<Workflow> Put(WorkflowBatch request)
        {
            return Patch(request);
        }

        public Workflow Put(Workflow request)
        {
            return Patch(request);
        }

        public List<Workflow> Patch(WorkflowBatch request)
        {
            if(true != request?.Any()) throw new HttpError(HttpStatusCode.NotFound, "Request cannot be empty.");

            var ret = new List<Workflow>();
            var errors = new List<ResponseError>();
            var errorMap = new Dictionary<string, string>();
            var i = 0;
            request.ForEach(dto =>
            {
                try
                {
                    var obj = Patch(dto) as Workflow;
                    ret.Add(obj);
                    errorMap[$"{i}"] = $"true";
                }
                catch (Exception ex)
                {
                    errorMap[$"{i}"] = $"false";
                    errors.Add(new ResponseError()
                    {
                        Message = $"{ex.Message}{Environment.NewLine}{ex.InnerException?.Message}",
                        ErrorCode = $"{i}"
                    });
                }
                i += 1;
            });
            base.Response.AddHeader("X-AutoBatch-Completed", $"{ret.Count} succeeded");
            if (errors.Any())
            {
                throw new HttpError(HttpStatusCode.BadRequest, $"{errors.Count} failed in batch")
                {
                    Response = new ErrorResponse()
                    {
                        ResponseStatus = new ResponseStatus
                        {
                            ErrorCode = nameof(HttpError),
                            Meta = errorMap,
                            Message = "Incomplete request",
                            Errors = errors
                        }
                    }
                };
            }
            return ret;
        }

        public Workflow Patch(Workflow request)
        {
            if(true != (request?.Id > 0)) throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the Workflow to patch.");
            
            request.VisibleFields = request.VisibleFields ?? new List<string>();
            
            Workflow ret = null;
            Execute.Run(ssn =>
            {
                ret = _AssignValues(request, DocConstantPermission.EDIT, ssn);
            });
            return ret;
        }

        public object Get(WorkflowJunction request)
        {
            if(!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Valid Id required.");
            object ret = null;
            Execute.Run( s => 
            {
                switch(request.Junction)
                {
                case "lookuptablebinding":
                    ret =     GetJunctionSearchResult<Workflow, DocEntityWorkflow, DocEntityLookupTableBinding, LookupTableBinding, LookupTableBindingSearch>((int)request.Id, DocConstantModelName.LOOKUPTABLEBINDING, "Bindings", request,
                            (ss) =>
                            { 
                                var service = HostContext.ResolveService<LookupTableBindingService>(Request);
                                return service.Get(ss);
                            });
                    break;
                case "workflowcomment":
                    ret =     GetJunctionSearchResult<Workflow, DocEntityWorkflow, DocEntityWorkflowComment, WorkflowComment, WorkflowCommentSearch>((int)request.Id, DocConstantModelName.WORKFLOWCOMMENT, "Comments", request,
                            (ss) =>
                            { 
                                var service = HostContext.ResolveService<WorkflowCommentService>(Request);
                                return service.Get(ss);
                            });
                    break;
                case "document":
                    ret =     GetJunctionSearchResult<Workflow, DocEntityWorkflow, DocEntityDocument, Document, DocumentSearch>((int)request.Id, DocConstantModelName.DOCUMENT, "Documents", request,
                            (ss) =>
                            { 
                                var service = HostContext.ResolveService<DocumentService>(Request);
                                return service.Get(ss);
                            });
                    break;
                case "scope":
                    ret =     GetJunctionSearchResult<Workflow, DocEntityWorkflow, DocEntityScope, Scope, ScopeSearch>((int)request.Id, DocConstantModelName.SCOPE, "Scopes", request,
                            (ss) =>
                            { 
                                var service = HostContext.ResolveService<ScopeService>(Request);
                                return service.Get(ss);
                            });
                    break;
                case "tag":
                    ret =     GetJunctionSearchResult<Workflow, DocEntityWorkflow, DocEntityTag, Tag, TagSearch>((int)request.Id, DocConstantModelName.TAG, "Tags", request,
                            (ss) =>
                            { 
                                var service = HostContext.ResolveService<TagService>(Request);
                                return service.Get(ss);
                            });
                    break;
                case "workflowtask":
                    ret =     GetJunctionSearchResult<Workflow, DocEntityWorkflow, DocEntityWorkflowTask, WorkflowTask, WorkflowTaskSearch>((int)request.Id, DocConstantModelName.WORKFLOWTASK, "Tasks", request,
                            (ss) =>
                            { 
                                var service = HostContext.ResolveService<WorkflowTaskService>(Request);
                                return service.Get(ss);
                            });
                    break;
                case "variableinstance":
                    ret =     GetJunctionSearchResult<Workflow, DocEntityWorkflow, DocEntityVariableInstance, VariableInstance, VariableInstanceSearch>((int)request.Id, DocConstantModelName.VARIABLEINSTANCE, "Variables", request,
                            (ss) =>
                            { 
                                var service = HostContext.ResolveService<VariableInstanceService>(Request);
                                return service.Get(ss);
                            });
                    break;
                case "workflow":
                    ret =     GetJunctionSearchResult<Workflow, DocEntityWorkflow, DocEntityWorkflow, Workflow, WorkflowSearch>((int)request.Id, DocConstantModelName.WORKFLOW, "Workflows", request,
                            (ss) =>
                            { 
                                var service = HostContext.ResolveService<WorkflowService>(Request);
                                return service.Get(ss);
                            });
                    break;
                    default:
                        throw new HttpError(HttpStatusCode.NotFound, $"Route for workflow/{request.Id}/{request.Junction} was not found");
                }
            });
            return ret;
        }


        public object Post(WorkflowJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                switch(request.Junction)
                {
                case "lookuptablebinding":
                    ret = _PostWorkflowLookupTableBinding(request);
                    break;
                case "workflowcomment":
                    ret = _PostWorkflowWorkflowComment(request);
                    break;
                case "document":
                    ret = _PostWorkflowDocument(request);
                    break;
                case "scope":
                    ret = _PostWorkflowScope(request);
                    break;
                case "tag":
                    ret = _PostWorkflowTag(request);
                    break;
                case "workflowtask":
                    ret = _PostWorkflowWorkflowTask(request);
                    break;
                case "variableinstance":
                    ret = _PostWorkflowVariableInstance(request);
                    break;
                case "workflow":
                    ret = _PostWorkflowWorkflow(request);
                    break;
                    default:
                        throw new HttpError(HttpStatusCode.NotFound, $"Route for workflow/{request.Id}/{request.Junction} was not found");
                }
            });
            return ret;
        }


        private object _PostWorkflowLookupTableBinding(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityLookupTableBinding.GetLookupTableBinding(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.LOOKUPTABLEBINDING, columnName: "Bindings")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Bindings property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Workflow with objects that do not exist. No matching LookupTableBinding could be found for {id}.");
                entity.Bindings.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostWorkflowWorkflowComment(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityWorkflowComment.GetWorkflowComment(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.WORKFLOWCOMMENT, columnName: "Comments")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Comments property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Workflow with objects that do not exist. No matching WorkflowComment could be found for {id}.");
                entity.Comments.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostWorkflowDocument(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityDocument.GetDocument(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.DOCUMENT, columnName: "Documents")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Documents property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Workflow with objects that do not exist. No matching Document could be found for {id}.");
                entity.Documents.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostWorkflowScope(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityScope.GetScope(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.SCOPE, columnName: "Scopes")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Scopes property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Workflow with objects that do not exist. No matching Scope could be found for {id}.");
                entity.Scopes.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostWorkflowTag(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityTag.GetTag(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.TAG, columnName: "Tags")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Tags property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Workflow with objects that do not exist. No matching Tag could be found for {id}.");
                entity.Tags.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostWorkflowWorkflowTask(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityWorkflowTask.GetWorkflowTask(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.WORKFLOWTASK, columnName: "Tasks")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Tasks property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Workflow with objects that do not exist. No matching WorkflowTask could be found for {id}.");
                entity.Tasks.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostWorkflowVariableInstance(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityVariableInstance.GetVariableInstance(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.VARIABLEINSTANCE, columnName: "Variables")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Variables property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Workflow with objects that do not exist. No matching VariableInstance could be found for {id}.");
                entity.Variables.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _PostWorkflowWorkflow(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity) throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");

            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");

            foreach (var id in request.Ids)
            {
                var relationship = DocEntityWorkflow.GetWorkflow(id);
                if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.ADD, targetEntity: relationship, targetName: DocConstantModelName.WORKFLOW, columnName: "Workflows")) 
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Add permission to the Workflows property.");
                if (null == relationship) throw new HttpError(HttpStatusCode.NotFound, $"Cannot post to collection of Workflow with objects that do not exist. No matching Workflow could be found for {id}.");
                entity.Workflows.Add(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        public object Delete(WorkflowJunction request)
        {
            if (request == null)
                throw new HttpError(HttpStatusCode.NotFound, "Request cannot be null.");
            if (!(request.Id > 0))
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid Id of the {className} to update.");
            if (request.Ids == null || request.Ids.Count < 1)
                throw new HttpError(HttpStatusCode.NotFound, "Please specify a valid list of {type} Ids.");

            object ret = null;

            Execute.Run( ssn =>
            {
                switch(request.Junction)
                {
                case "lookuptablebinding":
                    ret = _DeleteWorkflowLookupTableBinding(request);
                    break;
                case "workflowcomment":
                    ret = _DeleteWorkflowWorkflowComment(request);
                    break;
                case "document":
                    ret = _DeleteWorkflowDocument(request);
                    break;
                case "scope":
                    ret = _DeleteWorkflowScope(request);
                    break;
                case "tag":
                    ret = _DeleteWorkflowTag(request);
                    break;
                case "workflowtask":
                    ret = _DeleteWorkflowWorkflowTask(request);
                    break;
                case "variableinstance":
                    ret = _DeleteWorkflowVariableInstance(request);
                    break;
                case "workflow":
                    ret = _DeleteWorkflowWorkflow(request);
                    break;
                    default:
                        throw new HttpError(HttpStatusCode.NotFound, $"Route for workflow/{request.Id}/{request.Junction} was not found");
                }
            });
            return ret;
        }


        private object _DeleteWorkflowLookupTableBinding(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityLookupTableBinding.GetLookupTableBinding(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.LOOKUPTABLEBINDING, columnName: "Bindings"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Workflow and LookupTableBinding");
                if(null != relationship && false == relationship.IsRemoved) entity.Bindings.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteWorkflowWorkflowComment(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityWorkflowComment.GetWorkflowComment(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.WORKFLOWCOMMENT, columnName: "Comments"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Workflow and WorkflowComment");
                if(null != relationship && false == relationship.IsRemoved) entity.Comments.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteWorkflowDocument(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityDocument.GetDocument(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.DOCUMENT, columnName: "Documents"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Workflow and Document");
                if(null != relationship && false == relationship.IsRemoved) entity.Documents.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteWorkflowScope(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityScope.GetScope(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.SCOPE, columnName: "Scopes"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Workflow and Scope");
                if(null != relationship && false == relationship.IsRemoved) entity.Scopes.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteWorkflowTag(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityTag.GetTag(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.TAG, columnName: "Tags"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Workflow and Tag");
                if(null != relationship && false == relationship.IsRemoved) entity.Tags.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteWorkflowWorkflowTask(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityWorkflowTask.GetWorkflowTask(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.WORKFLOWTASK, columnName: "Tasks"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Workflow and WorkflowTask");
                if(null != relationship && false == relationship.IsRemoved) entity.Tasks.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteWorkflowVariableInstance(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityVariableInstance.GetVariableInstance(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.VARIABLEINSTANCE, columnName: "Variables"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Workflow and VariableInstance");
                if(null != relationship && false == relationship.IsRemoved) entity.Variables.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private object _DeleteWorkflowWorkflow(WorkflowJunction request)
        {
            var entity = DocEntityWorkflow.GetWorkflow(request.Id);

            if (null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {request.Id}");
            if (!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.EDIT))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to Workflow");
            foreach (var id in request.Ids)
            {
                var relationship = DocEntityWorkflow.GetWorkflow(id);
                if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.REMOVE, targetEntity: relationship, targetName: DocConstantModelName.WORKFLOW, columnName: "Workflows"))
                    throw new HttpError(HttpStatusCode.Forbidden, "You do not have Edit permission to relationships between Workflow and Workflow");
                if(null != relationship && false == relationship.IsRemoved) entity.Workflows.Remove(relationship);
            }
            entity.SaveChanges();
            return entity.ToDto();
        }

        private Workflow GetWorkflow(Workflow request)
        {
            var id = request?.Id;
            Workflow ret = null;
            var query = DocQuery.ActiveQuery ?? Execute;

            DocPermissionFactory.SetVisibleFields<Workflow>(currentUser, "Workflow", request.VisibleFields);

            DocEntityWorkflow entity = null;
            if(id.HasValue)
            {
                entity = DocEntityWorkflow.GetWorkflow(id.Value);
            }
            if(null == entity)
                throw new HttpError(HttpStatusCode.NotFound, $"No Workflow found for Id {id.Value}");

            if(!DocPermissionFactory.HasPermission(entity, currentUser, DocConstantPermission.VIEW))
                throw new HttpError(HttpStatusCode.Forbidden, "You do not have VIEW permission for this route.");
            
            ret = entity?.ToDto();
            return ret;
        }
    }
}