
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;

using AutoMapper;

using Services.Core;
using Services.Dto;
namespace Services.Schema
{
    public partial class IntervalMapper : DocMapperBase
    {
        protected IMappingExpression<DocEntityInterval,Interval> _EntityToDto;
        protected IMappingExpression<Interval,DocEntityInterval> _DtoToEntity;

        public IntervalMapper()
        {
            CreateMap<DocEntitySet<DocEntityInterval>,List<Reference>>()
                .ConvertUsing(s => s.ToReferences());
            CreateMap<DocEntityInterval,Reference>()
                .ConstructUsing(s => null == s || !(s.Id > 0) ? null : s.ToReference());
            CreateMap<Reference,DocEntityInterval>()
                .ForMember(dest => dest.Id, opt => opt.Condition(src => null != src && src.Id > 0))
                .ConstructUsing(c => DocEntityInterval.Get(c));
            _EntityToDto = CreateMap<DocEntityInterval,Interval>()
                .ForMember(dest => dest.Created, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Interval>(c, "Created")))
                .ForMember(dest => dest.Updated, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Interval>(c, "Updated")))
                .ForMember(dest => dest.CalendarDateEnd, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Interval>(c, nameof(DocEntityInterval.CalendarDateEnd))))
                .ForMember(dest => dest.CalendarDateEndId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Interval>(c, nameof(DocEntityInterval.CalendarDateEndId))))
                .ForMember(dest => dest.CalendarDateStart, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Interval>(c, nameof(DocEntityInterval.CalendarDateStart))))
                .ForMember(dest => dest.CalendarDateStartId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Interval>(c, nameof(DocEntityInterval.CalendarDateStartId))))
                .ForMember(dest => dest.CalendarType, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Interval>(c, nameof(DocEntityInterval.CalendarType))))
                .ForMember(dest => dest.FollowUp, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Interval>(c, nameof(DocEntityInterval.FollowUp))))
                .ForMember(dest => dest.FollowUpId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Interval>(c, nameof(DocEntityInterval.FollowUpId))))
                .ForMember(dest => dest.TimeOfDay, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Interval>(c, nameof(DocEntityInterval.TimeOfDay))))
                .ForMember(dest => dest.TimeOfDayId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Interval>(c, nameof(DocEntityInterval.TimeOfDayId))))
                .MaxDepth(2);
            _DtoToEntity = CreateMap<Interval,DocEntityInterval>()
                .MaxDepth(2);
            ApplyCustomMaps();
        }
    }
}
