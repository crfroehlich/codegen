//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;

using AutoMapper;

using Services.Core;
using Services.Dto;
namespace Services.Schema
{
    public partial class LookupTableMapper : DocMapperBase
    {
        protected IMappingExpression<DocEntityLookupTable,LookupTable> _EntityToDto;
        protected IMappingExpression<LookupTable,DocEntityLookupTable> _DtoToEntity;

        public LookupTableMapper()
        {
            CreateMap<DocEntitySet<DocEntityLookupTable>,List<Reference>>()
                .ConvertUsing(s => s.ToReferences());
            CreateMap<DocEntityLookupTable,Reference>()
                .ConstructUsing(s => null == s || !(s.Id > 0) ? null : s.ToReference());
            CreateMap<Reference,DocEntityLookupTable>()
                .ForMember(dest => dest.Id, opt => opt.Condition(src => null != src && src.Id > 0))
                .ConstructUsing(c => DocEntityLookupTable.Get(c));
            _EntityToDto = CreateMap<DocEntityLookupTable,LookupTable>()
                .ForMember(dest => dest.Created, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, "Created")))
                .ForMember(dest => dest.Updated, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, "Updated")))
                .ForMember(dest => dest.Bindings, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, nameof(DocEntityLookupTable.Bindings))))
                .ForMember(dest => dest.BindingsCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, nameof(DocEntityLookupTable.BindingsCount))))
                .ForMember(dest => dest.BindingsCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, nameof(DocEntityLookupTable.BindingsIds))))
                .ForMember(dest => dest.Categories, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, nameof(DocEntityLookupTable.Categories))))
                .ForMember(dest => dest.CategoriesCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, nameof(DocEntityLookupTable.CategoriesCount))))
                .ForMember(dest => dest.CategoriesCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, nameof(DocEntityLookupTable.CategoriesIds))))
                .ForMember(dest => dest.Documents, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, nameof(DocEntityLookupTable.Documents))))
                .ForMember(dest => dest.DocumentsCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, nameof(DocEntityLookupTable.DocumentsCount))))
                .ForMember(dest => dest.DocumentsCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, nameof(DocEntityLookupTable.DocumentsIds))))
                .ForMember(dest => dest.Enum, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, nameof(DocEntityLookupTable.Enum))))
                .ForMember(dest => dest.EnumId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, nameof(DocEntityLookupTable.EnumId))))
                .ForMember(dest => dest.Name, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LookupTable>(c, nameof(DocEntityLookupTable.Name))))
                .MaxDepth(2);
            _DtoToEntity = CreateMap<LookupTable,DocEntityLookupTable>()
                .MaxDepth(2);
            ApplyCustomMaps();
        }
    }
}
