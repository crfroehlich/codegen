//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.CodeDom.Compiler;
using System.Collections.Generic;

using AutoMapper;

using Services.Core;
using Services.Dto;
namespace Services.Schema
{
    public partial class UnitConversionRulesMapper : DocMapperBase
    {
        protected IMappingExpression<DocEntityUnitConversionRules,UnitConversionRules> _EntityToDto;
        protected IMappingExpression<UnitConversionRules,DocEntityUnitConversionRules> _DtoToEntity;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public UnitConversionRulesMapper()
        {
            CreateMap<DocEntitySet<DocEntityUnitConversionRules>,List<Reference>>()
                .ConvertUsing(s => s.ToReferences());
            CreateMap<DocEntityUnitConversionRules,Reference>()
                .ConstructUsing(s => null == s || !(s.Id > 0) ? null : s.ToReference());
            CreateMap<Reference,DocEntityUnitConversionRules>()
                .ForMember(dest => dest.Id, opt => opt.Condition(src => null != src && src.Id > 0))
                .ConstructUsing(c => DocEntityUnitConversionRules.Get(c));
            _EntityToDto = CreateMap<DocEntityUnitConversionRules,UnitConversionRules>()
                .ForMember(dest => dest.Created, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, "Created")))
                .ForMember(dest => dest.Updated, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, "Updated")))
                .ForMember(dest => dest.DestinationUnit, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.DestinationUnit))))
                .ForMember(dest => dest.DestinationUnitId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.DestinationUnitId))))
                .ForMember(dest => dest.IsDefault, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.IsDefault))))
                .ForMember(dest => dest.IsDestinationSi, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.IsDestinationSi))))
                .ForMember(dest => dest.ModifierTerm, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.ModifierTerm))))
                .ForMember(dest => dest.ModifierTermId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.ModifierTermId))))
                .ForMember(dest => dest.Multiplier, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.Multiplier))))
                .ForMember(dest => dest.Parent, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.Parent))))
                .ForMember(dest => dest.ParentId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.ParentId))))
                .ForMember(dest => dest.RootTerm, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.RootTerm))))
                .ForMember(dest => dest.RootTermId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.RootTermId))))
                .ForMember(dest => dest.SourceUnit, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.SourceUnit))))
                .ForMember(dest => dest.SourceUnitId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<UnitConversionRules>(c, nameof(DocEntityUnitConversionRules.SourceUnitId))))
                .MaxDepth(2);
            _DtoToEntity = CreateMap<UnitConversionRules,DocEntityUnitConversionRules>()
                .MaxDepth(2);
            ApplyCustomMaps();
        }
    }
}
