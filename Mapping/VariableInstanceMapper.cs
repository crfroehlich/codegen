//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.CodeDom.Compiler;
using System.Collections.Generic;

using AutoMapper;

using Services.Core;
using Services.Dto;
namespace Services.Schema
{
    public partial class VariableInstanceMapper : DocMapperBase
    {
        protected IMappingExpression<DocEntityVariableInstance,VariableInstance> _EntityToDto;
        protected IMappingExpression<VariableInstance,DocEntityVariableInstance> _DtoToEntity;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public VariableInstanceMapper()
        {
            CreateMap<DocEntitySet<DocEntityVariableInstance>,List<Reference>>()
                .ConvertUsing(s => s.ToReferences());
            CreateMap<DocEntityVariableInstance,Reference>()
                .ConstructUsing(s => null == s || !(s.Id > 0) ? null : s.ToReference());
            CreateMap<Reference,DocEntityVariableInstance>()
                .ForMember(dest => dest.Id, opt => opt.Condition(src => null != src && src.Id > 0))
                .ConstructUsing(c => DocEntityVariableInstance.Get(c));
            _EntityToDto = CreateMap<DocEntityVariableInstance,VariableInstance>()
                .ForMember(dest => dest.Created, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<VariableInstance>(c, "Created")))
                .ForMember(dest => dest.Updated, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<VariableInstance>(c, "Updated")))
                .ForMember(dest => dest.Data, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<VariableInstance>(c, nameof(DocEntityVariableInstance.Data))))
                .ForMember(dest => dest.Document, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<VariableInstance>(c, nameof(DocEntityVariableInstance.Document))))
                .ForMember(dest => dest.DocumentId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<VariableInstance>(c, nameof(DocEntityVariableInstance.DocumentId))))
                .ForMember(dest => dest.Rule, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<VariableInstance>(c, nameof(DocEntityVariableInstance.Rule))))
                .ForMember(dest => dest.RuleId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<VariableInstance>(c, nameof(DocEntityVariableInstance.RuleId))))
                .ForMember(dest => dest.Workflows, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<VariableInstance>(c, nameof(DocEntityVariableInstance.Workflows))))
                .ForMember(dest => dest.WorkflowsCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<VariableInstance>(c, nameof(DocEntityVariableInstance.WorkflowsCount))))
                .ForMember(dest => dest.WorkflowsIds, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<VariableInstance>(c, nameof(DocEntityVariableInstance.WorkflowsIds))))
                .MaxDepth(2);
            _DtoToEntity = CreateMap<VariableInstance,DocEntityVariableInstance>()
                .MaxDepth(2);
            ApplyCustomMaps();
        }
    }
}
