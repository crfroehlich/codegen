
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;

using AutoMapper;

using Services.Core;
using Services.Dto;
namespace Services.Schema
{
    public partial class FileMapper : DocMapperBase
    {
        protected IMappingExpression<DocEntityFile,File> _EntityToDto;
        protected IMappingExpression<File,DocEntityFile> _DtoToEntity;

        public FileMapper()
        {
            CreateMap<DocEntitySet<DocEntityFile>,List<Reference>>()
                .ConvertUsing(s => s.ToReferences());
            CreateMap<DocEntityFile,Reference>()
                .ConstructUsing(s => null == s || !(s.Id > 0) ? null : s.ToReference());
            CreateMap<Reference,DocEntityFile>()
                .ForMember(dest => dest.Id, opt => opt.Condition(src => null != src && src.Id > 0))
                .ConstructUsing(c => DocEntityFile.Get(c));
            _EntityToDto = CreateMap<DocEntityFile,File>()
                .ForMember(dest => dest.Created, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<File>(c, "Created")))
                .ForMember(dest => dest.Updated, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<File>(c, "Updated")))
                .ForMember(dest => dest.Cost, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<File>(c, nameof(DocEntityFile.Cost))))
                .ForMember(dest => dest.FileLabel, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<File>(c, nameof(DocEntityFile.FileLabel))))
                .ForMember(dest => dest.FileName, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<File>(c, nameof(DocEntityFile.FileName))))
                .ForMember(dest => dest.OriginalFileName, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<File>(c, nameof(DocEntityFile.OriginalFileName))))
                .ForMember(dest => dest.Rights, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<File>(c, nameof(DocEntityFile.Rights))))
                .ForMember(dest => dest.Scopes, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<File>(c, nameof(DocEntityFile.Scopes))))
                .ForMember(dest => dest.ScopesCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<File>(c, nameof(DocEntityFile.ScopesCount))))
                .ForMember(dest => dest.ScopesCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<File>(c, nameof(DocEntityFile.ScopesIds))))
                .ForMember(dest => dest.Source, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<File>(c, nameof(DocEntityFile.Source))))
                .ForMember(dest => dest.Type, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<File>(c, nameof(DocEntityFile.Type))))
                .MaxDepth(2);
            _DtoToEntity = CreateMap<File,DocEntityFile>()
                .MaxDepth(2);
            ApplyCustomMaps();
        }
    }
}
