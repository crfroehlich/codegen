//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.CodeDom.Compiler;
using System.Collections.Generic;

using AutoMapper;

using Services.Core;
using Services.Dto;
namespace Services.Schema
{
    public partial class HelpMapper : DocMapperBase
    {
        protected IMappingExpression<DocEntityHelp,Help> _EntityToDto;
        protected IMappingExpression<Help,DocEntityHelp> _DtoToEntity;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public HelpMapper()
        {
            CreateMap<DocEntitySet<DocEntityHelp>,List<Reference>>()
                .ConvertUsing(s => s.ToReferences());
            CreateMap<DocEntityHelp,Reference>()
                .ConstructUsing(s => null == s || !(s.Id > 0) ? null : s.ToReference());
            CreateMap<Reference,DocEntityHelp>()
                .ForMember(dest => dest.Id, opt => opt.Condition(src => null != src && src.Id > 0))
                .ConstructUsing(c => DocEntityHelp.Get(c));
            _EntityToDto = CreateMap<DocEntityHelp,Help>()
                .ForMember(dest => dest.Created, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, "Created")))
                .ForMember(dest => dest.Updated, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, "Updated")))
                .ForMember(dest => dest.ConfluenceId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.ConfluenceId))))
                .ForMember(dest => dest.Description, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.Description))))
                .ForMember(dest => dest.Icon, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.Icon))))
                .ForMember(dest => dest.Order, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.Order))))
                .ForMember(dest => dest.Pages, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.Pages))))
                .ForMember(dest => dest.PagesCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.PagesCount))))
                .ForMember(dest => dest.PagesIds, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.PagesIds))))
                .ForMember(dest => dest.Scopes, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.Scopes))))
                .ForMember(dest => dest.ScopesCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.ScopesCount))))
                .ForMember(dest => dest.ScopesIds, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.ScopesIds))))
                .ForMember(dest => dest.Title, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.Title))))
                .ForMember(dest => dest.Type, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.Type))))
                .ForMember(dest => dest.Type_Id, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<Help>(c, nameof(DocEntityHelp.Type_Id))))
                .MaxDepth(2);
            _DtoToEntity = CreateMap<Help,DocEntityHelp>()
                .MaxDepth(2);
            ApplyCustomMaps();
        }
    }
}
