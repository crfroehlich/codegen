//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.CodeDom.Compiler;
using System.Collections.Generic;

using AutoMapper;

using Services.Core;
using Services.Dto;
namespace Services.Schema
{
    public partial class LibrarySetMapper : DocMapperBase
    {
        protected IMappingExpression<DocEntityLibrarySet,LibrarySet> _EntityToDto;
        protected IMappingExpression<LibrarySet,DocEntityLibrarySet> _DtoToEntity;
        [GeneratedCodeAttribute("T4", "1.0.0.0")]
        public LibrarySetMapper()
        {
            CreateMap<DocEntitySet<DocEntityLibrarySet>,List<Reference>>()
                .ConvertUsing(s => s.ToReferences());
            CreateMap<DocEntityLibrarySet,Reference>()
                .ConstructUsing(s => null == s || !(s.Id > 0) ? null : s.ToReference());
            CreateMap<Reference,DocEntityLibrarySet>()
                .ForMember(dest => dest.Id, opt => opt.Condition(src => null != src && src.Id > 0))
                .ConstructUsing(c => DocEntityLibrarySet.Get(c));
            _EntityToDto = CreateMap<DocEntityLibrarySet,LibrarySet>()
                .ForMember(dest => dest.Created, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, "Created")))
                .ForMember(dest => dest.Updated, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, "Updated")))
                .ForMember(dest => dest.AdditionalCriteria, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.AdditionalCriteria))))
                .ForMember(dest => dest.Characteristics, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.Characteristics))))
                .ForMember(dest => dest.CharacteristicsCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.CharacteristicsCount))))
                .ForMember(dest => dest.CharacteristicsIds, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.CharacteristicsIds))))
                .ForMember(dest => dest.Comparators, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.Comparators))))
                .ForMember(dest => dest.ComparatorsCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.ComparatorsCount))))
                .ForMember(dest => dest.ComparatorsIds, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.ComparatorsIds))))
                .ForMember(dest => dest.GeneralScope, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.GeneralScope))))
                .ForMember(dest => dest.Indications, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.Indications))))
                .ForMember(dest => dest.Interventions, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.Interventions))))
                .ForMember(dest => dest.InterventionsCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.InterventionsCount))))
                .ForMember(dest => dest.InterventionsIds, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.InterventionsIds))))
                .ForMember(dest => dest.LibraryPackageId, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.LibraryPackageId))))
                .ForMember(dest => dest.Notes, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.Notes))))
                .ForMember(dest => dest.OriginalComparators, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.OriginalComparators))))
                .ForMember(dest => dest.OriginalDesigns, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.OriginalDesigns))))
                .ForMember(dest => dest.OriginalInterventions, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.OriginalInterventions))))
                .ForMember(dest => dest.OriginalOutcomes, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.OriginalOutcomes))))
                .ForMember(dest => dest.OriginalSearch, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.OriginalSearch))))
                .ForMember(dest => dest.Outcomes, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.Outcomes))))
                .ForMember(dest => dest.OutcomesCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.OutcomesCount))))
                .ForMember(dest => dest.OutcomesIds, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.OutcomesIds))))
                .ForMember(dest => dest.Participants, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.Participants))))
                .ForMember(dest => dest.Projects, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.Projects))))
                .ForMember(dest => dest.ProjectsCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.ProjectsCount))))
                .ForMember(dest => dest.ProjectsIds, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.ProjectsIds))))
                .ForMember(dest => dest.SearchEnd, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.SearchEnd))))
                .ForMember(dest => dest.SearchStart, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.SearchStart))))
                .ForMember(dest => dest.SearchStrategy, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.SearchStrategy))))
                .ForMember(dest => dest.SearchUpdated, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.SearchUpdated))))
                .ForMember(dest => dest.SelectionCriteria, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.SelectionCriteria))))
                .ForMember(dest => dest.StudyDesigns, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.StudyDesigns))))
                .ForMember(dest => dest.StudyDesignsCount, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.StudyDesignsCount))))
                .ForMember(dest => dest.StudyDesignsIds, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.StudyDesignsIds))))
                .ForMember(dest => dest.UpdateFrequency, opt => opt.PreCondition(c => DocMapperConfig.ShouldBeMapped<LibrarySet>(c, nameof(DocEntityLibrarySet.UpdateFrequency))))
                .MaxDepth(2);
            _DtoToEntity = CreateMap<LibrarySet,DocEntityLibrarySet>()
                .MaxDepth(2);
            ApplyCustomMaps();
        }
    }
}
